{"version":3,"file":"server.js","sourceRoot":"../src/","sources":["server.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAEzD;;;;GAIG;AACH,MAAM,uBAAuB,QAAsB,EAAE,SAAkB;IACrE,IAAM,UAAU,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;IAE5C,UAAU,CAAC,SAAS,CAAC;QACnB,aAAa,EAAE,aAAa,CAAC,IAAI;QACjC,SAAS,WAAA;KACV,CAAC,CAAC;IACH,UAAU,CAAC,KAAK,EAAE,CAAC;IAEnB,OAAO;QACL,IAAI,EAAE,QAAQ,EAAE;QAChB,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;KAC/B,CAAC;AACJ,CAAC","sourcesContent":["import { InjectionMode, Stylesheet } from './Stylesheet';\r\n\r\n/**\r\n * Renders a given string and returns both html and css needed for the html.\r\n * @param onRender - Function that returns a string.\r\n * @param namespace - Optional namespace to prepend to css classnames to avoid collisions.\r\n */\r\nexport function renderStatic(onRender: () => string, namespace?: string): { html: string; css: string } {\r\n  const stylesheet = Stylesheet.getInstance();\r\n\r\n  stylesheet.setConfig({\r\n    injectionMode: InjectionMode.none,\r\n    namespace\r\n  });\r\n  stylesheet.reset();\r\n\r\n  return {\r\n    html: onRender(),\r\n    css: stylesheet.getRules(true)\r\n  };\r\n}\r\n"]}