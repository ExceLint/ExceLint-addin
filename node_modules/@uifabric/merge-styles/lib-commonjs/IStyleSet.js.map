{"version":3,"file":"IStyleSet.js","sourceRoot":"../src/","sources":["IStyleSet.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle } from './IStyle';\r\nimport { IStyleFunctionOrObject, IStyleFunction } from './IStyleFunction';\r\n\r\nexport type Diff<T extends keyof any, U extends keyof any> = ({ [P in T]: P } & { [P in U]: never } & { [x: string]: never })[T];\r\n\r\nexport type Omit<U, K extends keyof U> = Pick<U, Diff<keyof U, K>>;\r\n\r\n/**\r\n * Helper function whose role is supposed to express that regardless if T is a style object or style function,\r\n * it will always map to a style function.\r\n */\r\nexport type __MapToFunctionType<T> = Extract<T, Function> extends never ? (...args: any[]) => Partial<T> : Extract<T, Function>;\r\n\r\n/**\r\n * A style set is a dictionary of display areas to IStyle objects.\r\n * It may optionally contain style functions for sub components in the special `subComponentStyles`\r\n * property.\r\n */\r\nexport type IStyleSet<TStyleSet extends IStyleSet<TStyleSet>> = { [P in keyof Omit<TStyleSet, 'subComponentStyles'>]: IStyle } & {\r\n  subComponentStyles?: { [P in keyof TStyleSet['subComponentStyles']]: IStyleFunctionOrObject<any, IStyleSet<any>> };\r\n};\r\n\r\n/**\r\n * A concatenated style set differs from `IStyleSet` in that subComponentStyles will always be a style function.\r\n */\r\nexport type IConcatenatedStyleSet<TStyleSet extends IStyleSet<TStyleSet>> = {\r\n  [P in keyof Omit<TStyleSet, 'subComponentStyles'>]: IStyle\r\n} & {\r\n  subComponentStyles?: { [P in keyof TStyleSet['subComponentStyles']]: IStyleFunction<any, IStyleSet<any>> };\r\n};\r\n\r\n/**\r\n * A processed style set is one which the set of styles associated with each area has been converted\r\n * into a class name. Additionally, all subComponentStyles are style functions.\r\n */\r\nexport type IProcessedStyleSet<TStyleSet extends IStyleSet<TStyleSet>> = { [P in keyof Omit<TStyleSet, 'subComponentStyles'>]: string } & {\r\n  subComponentStyles: { [P in keyof TStyleSet['subComponentStyles']]: __MapToFunctionType<TStyleSet['subComponentStyles'][P]> };\r\n};\r\n"]}