{
  "kind": "package",
  "name": "@uifabric/merge-styles",
  "summary": [],
  "remarks": [],
  "exports": {
    "concatStyleSets": {
      "kind": "function",
      "signature": "export function concatStyleSets(...styleSets: (IStyleSet<any> | false | null | undefined)[]): IConcatenatedStyleSet<any>;",
      "returnValue": {
        "type": "IConcatenatedStyleSet<any>",
        "description": []
      },
      "parameters": {
        "styleSets": {
          "name": "styleSets",
          "description": [
            {
              "kind": "text",
              "text": "One or more stylesets to be merged (each param can also be falsy)."
            }
          ],
          "isOptional": false,
          "isSpread": true,
          "type": "(IStyleSet<any> | false | null | undefined)[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Combine a set of styles together (but does not register css classes)."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "fontFace": {
      "kind": "function",
      "signature": "export function fontFace(font: IFontFace): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "font": {
          "name": "font",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IFontFace"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Registers a font face."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "IFontFace": {
      "kind": "interface",
      "extends": "IRawFontStyle",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Font face definition."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "fontFeatureSettings": {
          "kind": "property",
          "signature": "fontFeatureSettings?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Feature settings for the font."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "src": {
          "kind": "property",
          "signature": "src?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the src of the font."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "unicodeRange": {
          "kind": "property",
          "signature": "unicodeRange?: ICSSRule | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICSSRule | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "unicode-range allows you to set a specific range of characters to be downloaded from a font (embedded using @font-face) and made available for use on the current page."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRawStyle": {
      "kind": "interface",
      "extends": "IRawStyleBase",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "IStyleObject extends a raw style objects, but allows selectors to be defined under the selectors node."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "displayName": {
          "kind": "property",
          "signature": "displayName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Display name for the style."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectors": {
          "kind": "property",
          "signature": "selectors?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [key: string]: IStyle;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom selectors for the style."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IStyleSheetConfig": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Stylesheet config."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultPrefix": {
          "kind": "property",
          "signature": "defaultPrefix?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default 'displayName' to use for a className."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "injectionMode": {
          "kind": "property",
          "signature": "injectionMode?: InjectionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "InjectionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Injection mode for how rules are inserted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "namespace": {
          "kind": "property",
          "signature": "namespace?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default 'namespace' to attach before the className."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInsertRule": {
          "kind": "property",
          "signature": "onInsertRule?: (rule: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(rule: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback executed when a rule is inserted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "keyframes": {
      "kind": "function",
      "signature": "export function keyframes(timeline: {\n    [key: string]: {};\n}): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "timeline": {
          "name": "timeline",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "{\n    [key: string]: {};\n}"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Registers keyframe definitions."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "mergeStyles": {
      "kind": "function",
      "signature": "export function mergeStyles(...args: (IStyle | IStyleBaseArray | false | null | undefined)[]): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "args": {
          "name": "args",
          "description": [],
          "isOptional": false,
          "isSpread": true,
          "type": "(IStyle | IStyleBaseArray | false | null | undefined)[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Concatination helper, which can merge class names together. Skips over falsey values."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "mergeStyleSets": {
      "kind": "function",
      "signature": "export function mergeStyleSets(...styleSets: Array<IStyleSet<any> | undefined | false | null>): IProcessedStyleSet<any>;",
      "returnValue": {
        "type": "IProcessedStyleSet<any>",
        "description": []
      },
      "parameters": {
        "styleSets": {
          "name": "styleSets",
          "description": [
            {
              "kind": "text",
              "text": "One or more style sets to be merged."
            }
          ],
          "isOptional": false,
          "isSpread": true,
          "type": "Array<IStyleSet<any> | undefined | false | null>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Takes in one or more style set objects, each consisting of a set of areas, each which will produce a class name. Using this is analogous to calling "
        },
        {
          "kind": "code",
          "text": "mergeStyles",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " for each property in the object, but ensures we maintain the set ordering when multiple style sets are merged."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "setRTL": {
      "kind": "function",
      "signature": "export function setRTL(isRTL: boolean): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "isRTL": {
          "name": "isRTL",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Sets the current RTL value."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Stylesheet": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the state of styles registered in the page. Abstracts the surface for adding styles to the stylesheet, exposes helpers for reading the styles registered in server rendered scenarios."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(config?: IStyleSheetConfig);",
          "parameters": {
            "config": {
              "name": "config",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "IStyleSheetConfig"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Stylesheet"
                }
              ],
              "target": {
                "scopeName": "@uifabric",
                "packageName": "merge-styles",
                "exportName": "Stylesheet",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "argsFromClassName": {
          "kind": "method",
          "signature": "argsFromClassName(className: string): IStyle[] | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IStyle[] | undefined",
            "description": []
          },
          "parameters": {
            "className": {
              "name": "className",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the arguments associated with a given classname which was previously registered using cacheClassName."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "cacheClassName": {
          "kind": "method",
          "signature": "cacheClassName(className: string, key: string, args: IStyle[], rules: string[]): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "className": {
              "name": "className",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "args": {
              "name": "args",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IStyle[]"
            },
            "rules": {
              "name": "rules",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used internally to cache information about a class which was registered with the stylesheet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "classNameFromKey": {
          "kind": "method",
          "signature": "classNameFromKey(key: string): string | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string | undefined",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the appropriate classname given a key which was previously registered using cacheClassName."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(displayName?: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {
            "displayName": {
              "name": "displayName",
              "description": [
                {
                  "kind": "text",
                  "text": "Optional value to use as a prefix."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Generates a unique classname."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getInstance": {
          "kind": "method",
          "signature": "static getInstance(): Stylesheet;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Stylesheet",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the singleton instance."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getRules": {
          "kind": "method",
          "signature": "getRules(includePreservedRules?: boolean): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {
            "includePreservedRules": {
              "name": "includePreservedRules",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets all rules registered with the stylesheet; only valid when using InsertionMode.none."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "insertedRulesFromClassName": {
          "kind": "method",
          "signature": "insertedRulesFromClassName(className: string): string[] | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string[] | undefined",
            "description": []
          },
          "parameters": {
            "className": {
              "name": "className",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the arguments associated with a given classname which was previously registered using cacheClassName."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "insertRule": {
          "kind": "method",
          "signature": "insertRule(rule: string, preserve?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "rule": {
              "name": "rule",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "preserve": {
              "name": "preserve",
              "description": [
                {
                  "kind": "text",
                  "text": "Preserves the rule beyond a reset boundary."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Inserts a css rule into the stylesheet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onReset": {
          "kind": "method",
          "signature": "onReset(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "A callback which will be called when the Stylesheet is reset."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Configures a reset callback."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "reset": {
          "kind": "method",
          "signature": "reset(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Resets the internal state of the stylesheet. Only used in server rendered scenarios where we're using InsertionMode.none."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "resetKeys": {
          "kind": "method",
          "signature": "resetKeys(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setConfig": {
          "kind": "method",
          "signature": "setConfig(config?: IStyleSheetConfig): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "config": {
              "name": "config",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "IStyleSheetConfig"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Configures the stylesheet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    }
  }
}
