{"version":3,"file":"Stylesheet.js","sourceRoot":"../src/","sources":["Stylesheet.ts"],"names":[],"mappings":"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","sourcesContent":["import { IStyle } from './IStyle';\r\n\r\nexport const InjectionMode = {\r\n  /**\r\n   * Avoids style injection, use getRules() to read the styles.\r\n   */\r\n  none: 0 as 0,\r\n\r\n  /**\r\n   * Inserts rules using the insertRule api.\r\n   */\r\n  insertNode: 1 as 1,\r\n\r\n  /**\r\n   * Appends rules using appendChild.\r\n   */\r\n  appendChild: 2 as 2\r\n};\r\n\r\nexport type InjectionMode = typeof InjectionMode[keyof typeof InjectionMode];\r\n\r\n/**\r\n * Stylesheet config.\r\n *\r\n * @public\r\n */\r\nexport interface IStyleSheetConfig {\r\n  /**\r\n   * Injection mode for how rules are inserted.\r\n   */\r\n  injectionMode?: InjectionMode;\r\n\r\n  /**\r\n   * Default 'displayName' to use for a className.\r\n   * @defaultvalue 'css'\r\n   */\r\n  defaultPrefix?: string;\r\n\r\n  /**\r\n   * Default 'namespace' to attach before the className.\r\n   */\r\n  namespace?: string;\r\n\r\n  /**\r\n   * Callback executed when a rule is inserted.\r\n   */\r\n  onInsertRule?: (rule: string) => void;\r\n}\r\n\r\nconst STYLESHEET_SETTING = '__stylesheet__';\r\n\r\n// tslint:disable-next-line:no-any\r\nconst _fileScopedGlobal: { [key: string]: any } = {};\r\nlet _stylesheet: Stylesheet;\r\n\r\n/**\r\n * Represents the state of styles registered in the page. Abstracts\r\n * the surface for adding styles to the stylesheet, exposes helpers\r\n * for reading the styles registered in server rendered scenarios.\r\n *\r\n * @public\r\n */\r\nexport class Stylesheet {\r\n  private _lastStyleElement?: HTMLStyleElement;\r\n  private _styleElement?: HTMLStyleElement;\r\n  private _rules: string[] = [];\r\n  private _preservedRules: string[] = [];\r\n  private _config: IStyleSheetConfig;\r\n  private _rulesToInsert: string[] = [];\r\n  private _counter = 0;\r\n  private _keyToClassName: { [key: string]: string } = {};\r\n  private _onResetCallbacks: (() => void)[] = [];\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private _classNameToArgs: { [key: string]: { args: any; rules: string[] } } = {};\r\n\r\n  /**\r\n   * Gets the singleton instance.\r\n   */\r\n  public static getInstance(): Stylesheet {\r\n    // tslint:disable-next-line:no-any\r\n    const global: any = typeof window !== 'undefined' ? window : _fileScopedGlobal;\r\n    _stylesheet = global[STYLESHEET_SETTING] as Stylesheet;\r\n\r\n    if (!_stylesheet || (_stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document)) {\r\n      // tslint:disable-next-line:no-string-literal\r\n      const fabricConfig = (global && global['FabricConfig']) || {};\r\n\r\n      _stylesheet = global[STYLESHEET_SETTING] = new Stylesheet(fabricConfig.mergeStyles);\r\n    }\r\n\r\n    return _stylesheet;\r\n  }\r\n\r\n  constructor(config?: IStyleSheetConfig) {\r\n    this._config = {\r\n      injectionMode: InjectionMode.insertNode,\r\n      defaultPrefix: 'css',\r\n      namespace: undefined,\r\n      ...config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Configures the stylesheet.\r\n   */\r\n  public setConfig(config?: IStyleSheetConfig): void {\r\n    this._config = {\r\n      ...this._config,\r\n      ...config\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Configures a reset callback.\r\n   *\r\n   * @param callback - A callback which will be called when the Stylesheet is reset.\r\n   */\r\n  public onReset(callback: () => void): void {\r\n    this._onResetCallbacks.push(callback);\r\n  }\r\n\r\n  /**\r\n   * Generates a unique classname.\r\n   *\r\n   * @param displayName - Optional value to use as a prefix.\r\n   */\r\n  public getClassName(displayName?: string): string {\r\n    const { namespace } = this._config;\r\n    const prefix = displayName || this._config.defaultPrefix;\r\n\r\n    return `${namespace ? namespace + '-' : ''}${prefix}-${this._counter++}`;\r\n  }\r\n\r\n  /**\r\n   * Used internally to cache information about a class which was\r\n   * registered with the stylesheet.\r\n   */\r\n  public cacheClassName(className: string, key: string, args: IStyle[], rules: string[]): void {\r\n    this._keyToClassName[key] = className;\r\n    this._classNameToArgs[className] = {\r\n      args,\r\n      rules\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets the appropriate classname given a key which was previously\r\n   * registered using cacheClassName.\r\n   */\r\n  public classNameFromKey(key: string): string | undefined {\r\n    return this._keyToClassName[key];\r\n  }\r\n\r\n  /**\r\n   * Gets the arguments associated with a given classname which was\r\n   * previously registered using cacheClassName.\r\n   */\r\n  public argsFromClassName(className: string): IStyle[] | undefined {\r\n    const entry = this._classNameToArgs[className];\r\n\r\n    return entry && entry.args;\r\n  }\r\n\r\n  /**\r\n   * Gets the arguments associated with a given classname which was\r\n   * previously registered using cacheClassName.\r\n   */\r\n  public insertedRulesFromClassName(className: string): string[] | undefined {\r\n    const entry = this._classNameToArgs[className];\r\n\r\n    return entry && entry.rules;\r\n  }\r\n\r\n  /**\r\n   * Inserts a css rule into the stylesheet.\r\n   * @param preserve - Preserves the rule beyond a reset boundary.\r\n   */\r\n  public insertRule(rule: string, preserve?: boolean): void {\r\n    const { injectionMode } = this._config;\r\n    const element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\r\n\r\n    if (preserve) {\r\n      this._preservedRules.push(rule);\r\n    }\r\n\r\n    if (element) {\r\n      switch (this._config.injectionMode) {\r\n        case InjectionMode.insertNode:\r\n          const { sheet } = element!;\r\n\r\n          try {\r\n            (sheet as CSSStyleSheet).insertRule(rule, (sheet as CSSStyleSheet).cssRules.length);\r\n          } catch (e) {\r\n            // The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\r\n            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\r\n            // which could be slower and bulkier.\r\n          }\r\n          break;\r\n\r\n        case InjectionMode.appendChild:\r\n          element.appendChild(document.createTextNode(rule));\r\n          break;\r\n      }\r\n    } else {\r\n      this._rules.push(rule);\r\n    }\r\n\r\n    if (this._config.onInsertRule) {\r\n      this._config.onInsertRule(rule);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all rules registered with the stylesheet; only valid when\r\n   * using InsertionMode.none.\r\n   */\r\n  public getRules(includePreservedRules?: boolean): string {\r\n    return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('') + this._rulesToInsert.join('');\r\n  }\r\n\r\n  /**\r\n   * Resets the internal state of the stylesheet. Only used in server\r\n   * rendered scenarios where we're using InsertionMode.none.\r\n   */\r\n  public reset(): void {\r\n    this._rules = [];\r\n    this._rulesToInsert = [];\r\n    this._counter = 0;\r\n    this._classNameToArgs = {};\r\n    this._keyToClassName = {};\r\n\r\n    this._onResetCallbacks.forEach((callback: () => void) => callback());\r\n  }\r\n\r\n  // Forces the regeneration of incoming styles without totally resetting the stylesheet.\r\n  public resetKeys(): void {\r\n    this._keyToClassName = {};\r\n  }\r\n\r\n  private _getStyleElement(): HTMLStyleElement | undefined {\r\n    if (!this._styleElement && typeof document !== 'undefined') {\r\n      this._styleElement = this._createStyleElement();\r\n\r\n      // Reset the style element on the next frame.\r\n      window.requestAnimationFrame(() => {\r\n        this._styleElement = undefined;\r\n      });\r\n    }\r\n    return this._styleElement;\r\n  }\r\n\r\n  private _createStyleElement(): HTMLStyleElement {\r\n    const styleElement = document.createElement('style');\r\n\r\n    styleElement.setAttribute('data-merge-styles', 'true');\r\n    styleElement.type = 'text/css';\r\n\r\n    if (this._lastStyleElement && this._lastStyleElement.nextElementSibling) {\r\n      document.head!.insertBefore(styleElement, this._lastStyleElement.nextElementSibling);\r\n    } else {\r\n      document.head!.appendChild(styleElement);\r\n    }\r\n    this._lastStyleElement = styleElement;\r\n\r\n    return styleElement;\r\n  }\r\n}\r\n"]}