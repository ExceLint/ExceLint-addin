{"version":3,"file":"styleToClassName.js","sourceRoot":"../src/","sources":["styleToClassName.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRawStyle, IStyle } from './IStyle';\r\n\r\nimport { Stylesheet } from './Stylesheet';\r\nimport { kebabRules } from './transforms/kebabRules';\r\nimport { prefixRules } from './transforms/prefixRules';\r\nimport { provideUnits } from './transforms/provideUnits';\r\nimport { rtlifyRules } from './transforms/rtlifyRules';\r\n\r\nconst DISPLAY_NAME = 'displayName';\r\n\r\n// tslint:disable-next-line:no-any\r\ntype IDictionary = { [key: string]: any };\r\n\r\ninterface IRuleSet {\r\n  __order: string[];\r\n  [key: string]: IDictionary;\r\n}\r\n\r\nfunction getDisplayName(rules?: { [key: string]: IRawStyle }): string | undefined {\r\n  const rootStyle: IStyle = rules && rules['&'];\r\n\r\n  return rootStyle ? (rootStyle as IRawStyle).displayName : undefined;\r\n}\r\n\r\nconst globalSelectorRegExp = /\\:global\\((.+?)\\)/g;\r\n\r\ntype ReplacementInfo = [number, number, string];\r\n\r\n/**\r\n * Finds comma separated selectors in a :global() e.g. \":global(.class1, .class2, .class3)\"\r\n * and wraps them each in their own global \":global(.class1), :global(.class2), :global(.class3)\"\r\n *\r\n * @param selectorWithGlobals The selector to process\r\n * @returns The updated selector\r\n */\r\nfunction expandCommaSeparatedGlobals(selectorWithGlobals: string): string {\r\n  // We the selector does not have a :global() we can shortcut\r\n  if (!globalSelectorRegExp.test(selectorWithGlobals)) {\r\n    return selectorWithGlobals;\r\n  }\r\n\r\n  const replacementInfo: ReplacementInfo[] = [];\r\n\r\n  const findGlobal = /\\:global\\((.+?)\\)/g;\r\n  let match = null;\r\n  // Create a result list for global selectors so we can replace them.\r\n  while ((match = findGlobal.exec(selectorWithGlobals))) {\r\n    // Only if the found selector is a comma separated list we'll process it.\r\n    if (match[1].indexOf(',') > -1) {\r\n      replacementInfo.push([\r\n        match.index,\r\n        match.index + match[0].length,\r\n        // Wrap each of the found selectors in :global()\r\n        match[1]\r\n          .split(',')\r\n          .map((v: string) => `:global(${v.trim()})`)\r\n          .join(', ')\r\n      ]);\r\n    }\r\n  }\r\n\r\n  // Replace the found selectors with their wrapped variants in reverse order\r\n  return replacementInfo.reverse().reduce((selector: string, [matchIndex, matchEndIndex, replacement]: ReplacementInfo) => {\r\n    const prefix = selector.slice(0, matchIndex);\r\n    const suffix = selector.slice(matchEndIndex);\r\n\r\n    return prefix + replacement + suffix;\r\n  }, selectorWithGlobals);\r\n}\r\n\r\nfunction expandSelector(newSelector: string, currentSelector: string): string {\r\n  if (newSelector.indexOf(':global(') >= 0) {\r\n    return newSelector.replace(globalSelectorRegExp, '$1');\r\n  } else if (newSelector.indexOf(':') === 0) {\r\n    return currentSelector + newSelector;\r\n  } else if (newSelector.indexOf('&') < 0) {\r\n    return currentSelector + ' ' + newSelector;\r\n  }\r\n\r\n  return newSelector;\r\n}\r\n\r\nfunction extractRules(args: IStyle[], rules: IRuleSet = { __order: [] }, currentSelector: string = '&'): IRuleSet {\r\n  const stylesheet = Stylesheet.getInstance();\r\n  let currentRules: IDictionary | undefined = rules[currentSelector] as IDictionary;\r\n\r\n  if (!currentRules) {\r\n    currentRules = {};\r\n    rules[currentSelector] = currentRules;\r\n    rules.__order.push(currentSelector);\r\n  }\r\n\r\n  for (const arg of args) {\r\n    // If the arg is a string, we need to look up the class map and merge.\r\n    if (typeof arg === 'string') {\r\n      const expandedRules = stylesheet.argsFromClassName(arg);\r\n\r\n      if (expandedRules) {\r\n        extractRules(expandedRules, rules, currentSelector);\r\n      }\r\n      // Else if the arg is an array, we need to recurse in.\r\n    } else if (Array.isArray(arg)) {\r\n      extractRules(arg, rules, currentSelector);\r\n    } else {\r\n      // tslint:disable-next-line:no-any\r\n      for (const prop in arg as any) {\r\n        if (prop === 'selectors') {\r\n          // tslint:disable-next-line:no-any\r\n          const selectors: { [key: string]: IStyle } = (arg as any).selectors;\r\n\r\n          for (let newSelector in selectors) {\r\n            if (selectors.hasOwnProperty(newSelector)) {\r\n              const selectorValue = selectors[newSelector];\r\n\r\n              if (newSelector.indexOf('@') === 0) {\r\n                newSelector = newSelector + '{' + currentSelector;\r\n                extractRules([selectorValue], rules, newSelector);\r\n              } else if (newSelector.indexOf(',') > -1) {\r\n                const commaSeparatedSelectors = expandCommaSeparatedGlobals(newSelector)\r\n                  .split(/,/g)\r\n                  .map((s: string) => s.trim());\r\n                extractRules(\r\n                  [selectorValue],\r\n                  rules,\r\n                  commaSeparatedSelectors\r\n                    .map((commaSeparatedSelector: string) => expandSelector(commaSeparatedSelector, currentSelector))\r\n                    .join(', ')\r\n                );\r\n              } else {\r\n                extractRules([selectorValue], rules, expandSelector(newSelector, currentSelector));\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          if ((arg as any)[prop] !== undefined) {\r\n            // Else, add the rule to the currentSelector.\r\n            if (prop === 'margin' || prop === 'padding') {\r\n              // tslint:disable-next-line:no-any\r\n              expandQuads(currentRules, prop, (arg as any)[prop]);\r\n            } else {\r\n              // tslint:disable-next-line:no-any\r\n              (currentRules as any)[prop] = (arg as any)[prop] as any;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return rules;\r\n}\r\n\r\nfunction expandQuads(currentRules: IDictionary, name: string, value: string): void {\r\n  const parts = typeof value === 'string' ? value.split(' ') : [value];\r\n\r\n  currentRules[name + 'Top'] = parts[0];\r\n  currentRules[name + 'Right'] = parts[1] || parts[0];\r\n  currentRules[name + 'Bottom'] = parts[2] || parts[0];\r\n  currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\r\n}\r\n\r\nfunction getKeyForRules(rules: IRuleSet): string | undefined {\r\n  const serialized: string[] = [];\r\n  let hasProps = false;\r\n\r\n  for (const selector of rules.__order) {\r\n    serialized.push(selector);\r\n    const rulesForSelector = rules[selector];\r\n\r\n    for (const propName in rulesForSelector) {\r\n      if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\r\n        hasProps = true;\r\n        serialized.push(propName, rulesForSelector[propName]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return hasProps ? serialized.join('') : undefined;\r\n}\r\n\r\nexport function serializeRuleEntries(ruleEntries: { [key: string]: string | number }): string {\r\n  if (!ruleEntries) {\r\n    return '';\r\n  }\r\n\r\n  const allEntries: (string | number)[] = [];\r\n\r\n  for (const entry in ruleEntries) {\r\n    if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\r\n      allEntries.push(entry, ruleEntries[entry]);\r\n    }\r\n  }\r\n\r\n  // Apply transforms.\r\n  for (let i = 0; i < allEntries.length; i += 2) {\r\n    kebabRules(allEntries, i);\r\n    provideUnits(allEntries, i);\r\n    rtlifyRules(allEntries, i);\r\n    prefixRules(allEntries, i);\r\n  }\r\n\r\n  // Apply punctuation.\r\n  for (let i = 1; i < allEntries.length; i += 4) {\r\n    allEntries.splice(i, 1, ':', allEntries[i], ';');\r\n  }\r\n\r\n  return allEntries.join('');\r\n}\r\n\r\nexport interface IRegistration {\r\n  className: string;\r\n  key: string;\r\n  args: IStyle[];\r\n  rulesToInsert: string[];\r\n}\r\n\r\nexport function styleToRegistration(...args: IStyle[]): IRegistration | undefined {\r\n  const rules: IRuleSet = extractRules(args);\r\n  const key = getKeyForRules(rules);\r\n\r\n  if (key) {\r\n    const stylesheet = Stylesheet.getInstance();\r\n    const registration: Partial<IRegistration> = {\r\n      className: stylesheet.classNameFromKey(key),\r\n      key,\r\n      args\r\n    };\r\n\r\n    if (!registration.className) {\r\n      registration.className = stylesheet.getClassName(getDisplayName(rules));\r\n      const rulesToInsert: string[] = [];\r\n\r\n      for (const selector of rules.__order) {\r\n        rulesToInsert.push(selector, serializeRuleEntries(rules[selector]));\r\n      }\r\n      registration.rulesToInsert = rulesToInsert;\r\n    }\r\n\r\n    return registration as IRegistration;\r\n  }\r\n}\r\n\r\nexport function applyRegistration(registration: IRegistration, classMap?: { [key: string]: string }): void {\r\n  const stylesheet = Stylesheet.getInstance();\r\n  const { className, key, args, rulesToInsert } = registration;\r\n\r\n  if (rulesToInsert) {\r\n    // rulesToInsert is an ordered array of selector/rule pairs.\r\n    for (let i = 0; i < rulesToInsert.length; i += 2) {\r\n      const rules = rulesToInsert[i + 1];\r\n      if (rules) {\r\n        let selector = rulesToInsert[i];\r\n\r\n        // Fix selector using map.\r\n        selector = selector.replace(\r\n          /(&)|\\$([\\w-]+)\\b/g,\r\n          (match: string, amp: string, cn: string): string => {\r\n            if (amp) {\r\n              return '.' + registration.className;\r\n            } else if (cn) {\r\n              return '.' + ((classMap && classMap[cn]) || cn);\r\n            }\r\n            return '';\r\n          }\r\n        );\r\n\r\n        // Insert. Note if a media query, we must close the query with a final bracket.\r\n        const processedRule = `${selector}{${rules}}${selector.indexOf('@') === 0 ? '}' : ''}`;\r\n\r\n        stylesheet.insertRule(processedRule);\r\n      }\r\n    }\r\n    stylesheet.cacheClassName(className!, key!, args!, rulesToInsert);\r\n  }\r\n}\r\n\r\nexport function styleToClassName(...args: IStyle[]): string {\r\n  const registration = styleToRegistration(...args);\r\n  if (registration) {\r\n    applyRegistration(registration);\r\n\r\n    return registration.className;\r\n  }\r\n\r\n  return '';\r\n}\r\n"]}