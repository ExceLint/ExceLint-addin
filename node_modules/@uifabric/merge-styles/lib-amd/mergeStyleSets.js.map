{"version":3,"file":"mergeStyleSets.js","sourceRoot":"../src/","sources":["mergeStyleSets.ts"],"names":[],"mappings":";;;IAqFA;;;;;;;OAOG;IACH;QAA+B,mBAA8D;aAA9D,UAA8D,EAA9D,qBAA8D,EAA9D,IAA8D;YAA9D,8BAA8D;;QAC3F,kCAAkC;QAClC,IAAM,YAAY,GAA4B,EAAE,kBAAkB,EAAE,EAAE,EAAE,CAAC;QACzE,IAAM,QAAQ,GAA8B,EAAE,CAAC;QAE/C,IAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAE9B,IAAI,CAAC,QAAQ,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE;YACtC,OAAO,EAAE,kBAAkB,EAAE,EAAE,EAAE,CAAC;SACnC;QAED,IAAI,oBAAoB;QACtB,oDAAoD;QACpD,QAAS,CAAC;QAEZ,oBAAoB,GAAG,iCAAe,eAAI,SAAS,CAAC,CAAC;QAErD,IAAM,aAAa,GAAG,EAAE,CAAC;QAEzB,KAAK,IAAM,YAAY,IAAI,oBAAoB,EAAE;YAC/C,IAAI,oBAAoB,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;gBACrD,IAAI,YAAY,KAAK,oBAAoB,EAAE;oBACzC,YAAY,CAAC,kBAAkB,GAAI,oBAAmD,CAAC,kBAAkB,IAAI,EAAE,CAAC;oBAChH,SAAS;iBACV;gBAED,IAAM,MAAM,GAAY,oBAA4B,CAAC,YAAY,CAAC,CAAC;gBAE7D,IAAA,kDAAgD,EAA9C,oBAAO,EAAE,oBAAO,CAA+B;gBACvD,IAAM,YAAY,GAAG,sCAAmB,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,EAAE,OAAO,CAAC,CAAC;gBAEjF,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAEjC,IAAI,YAAY,EAAE;oBAChB,QAAQ,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC;oBAChD,qCAAqC;oBACpC,YAAoB,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC1F;aACF;SACF;QAED,KAA2B,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa;YAAnC,IAAM,YAAY,sBAAA;YACrB,IAAI,YAAY,EAAE;gBAChB,oCAAiB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;aAC3C;SACF;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAhDD,wCAgDC","sourcesContent":["import { extractStyleParts } from './extractStyleParts';\r\nimport { concatStyleSets } from './concatStyleSets';\r\nimport { IStyle } from './IStyle';\r\nimport { styleToRegistration, applyRegistration } from './styleToClassName';\r\nimport { IStyleSet, IProcessedStyleSet, IConcatenatedStyleSet } from './IStyleSet';\r\n\r\n/**\r\n * Takes in one or more style set objects, each consisting of a set of areas,\r\n * each which will produce a class name. Using this is analogous to calling\r\n * `mergeStyles` for each property in the object, but ensures we maintain the\r\n * set ordering when multiple style sets are merged.\r\n *\r\n * @param styleSet - The first style set to be merged and reigstered.\r\n */\r\nexport function mergeStyleSets<TStyleSet extends IStyleSet<TStyleSet>>(\r\n  styleSet: TStyleSet | false | null | undefined\r\n): IProcessedStyleSet<TStyleSet>;\r\n\r\n/**\r\n * Takes in one or more style set objects, each consisting of a set of areas,\r\n * each which will produce a class name. Using this is analogous to calling\r\n * `mergeStyles` for each property in the object, but ensures we maintain the\r\n * set ordering when multiple style sets are merged.\r\n *\r\n * @param styleSet1 - The first style set to be merged.\r\n * @param styleSet2 - The second style set to be merged.\r\n */\r\nexport function mergeStyleSets<TStyleSet1 extends IStyleSet<TStyleSet1>, TStyleSet2 extends IStyleSet<TStyleSet2>>(\r\n  styleSet1: TStyleSet1 | false | null | undefined,\r\n  styleSet2: TStyleSet2 | false | null | undefined\r\n): IProcessedStyleSet<TStyleSet1 & TStyleSet2>;\r\n\r\n/**\r\n * Takes in one or more style set objects, each consisting of a set of areas,\r\n * each which will produce a class name. Using this is analogous to calling\r\n * `mergeStyles` for each property in the object, but ensures we maintain the\r\n * set ordering when multiple style sets are merged.\r\n *\r\n * @param styleSet1 - The first style set to be merged.\r\n * @param styleSet2 - The second style set to be merged.\r\n * @param styleSet3 - The third style set to be merged.\r\n */\r\nexport function mergeStyleSets<\r\n  TStyleSet1 extends IStyleSet<TStyleSet1>,\r\n  TStyleSet2 extends IStyleSet<TStyleSet2>,\r\n  TStyleSet3 extends IStyleSet<TStyleSet3>\r\n>(\r\n  styleSet1: TStyleSet1 | false | null | undefined,\r\n  styleSet2: TStyleSet2 | false | null | undefined,\r\n  styleSet3: TStyleSet3 | false | null | undefined\r\n): IProcessedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3>;\r\n\r\n/**\r\n * Takes in one or more style set objects, each consisting of a set of areas,\r\n * each which will produce a class name. Using this is analogous to calling\r\n * `mergeStyles` for each property in the object, but ensures we maintain the\r\n * set ordering when multiple style sets are merged.\r\n *\r\n * @param styleSet1 - The first style set to be merged.\r\n * @param styleSet2 - The second style set to be merged.\r\n * @param styleSet3 - The third style set to be merged.\r\n * @param styleSet4 - The fourth style set to be merged.\r\n */\r\nexport function mergeStyleSets<\r\n  TStyleSet1 extends IStyleSet<TStyleSet1>,\r\n  TStyleSet2 extends IStyleSet<TStyleSet2>,\r\n  TStyleSet3 extends IStyleSet<TStyleSet3>,\r\n  TStyleSet4 extends IStyleSet<TStyleSet4>\r\n>(\r\n  styleSet1: TStyleSet1 | false | null | undefined,\r\n  styleSet2: TStyleSet2 | false | null | undefined,\r\n  styleSet3: TStyleSet3 | false | null | undefined,\r\n  styleSet4: TStyleSet4 | false | null | undefined\r\n): IProcessedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3 & TStyleSet4>;\r\n\r\n/**\r\n * Takes in one or more style set objects, each consisting of a set of areas,\r\n * each which will produce a class name. Using this is analogous to calling\r\n * `mergeStyles` for each property in the object, but ensures we maintain the\r\n * set ordering when multiple style sets are merged.\r\n *\r\n * @param styleSets - One or more style sets to be merged.\r\n */\r\nexport function mergeStyleSets(...styleSets: Array<IStyleSet<any> | undefined | false | null>): IProcessedStyleSet<any>;\r\n\r\n/**\r\n * Takes in one or more style set objects, each consisting of a set of areas,\r\n * each which will produce a class name. Using this is analogous to calling\r\n * `mergeStyles` for each property in the object, but ensures we maintain the\r\n * set ordering when multiple style sets are merged.\r\n *\r\n * @param styleSets - One or more style sets to be merged.\r\n */\r\nexport function mergeStyleSets(...styleSets: Array<IStyleSet<any> | undefined | false | null>): IProcessedStyleSet<any> {\r\n  // tslint:disable-next-line:no-any\r\n  const classNameSet: IProcessedStyleSet<any> = { subComponentStyles: {} };\r\n  const classMap: { [key: string]: string } = {};\r\n\r\n  const styleSet = styleSets[0];\r\n\r\n  if (!styleSet && styleSets.length <= 1) {\r\n    return { subComponentStyles: {} };\r\n  }\r\n\r\n  let concatenatedStyleSet: IConcatenatedStyleSet<any> | IStyleSet<any> =\r\n    // we have guarded against falsey values just above.\r\n    styleSet!;\r\n\r\n  concatenatedStyleSet = concatStyleSets(...styleSets);\r\n\r\n  const registrations = [];\r\n\r\n  for (const styleSetArea in concatenatedStyleSet) {\r\n    if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {\r\n      if (styleSetArea === 'subComponentStyles') {\r\n        classNameSet.subComponentStyles = (concatenatedStyleSet as IConcatenatedStyleSet<any>).subComponentStyles || {};\r\n        continue;\r\n      }\r\n\r\n      const styles: IStyle = (concatenatedStyleSet as any)[styleSetArea];\r\n\r\n      const { classes, objects } = extractStyleParts(styles);\r\n      const registration = styleToRegistration({ displayName: styleSetArea }, objects);\r\n\r\n      registrations.push(registration);\r\n\r\n      if (registration) {\r\n        classMap[styleSetArea] = registration.className;\r\n        // as any cast not needed in ts >=2.9\r\n        (classNameSet as any)[styleSetArea] = classes.concat([registration.className]).join(' ');\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const registration of registrations) {\r\n    if (registration) {\r\n      applyRegistration(registration, classMap);\r\n    }\r\n  }\r\n\r\n  return classNameSet;\r\n}\r\n"]}