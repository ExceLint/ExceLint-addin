{"version":3,"file":"concatStyleSets.js","sourceRoot":"../src/","sources":["concatStyleSets.ts"],"names":[],"mappings":";;;IAiIA;;;OAGG;IACH;QAAgC,mBAA2D;aAA3D,UAA2D,EAA3D,qBAA2D,EAA3D,IAA2D;YAA3D,8BAA2D;;QACzF,IAAM,SAAS,GAA+B,EAAE,CAAC;QAEjD,oHAAoH;QACpH,IAAM,yBAAyB,GAA+D,EAAE,CAAC;QAEjG,KAAyB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS;YAA7B,IAAM,UAAU,kBAAA;YACnB,IAAI,UAAU,EAAE;gBACd,KAAK,IAAM,IAAI,IAAI,UAAU,EAAE;oBAC7B,IAAI,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;wBACnC,IAAI,IAAI,KAAK,oBAAoB,IAAI,UAAU,CAAC,kBAAkB,KAAK,SAAS,EAAE;4BAChF,mDAAmD;4BAEnD,IAAM,sBAAsB,GAAG,UAAU,CAAC,kBAAkB,CAAC;4BAC7D,KAAK,IAAM,WAAW,IAAI,sBAAsB,EAAE;gCAChD,IAAI,sBAAsB,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;oCACtD,IAAI,yBAAyB,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;wCACzD,yBAAyB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAC;qCAClF;yCAAM;wCACL,yBAAyB,CAAC,WAAW,CAAC,GAAG,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAC;qCAChF;iCACF;6BACF;4BAED,SAAS;yBACV;wBAED,qDAAqD;wBACrD,sCAAsC;wBACtC,IAAM,WAAW,GAAY,SAAiB,CAAC,IAAI,CAAC,CAAC;wBACrD,IAAM,YAAY,GAAI,UAAkB,CAAC,IAAI,CAAC,CAAC;wBAE/C,IAAI,WAAW,KAAK,SAAS,EAAE;4BAC5B,SAAiB,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;yBACzC;6BAAM;4BACJ,SAAiB,CAAC,IAAI,CAAC,GAEnB,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAyB,CAAC,CAAC,QACxE,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAA0B,CAAC,CAAC,CAC/E,CAAC;yBACH;qBACF;iBACF;aACF;SACF;QAED,IAAI,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACrD,SAAS,CAAC,kBAAkB,GAAG,EAAE,CAAC;YAClC,IAAM,eAAe,GAAG,SAAS,CAAC,kBAAkB,CAAC;oCAG1C,WAAW;gBACpB,IAAI,yBAAyB,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;oBACzD,IAAM,YAAU,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC;oBAC1D,eAAe,CAAC,WAAW,CAAC,GAAG,UAAC,UAAe;wBAC7C,OAAO,eAAe,eACjB,YAAU,CAAC,GAAG,CACf,UAAC,qBAAuD;4BACtD,OAAA,OAAO,qBAAqB,KAAK,UAAU,CAAC,CAAC,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,qBAAqB;wBAAvG,CAAuG,CAC1G,EACD;oBACJ,CAAC,CAAC;iBACH;YACH,CAAC;YAbD,0DAA0D;YAC1D,KAAK,IAAM,WAAW,IAAI,yBAAyB;wBAAxC,WAAW;aAYrB;SACF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAnED,0CAmEC","sourcesContent":["import { IStyleSet, IConcatenatedStyleSet } from './IStyleSet';\r\nimport { IStyleBase, IStyle } from './IStyle';\r\nimport { IStyleFunctionOrObject } from './IStyleFunction';\r\n\r\n/**\r\n * Combine a set of styles together (but does not register css classes).\r\n * @param styleSet - The first style set to be concatenated.\r\n */\r\nexport function concatStyleSets<TStyleSet extends IStyleSet<TStyleSet>>(\r\n  styleSet: TStyleSet | false | null | undefined\r\n): IConcatenatedStyleSet<TStyleSet>;\r\n\r\n/**\r\n * Combine a set of styles together (but does not register css classes).\r\n * @param styleSet1 - The first style set to be concatenated.\r\n * @param styleSet2 - The second style set to be concatenated.\r\n */\r\nexport function concatStyleSets<TStyleSet1 extends IStyleSet<TStyleSet1>, TStyleSet2 extends IStyleSet<TStyleSet2>>(\r\n  styleSet1: TStyleSet1 | false | null | undefined,\r\n  styleSet2: TStyleSet2 | false | null | undefined\r\n): IConcatenatedStyleSet<TStyleSet1 & TStyleSet2>;\r\n\r\n/**\r\n * Combine a set of styles together (but does not register css classes).\r\n * @param styleSet1 - The first style set to be concatenated.\r\n * @param styleSet2 - The second style set to be concatenated.\r\n * @param styleSet3 - The third style set to be concatenated.\r\n */\r\nexport function concatStyleSets<\r\n  TStyleSet1 extends IStyleSet<TStyleSet1>,\r\n  TStyleSet2 extends IStyleSet<TStyleSet2>,\r\n  TStyleSet3 extends IStyleSet<TStyleSet3>\r\n>(\r\n  styleSet1: TStyleSet1 | false | null | undefined,\r\n  styleSet2: TStyleSet2 | false | null | undefined,\r\n  styleSet3: TStyleSet3 | false | null | undefined\r\n): IConcatenatedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3>;\r\n\r\n/**\r\n * Combine a set of styles together (but does not register css classes).\r\n * @param styleSet1 - The first style set to be concatenated.\r\n * @param styleSet2 - The second style set to be concatenated.\r\n * @param styleSet3 - The third style set to be concatenated.\r\n * @param styleSet4 - The fourth style set to be concatenated.\r\n */\r\nexport function concatStyleSets<\r\n  TStyleSet1 extends IStyleSet<TStyleSet1>,\r\n  TStyleSet2 extends IStyleSet<TStyleSet2>,\r\n  TStyleSet3 extends IStyleSet<TStyleSet3>,\r\n  TStyleSet4 extends IStyleSet<TStyleSet4>\r\n>(\r\n  styleSet1: TStyleSet1 | false | null | undefined,\r\n  styleSet2: TStyleSet2 | false | null | undefined,\r\n  styleSet3: TStyleSet3 | false | null | undefined,\r\n  styleSet4: TStyleSet3 | false | null | undefined\r\n): IConcatenatedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3 & TStyleSet4>;\r\n\r\n/**\r\n * Combine a set of styles together (but does not register css classes).\r\n * @param styleSet1 - The first style set to be concatenated.\r\n * @param styleSet2 - The second style set to be concatenated.\r\n * @param styleSet3 - The third style set to be concatenated.\r\n * @param styleSet4 - The fourth style set to be concatenated.\r\n */\r\nexport function concatStyleSets<\r\n  TStyleSet1 extends IStyleSet<TStyleSet1>,\r\n  TStyleSet2 extends IStyleSet<TStyleSet2>,\r\n  TStyleSet3 extends IStyleSet<TStyleSet3>,\r\n  TStyleSet4 extends IStyleSet<TStyleSet4>\r\n>(\r\n  styleSet1: TStyleSet1 | false | null | undefined,\r\n  styleSet2: TStyleSet2 | false | null | undefined,\r\n  styleSet3: TStyleSet3 | false | null | undefined,\r\n  styleSet4: TStyleSet4 | false | null | undefined\r\n): IConcatenatedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3 & TStyleSet4>;\r\n\r\n/**\r\n * Combine a set of styles together (but does not register css classes).\r\n * @param styleSet1 - The first style set to be concatenated.\r\n * @param styleSet2 - The second style set to be concatenated.\r\n * @param styleSet3 - The third style set to be concatenated.\r\n * @param styleSet4 - The fourth style set to be concatenated.\r\n * @param styleSet5 - The fifth set to be concatenated.\r\n */\r\nexport function concatStyleSets<\r\n  TStyleSet1 extends IStyleSet<TStyleSet1>,\r\n  TStyleSet2 extends IStyleSet<TStyleSet2>,\r\n  TStyleSet3 extends IStyleSet<TStyleSet3>,\r\n  TStyleSet4 extends IStyleSet<TStyleSet4>,\r\n  TStyleSet5 extends IStyleSet<TStyleSet5>\r\n>(\r\n  styleSet1: TStyleSet1 | false | null | undefined,\r\n  styleSet2: TStyleSet2 | false | null | undefined,\r\n  styleSet3: TStyleSet3 | false | null | undefined,\r\n  styleSet4: TStyleSet4 | false | null | undefined,\r\n  styleSet5: TStyleSet5 | false | null | undefined\r\n): IConcatenatedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3 & TStyleSet4 & TStyleSet5>;\r\n\r\n/**\r\n * Combine a set of styles together (but does not register css classes).\r\n * @param styleSet1 - The first style set to be concatenated.\r\n * @param styleSet2 - The second style set to be concatenated.\r\n * @param styleSet3 - The third style set to be concatenated.\r\n * @param styleSet4 - The fourth style set to be concatenated.\r\n * @param styleSet5 - The fifth set to be concatenated.\r\n * @param styleSet6 - The sixth set to be concatenated.\r\n */\r\nexport function concatStyleSets<\r\n  TStyleSet1 extends IStyleSet<TStyleSet1>,\r\n  TStyleSet2 extends IStyleSet<TStyleSet2>,\r\n  TStyleSet3 extends IStyleSet<TStyleSet3>,\r\n  TStyleSet4 extends IStyleSet<TStyleSet4>,\r\n  TStyleSet5 extends IStyleSet<TStyleSet5>,\r\n  TStyleSet6 extends IStyleSet<TStyleSet6>\r\n>(\r\n  styleSet1: TStyleSet1 | false | null | undefined,\r\n  styleSet2: TStyleSet2 | false | null | undefined,\r\n  styleSet3: TStyleSet3 | false | null | undefined,\r\n  styleSet4: TStyleSet4 | false | null | undefined,\r\n  styleSet5: TStyleSet5 | false | null | undefined,\r\n  styleSet6: TStyleSet6 | false | null | undefined\r\n): IConcatenatedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3 & TStyleSet4 & TStyleSet5 & TStyleSet6>;\r\n\r\n/**\r\n * Combine a set of styles together (but does not register css classes).\r\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\r\n */\r\nexport function concatStyleSets(...styleSets: (IStyleSet<any> | false | null | undefined)[]): IConcatenatedStyleSet<any>;\r\n\r\n/**\r\n * Combine a set of styles together (but does not register css classes).\r\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\r\n */\r\nexport function concatStyleSets(...styleSets: (IStyleSet<any> | false | null | undefined)[]): IConcatenatedStyleSet<any> {\r\n  const mergedSet: IConcatenatedStyleSet<any> = {};\r\n\r\n  // We process sub component styles in two phases. First we collect them, then we combine them into 1 style function.\r\n  const workingSubcomponentStyles: { [key: string]: Array<IStyleFunctionOrObject<any, any>> } = {};\r\n\r\n  for (const currentSet of styleSets) {\r\n    if (currentSet) {\r\n      for (const prop in currentSet) {\r\n        if (currentSet.hasOwnProperty(prop)) {\r\n          if (prop === 'subComponentStyles' && currentSet.subComponentStyles !== undefined) {\r\n            // subcomponent styles - style functions or objects\r\n\r\n            const currentComponentStyles = currentSet.subComponentStyles;\r\n            for (const subCompProp in currentComponentStyles) {\r\n              if (currentComponentStyles.hasOwnProperty(subCompProp)) {\r\n                if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\r\n                  workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);\r\n                } else {\r\n                  workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];\r\n                }\r\n              }\r\n            }\r\n\r\n            continue;\r\n          }\r\n\r\n          // the as any casts below is a workaround for ts 2.8.\r\n          // todo: remove cast to any in ts 2.9.\r\n          const mergedValue: IStyle = (mergedSet as any)[prop];\r\n          const currentValue = (currentSet as any)[prop];\r\n\r\n          if (mergedValue === undefined) {\r\n            (mergedSet as any)[prop] = currentValue;\r\n          } else {\r\n            (mergedSet as any)[prop] = [\r\n              // https://github.com/Microsoft/TypeScript/issues/25474\r\n              ...(Array.isArray(mergedValue) ? mergedValue : [mergedValue as IStyleBase]),\r\n              ...(Array.isArray(currentValue) ? currentValue : [currentValue as IStyleBase])\r\n            ];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (Object.keys(workingSubcomponentStyles).length > 0) {\r\n    mergedSet.subComponentStyles = {};\r\n    const mergedSubStyles = mergedSet.subComponentStyles;\r\n\r\n    // now we process the subcomponent styles if there are any\r\n    for (const subCompProp in workingSubcomponentStyles) {\r\n      if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\r\n        const workingSet = workingSubcomponentStyles[subCompProp];\r\n        mergedSubStyles[subCompProp] = (styleProps: any) => {\r\n          return concatStyleSets(\r\n            ...workingSet.map(\r\n              (styleFunctionOrObject: IStyleFunctionOrObject<any, any>) =>\r\n                typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject\r\n            )\r\n          );\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return mergedSet;\r\n}\r\n"]}