{"version":3,"file":"IRawStyleBase.js","sourceRoot":"../src/","sources":["IRawStyleBase.ts"],"names":[],"mappings":"","sourcesContent":["// See CSS 3 CSS-wide keywords https://www.w3.org/TR/css3-values/#common-keywords\r\n// See CSS 3 Explicit Defaulting https://www.w3.org/TR/css-cascade-3/#defaulting-keywords\r\n// \"all CSS properties can accept these values\"\r\nexport type ICSSRule = 'initial' | 'inherit' | 'unset';\r\n\r\n// See CSS 3 <percentage> type https://drafts.csswg.org/css-values-3/#percentages\r\nexport type ICSSPercentageRule = string;\r\n\r\n// See CSS 3 <length> type https://drafts.csswg.org/css-values-3/#lengths\r\nexport type ICSSPixelUnitRule = string | number;\r\n\r\n// See CSS <baseline-position> type https://www.w3.org/TR/css-align-3/#typedef-baseline-position\r\nexport type ICSSBaselinePositionRule = 'baseline' | 'last baseline' | 'first baseline';\r\n\r\n// See CSS <overflow-position> type https://www.w3.org/TR/css-align-3/#typedef-overflow-position\r\n// See CSS <self-position> type https://www.w3.org/TR/css-align-3/#typedef-self-position\r\nexport type ICSSOverflowAndSelfPositionRule =\r\n  // <self-position>\r\n  | 'center'\r\n  | 'start'\r\n  | 'end'\r\n  | 'self-start'\r\n  | 'self-end'\r\n  | 'flex-start'\r\n  | 'flex-end'\r\n  // <self-position> prefixed with <overflow-position> value 'safe'\r\n  | 'safe center'\r\n  | 'safe start'\r\n  | 'safe end'\r\n  | 'safe self-start'\r\n  | 'safe self-end'\r\n  | 'safe flex-start'\r\n  | 'safe flex-end'\r\n  // <self-position> prefixed with <overflow-position> value 'unsafe'\r\n  | 'unsafe center'\r\n  | 'unsafe start'\r\n  | 'unsafe end'\r\n  | 'unsafe self-start'\r\n  | 'unsafe self-end'\r\n  | 'unsafe flex-start'\r\n  | 'unsafe flex-end';\r\n\r\n// See CSS Box Layout Modes: the 'display' property https://www.w3.org/TR/css-display-3/#the-display-properties\r\nexport type ICSSDisplayRule =\r\n  // <display-outside> values\r\n  | 'block'\r\n  | 'inline'\r\n  | 'run-in'\r\n  // <display-inside> values\r\n  | 'flow'\r\n  | 'flow-root'\r\n  | 'table'\r\n  | 'flex'\r\n  | 'grid'\r\n  | 'ruby'\r\n  // <display-outside> plus <display-inside> values\r\n  | 'block flow'\r\n  | 'inline table'\r\n  | 'flex run-in'\r\n  // <display-listitem> values\r\n  | 'list-item'\r\n  | 'list-item block'\r\n  | 'list-item inline'\r\n  | 'list-item flow'\r\n  | 'list-item flow-root'\r\n  | 'list-item block flow'\r\n  | 'list-item block flow-root'\r\n  | 'flow list-item block'\r\n  // <display-internal> values\r\n  | 'table-row-group'\r\n  | 'table-header-group'\r\n  | 'table-footer-group'\r\n  | 'table-row'\r\n  | 'table-cell'\r\n  | 'table-column-group'\r\n  | 'table-column'\r\n  | 'table-caption'\r\n  | 'ruby-base'\r\n  | 'ruby-text'\r\n  | 'ruby-base-container'\r\n  | 'ruby-text-container'\r\n  // <display-box> values\r\n  | 'contents'\r\n  | 'none'\r\n  // <display-legacy> values\r\n  | 'inline-block'\r\n  | 'inline-table'\r\n  | 'inline-flex'\r\n  | 'inline-grid';\r\n\r\nexport type IFontWeight =\r\n  | ICSSRule\r\n  | 'normal'\r\n  | 'bold'\r\n  | 'bolder'\r\n  | 'lighter'\r\n  | '100'\r\n  | 100\r\n  | '200'\r\n  | 200\r\n  | '300'\r\n  | 300\r\n  | '400'\r\n  | 400\r\n  | '500'\r\n  | 500\r\n  | '600'\r\n  | 600\r\n  | '700'\r\n  | 700\r\n  | '800'\r\n  | 800\r\n  | '900'\r\n  | 900;\r\n\r\nexport type IMixBlendModes =\r\n  | ICSSRule\r\n  | 'normal'\r\n  | 'multiply'\r\n  | 'screen'\r\n  | 'overlay'\r\n  | 'darken'\r\n  | 'lighten'\r\n  | 'color-dodge'\r\n  | 'color-burn'\r\n  | 'hard-light'\r\n  | 'soft-light'\r\n  | 'difference'\r\n  | 'exclusion'\r\n  | 'hue'\r\n  | 'saturation'\r\n  | 'color'\r\n  | 'luminosity';\r\n\r\n/**\r\n * The base font style.\r\n */\r\nexport interface IRawFontStyle {\r\n  /**\r\n   * The font property is shorthand that allows you to do one of two things: you can\r\n   * either set up six of the most mature font properties in one line, or you can set\r\n   *  one of a choice of keywords to adopt a system font setting.\r\n   */\r\n  font?: ICSSRule | string;\r\n\r\n  /**\r\n   * The font-family property allows one or more font family names and/or generic family\r\n   * names to be specified for usage on the selected element(s)' text. The browser then\r\n   * goes through the list; for each character in the selection it applies the first\r\n   * font family that has an available glyph for that character.\r\n   */\r\n  fontFamily?: ICSSRule | string;\r\n\r\n  /**\r\n   * The font-kerning property allows contextual adjustment of inter-glyph spacing, i.e.\r\n   * the spaces between the characters in text. This property controls <bold>metric\r\n   * kerning</bold> - that utilizes adjustment data contained in the font. Optical\r\n   * Kerning is not supported as yet.\r\n   */\r\n  fontKerning?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the size of the font. Used to compute em and ex units.\r\n   * See CSS 3 font-size property https://www.w3.org/TR/css-fonts-3/#propdef-font-size\r\n   */\r\n  fontSize?:\r\n    | ICSSRule\r\n    | 'xx-small'\r\n    | 'x-small'\r\n    | 'small'\r\n    | 'medium'\r\n    | 'large'\r\n    | 'x-large'\r\n    | 'xx-large'\r\n    | 'larger'\r\n    | 'smaller'\r\n    | ICSSPixelUnitRule\r\n    | ICSSPercentageRule;\r\n\r\n  /**\r\n   * The font-size-adjust property adjusts the font-size of the fallback fonts defined\r\n   * with font-family, so that the x-height is the same no matter what font is used.\r\n   * This preserves the readability of the text when fallback happens.\r\n   * See CSS 3 font-size-adjust property\r\n   * https://www.w3.org/TR/css-fonts-3/#propdef-font-size-adjust\r\n   */\r\n  fontSizeAdjust?: ICSSRule | 'none' | number;\r\n\r\n  /**\r\n   * Allows you to expand or condense the widths for a normal, condensed, or expanded\r\n   * font face.\r\n   * See CSS 3 font-stretch property\r\n   * https://drafts.csswg.org/css-fonts-3/#propdef-font-stretch\r\n   */\r\n  fontStretch?:\r\n    | ICSSRule\r\n    | 'normal'\r\n    | 'ultra-condensed'\r\n    | 'extra-condensed'\r\n    | 'condensed'\r\n    | 'semi-condensed'\r\n    | 'semi-expanded'\r\n    | 'expanded'\r\n    | 'extra-expanded'\r\n    | 'ultra-expanded';\r\n\r\n  /**\r\n   * The font-style property allows normal, italic, or oblique faces to be selected.\r\n   * Italic forms are generally cursive in nature while oblique faces are typically\r\n   * sloped versions of the regular face. Oblique faces can be simulated by artificially\r\n   * sloping the glyphs of the regular face.\r\n   * See CSS 3 font-style property https://www.w3.org/TR/css-fonts-3/#propdef-font-style\r\n   */\r\n  fontStyle?: ICSSRule | 'normal' | 'italic' | 'oblique';\r\n\r\n  /**\r\n   * This value specifies whether the user agent is allowed to synthesize bold or\r\n   *  oblique font faces when a font family lacks bold or italic faces.\r\n   */\r\n  fontSynthesis?: ICSSRule | string;\r\n\r\n  /**\r\n   * The font-variant property enables you to select the small-caps font within a font\r\n   * family.\r\n   */\r\n  fontVariant?: ICSSRule | string;\r\n\r\n  /**\r\n   * Fonts can provide alternate glyphs in addition to default glyph for a character.\r\n   * This property provides control over the selection of these alternate glyphs.\r\n   */\r\n  fontVariantAlternates?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the weight or boldness of the font.\r\n   * See CSS 3 'font-weight' property https://www.w3.org/TR/css-fonts-3/#propdef-font-weight\r\n   */\r\n  fontWeight?: IFontWeight;\r\n}\r\n\r\n/**\r\n * Font face definition.\r\n *\r\n * @public\r\n */\r\nexport interface IFontFace extends IRawFontStyle {\r\n  /**\r\n   * Specifies the src of the font.\r\n   */\r\n  src?: string;\r\n\r\n  /**\r\n   * unicode-range allows you to set a specific range of characters to be downloaded\r\n   * from a font (embedded using \\@font-face) and made available for use on the current\r\n   * page.\r\n   */\r\n  unicodeRange?: ICSSRule | string;\r\n\r\n  /**\r\n   * Feature settings for the font.\r\n   */\r\n  fontFeatureSettings?: string;\r\n}\r\n\r\n/**\r\n * All raw style properties.\r\n *\r\n * @public\r\n */\r\nexport interface IRawStyleBase extends IRawFontStyle {\r\n  /**\r\n   * (Ms specific) constrast adjust rule.\r\n   */\r\n  MsHighContrastAdjust?: ICSSRule | string;\r\n\r\n  /**\r\n   * (Moz specific) font smoothing directive.\r\n   */\r\n  MozOsxFontSmoothing?: 'none' | 'antialiased' | 'grayscale' | 'subpixel-antialiased';\r\n\r\n  /**\r\n   * (Webkit specific) font smoothing directive.\r\n   */\r\n  WebkitFontSmoothing?: 'none' | 'antialiased' | 'grayscale' | 'subpixel-antialiased';\r\n\r\n  /**\r\n   * (Webkit specific) momentum scrolling on iOS devices\r\n   */\r\n  WebkitOverflowScrolling?: 'auto' | 'touch';\r\n\r\n  /**\r\n   * Aligns a flex container's lines within the flex container when there is extra space\r\n   * in the cross-axis, similar to how justify-content aligns individual items within the main-axis.\r\n   */\r\n  alignContent?: ICSSRule | 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'stretch';\r\n\r\n  /**\r\n   * Sets the default alignment in the cross axis for all of the flex container's items,\r\n   * including anonymous flex items, similarly to how justify-content aligns items along the main axis.\r\n   */\r\n  alignItems?: ICSSRule | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';\r\n\r\n  /**\r\n   * Aligns the box (as the alignment subject) within its containing block (as the alignment container)\r\n   * along the block/column/cross axis of the alignment container.\r\n   *\r\n   * See CSS align-self property\r\n   * https://www.w3.org/TR/css-align-3/#propdef-align-self\r\n   */\r\n  alignSelf?: ICSSRule | 'auto' | 'normal' | 'stretch' | ICSSBaselinePositionRule | ICSSOverflowAndSelfPositionRule;\r\n\r\n  /**\r\n   * This property allows precise alignment of elements, such as graphics, that do not\r\n   * have a baseline-table or lack the desired baseline in their baseline-table. With the\r\n   * alignment-adjust property, the position of the baseline identified by the\r\n   * alignment-baseline can be explicitly determined. It also determines precisely\r\n   * the alignment point for each glyph within a textual element.\r\n   */\r\n  alignmentAdjust?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies how an object is aligned with respect to its parent. This property specifies\r\n   * which baseline of this element is to be aligned with the corresponding baseline of the\r\n   * parent. For example, this allows alphabetic baselines in Roman text to stay aligned\r\n   * across font size changes. It defaults to the baseline with the same name as the computed\r\n   * value of the alignment-baseline property.\r\n   */\r\n  alignmentBaseline?: ICSSRule | string;\r\n\r\n  /**\r\n   * The animation CSS property is a shorthand property for the various animation properties:\r\n   * `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`,\r\n   * `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and\r\n   * `animation-play-state`.\r\n   */\r\n  animation?: ICSSRule | string;\r\n\r\n  /**\r\n   * Defines a length of time to elapse before an animation starts, allowing an animation to begin execution some time after it is applied.\r\n   */\r\n  animationDelay?: ICSSRule | string;\r\n\r\n  /**\r\n   * Defines whether an animation should run in reverse on some or all cycles.\r\n   */\r\n  animationDirection?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the length an animation takes to finish. Default value is 0, meaning\r\n   * there will be no animation.\r\n   */\r\n  animationDuration?: ICSSRule | string;\r\n\r\n  /**\r\n   * The animation-fill-mode CSS property specifies how a CSS animation should apply\r\n   * styles to its target before and after its execution.\r\n   */\r\n  animationFillMode?: ICSSRule | 'none' | 'forwards' | 'backwards' | 'both';\r\n\r\n  /**\r\n   * Specifies how many times an animation cycle should play.\r\n   */\r\n  animationIterationCount?: ICSSRule | string;\r\n\r\n  /**\r\n   * Defines the list of animations that apply to the element.\r\n   */\r\n  animationName?: ICSSRule | string;\r\n\r\n  /**\r\n   * Defines whether an animation is running or paused.\r\n   */\r\n  animationPlayState?: ICSSRule | string;\r\n\r\n  /**\r\n   * The animation-timing-function specifies the speed curve of an animation.\r\n   */\r\n  animationTimingFunction?: ICSSRule | string;\r\n\r\n  /**\r\n   * Allows changing the style of any element to platform-based interface elements or\r\n   * vice versa.\r\n   */\r\n  appearance?: ICSSRule | string;\r\n\r\n  /**\r\n   * Lets you apply graphical effects such as blurring or color shifting to the area\r\n   * behind an element. Because it applies to everything behind the element, to see\r\n   * the effect you must make the element or its background at least partially transparent.\r\n   */\r\n  backdropFilter?: ICSSRule | string;\r\n\r\n  /**\r\n   * Edge requires the -webkit prefix backdrop-filter.\r\n   */\r\n  WebkitBackdropFilter?: ICSSRule | string;\r\n\r\n  /**\r\n   * Determines whether or not the “back” side of a transformed element is visible when\r\n   * facing the viewer.\r\n   */\r\n  backfaceVisibility?: ICSSRule | string;\r\n\r\n  /**\r\n   * Shorthand property to set the values for one or more of:\r\n   * background-clip, background-color, background-image,\r\n   * background-origin, background-position, background-repeat,\r\n   * background-size, and background-attachment.\r\n   */\r\n  background?: ICSSRule | string;\r\n\r\n  /**\r\n   * If a background-image is specified, this property determines\r\n   * whether that image's position is fixed within the viewport,\r\n   * or scrolls along with its containing block.\r\n   * See CSS 3 background-attachment property https://drafts.csswg.org/css-backgrounds-3/#the-background-attachment\r\n   */\r\n  backgroundAttachment?: ICSSRule | 'scroll' | 'fixed' | 'local';\r\n\r\n  /**\r\n   * This property describes how the element's background images should blend with each\r\n   * other and the element's background color. The value is a list of blend modes that\r\n   * corresponds to each background image. Each element in the list will apply to the\r\n   * corresponding element of background-image. If a property doesn’t have enough\r\n   * comma-separated values to match the number of layers, the UA must calculate its\r\n   * used value by repeating the list of values until there are enough.\r\n   */\r\n  backgroundBlendMode?: ICSSRule | string;\r\n\r\n  /**\r\n   * The background-clip CSS property specifies if an element's background, whether a\r\n   * <color> or an <image>, extends underneath its border.\r\n   *\r\n   * \\* Does not work in IE\r\n   *\r\n   * \\* The `text` value is experimental and should not be used in production code.\r\n   */\r\n  backgroundClip?: ICSSRule | 'border-box' | 'padding-box' | 'content-box' | 'text';\r\n\r\n  /**\r\n   * Sets the background color of an element.\r\n   */\r\n  backgroundColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets a compositing style for background images and colors.\r\n   */\r\n  backgroundComposite?: ICSSRule | string;\r\n\r\n  /**\r\n   * Applies one or more background images to an element. These can be any valid CSS\r\n   * image, including url() paths to image files or CSS gradients.\r\n   */\r\n  backgroundImage?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies what the background-position property is relative to.\r\n   */\r\n  backgroundOrigin?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the position of a background image.\r\n   */\r\n  backgroundPosition?: ICSSRule | string;\r\n\r\n  /**\r\n   * Background-repeat defines if and how background images will be repeated after they\r\n   * have been sized and positioned\r\n   */\r\n  backgroundRepeat?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the size of background images\r\n   */\r\n  backgroundSize?: ICSSRule | string;\r\n\r\n  /**\r\n   * Shorthand property that defines the different properties of all four sides of an\r\n   * element's border in a single declaration. It can be used to set border-width,\r\n   * border-style and border-color, or a subset of these.\r\n   */\r\n  border?: ICSSRule | 0 | string;\r\n\r\n  /**\r\n   * Shorthand that sets the values of border-bottom-color,\r\n   * border-bottom-style, and border-bottom-width.\r\n   */\r\n  borderBottom?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Sets the color of the bottom border of an element.\r\n   */\r\n  borderBottomColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * Defines the shape of the border of the bottom-left corner.\r\n   */\r\n  borderBottomLeftRadius?: ICSSRule | string;\r\n\r\n  /**\r\n   * Defines the shape of the border of the bottom-right corner.\r\n   */\r\n  borderBottomRightRadius?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the line style of the bottom border of a box.\r\n   */\r\n  borderBottomStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the width of an element's bottom border. To set all four borders, use the\r\n   * border-width shorthand property which sets the values simultaneously for\r\n   * border-top-width, border-right-width, border-bottom-width, and border-left-width.\r\n   */\r\n  borderBottomWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Border-collapse can be used for collapsing the borders between table cells\r\n   */\r\n  borderCollapse?: ICSSRule | string;\r\n\r\n  /**\r\n   * The CSS border-color property sets the color of an element's four borders. This\r\n   * property can have from one to four values, made up of the elementary properties:\r\n   *      •       border-top-color\r\n   *      •       border-right-color\r\n   *      •       border-bottom-color\r\n   *      •       border-left-color The default color is the currentColor of each of\r\n   * these values.\r\n   * If you provide one value, it sets the color for the element. Two values set the\r\n   * horizontal and vertical values, respectively. Providing three values sets the top,\r\n   * vertical, and bottom values, in that order. Four values set all for sides: top,\r\n   * right, bottom, and left, in that order.\r\n   */\r\n  borderColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies different corner clipping effects, such as scoop (inner curves), bevel\r\n   * (straight cuts) or notch (cut-off rectangles). Works along with border-radius to\r\n   * specify the size of each corner effect.\r\n   */\r\n  borderCornerShape?: ICSSRule | string;\r\n\r\n  /**\r\n   * The property border-image-source is used to set the image to be used instead of\r\n   * the border style. If this is set to none the border-style is used instead.\r\n   */\r\n  borderImageSource?: ICSSRule | string;\r\n\r\n  /**\r\n   * The border-image-width CSS property defines the offset to use for dividing the\r\n   * border image in nine parts, the top-left corner, central top edge, top-right-corner,\r\n   * central right edge, bottom-right corner, central bottom edge, bottom-left corner,\r\n   * and central right edge. They represent inward distance from the top, right, bottom,\r\n   * and left edges.\r\n   */\r\n  borderImageWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Shorthand property that defines the border-width, border-style and border-color of\r\n   * an element's left border in a single declaration. Note that you can use the\r\n   * corresponding longhand properties to set specific individual properties of the left\r\n   * border — border-left-width, border-left-style and border-left-color.\r\n   */\r\n  borderLeft?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The CSS border-left-color property sets the color of an element's left border. This\r\n   *  page explains the border-left-color value, but often you will find it more\r\n   * convenient to fix the border's left color as part of a shorthand set, either\r\n   * border-left or border-color. Colors can be defined several ways. For more\r\n   * information, see Usage.\r\n   */\r\n  borderLeftColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the style of an element's left border. To set all four borders, use the\r\n   * shorthand property, border-style. Otherwise, you can set the borders individually\r\n   * with border-top-style, border-right-style, border-bottom-style, border-left-style.\r\n   */\r\n  borderLeftStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the width of an element's left border. To set all four borders, use the\r\n   * border-width shorthand property which sets the values simultaneously for\r\n   * border-top-width, border-right-width, border-bottom-width, and border-left-width.\r\n   */\r\n  borderLeftWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Defines how round the border's corners are.\r\n   */\r\n  borderRadius?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Shorthand property that defines the border-width, border-style and border-color of\r\n   * an element's right border in a single declaration. Note that you can use the\r\n   * corresponding longhand properties to set specific individual properties of the\r\n   * right border — border-right-width, border-right-style and border-right-color.\r\n   */\r\n  borderRight?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Sets the color of an element's right border. This page explains the\r\n   * border-right-color value, but often you will find it more convenient to fix the\r\n   * border's right color as part of a shorthand set, either border-right or border-color.\r\n   * Colors can be defined several ways. For more information, see Usage.\r\n   */\r\n  borderRightColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the style of an element's right border. To set all four borders, use the\r\n   * shorthand property, border-style. Otherwise, you can set the borders individually\r\n   * with border-top-style, border-right-style, border-bottom-style, border-left-style.\r\n   */\r\n  borderRightStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the width of an element's right border. To set all four borders, use the\r\n   * border-width shorthand property which sets the values simultaneously for\r\n   * border-top-width, border-right-width, border-bottom-width, and border-left-width.\r\n   */\r\n  borderRightWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Specifies the distance between the borders of adjacent cells.\r\n   */\r\n  borderSpacing?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the style of an element's four borders. This property can have from one to\r\n   * four values. With only one value, the value will be applied to all four borders;\r\n   * otherwise, this works as a shorthand property for each of border-top-style,\r\n   *  border-right-style, border-bottom-style, border-left-style, where each border\r\n   *  style may be assigned a separate value.\r\n   */\r\n  borderStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * Shorthand property that defines the border-width, border-style and border-color of\r\n   * an element's top border in a single declaration. Note that you can use the\r\n   * corresponding longhand properties to set specific individual properties of the top\r\n   * border — border-top-width, border-top-style and border-top-color.\r\n   */\r\n  borderTop?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Sets the color of an element's top border. This page explains the border-top-color\r\n   * value, but often you will find it more convenient to fix the border's top color as\r\n   * part of a shorthand set, either border-top or border-color.\r\n   * Colors can be defined several ways. For more information, see Usage.\r\n   */\r\n  borderTopColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the rounding of the top-left corner of the element.\r\n   */\r\n  borderTopLeftRadius?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the rounding of the top-right corner of the element.\r\n   */\r\n  borderTopRightRadius?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the style of an element's top border. To set all four borders, use the\r\n   * shorthand property, border-style. Otherwise, you can set the borders individually\r\n   * with border-top-style, border-right-style, border-bottom-style, border-left-style.\r\n   */\r\n  borderTopStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the width of an element's top border. To set all four borders, use the\r\n   * border-width shorthand property which sets the values simultaneously for\r\n   * border-top-width, border-right-width, border-bottom-width, and border-left-width.\r\n   */\r\n  borderTopWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Sets the width of an element's four borders. This property can have from one to\r\n   * four values. This is a shorthand property for setting values simultaneously for\r\n   * border-top-width, border-right-width, border-bottom-width, and border-left-width.\r\n   */\r\n  borderWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * This property specifies how far an absolutely positioned box's bottom margin edge\r\n   * is offset above the bottom edge of the box's containing block. For relatively\r\n   * positioned boxes, the offset is with respect to the bottom edges of the box itself\r\n   * (i.e., the box is given a position in the normal flow, then offset from that\r\n   * position according to these properties).\r\n   */\r\n  bottom?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Breaks a box into fragments creating new borders, padding and repeating backgrounds\r\n   * or lets it stay as a continuous box on a page break, column break, or, for inline\r\n   * elements, at a line break.\r\n   */\r\n  boxDecorationBreak?: ICSSRule | string;\r\n\r\n  /**\r\n   * Cast a drop shadow from the frame of almost any element.\r\n   * MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow\r\n   */\r\n  boxShadow?: ICSSRule | string;\r\n\r\n  /**\r\n   * The CSS box-sizing property is used to alter the default CSS box model used to\r\n   * calculate width and height of the elements.\r\n   */\r\n  boxSizing?: ICSSRule | 'border-box' | 'content-box';\r\n\r\n  /**\r\n   * The CSS break-after property allows you to force a break on multi-column layouts.\r\n   * More specifically, it allows you to force a break after an element. It allows you\r\n   * to determine if a break should occur, and what type of break it should be. The\r\n   * break-after CSS property describes how the page, column or region break behaves\r\n   * after the generated box. If there is no generated box, the property is ignored.\r\n   */\r\n  breakAfter?: ICSSRule | string;\r\n\r\n  /**\r\n   * Control page/column/region breaks that fall above a block of content\r\n   */\r\n  breakBefore?: ICSSRule | string;\r\n\r\n  /**\r\n   * Control page/column/region breaks that fall within a block of content\r\n   */\r\n  breakInside?: ICSSRule | string;\r\n\r\n  /**\r\n   * The clear CSS property specifies if an element can be positioned next to or must be\r\n   * positioned below the floating elements that precede it in the markup.\r\n   */\r\n  clear?: ICSSRule | string;\r\n\r\n  /**\r\n   * Clipping crops an graphic, so that only a portion of the graphic is rendered, or\r\n   * filled. This clip-rule property, when used with the clip-path property, defines\r\n   * which clip rule, or algorithm, to use when filling the different parts of a graphics.\r\n   */\r\n  clipRule?: ICSSRule | string;\r\n\r\n  /**\r\n   * The color property sets the color of an element's foreground content (usually text),\r\n   * accepting any standard CSS color from keywords and hex values to RGB(a) and HSL(a).\r\n   */\r\n  color?: ICSSRule | string;\r\n\r\n  /**\r\n   * Describes the number of columns of the element.\r\n   * See CSS 3 column-count property https://www.w3.org/TR/css3-multicol/#cc\r\n   */\r\n  columnCount?: ICSSRule | number | 'auto';\r\n\r\n  /**\r\n   * Specifies how to fill columns (balanced or sequential).\r\n   */\r\n  columnFill?: ICSSRule | string;\r\n\r\n  /**\r\n   * The column-gap property controls the width of the gap between columns in multi-column\r\n   * elements.\r\n   */\r\n  columnGap?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the width, style, and color of the rule between columns.\r\n   */\r\n  columnRule?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the color of the rule between columns.\r\n   */\r\n  columnRuleColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the width of the rule between columns.\r\n   */\r\n  columnRuleWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The column-span CSS property makes it possible for an element to span across all\r\n   * columns when its value is set to all. An element that spans more than one column\r\n   * is called a spanning element.\r\n   */\r\n  columnSpan?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the width of columns in multi-column elements.\r\n   */\r\n  columnWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * This property is a shorthand property for setting column-width and/or column-count.\r\n   */\r\n  columns?: ICSSRule | string;\r\n\r\n  /**\r\n   * Content for pseudo selectors.\r\n   */\r\n  content?: string;\r\n\r\n  /**\r\n   * The counter-increment property accepts one or more names of counters (identifiers),\r\n   * each one optionally followed by an integer which specifies the value by which the\r\n   * counter should be incremented (e.g. if the value is 2, the counter increases by 2\r\n   * each time it is invoked).\r\n   */\r\n  counterIncrement?: ICSSRule | string;\r\n\r\n  /**\r\n   * The counter-reset property contains a list of one or more names of counters, each\r\n   * one optionally followed by an integer (otherwise, the integer defaults to 0.) Each\r\n   * time the given element is invoked, the counters specified by the property are set to the given integer.\r\n   */\r\n  counterReset?: ICSSRule | string;\r\n\r\n  /**\r\n   * The cue property specifies sound files (known as an \"auditory icon\") to be played by\r\n   * speech media agents before and after presenting an element's content; if only one\r\n   * file is specified, it is played both before and after. The volume at which the\r\n   * file(s) should be played, relative to the volume of the main element, may also be\r\n   * specified. The icon files may also be set separately with the cue-before and\r\n   * cue-after properties.\r\n   */\r\n  cue?: ICSSRule | string;\r\n\r\n  /**\r\n   * The cue-after property specifies a sound file (known as an \"auditory icon\") to be\r\n   * played by speech media agents after presenting an element's content; the volume at\r\n   * which the file should be played may also be specified. The shorthand property cue\r\n   * sets cue sounds for both before and after the element is presented.\r\n   */\r\n  cueAfter?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the mouse cursor displayed when the mouse pointer is over an element.\r\n   */\r\n  cursor?: ICSSRule | string;\r\n\r\n  /**\r\n   * The direction CSS property specifies the text direction/writing direction. The rtl\r\n   * is used for Hebrew or Arabic text, the ltr is for other languages.\r\n   */\r\n  direction?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property specifies the type of rendering box used for an element. It is a\r\n   * shorthand property for many other display properties.\r\n   * W3: https://www.w3.org/TR/css-display-3/#the-display-properties\r\n   * MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/display\r\n   */\r\n  display?: ICSSRule | ICSSDisplayRule;\r\n\r\n  /**\r\n   * The ‘fill’ property paints the interior of the given graphical element. The area to\r\n   * be painted consists of any areas inside the outline of the shape. To determine the\r\n   * inside of the shape, all subpaths are considered, and the interior is determined\r\n   * according to the rules associated with the current value of the ‘fill-rule’\r\n   * property. The zero-width geometric outline of a shape is included in the area to be\r\n   * painted.\r\n   */\r\n  fill?: ICSSRule | string;\r\n\r\n  /**\r\n   * SVG: Specifies the opacity of the color or the content the current object is filled\r\n   * with.\r\n   * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#FillOpacityProperty\r\n   */\r\n  fillOpacity?: ICSSRule | number;\r\n\r\n  /**\r\n   * The ‘fill-rule’ property indicates the algorithm which is to be used to determine\r\n   * what parts of the canvas are included inside the shape. For a simple,\r\n   * non-intersecting path, it is intuitively clear what region lies \"inside\"; however,\r\n   * for a more complex path, such as a path that intersects itself or where one subpath\r\n   * encloses another, the interpretation of \"inside\" is not so obvious.\r\n   * The ‘fill-rule’ property provides two options for how the inside of a shape is\r\n   * determined:\r\n   */\r\n  fillRule?: ICSSRule | string;\r\n\r\n  /**\r\n   * Applies various image processing effects. This property is largely unsupported. See\r\n   * Compatibility section for more information.\r\n   */\r\n  filter?: ICSSRule | string;\r\n\r\n  /**\r\n   * Shorthand for `flex-grow`, `flex-shrink`, and `flex-basis`.\r\n   */\r\n  flex?: ICSSRule | string | number;\r\n\r\n  /**\r\n   * The flex-basis CSS property describes the initial main size of the flex item before\r\n   * any free space is distributed according to the flex factors described in the flex\r\n   * property (flex-grow and flex-shrink).\r\n   */\r\n  flexBasis?: ICSSRule | string | number;\r\n\r\n  /**\r\n   * The flex-direction CSS property describes how flex items are placed in the flex\r\n   * container, by setting the direction of the flex container's main axis.\r\n   */\r\n  flexDirection?: ICSSRule | 'row' | 'row-reverse' | 'column' | 'column-reverse';\r\n\r\n  /**\r\n   * The flex-flow CSS property defines the flex container's main and cross axis. It is\r\n   * a shorthand property for the flex-direction and flex-wrap properties.\r\n   */\r\n  flexFlow?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the flex grow factor of a flex item.\r\n   * See CSS flex-grow property https://drafts.csswg.org/css-flexbox-1/#flex-grow-property\r\n   */\r\n  flexGrow?: ICSSRule | number | string;\r\n\r\n  /**\r\n   * Specifies the flex shrink factor of a flex item.\r\n   * See CSS flex-shrink property https://drafts.csswg.org/css-flexbox-1/#flex-shrink-property\r\n   */\r\n  flexShrink?: ICSSRule | number | string;\r\n\r\n  /**\r\n   * Specifies whether flex items are forced into a single line or can be wrapped onto\r\n   * multiple lines. If wrapping is allowed, this property also enables you to control\r\n   * the direction in which lines are stacked.\r\n   * See CSS flex-wrap property https://drafts.csswg.org/css-flexbox-1/#flex-wrap-property\r\n   */\r\n  flexWrap?: ICSSRule | 'nowrap' | 'wrap' | 'wrap-reverse';\r\n\r\n  /**\r\n   * Elements which have the style float are floated horizontally. These elements can\r\n   * move as far to the left or right of the containing element. All elements after\r\n   * the floating element will flow around it, but elements before the floating element\r\n   * are not impacted. If several floating elements are placed after each other, they\r\n   * will float next to each other as long as there is room.\r\n   */\r\n  float?: ICSSRule | string;\r\n\r\n  /**\r\n   * Flows content from a named flow (specified by a corresponding flow-into) through\r\n   * selected elements to form a dynamic chain of layout regions.\r\n   */\r\n  flowFrom?: ICSSRule | string;\r\n\r\n  /**\r\n   * Lays out one or more grid items bound by 4 grid lines. Shorthand for setting\r\n   * grid-column-start, grid-column-end, grid-row-start, and grid-row-end in a single\r\n   * declaration.\r\n   */\r\n  gridArea?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the size of an implicitly-created grid column track\r\n   */\r\n  gridAutoColumns?: ICSSRule | string;\r\n\r\n  /**\r\n   * Controls how the auto-placement algorithm works,\r\n   * specifying exactly how auto-placed items get flowed into the grid.\r\n   */\r\n  gridAutoFlow?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the size of an implicitly-created grid column track\r\n   */\r\n  gridAutoRows?: ICSSRule | string;\r\n\r\n  /**\r\n   * Controls a grid item's placement in a grid area, particularly grid position and a\r\n   * grid span. Shorthand for setting grid-column-start and grid-column-end in a single\r\n   * declaration.\r\n   */\r\n  gridColumn?: ICSSRule | string;\r\n\r\n  /**\r\n   * Controls a grid item's placement in a grid area as well as grid position and a\r\n   * grid span. The grid-column-end property (with grid-row-start, grid-row-end, and\r\n   * grid-column-start) determines a grid item's placement by specifying the grid lines\r\n   * of a grid item's grid area.\r\n   */\r\n  gridColumnEnd?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the size of the gap (gutter) between an element's columns\r\n   */\r\n  gridColumnGap?: ICSSRule | string;\r\n\r\n  /**\r\n   * Determines a grid item's placement by specifying the starting grid lines of a grid\r\n   * item's grid area . A grid item's placement in a grid area consists of a grid\r\n   * position and a grid span. See also ( grid-row-start, grid-row-end, and\r\n   * grid-column-end)\r\n   */\r\n  gridColumnStart?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the gaps (gutters) between grid rows and columns. It is a shorthand\r\n   * for grid-row-gap and grid-column-gap.\r\n   */\r\n  gridGap?: ICSSRule | string;\r\n\r\n  /**\r\n   * Gets or sets a value that indicates which row an element within a Grid should\r\n   * appear in. Shorthand for setting grid-row-start and grid-row-end in a single\r\n   * declaration.\r\n   */\r\n  gridRow?: ICSSRule | string;\r\n\r\n  /**\r\n   * Determines a grid item’s placement by specifying the block-end. A grid item's\r\n   * placement in a grid area consists of a grid position and a grid span. The\r\n   * grid-row-end property (with grid-row-start, grid-column-start, and grid-column-end)\r\n   * determines a grid item's placement by specifying the grid lines of a grid item's\r\n   * grid area.\r\n   */\r\n  gridRowEnd?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the size of the gap (gutter) between an element's grid rows\r\n   */\r\n  gridRowGap?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies a grid item’s start position within the grid row by contributing a line,\r\n   * a span, or nothing (automatic) to its grid placement, thereby specifying the\r\n   * inline-start edge of its grid area\r\n   */\r\n  gridRowStart?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies a row position based upon an integer location, string value, or desired\r\n   * row size.\r\n   * css/properties/grid-row is used as short-hand for grid-row-position and\r\n   * grid-row-position\r\n   */\r\n  gridRowPosition?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies named grid areas which are not associated with any particular grid item,\r\n   * but can be referenced from the grid-placement properties. The syntax of the\r\n   * grid-template-areas property also provides a visualization of the structure of the\r\n   * grid, making the overall layout of the grid container easier to understand.\r\n   */\r\n  gridTemplate?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies named grid areas\r\n   */\r\n  gridTemplateAreas?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies (with grid-template-rows) the line names and track sizing functions of\r\n   * the grid. Each sizing function can be specified as a length, a percentage of the\r\n   * grid container’s size, a measurement of the contents occupying the column or row,\r\n   * or a fraction of the free space in the grid.\r\n   */\r\n  gridTemplateColumns?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies (with grid-template-columns) the line names and track sizing functions of\r\n   * the grid. Each sizing function can be specified as a length, a percentage of the\r\n   * grid container’s size, a measurement of the contents occupying the column or row,\r\n   * or a fraction of the free space in the grid.\r\n   */\r\n  gridTemplateRows?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the height of an element. The content area of the element height does not\r\n   * include the padding, border, and margin of the element.\r\n   */\r\n  height?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Specifies the minimum number of characters in a hyphenated word\r\n   */\r\n  hyphenateLimitChars?: ICSSRule | string;\r\n\r\n  /**\r\n   * Indicates the maximum number of successive hyphenated lines in an element. The\r\n   * ‘no-limit’ value means that there is no limit.\r\n   */\r\n  hyphenateLimitLines?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the maximum amount of trailing whitespace (before justification) that may\r\n   * be left in a line before hyphenation is triggered to pull part of a word from the\r\n   * next line back up into the current one.\r\n   */\r\n  hyphenateLimitZone?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies whether or not words in a sentence can be split by the use of a manual or\r\n   * automatic hyphenation mechanism.\r\n   */\r\n  hyphens?: ICSSRule | string;\r\n\r\n  /**\r\n   * Defines how the browser distributes space between and around flex items\r\n   * along the main-axis of their container.\r\n   * See CSS justify-content property\r\n   * https://www.w3.org/TR/css-flexbox-1/#justify-content-property\r\n   */\r\n  justifyContent?: ICSSRule | 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'stretch';\r\n\r\n  /**\r\n   * Justifies the box (as the alignment subject) within its containing block (as the alignment container)\r\n   * along the inline/row/main axis of the alignment container.\r\n   *\r\n   * See CSS jusitfy-self property\r\n   * https://www.w3.org/TR/css-align-3/#propdef-justify-self\r\n   */\r\n  justifySelf?:\r\n    | ICSSRule\r\n    | 'auto'\r\n    | 'normal'\r\n    | 'stretch'\r\n    | ICSSBaselinePositionRule\r\n    | ICSSOverflowAndSelfPositionRule\r\n    | 'left'\r\n    | 'right'\r\n    // prefixed with <overflow-position> value 'safe'\r\n    | 'safe left'\r\n    | 'safe right'\r\n    // prefixed with <overflow-position> value 'unsafe'\r\n    | 'unsafe left'\r\n    | 'unsafe right';\r\n\r\n  /**\r\n   * Sets the left position of an element relative to the nearest anscestor that is set\r\n   * to position absolute, relative, or fixed.\r\n   */\r\n  left?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The letter-spacing CSS property specifies the spacing behavior between text\r\n   * characters.\r\n   */\r\n  letterSpacing?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the height of an inline block level element.\r\n   * See CSS 2.1 line-height property https://www.w3.org/TR/CSS21/visudet.html#propdef-line-height\r\n   */\r\n  lineHeight?: ICSSRule | 'normal' | ICSSPixelUnitRule | ICSSPercentageRule;\r\n\r\n  /**\r\n   * Shorthand property that sets the list-style-type, list-style-position and\r\n   * list-style-image properties in one declaration.\r\n   */\r\n  listStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property sets the image that will be used as the list item marker. When the\r\n   * image is available, it will replace the marker set with the 'list-style-type'\r\n   * marker. That also means that if the image is not available, it will show the style\r\n   * specified by list-style-property\r\n   */\r\n  listStyleImage?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies if the list-item markers should appear inside or outside the content flow.\r\n   */\r\n  listStylePosition?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the type of list-item marker in a list.\r\n   */\r\n  listStyleType?: ICSSRule | string;\r\n\r\n  /**\r\n   * The margin property is shorthand to allow you to set all four margins of an element\r\n   * at once. Its equivalent longhand properties are margin-top, margin-right,\r\n   * margin-bottom and margin-left. Negative values are also allowed.\r\n   */\r\n  margin?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * margin-bottom sets the bottom margin of an element.\r\n   */\r\n  marginBottom?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * margin-left sets the left margin of an element.\r\n   */\r\n  marginLeft?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * margin-right sets the right margin of an element.\r\n   */\r\n  marginRight?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * margin-top sets the top margin of an element.\r\n   */\r\n  marginTop?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The marquee-direction determines the initial direction in which the marquee content moves.\r\n   */\r\n  marqueeDirection?: ICSSRule | string;\r\n\r\n  /**\r\n   * The 'marquee-style' property determines a marquee's scrolling behavior.\r\n   */\r\n  marqueeStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property is shorthand for setting mask-image, mask-mode, mask-repeat,\r\n   * mask-position, mask-clip, mask-origin, mask-composite and mask-size. Omitted\r\n   * values are set to their original properties' initial values.\r\n   */\r\n  mask?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property is shorthand for setting mask-border-source, mask-border-slice,\r\n   * mask-border-width, mask-border-outset, and mask-border-repeat. Omitted values\r\n   * are set to their original properties' initial values.\r\n   */\r\n  maskBorder?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property specifies how the images for the sides and the middle part of the\r\n   * mask image are scaled and tiled. The first keyword applies to the horizontal\r\n   * sides, the second one applies to the vertical ones. If the second keyword is\r\n   * absent, it is assumed to be the same as the first, similar to the CSS\r\n   * border-image-repeat property.\r\n   */\r\n  maskBorderRepeat?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property specifies inward offsets from the top, right, bottom, and left\r\n   * edges of the mask image, dividing it into nine regions: four corners, four\r\n   * edges, and a middle. The middle image part is discarded and treated as fully\r\n   * transparent black unless the fill keyword is present. The four values set the\r\n   * top, right, bottom and left offsets in that order, similar to the CSS\r\n   * border-image-slice property.\r\n   */\r\n  maskBorderSlice?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies an image to be used as a mask. An image that is empty, fails to\r\n   * download, is non-existent, or cannot be displayed is ignored and does not mask\r\n   * the element.\r\n   */\r\n  maskBorderSource?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property sets the width of the mask box image, similar to the CSS\r\n   * border-image-width property.\r\n   */\r\n  maskBorderWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Determines the mask painting area, which defines the area that is affected by\r\n   * the mask. The painted content of an element may be restricted to this area.\r\n   */\r\n  maskClip?: ICSSRule | string;\r\n\r\n  /**\r\n   * For elements rendered as a single box, specifies the mask positioning area. For\r\n   * elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes\r\n   * on several pages) specifies which boxes box-decoration-break operates on to\r\n   * determine the mask positioning area(s).\r\n   */\r\n  maskOrigin?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property must not be used. It is no longer included in any standard or\r\n   * standard track specification, nor is it implemented in any browser. It is only\r\n   * used when the text-align-last property is set to size. It controls allowed\r\n   * adjustments of font-size to fit line content.\r\n   */\r\n  maxFontSize?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Sets the maximum height for an element. It prevents the height of the element to\r\n   *  exceed the specified value. If min-height is specified and is greater than\r\n   * max-height, max-height is overridden.\r\n   */\r\n  maxHeight?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Sets the maximum width for an element. It limits the width property to be larger\r\n   * than the value specified in max-width.\r\n   */\r\n  maxWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Sets the minimum height for an element. It prevents the height of the element to\r\n   * be smaller than the specified value. The value of min-height overrides both\r\n   * max-height and height.\r\n   */\r\n  minHeight?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Sets the minimum width of an element. It limits the width property to be not\r\n   * smaller than the value specified in min-width.\r\n   */\r\n  minWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The mix-blend-mode CSS property describes how an element's content should blend\r\n   * with the content of the element's direct parent and the element's background.\r\n   */\r\n  mixBlendMode?: ICSSRule | IMixBlendModes;\r\n\r\n  /**\r\n   * The ‘object-fit’ property specifies how the contents of a replaced element should\r\n   * be fitted to the box established by its used height and width.\r\n   * See CSS 3 object-fit property https://www.w3.org/TR/css3-images/#the-object-fit\r\n   */\r\n  objectFit?: ICSSRule | 'cover' | 'contain' | 'fill' | 'none';\r\n\r\n  /**\r\n   * Specifies the transparency of an element.\r\n   * See CSS 3 opacity property https://drafts.csswg.org/css-color-3/#opacity\r\n   */\r\n  opacity?: ICSSRule | number | string;\r\n\r\n  /**\r\n   * Specifies the order used to lay out flex items in their flex container.\r\n   * Elements are laid out in the ascending order of the order value.\r\n   * See CSS order property https://drafts.csswg.org/css-flexbox-1/#order-property\r\n   */\r\n  order?: ICSSRule | number;\r\n\r\n  /**\r\n   * In paged media, this property defines the minimum number of lines in\r\n   * a block container that must be left at the bottom of the page.\r\n   * See CSS 3 orphans, widows properties https://drafts.csswg.org/css-break-3/#widows-orphans\r\n   */\r\n  orphans?: ICSSRule | number;\r\n\r\n  /**\r\n   * The CSS outline property is a shorthand property for setting one or more of the\r\n   * individual outline properties outline-style, outline-width and outline-color in a\r\n   * single rule. In most cases the use of this shortcut is preferable and more\r\n   * convenient.\r\n   * Outlines differ from borders in the following ways:\r\n   *      •       Outlines do not take up space, they are drawn above the content.\r\n   *      •       Outlines may be non-rectangular. They are rectangular in\r\n   * Gecko/Firefox. Internet Explorer attempts to place the smallest contiguous outline\r\n   * around all elements or shapes that are indicated to have an outline. Opera draws a\r\n   * non-rectangular shape around a construct.\r\n   */\r\n  outline?: ICSSRule | 0 | string;\r\n\r\n  /**\r\n   * The outline-color property sets the color of the outline of an element. An\r\n   * outline is a line that is drawn around elements, outside the border edge, to make\r\n   * the element stand out.\r\n   */\r\n  outlineColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * The outline-offset property offsets the outline and draw it beyond the border edge.\r\n   */\r\n  outlineOffset?: ICSSRule | string;\r\n\r\n  /**\r\n   * The overflow property controls how extra content exceeding the bounding box of an\r\n   * element is rendered. It can be used in conjunction with an element that has a\r\n   * fixed width and height, to eliminate text-induced page distortion.\r\n   */\r\n  overflow?: ICSSRule | 'auto' | 'hidden' | 'scroll' | 'visible';\r\n\r\n  /**\r\n   * Specifies the preferred scrolling methods for elements that overflow.\r\n   */\r\n  overflowStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies whether or not the browser should insert line breaks within words to\r\n   * prevent text from overflowing its content box. In contrast to word-break,\r\n   * overflow-wrap will only create a break if an entire word cannot be placed on its\r\n   * own line without overflowing.\r\n   */\r\n  overflowWrap?: ICSSRule | 'normal' | 'break-word';\r\n\r\n  /**\r\n   * Controls how extra content exceeding the x-axis of the bounding box of an element\r\n   * is rendered.\r\n   */\r\n  overflowX?: ICSSRule | 'auto' | 'hidden' | 'scroll' | 'visible';\r\n\r\n  /**\r\n   * Controls how extra content exceeding the y-axis of the bounding box of an element\r\n   * is rendered.\r\n   */\r\n  overflowY?: ICSSRule | 'auto' | 'hidden' | 'scroll' | 'visible';\r\n\r\n  /**\r\n   * The padding optional CSS property sets the required padding space on one to four\r\n   * sides of an element. The padding area is the space between an element and its\r\n   * border. Negative values are not allowed but decimal values are permitted. The\r\n   *  element size is treated as fixed, and the content of the element shifts toward the\r\n   * center as padding is increased. The padding property is a shorthand to avoid\r\n   * setting each side separately (padding-top, padding-right, padding-bottom,\r\n   * padding-left).\r\n   */\r\n  padding?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The padding-block-end CSS property defines the logical block end padding\r\n   * of an element, which maps to a physical padding depending on the element's\r\n   * writing mode, directionality, and text orientation. It corresponds to the\r\n   * padding-top, padding-right, padding-bottom, or padding-left property\r\n   * depending on the values defined for writing-mode, direction, and text-orientation.\r\n   */\r\n  paddingBlockEnd?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The padding-block-start CSS property defines the logical block start padding\r\n   * of an element, which maps to a physical padding depending on the element's\r\n   * writing mode, directionality, and text orientation. It corresponds to the\r\n   * padding-top, padding-right, padding-bottom, or padding-left property depending\r\n   * on the values defined for writing-mode, direction, and text-orientation.\r\n   */\r\n  paddingBlockStart?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The padding-left CSS property of an element sets the padding space required on the\r\n   * left side of an element. The padding area is the space between the content of the\r\n   * element and its border. Contrary to margin-left values, negative values of\r\n   * padding-left are invalid.\r\n   */\r\n  paddingLeft?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The padding-bottom CSS property of an element sets the padding space required on\r\n   * the bottom of an element. The padding area is the space between the content of the\r\n   * element and its border. Contrary to margin-bottom values, negative values of\r\n   * padding-bottom are invalid.\r\n   */\r\n  paddingBottom?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The padding-inline-end CSS property defines the logical inline end padding of an element,\r\n   * which maps to a physical padding depending on the element's writing mode, directionality,\r\n   * and text orientation. It corresponds to the padding-top, padding-right, padding-bottom,\r\n   * or padding-left property depending on the values defined for writing-mode, direction,\r\n   * and text-orientation.\r\n   */\r\n  paddingInlineEnd?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The padding-inline-start CSS property defines the logical inline start padding of\r\n   * an element, which maps to a physical padding depending on the element's writing mode,\r\n   * directionality, and text orientation. It corresponds to the padding-top, padding-right,\r\n   * padding-bottom, or padding-left property depending on the values defined for writing-mode,\r\n   * direction, and text-orientation.\r\n   */\r\n  paddingInlineStart?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The padding-right CSS property of an element sets the padding space required on the\r\n   * right side of an element. The padding area is the space between the content of the\r\n   * element and its border. Contrary to margin-right values, negative values of\r\n   * padding-right are invalid.\r\n   */\r\n  paddingRight?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The padding-top CSS property of an element sets the padding space required on the\r\n   * top of an element. The padding area is the space between the content of the element\r\n   * and its border. Contrary to margin-top values, negative values of padding-top are\r\n   * invalid.\r\n   */\r\n  paddingTop?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The page-break-after property is supported in all major browsers. With CSS3,\r\n   *  page-break-* properties are only aliases of the break-* properties. The CSS3\r\n   * Fragmentation spec defines breaks for all CSS box fragmentation.\r\n   */\r\n  pageBreakAfter?: ICSSRule | string;\r\n\r\n  /**\r\n   * The page-break-before property sets the page-breaking behavior before an element.\r\n   * With CSS3, page-break-* properties are only aliases of the break-* properties. The\r\n   * CSS3 Fragmentation spec defines breaks for all CSS box fragmentation.\r\n   */\r\n  pageBreakBefore?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the page-breaking behavior inside an element. With CSS3, page-break-*\r\n   * properties are only aliases of the break-* properties. The CSS3 Fragmentation spec\r\n   * defines breaks for all CSS box fragmentation.\r\n   */\r\n  pageBreakInside?: ICSSRule | string;\r\n\r\n  /**\r\n   * The pause property determines how long a speech media agent should pause before and\r\n   * after presenting an element. It is a shorthand for the pause-before and pause-after\r\n   *  properties.\r\n   */\r\n  pause?: ICSSRule | string;\r\n\r\n  /**\r\n   * The pause-after property determines how long a speech media agent should pause after\r\n   * presenting an element. It may be replaced by the shorthand property pause, which\r\n   * sets pause time before and after.\r\n   */\r\n  pauseAfter?: ICSSRule | string;\r\n\r\n  /**\r\n   * The pause-before property determines how long a speech media agent should pause\r\n   * before presenting an element. It may be replaced by the shorthand property pause,\r\n   * which sets pause time before and after.\r\n   */\r\n  pauseBefore?: ICSSRule | string;\r\n\r\n  /**\r\n   * The perspective property defines how far an element is placed from the view on the\r\n   * z-axis, from the screen to the viewer. Perspective defines how an object is viewed.\r\n   * In graphic arts, perspective is the representation on a flat surface of what the\r\n   * viewer's eye would see in a 3D space. (See Wikipedia for more information about\r\n   * graphical perspective and for related illustrations.)\r\n   * The illusion of perspective on a flat surface, such as a computer screen, is created\r\n   * by projecting points on the flat surface as they would appear if the flat surface\r\n   * were a window through which the viewer was looking at the object. In discussion of\r\n   * virtual environments, this flat surface is called a projection plane.\r\n   */\r\n  perspective?: ICSSRule | string;\r\n\r\n  /**\r\n   * The perspective-origin property establishes the origin for the perspective property.\r\n   * It effectively sets the X and Y position at which the viewer appears to be looking\r\n   * at the children of the element.\r\n   * When used with perspective, perspective-origin changes the appearance of an object,\r\n   * as if a viewer were looking at it from a different origin. An object appears\r\n   * differently if a viewer is looking directly at it versus looking at it from below,\r\n   * above, or from the side. Thus, the perspective-origin is like a vanishing point.\r\n   * The default value of perspective-origin is 50% 50%. This displays an object as if\r\n   * the viewer's eye were positioned directly at the center of the screen, both\r\n   * top-to-bottom and left-to-right. A value of 0% 0% changes the object as if the\r\n   * viewer was looking toward the top left angle. A value of 100% 100% changes the\r\n   * appearance as if viewed toward the bottom right angle.\r\n   */\r\n  perspectiveOrigin?: ICSSRule | string;\r\n\r\n  /**\r\n   * The pointer-events property allows you to control whether an element can be the\r\n   * target for the pointing device (e.g, mouse, pen) events.\r\n   */\r\n  pointerEvents?: ICSSRule | string;\r\n\r\n  /**\r\n   * The position property controls the type of positioning used by an element within\r\n   * its parent elements. The effect of the position property depends on a lot of\r\n   * factors, for example the position property of parent elements.\r\n   */\r\n  position?: ICSSRule | 'static' | 'relative' | 'absolute' | 'fixed' | 'sticky';\r\n\r\n  /**\r\n   * Sets the type of quotation marks for embedded quotations.\r\n   */\r\n  quotes?: ICSSRule | string;\r\n\r\n  /**\r\n   * Controls whether the last region in a chain displays additional 'overset' content\r\n   * according its default overflow property, or if it displays a fragment of content\r\n   * as if it were flowing into a subsequent region.\r\n   */\r\n  regionFragment?: ICSSRule | string;\r\n\r\n  /**\r\n   * The resize CSS sets whether an element is resizable, and if so, in which direction(s).\r\n   */\r\n\r\n  resize?: ICSSRule | 'none' | 'both' | 'horizontal' | 'vertical' | 'block' | 'inline';\r\n\r\n  /**\r\n   * The rest-after property determines how long a speech media agent should pause after\r\n   * presenting an element's main content, before presenting that element's exit cue\r\n   * sound. It may be replaced by the shorthand property rest, which sets rest time\r\n   * before and after.\r\n   */\r\n  restAfter?: ICSSRule | string;\r\n\r\n  /**\r\n   * The rest-before property determines how long a speech media agent should pause after\r\n   * presenting an intro cue sound for an element, before presenting that element's main\r\n   * content. It may be replaced by the shorthand property rest, which sets rest time\r\n   * before and after.\r\n   */\r\n  restBefore?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the position an element in relation to the right side of the containing\r\n   * element.\r\n   */\r\n  right?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Defines the alpha channel threshold used to extract a shape from an image. Can be\r\n   * thought of as a \"minimum opacity\" threshold; that is, a value of 0.5 means that the\r\n   * shape will enclose all the pixels that are more than 50% opaque.\r\n   */\r\n  shapeImageThreshold?: ICSSRule | string;\r\n\r\n  /**\r\n   * A future level of CSS Shapes will define a shape-inside property, which will define\r\n   * a shape to wrap content within the element. See Editor's Draft\r\n   * <http://dev.w3.org/csswg/css-shapes/> and CSSWG wiki page on next-level plans\r\n   * <http://wiki.csswg.org/spec/css-shapes>\r\n   */\r\n  shapeInside?: ICSSRule | string;\r\n\r\n  /**\r\n   * Adds a margin to a shape-outside. In effect, defines a new shape that is the\r\n   * smallest contour around all the points that are the shape-margin distance outward\r\n   * perpendicular to each point on the underlying shape. For points where a\r\n   * perpendicular direction is not defined (e.g., a triangle corner), takes all\r\n   * points on a circle centered at the point and with a radius of the shape-margin\r\n   * distance. This property accepts only non-negative values.\r\n   */\r\n  shapeMargin?: ICSSRule | string;\r\n\r\n  /**\r\n   * Declares a shape around which text should be wrapped, with possible modifications\r\n   * from the shape-margin property. The shape defined by shape-outside and shape-margin\r\n   * changes the geometry of a float element's float area.\r\n   */\r\n  shapeOutside?: ICSSRule | string;\r\n\r\n  /**\r\n   * The speak property determines whether or not a speech synthesizer will read aloud\r\n   * the contents of an element.\r\n   */\r\n  speak?: ICSSRule | string;\r\n\r\n  /**\r\n   * The speak-as property determines how the speech synthesizer interprets the content:\r\n   * words as whole words or as a sequence of letters, numbers as a numerical value or a\r\n   * sequence of digits, punctuation as pauses in speech or named punctuation characters.\r\n   */\r\n  speakAs?: ICSSRule | string;\r\n\r\n  /**\r\n   * The stroke property in CSS is for adding a border to SVG shapes.\r\n   * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#Stroke\r\n   */\r\n  stroke?: ICSSRule | string;\r\n\r\n  /**\r\n   * SVG: The stroke-linecap attribute defines the shape to be used at the end of open subpaths when they are stroked.\r\n   * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#LineCaps\r\n   */\r\n  strokeLinecap?: ICSSRule | 'butt' | 'round' | 'square';\r\n\r\n  /**\r\n   * SVG: Specifies the opacity of the outline on the current object.\r\n   * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty\r\n   */\r\n  strokeOpacity?: ICSSRule | number;\r\n\r\n  /**\r\n   * SVG: Specifies the width of the outline on the current object.\r\n   * See SVG 1.1 https://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty\r\n   */\r\n  strokeWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The tab-size CSS property is used to customise the width of a tab (U+0009) character.\r\n   */\r\n  tabSize?: ICSSRule | string;\r\n\r\n  /**\r\n   * The 'table-layout' property controls the algorithm used to lay out the table cells, rows, and columns.\r\n   */\r\n  tableLayout?: ICSSRule | string;\r\n\r\n  /**\r\n   * The text-align CSS property describes how inline content like text is aligned in its\r\n   * parent block element. text-align does not control the alignment of block elements\r\n   * itself, only their inline content.\r\n   */\r\n  textAlign?: ICSSRule | string;\r\n\r\n  /**\r\n   * The text-align-last CSS property describes how the last line of a block element or\r\n   * a line before line break is aligned in its parent block element.\r\n   */\r\n  textAlignLast?: ICSSRule | string;\r\n\r\n  /**\r\n   * The text-decoration CSS property is used to set the text formatting to underline,\r\n   * overline, line-through or blink. underline and overline decorations are positioned\r\n   * under the text, line-through over it.\r\n   */\r\n  textDecoration?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the color of any text decoration, such as underlines, overlines, and strike\r\n   * throughs.\r\n   */\r\n  textDecorationColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets what kind of line decorations are added to an element, such as underlines,\r\n   * overlines, etc.\r\n   */\r\n  textDecorationLine?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies what parts of an element’s content are skipped over when applying any\r\n   * text decoration.\r\n   */\r\n  textDecorationSkip?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property specifies the style of the text decoration line drawn on the\r\n   * specified element. The intended meaning for the values are the same as those of\r\n   * the border-style-properties.\r\n   */\r\n  textDecorationStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * The text-emphasis property will apply special emphasis marks to the elements text.\r\n   * Slightly similar to the text-decoration property only that this property can have\r\n   * affect on the line-height. It also is noted that this is shorthand for\r\n   * text-emphasis-style and for text-emphasis-color.\r\n   */\r\n  textEmphasis?: ICSSRule | string;\r\n\r\n  /**\r\n   * The text-emphasis-color property specifies the foreground color of the emphasis\r\n   * marks.\r\n   */\r\n  textEmphasisColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * The text-emphasis-style property applies special emphasis marks to an element's\r\n   * text.\r\n   */\r\n  textEmphasisStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property helps determine an inline box's block-progression dimension, derived\r\n   * from the text-height and font-size properties for non-replaced elements, the height\r\n   * or the width for replaced elements, and the stacked block-progression dimension for\r\n   * inline-block elements. The block-progression dimension determines the position of\r\n   * the padding, border and margin for the element.\r\n   */\r\n  textHeight?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the amount of space horizontally that should be left on the first line of\r\n   * the text of an element. This horizontal spacing is at the beginning of the first\r\n   * line and is in respect to the left edge of the containing block box.\r\n   */\r\n  textIndent?: ICSSRule | string;\r\n\r\n  /**\r\n   * The text-overflow shorthand CSS property determines how overflowed content that is\r\n   * not displayed is signaled to the users. It can be clipped, display an ellipsis\r\n   * ('…', U+2026 HORIZONTAL ELLIPSIS) or a Web author-defined string. It covers the\r\n   * two long-hand properties text-overflow-mode and text-overflow-ellipsis\r\n   */\r\n  textOverflow?: ICSSRule | string;\r\n\r\n  /**\r\n   * The text-overline property is the shorthand for the text-overline-style,\r\n   * text-overline-width, text-overline-color, and text-overline-mode properties.\r\n   */\r\n  textOverline?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the line color for the overline text decoration.\r\n   */\r\n  textOverlineColor?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the mode for the overline text decoration, determining whether the text\r\n   * decoration affects the space characters or not.\r\n   */\r\n  textOverlineMode?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the line style for overline text decoration.\r\n   */\r\n  textOverlineStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies the line width for the overline text decoration.\r\n   */\r\n  textOverlineWidth?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The text-rendering CSS property provides information to the browser about how to\r\n   * optimize when rendering text. Options are: legibility, speed or geometric precision.\r\n   */\r\n  textRendering?: ICSSRule | string;\r\n\r\n  /**\r\n   * The CSS text-shadow property applies one or more drop shadows to the text and\r\n   * <text-decorations> of an element. Each shadow is specified as an offset from the\r\n   * text, along with optional color and blur radius values.\r\n   */\r\n  textShadow?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property transforms text for styling purposes. (It has no effect on the\r\n   * underlying content.)\r\n   */\r\n  textTransform?: ICSSRule | string;\r\n\r\n  /**\r\n   * Unsupported.\r\n   * This property will add a underline position value to the element that has an\r\n   * underline defined.\r\n   */\r\n  textUnderlinePosition?: ICSSRule | string;\r\n\r\n  /**\r\n   * After review this should be replaced by text-decoration should it not?\r\n   * This property will set the underline style for text with a line value for\r\n   * underline, overline, and line-through.\r\n   */\r\n  textUnderlineStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property specifies how far an absolutely positioned box's top margin edge is\r\n   * offset below the top edge of the box's containing block. For relatively positioned\r\n   * boxes, the offset is with respect to the top edges of the box itself (i.e., the box\r\n   * is given a position in the normal flow, then offset from that position according to\r\n   * these properties).\r\n   */\r\n  top?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * Determines whether touch input may trigger default behavior supplied by the user\r\n   * agent, such as panning or zooming.\r\n   */\r\n  touchAction?: ICSSRule | string;\r\n\r\n  /**\r\n   * CSS transforms allow elements styled with CSS to be transformed in two-dimensional\r\n   * or three-dimensional space. Using this property, elements can be translated,\r\n   * rotated, scaled, and skewed. The value list may consist of 2D and/or 3D transform\r\n   * values.\r\n   */\r\n  transform?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property defines the origin of the transformation axes relative to the element\r\n   * to which the transformation is applied.\r\n   */\r\n  transformOrigin?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property allows you to define the relative position of the origin of the\r\n   * transformation grid along the z-axis.\r\n   */\r\n  transformOriginZ?: ICSSRule | string;\r\n\r\n  /**\r\n   * This property specifies how nested elements are rendered in 3D space relative to their parent.\r\n   */\r\n  transformStyle?: ICSSRule | string;\r\n\r\n  /**\r\n   * The transition CSS property is a shorthand property for transition-property,\r\n   * transition-duration, transition-timing-function, and transition-delay. It allows to\r\n   * define the transition between two states of an element.\r\n   */\r\n  transition?: ICSSRule | string;\r\n\r\n  /**\r\n   * Defines when the transition will start. A value of ‘0s’ means the transition will\r\n   * execute as soon as the property is changed. Otherwise, the value specifies an\r\n   * offset from the moment the property is changed, and the transition will delay\r\n   * execution by that offset.\r\n   */\r\n  transitionDelay?: ICSSRule | string;\r\n\r\n  /**\r\n   * The 'transition-duration' property specifies the length of time a transition\r\n   * animation takes to complete.\r\n   */\r\n  transitionDuration?: ICSSRule | string;\r\n\r\n  /**\r\n   * The 'transition-property' property specifies the name of the CSS property to which\r\n   * the transition is applied.\r\n   */\r\n  transitionProperty?: ICSSRule | string;\r\n\r\n  /**\r\n   * Sets the pace of action within a transition\r\n   */\r\n  transitionTimingFunction?: ICSSRule | string;\r\n\r\n  /**\r\n   * The unicode-bidi CSS property specifies the level of embedding with respect to the bidirectional algorithm.\r\n   */\r\n  unicodeBidi?: ICSSRule | string;\r\n\r\n  /**\r\n   * This is for all the high level UX stuff.\r\n   */\r\n  userFocus?: ICSSRule | string;\r\n\r\n  /**\r\n   * For inputing user content\r\n   */\r\n  userInput?: ICSSRule | string;\r\n\r\n  /**\r\n   * Defines the text selection behavior.\r\n   */\r\n  userSelect?: ICSSRule | 'none' | 'auto' | 'text' | 'all' | 'contain';\r\n\r\n  /**\r\n   * The vertical-align property controls how inline elements or text are vertically\r\n   * aligned compared to the baseline. If this property is used on table-cells it\r\n   * controls the vertical alignment of content of the table cell.\r\n   */\r\n  verticalAlign?: ICSSRule | string;\r\n\r\n  /**\r\n   * The visibility property specifies whether the boxes generated by an element are rendered.\r\n   */\r\n  visibility?: ICSSRule | string;\r\n\r\n  /**\r\n   * The voice-balance property sets the apparent position (in stereo sound) of the synthesized voice for spoken media.\r\n   */\r\n  voiceBalance?: ICSSRule | string;\r\n\r\n  /**\r\n   * The voice-duration property allows the author to explicitly set the amount of time\r\n   * it should take a speech synthesizer to read an element's content, for example to\r\n   * allow the speech to be synchronized with other media. With a value of auto (the\r\n   * default) the length of time it takes to read the content is determined by the\r\n   * content itself and the voice-rate property.\r\n   */\r\n  voiceDuration?: ICSSRule | string;\r\n\r\n  /**\r\n   * The voice-family property sets the speaker's voice used by a speech media agent to\r\n   * read an element. The speaker may be specified as a named character (to match a\r\n   * voice option in the speech reading software) or as a generic description of the\r\n   * age and gender of the voice. Similar to the font-family property for visual media,\r\n   * a comma-separated list of fallback options may be given in case the speech reader\r\n   * does not recognize the character name or cannot synthesize the requested combination\r\n   * of generic properties.\r\n   */\r\n  voiceFamily?: ICSSRule | string;\r\n\r\n  /**\r\n   * The voice-pitch property sets pitch or tone (high or low) for the synthesized speech\r\n   * when reading an element; the pitch may be specified absolutely or relative to the\r\n   * normal pitch for the voice-family used to read the text.\r\n   */\r\n  voicePitch?: ICSSRule | string;\r\n\r\n  /**\r\n   * The voice-range property determines how much variation in pitch or tone will be\r\n   * created by the speech synthesize when reading an element. Emphasized text,\r\n   * grammatical structures and punctuation may all be rendered as changes in pitch,\r\n   * this property determines how strong or obvious those changes are; large ranges are\r\n   * associated with enthusiastic or emotional speech, while small ranges are associated\r\n   * with flat or mechanical speech.\r\n   */\r\n  voiceRange?: ICSSRule | string;\r\n\r\n  /**\r\n   * The voice-rate property sets the speed at which the voice synthesized by a speech\r\n   * media agent will read content.\r\n   */\r\n  voiceRate?: ICSSRule | string;\r\n\r\n  /**\r\n   * The voice-stress property sets the level of vocal emphasis to be used for\r\n   * synthesized speech reading the element.\r\n   */\r\n  voiceStress?: ICSSRule | string;\r\n\r\n  /**\r\n   * The voice-volume property sets the volume for spoken content in speech media. It\r\n   * replaces the deprecated volume property.\r\n   */\r\n  voiceVolume?: ICSSRule | string;\r\n\r\n  /**\r\n   * The white-space property controls whether and how white space inside the element is\r\n   * collapsed, and whether lines may wrap at unforced \"soft wrap\" opportunities.\r\n   */\r\n  whiteSpace?: ICSSRule | string;\r\n\r\n  /**\r\n   * In paged media, this property defines the mimimum number of lines that must be left\r\n   * at the top of the second page.\r\n   * See CSS 3 orphans, widows properties\r\n   * https://drafts.csswg.org/css-break-3/#widows-orphans\r\n   */\r\n  widows?: ICSSRule | number;\r\n\r\n  /**\r\n   * Specifies the width of the content area of an element. The content area of the element\r\n   * width does not include the padding, border, and margin of the element.\r\n   */\r\n  width?: ICSSRule | ICSSPixelUnitRule;\r\n\r\n  /**\r\n   * The word-break property is often used when there is long generated content that is\r\n   * strung together without and spaces or hyphens to beak apart. A common case of this\r\n   * is when there is a long URL that does not have any hyphens. This case could\r\n   * potentially cause the breaking of the layout as it could extend past the parent\r\n   * element.\r\n   */\r\n  wordBreak?: ICSSRule | string;\r\n\r\n  /**\r\n   * The word-spacing CSS property specifies the spacing behavior between \"words\".\r\n   */\r\n  wordSpacing?: ICSSRule | string;\r\n\r\n  /**\r\n   * An alias of css/properties/overflow-wrap, word-wrap defines whether to break\r\n   * words when the content exceeds the boundaries of its container.\r\n   */\r\n  wordWrap?: ICSSRule | string;\r\n\r\n  /**\r\n   * Specifies how exclusions affect inline content within block-level elements. Elements\r\n   * lay out their inline content in their content area but wrap around exclusion areas.\r\n   */\r\n  wrapFlow?: ICSSRule | string;\r\n\r\n  /**\r\n   * Set the value that is used to offset the inner wrap shape from other shapes. Inline\r\n   * content that intersects a shape with this property will be pushed by this shape's\r\n   * margin.\r\n   */\r\n  wrapMargin?: ICSSRule | string;\r\n\r\n  /**\r\n   * writing-mode specifies if lines of text are laid out horizontally or vertically,\r\n   * and the direction which lines of text and blocks progress.\r\n   */\r\n  writingMode?: ICSSRule | string;\r\n\r\n  /**\r\n   * The z-index property specifies the z-order of an element and its descendants.\r\n   * When elements overlap, z-order determines which one covers the other.\r\n   * See CSS 2 z-index property https://www.w3.org/TR/CSS2/visuren.html#z-index\r\n   */\r\n  zIndex?: ICSSRule | 'auto' | number;\r\n\r\n  /**\r\n   * Sets the initial zoom factor of a document defined by @viewport.\r\n   * See CSS zoom descriptor https://drafts.csswg.org/css-device-adapt/#zoom-desc\r\n   */\r\n  zoom?: ICSSRule | 'auto' | number | ICSSPercentageRule;\r\n}\r\n"]}