{"version":3,"file":"server.js","sourceRoot":"../src/","sources":["server.ts"],"names":[],"mappings":";;;IAEA;;;;OAIG;IACH,sBAA6B,QAAsB,EAAE,SAAkB;QACrE,IAAM,UAAU,GAAG,uBAAU,CAAC,WAAW,EAAE,CAAC;QAE5C,UAAU,CAAC,SAAS,CAAC;YACnB,aAAa,EAAE,0BAAa,CAAC,IAAI;YACjC,SAAS,WAAA;SACV,CAAC,CAAC;QACH,UAAU,CAAC,KAAK,EAAE,CAAC;QAEnB,OAAO;YACL,IAAI,EAAE,QAAQ,EAAE;YAChB,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;SAC/B,CAAC;IACJ,CAAC;IAbD,oCAaC","sourcesContent":["import { InjectionMode, Stylesheet } from './Stylesheet';\r\n\r\n/**\r\n * Renders a given string and returns both html and css needed for the html.\r\n * @param onRender - Function that returns a string.\r\n * @param namespace - Optional namespace to prepend to css classnames to avoid collisions.\r\n */\r\nexport function renderStatic(onRender: () => string, namespace?: string): { html: string; css: string } {\r\n  const stylesheet = Stylesheet.getInstance();\r\n\r\n  stylesheet.setConfig({\r\n    injectionMode: InjectionMode.none,\r\n    namespace\r\n  });\r\n  stylesheet.reset();\r\n\r\n  return {\r\n    html: onRender(),\r\n    css: stylesheet.getRules(true)\r\n  };\r\n}\r\n"]}