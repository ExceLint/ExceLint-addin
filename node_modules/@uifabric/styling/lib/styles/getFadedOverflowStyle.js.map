{"version":3,"file":"getFadedOverflowStyle.js","sourceRoot":"../src/","sources":["styles/getFadedOverflowStyle.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRawStyle } from '@uifabric/merge-styles';\r\nimport { ITheme, ISemanticColors, IPalette } from '../interfaces/index';\r\n\r\ninterface IRGB {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n}\r\n\r\nconst DEFAULT_HEIGHT = '50%';\r\nconst DEFAULT_WIDTH = 20;\r\n\r\n/**\r\n * - Generates a style used to fade out an overflowing content by defining a style for an :after pseudo element.\r\n * - Apply it to the :after selector for all combination of states the parent of content might have (normal, hover, selected, focus).\r\n * - Requires the target to have position set to relative and overflow set to hidden.\r\n *\r\n * @example\r\n * ```tsx\r\n * // Assuming the following DOM structure and the different background colors coming from the parent holding the content.\r\n * <div className={classNames.parent}>\r\n *   <span className={classNames.content}>Overflown Content</span>\r\n * </div>\r\n * ```\r\n * ```ts\r\n * // This is how the style set would look in Component.styles.ts\r\n * const { bodyBackground } = theme.semanticColors;\r\n * const { neutralLighter } = theme.palette;\r\n *\r\n * // The second argument of getFadedOverflowStyle function is a string representing a key of ISemanticColors or IPalette.\r\n *\r\n * const styles = {\r\n *   parent: [\r\n *     backgroundColor: bodyBackground,\r\n *     selectors: {\r\n *       '&:hover: {\r\n *         backgroundColor: neutralLighter\r\n *       },\r\n *       '$content:after': {\r\n *         ...getFadedOverflowStyle(theme, 'bodyBackground')\r\n *       },\r\n *       '&:hover $content:after': {\r\n *         ...getFadedOverflowStyle(theme, 'neutralLighter')\r\n *       }\r\n *     }\r\n *   ],\r\n *   content: [\r\n *     width: '100%',\r\n *     display: 'inline-block',\r\n *     position: 'relative',\r\n *     overflow: 'hidden'\r\n *   ]\r\n * }\r\n * ```\r\n * @param theme - The theme object to use.\r\n * @param color - The background color to fade out to. Accepts only keys of ISemanticColors or IPalette. Defaults to 'bodyBackground'.\r\n * @param direction - The direction of the overflow. Defaults to horizontal.\r\n * @param width - The width of the fading overflow. Vertical direction defaults it to 100% vs 20px when horizontal.\r\n * @param height - The Height of the fading overflow. Vertical direction defaults it to 50% vs 100% when horizontal.\r\n * @returns The style object.\r\n */\r\nexport function getFadedOverflowStyle(\r\n  theme: ITheme,\r\n  color: keyof ISemanticColors | keyof IPalette = 'bodyBackground',\r\n  direction: 'horizontal' | 'vertical' = 'horizontal',\r\n  width: string | number = getDefaultValue('width', direction),\r\n  height: string | number = getDefaultValue('height', direction)\r\n): IRawStyle {\r\n  // Get the color value string from the theme semanticColors or palette.\r\n  const colorValue: string = theme.semanticColors[color as keyof ISemanticColors] || theme.palette[color as keyof IPalette];\r\n  // Get the red, green, blue values of the colorValue.\r\n  const rgbColor: IRGB = color2rgb(colorValue);\r\n  // Apply opacity 0 to serve as a start color of the gradient.\r\n  const rgba = `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0)`;\r\n  // Get the direction of the gradient.\r\n  const gradientDirection = direction === 'vertical' ? 'to bottom' : 'to right'; // mergeStyles take care of RTL direction.\r\n\r\n  return {\r\n    content: '\"\"',\r\n    position: 'absolute',\r\n    right: 0,\r\n    bottom: 0,\r\n    width: width,\r\n    height: height,\r\n    pointerEvents: 'none',\r\n    backgroundImage: `linear-gradient(${gradientDirection}, ${rgba} 0%, ${colorValue} 100%)`\r\n  };\r\n}\r\n\r\n// TODO consider moving this to a separate module along with some more color functions from OUFR/utilities.\r\n/**\r\n * Helper function to convert a string hex color to an RGB object.\r\n *\r\n * @param colorValue - Color to be converted from hex to rgba.\r\n */\r\nfunction color2rgb(colorValue: string): IRGB {\r\n  if (colorValue[0] === '#') {\r\n    // If it's a hex code\r\n    return {\r\n      r: parseInt(colorValue.slice(1, 3), 16),\r\n      g: parseInt(colorValue.slice(3, 5), 16),\r\n      b: parseInt(colorValue.slice(5, 7), 16)\r\n    };\r\n  } else if (colorValue.indexOf('rgba(') === 0) {\r\n    // If it's an rgba color string\r\n    colorValue = colorValue.match(/rgba\\(([^)]+)\\)/)![1];\r\n    const parts = colorValue.split(/ *, */).map(Number);\r\n\r\n    return {\r\n      r: parts[0],\r\n      g: parts[1],\r\n      b: parts[2]\r\n    };\r\n  }\r\n  // The only remaining possibility is transparent.\r\n  return {\r\n    r: 255,\r\n    g: 255,\r\n    b: 255\r\n  };\r\n}\r\n\r\n/**\r\n * Helper function to get the default values for parameters of main function.\r\n *\r\n * @param style - Which style to get the default value for.\r\n * @param direction - What direction to take into consideration.\r\n */\r\nfunction getDefaultValue(style: 'width' | 'height', direction: string): number | string {\r\n  if (style === 'width') {\r\n    return direction === 'horizontal' ? DEFAULT_WIDTH : '100%';\r\n  } else {\r\n    return direction === 'vertical' ? DEFAULT_HEIGHT : '100%';\r\n  }\r\n}\r\n"]}