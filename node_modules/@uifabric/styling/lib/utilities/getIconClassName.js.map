{"version":3,"file":"getIconClassName.js","sourceRoot":"../src/","sources":["utilities/getIconClassName.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAU,MAAM,wBAAwB,CAAC;AAC7D,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAElC,IAAM,iBAAiB,GAAW;IAChC,OAAO,EAAE,cAAc;CACxB,CAAC;AAEF;;;;;GAKG;AACH,MAAM,2BAA2B,IAAY;IAC3C,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;IAE3B,IAAI,IAAI,EAAE;QACR,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,iBAAiB,EAAE;YAChE,SAAS,EAAE;gBACT,UAAU,EAAE;oBACV,OAAO,EAAE,OAAI,IAAI,CAAC,IAAI,OAAG;iBAC1B;aACF;SACF,CAAC,CAAC;KACJ;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import { mergeStyles, IStyle } from '@uifabric/merge-styles';\r\nimport { getIcon } from './icons';\r\n\r\nconst defaultIconStyles: IStyle = {\r\n  display: 'inline-block'\r\n};\r\n\r\n/**\r\n * Gets an icon classname. You should be able to add this classname to an I tag with no\r\n * additional classnames, and render the icon.\r\n *\r\n * @public\r\n */\r\nexport function getIconClassName(name: string): string {\r\n  let className = '';\r\n  const icon = getIcon(name);\r\n\r\n  if (icon) {\r\n    className = mergeStyles(icon.subset.className, defaultIconStyles, {\r\n      selectors: {\r\n        '::before': {\r\n          content: `\"${icon.code}\"`\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return className;\r\n}\r\n"]}