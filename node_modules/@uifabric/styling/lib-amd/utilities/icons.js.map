{"version":3,"file":"icons.js","sourceRoot":"../src/","sources":["utilities/icons.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalSettings, warn } from '@uifabric/utilities';\r\nimport { IRawStyle, IFontFace, fontFace, mergeStyles, Stylesheet } from '@uifabric/merge-styles';\r\n\r\nexport interface IIconSubset {\r\n  fontFace?: IFontFace;\r\n  icons: {\r\n    [key: string]: string | JSX.Element;\r\n  };\r\n\r\n  style?: IRawStyle;\r\n}\r\n\r\nexport interface IIconSubsetRecord extends IIconSubset {\r\n  isRegistered?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport interface IIconRecord {\r\n  code: string | undefined;\r\n  subset: IIconSubsetRecord;\r\n}\r\n\r\nexport interface IIconOptions {\r\n  /**\r\n   * By default, registering the same set of icons will generate a console warning per duplicate icon\r\n   * registered, because this scenario can create unexpected consequences.\r\n   *\r\n   * Some scenarios include:\r\n   *\r\n   * Icon set was previously registered using a different base url.\r\n   * Icon set was previously registered but a different version was provided.\r\n   * Icons in a previous registered set overlap with a new set.\r\n   *\r\n   * To simply ignore previously registered icons, you can specify to disable warnings. This means\r\n   * that if an icon which was previous registered is registered again, it will be silently ignored.\r\n   * However, consider whether the problems listed above will cause issues.\r\n   **/\r\n  disableWarnings: boolean;\r\n\r\n  /**\r\n   * @deprecated\r\n   * Use 'disableWarnings' instead.\r\n   */\r\n  warnOnMissingIcons?: boolean;\r\n}\r\n\r\nexport interface IIconRecords {\r\n  __options: IIconOptions;\r\n  __remapped: { [key: string]: string };\r\n  [key: string]: IIconRecord | {};\r\n}\r\n\r\nconst ICON_SETTING_NAME = 'icons';\r\n\r\nconst _iconSettings = GlobalSettings.getValue<IIconRecords>(ICON_SETTING_NAME, {\r\n  __options: {\r\n    disableWarnings: false,\r\n    warnOnMissingIcons: true\r\n  },\r\n  __remapped: {}\r\n});\r\n\r\n// Reset icon registration on stylesheet resets.\r\nconst stylesheet = Stylesheet.getInstance();\r\n\r\nif (stylesheet && stylesheet.onReset) {\r\n  stylesheet.onReset(() => {\r\n    for (const name in _iconSettings) {\r\n      if (_iconSettings.hasOwnProperty(name) && !!(_iconSettings[name] as IIconRecord).subset) {\r\n        (_iconSettings[name] as IIconRecord).subset.className = undefined;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Normalizes an icon name for consistent mapping.\r\n * Current implementation is to convert the icon name to lower case.\r\n *\r\n * @param name - Icon name to normalize.\r\n * @returns {string} Normalized icon name to use for indexing and mapping.\r\n */\r\nconst normalizeIconName = (name: string): string => name.toLowerCase();\r\n\r\n/**\r\n * Registers a given subset of icons.\r\n *\r\n * @param iconSubset - the icon subset definition.\r\n */\r\nexport function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void {\r\n  let subset = {\r\n    ...iconSubset,\r\n    isRegistered: false,\r\n    className: undefined\r\n  };\r\n  let { icons } = iconSubset;\r\n\r\n  // Grab options, optionally mix user provided ones on top.\r\n  options = options ? { ..._iconSettings.__options, ...options } : _iconSettings.__options;\r\n\r\n  for (const iconName in icons) {\r\n    if (icons.hasOwnProperty(iconName)) {\r\n      const code = icons[iconName];\r\n      const normalizedIconName = normalizeIconName(iconName);\r\n\r\n      if (_iconSettings[normalizedIconName]) {\r\n        _warnDuplicateIcon(iconName);\r\n      } else {\r\n        _iconSettings[normalizedIconName] = {\r\n          code,\r\n          subset\r\n        };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Unregisters icons by name.\r\n *\r\n * @param iconNames - List of icons to unregister.\r\n */\r\nexport function unregisterIcons(iconNames: string[]): void {\r\n  const options = _iconSettings.__options;\r\n\r\n  for (const iconName of iconNames) {\r\n    const normalizedIconName = normalizeIconName(iconName);\r\n    if (_iconSettings[normalizedIconName]) {\r\n      delete _iconSettings[normalizedIconName];\r\n    } else {\r\n      // Warn that we are trying to delete an icon that doesn't exist\r\n      if (!options.disableWarnings) {\r\n        warn(`The icon \"${iconName}\" tried to unregister but was not registered.`);\r\n      }\r\n    }\r\n\r\n    // Delete any aliases for this iconName\r\n    if (_iconSettings.__remapped[normalizedIconName]) {\r\n      delete _iconSettings.__remapped[normalizedIconName];\r\n    }\r\n\r\n    // Delete any items that were an alias for this iconName\r\n    Object.keys(_iconSettings.__remapped).forEach((key: string) => {\r\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\r\n        delete _iconSettings.__remapped[key];\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Remaps one icon name to another.\r\n */\r\nexport function registerIconAlias(iconName: string, mappedToName: string): void {\r\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\r\n}\r\n\r\n/**\r\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\r\n * it will get registered immediately.\r\n *\r\n * @public\r\n * @param name - Name of icon.\r\n */\r\nexport function getIcon(name?: string): IIconRecord | undefined {\r\n  let icon: IIconRecord | undefined = undefined;\r\n  const options = _iconSettings.__options;\r\n\r\n  name = name ? normalizeIconName(name) : '';\r\n  name = _iconSettings.__remapped[name] || name;\r\n\r\n  if (name) {\r\n    icon = _iconSettings[name!] as IIconRecord;\r\n\r\n    if (icon) {\r\n      let { subset } = icon;\r\n      if (subset && subset.fontFace) {\r\n        if (!subset.isRegistered) {\r\n          fontFace(subset.fontFace);\r\n          subset.isRegistered = true;\r\n        }\r\n\r\n        if (!subset.className) {\r\n          subset.className = mergeStyles(subset.style, {\r\n            fontFamily: subset.fontFace.fontFamily,\r\n            fontWeight: subset.fontFace.fontWeight || 'normal',\r\n            fontStyle: subset.fontFace.fontStyle || 'normal'\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\r\n        warn(`The icon \"${name}\" was used but not registered. See http://aka.ms/fabric-icon-usage for more information.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return icon;\r\n}\r\n\r\n/**\r\n * Sets the icon options.\r\n *\r\n * @public\r\n */\r\nexport function setIconOptions(options: Partial<IIconOptions>): void {\r\n  _iconSettings.__options = {\r\n    ..._iconSettings.__options,\r\n    ...options\r\n  };\r\n}\r\n\r\nlet _missingIcons: string[] = [];\r\nlet _missingIconsTimer: number | undefined = undefined;\r\n\r\nfunction _warnDuplicateIcon(iconName: string): void {\r\n  const options = _iconSettings.__options;\r\n  const warningDelay = 2000;\r\n  const maxIconsInMessage = 10;\r\n\r\n  if (!options.disableWarnings) {\r\n    _missingIcons.push(iconName);\r\n    if (_missingIconsTimer === undefined) {\r\n      _missingIconsTimer = setTimeout(() => {\r\n        warn(\r\n          `Some icons were re-registered. Applications should only call registerIcons for any given ` +\r\n            `icon once. Redefining what an icon is may have unintended consequences. Duplicates ` +\r\n            `include: \\n` +\r\n            _missingIcons.slice(0, maxIconsInMessage).join(', ') +\r\n            (_missingIcons.length > maxIconsInMessage ? ` (+ ${_missingIcons.length - maxIconsInMessage} more)` : '')\r\n        );\r\n        _missingIconsTimer = undefined;\r\n        _missingIcons = [];\r\n      }, warningDelay);\r\n    }\r\n  }\r\n}\r\n"]}