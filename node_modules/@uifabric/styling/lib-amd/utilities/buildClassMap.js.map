{"version":3,"file":"buildClassMap.js","sourceRoot":"../src/","sources":["utilities/buildClassMap.ts"],"names":[],"mappings":";;;IAEA;;;;;OAKG;IACH,uBAAiC,MAAS;QACxC,IAAI,OAAO,GAAkC,EAAE,CAAC;gCAEvC,SAAS;YAChB,IAAI,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;gBACpC,IAAI,WAAiB,CAAC;gBAEtB,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,SAAS,EAAE;oBACxC,GAAG,EAAE;wBACH,IAAI,WAAS,KAAK,SAAS,EAAE;4BAC3B,kCAAkC;4BAClC,WAAS,GAAG,yBAAW,CAAC,MAAM,CAAC,SAAS,CAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;yBAC9D;wBACD,OAAO,WAAS,CAAC;oBACnB,CAAC;oBACD,UAAU,EAAE,IAAI;oBAChB,YAAY,EAAE,IAAI;iBACnB,CAAC,CAAC;aACJ;QACH,CAAC;QAhBD,KAAK,IAAI,SAAS,IAAI,MAAM;oBAAnB,SAAS;SAgBjB;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAtBD,sCAsBC","sourcesContent":["import { mergeStyles } from '../MergeStyles';\r\n\r\n/**\r\n * Builds a class names object from a given map.\r\n *\r\n * @param styles - Map of unprocessed styles.\r\n * @returns Map of property name to class name.\r\n */\r\nexport function buildClassMap<T>(styles: T): { [key in keyof T]?: string } {\r\n  let classes: { [key in keyof T]?: string } = {};\r\n\r\n  for (let styleName in styles) {\r\n    if (styles.hasOwnProperty(styleName)) {\r\n      let className: string;\r\n\r\n      Object.defineProperty(classes, styleName, {\r\n        get: (): string => {\r\n          if (className === undefined) {\r\n            // tslint:disable-next-line:no-any\r\n            className = mergeStyles(styles[styleName] as any).toString();\r\n          }\r\n          return className;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n      });\r\n    }\r\n  }\r\n\r\n  return classes;\r\n}\r\n"]}