define(["require", "exports", "tslib", "@uifabric/utilities", "./DefaultFontStyles", "./DefaultPalette", "./DefaultSpacing", "@microsoft/load-themed-styles", "./DefaultEffects"], function (require, exports, tslib_1, utilities_1, DefaultFontStyles_1, DefaultPalette_1, DefaultSpacing_1, load_themed_styles_1, DefaultEffects_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _theme = createTheme({
        palette: DefaultPalette_1.DefaultPalette,
        semanticColors: _makeSemanticColorsFromPalette(DefaultPalette_1.DefaultPalette, false, false),
        fonts: DefaultFontStyles_1.DefaultFontStyles,
        isInverted: false,
        disableGlobalClassNames: false
    });
    var _onThemeChangeCallbacks = [];
    exports.ThemeSettingName = 'theme';
    if (!utilities_1.Customizations.getSettings([exports.ThemeSettingName]).theme) {
        var win = typeof window !== 'undefined' ? window : undefined;
        // tslint:disable:no-string-literal no-any
        if (win && win['FabricConfig'] && win['FabricConfig'].theme) {
            _theme = createTheme(win['FabricConfig'].theme);
        }
        // tslint:enable:no-string-literal no-any
        // Set the default theme.
        utilities_1.Customizations.applySettings((_a = {}, _a[exports.ThemeSettingName] = _theme, _a));
    }
    /**
     * Gets the theme object
     * @param depComments - Whether to include deprecated tags as comments for deprecated slots.
     */
    function getTheme(depComments) {
        if (depComments === void 0) { depComments = false; }
        if (depComments === true) {
            _theme = createTheme({}, depComments);
        }
        return _theme;
    }
    exports.getTheme = getTheme;
    /**
     * Registers a callback that gets called whenever the theme changes.
     * This should only be used when the component cannot automatically get theme changes through its state.
     * This will not register duplicate callbacks.
     */
    function registerOnThemeChangeCallback(callback) {
        if (_onThemeChangeCallbacks.indexOf(callback) === -1) {
            _onThemeChangeCallbacks.push(callback);
        }
    }
    exports.registerOnThemeChangeCallback = registerOnThemeChangeCallback;
    /**
     * See registerOnThemeChangeCallback().
     * Removes previously registered callbacks.
     */
    function removeOnThemeChangeCallback(callback) {
        var i = _onThemeChangeCallbacks.indexOf(callback);
        if (i === -1) {
            return;
        }
        _onThemeChangeCallbacks.splice(i, 1);
    }
    exports.removeOnThemeChangeCallback = removeOnThemeChangeCallback;
    /**
     * Applies the theme, while filling in missing slots.
     * @param theme - Partial theme object.
     * @param depComments - Whether to include deprecated tags as comments for deprecated slots.
     */
    function loadTheme(theme, depComments) {
        if (depComments === void 0) { depComments = false; }
        _theme = createTheme(theme, depComments);
        // Invoke the legacy method of theming the page as well.
        load_themed_styles_1.loadTheme(tslib_1.__assign({}, _theme.palette, _theme.semanticColors, _loadFonts(_theme)));
        utilities_1.Customizations.applySettings((_a = {}, _a[exports.ThemeSettingName] = _theme, _a));
        _onThemeChangeCallbacks.forEach(function (callback) {
            try {
                callback(_theme);
            }
            catch (e) {
                // don't let a bad callback break everything else
            }
        });
        return _theme;
        var _a;
    }
    exports.loadTheme = loadTheme;
    /**
     * Loads font variables into a JSON object.
     * @param theme - The theme object
     */
    function _loadFonts(theme) {
        var lines = {};
        for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {
            var fontName = _a[_i];
            var font = theme.fonts[fontName];
            for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {
                var propName = _c[_b];
                var name_1 = 'ms-font-' + fontName + '-' + propName;
                lines[name_1] = "\"[theme:" + name_1 + ", default: " + font[propName] + "]\"";
            }
        }
        return lines;
    }
    /**
     * Creates a custom theme definition which can be used with the Customizer.
     * @param theme - Partial theme object.
     * @param depComments - Whether to include deprecated tags as comments for deprecated slots.
     */
    function createTheme(theme, depComments) {
        if (depComments === void 0) { depComments = false; }
        var newPalette = tslib_1.__assign({}, DefaultPalette_1.DefaultPalette, theme.palette);
        if (!theme.palette || !theme.palette.accent) {
            newPalette.accent = newPalette.themePrimary;
        }
        // mix in custom overrides with good slots first, since custom overrides might be used in fixing deprecated slots
        var newSemanticColors = tslib_1.__assign({}, _makeSemanticColorsFromPalette(newPalette, !!theme.isInverted, depComments), theme.semanticColors);
        var defaultFontStyles = tslib_1.__assign({}, DefaultFontStyles_1.DefaultFontStyles);
        if (theme.defaultFontStyle) {
            for (var _i = 0, _a = Object.keys(defaultFontStyles); _i < _a.length; _i++) {
                var fontStyle = _a[_i];
                defaultFontStyles[fontStyle] = utilities_1.merge({}, defaultFontStyles[fontStyle], theme.defaultFontStyle);
            }
        }
        if (theme.fonts) {
            for (var _b = 0, _c = Object.keys(theme.fonts); _b < _c.length; _b++) {
                var fontStyle = _c[_b];
                defaultFontStyles[fontStyle] = utilities_1.merge({}, defaultFontStyles[fontStyle], theme.fonts[fontStyle]);
            }
        }
        return {
            palette: newPalette,
            fonts: tslib_1.__assign({}, defaultFontStyles),
            semanticColors: newSemanticColors,
            isInverted: !!theme.isInverted,
            disableGlobalClassNames: !!theme.disableGlobalClassNames,
            spacing: tslib_1.__assign({}, DefaultSpacing_1.DefaultSpacing, theme.spacing),
            effects: tslib_1.__assign({}, DefaultEffects_1.DefaultEffects, theme.effects)
        };
    }
    exports.createTheme = createTheme;
    /**
     * Helper to pull a given property name from a given set of sources, in order, if available. Otherwise returns the property name.
     */
    function _expandFrom(propertyName) {
        var maps = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            maps[_i - 1] = arguments[_i];
        }
        if (propertyName) {
            for (var _a = 0, maps_1 = maps; _a < maps_1.length; _a++) {
                var map = maps_1[_a];
                if (map[propertyName]) {
                    return map[propertyName];
                }
            }
        }
        return propertyName;
    }
    // Generates all the semantic slot colors based on the Fabric palette.
    // We'll use these as fallbacks for semantic slots that the passed in theme did not define.
    function _makeSemanticColorsFromPalette(p, isInverted, depComments) {
        var toReturn = {
            bodyBackground: p.white,
            bodyStandoutBackground: p.neutralLighterAlt,
            bodyFrameBackground: p.white,
            bodyFrameDivider: p.neutralLight,
            bodyText: p.neutralPrimary,
            bodyTextChecked: p.black,
            bodySubtext: p.neutralSecondary,
            bodyDivider: p.neutralLight,
            disabledBackground: p.neutralLighter,
            disabledText: p.neutralTertiary,
            disabledBodyText: p.neutralTertiary,
            disabledSubtext: p.neutralQuaternary,
            disabledBodySubtext: p.neutralTertiaryAlt,
            focusBorder: p.neutralSecondary,
            variantBorder: p.neutralLight,
            variantBorderHovered: p.neutralTertiary,
            defaultStateBackground: p.neutralLighterAlt,
            errorText: !isInverted ? p.redDark : '#ff5f5f',
            warningText: !isInverted ? '#333333' : '#ffffff',
            errorBackground: !isInverted ? 'rgba(232, 17, 35, .2)' : 'rgba(232, 17, 35, .5)',
            blockingBackground: !isInverted ? 'rgba(234, 67, 0, .2)' : 'rgba(234, 67, 0, .5)',
            warningBackground: !isInverted ? 'rgba(255, 185, 0, .2)' : 'rgba(255, 251, 0, .6)',
            warningHighlight: !isInverted ? '#ffb900' : '#fff100',
            successBackground: !isInverted ? 'rgba(186, 216, 10, .2)' : 'rgba(186, 216, 10, .4)',
            inputBorder: p.neutralTertiary,
            inputBorderHovered: p.neutralPrimary,
            inputBackground: p.white,
            inputBackgroundChecked: p.themePrimary,
            inputBackgroundCheckedHovered: p.themeDarkAlt,
            inputForegroundChecked: p.white,
            inputFocusBorderAlt: p.themePrimary,
            smallInputBorder: p.neutralSecondary,
            inputText: p.neutralPrimary,
            inputTextHovered: p.neutralDark,
            inputPlaceholderText: p.neutralSecondary,
            buttonBackground: p.neutralLighter,
            buttonBackgroundChecked: p.neutralTertiaryAlt,
            buttonBackgroundHovered: p.neutralLight,
            buttonBackgroundCheckedHovered: p.neutralLight,
            buttonBackgroundPressed: p.neutralLight,
            buttonBackgroundDisabled: p.neutralLighter,
            buttonBorder: 'transparent',
            buttonText: p.neutralPrimary,
            buttonTextHovered: p.neutralDark,
            buttonTextChecked: p.neutralDark,
            buttonTextCheckedHovered: p.black,
            buttonTextPressed: p.neutralDark,
            buttonTextDisabled: p.neutralTertiary,
            buttonBorderDisabled: 'transparent',
            primaryButtonBackground: p.themePrimary,
            primaryButtonBackgroundHovered: p.themeDarkAlt,
            primaryButtonBackgroundPressed: p.themeDark,
            primaryButtonBackgroundDisabled: p.neutralLighter,
            primaryButtonBorder: 'transparent',
            primaryButtonText: p.white,
            primaryButtonTextHovered: p.white,
            primaryButtonTextPressed: p.white,
            primaryButtonTextDisabled: p.neutralQuaternary,
            accentButtonBackground: p.accent,
            accentButtonText: p.white,
            menuBackground: p.white,
            menuDivider: p.neutralTertiaryAlt,
            menuIcon: p.themePrimary,
            menuHeader: p.themePrimary,
            menuItemBackgroundHovered: p.neutralLighter,
            menuItemBackgroundPressed: p.neutralLight,
            menuItemText: p.neutralPrimary,
            menuItemTextHovered: p.neutralDark,
            listBackground: p.white,
            listText: p.neutralPrimary,
            listItemBackgroundHovered: p.neutralLighter,
            listItemBackgroundChecked: p.neutralLight,
            listItemBackgroundCheckedHovered: p.neutralQuaternaryAlt,
            listHeaderBackgroundHovered: p.neutralLighter,
            listHeaderBackgroundPressed: p.neutralLight,
            actionLink: p.neutralPrimary,
            actionLinkHovered: p.neutralDark,
            link: p.themePrimary,
            linkHovered: p.themeDarker,
            // Deprecated slots, second pass by _fixDeprecatedSlots() later for self-referential slots
            listTextColor: '',
            menuItemBackgroundChecked: p.neutralLight
        };
        return _fixDeprecatedSlots(toReturn, depComments);
    }
    function _fixDeprecatedSlots(s, depComments) {
        // Add @deprecated tag as comment if enabled
        var dep = '';
        if (depComments === true) {
            dep = ' /* @deprecated */';
        }
        s.listTextColor = s.listText + dep;
        s.menuItemBackgroundChecked += dep;
        return s;
    }
    var _a;
});
//# sourceMappingURL=theme.js.map