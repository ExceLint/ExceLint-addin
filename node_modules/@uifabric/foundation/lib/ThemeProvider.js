import * as tslib_1 from "tslib";
import * as React from 'react';
import { getThemedContext } from '@uifabric/styling';
import { Customizer } from '@uifabric/utilities';
/**
 * Theme provider is a simplified version of Customizer that activates the appropriate theme data
 * for a given scheme name.
 *
 * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.
 */
export var ThemeProvider = function (props) {
    var scheme = props.scheme, theme = props.theme, rest = tslib_1.__rest(props, ["scheme", "theme"]);
    // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme in context
    //        and uses quick global store accessor to trigger change by passing in theme object as child and triggering re-render.
    //        (perf benefits need verification)
    // tslint:disable-next-line:typedef
    var contextTransform = function (context) {
        return getThemedContext(context, scheme, theme);
    };
    return React.createElement(Customizer, tslib_1.__assign({}, rest, { contextTransform: contextTransform }));
};
//# sourceMappingURL=ThemeProvider.js.map