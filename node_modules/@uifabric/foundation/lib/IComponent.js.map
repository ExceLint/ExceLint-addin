{"version":3,"file":"IComponent.js","sourceRoot":"../src/","sources":["IComponent.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle, IStyleSet, ITheme } from '@uifabric/styling';\r\n\r\n// TODO: Known TypeScript issue is widening return type checks when using function type declarations.\r\n//        Effect is that mistyped property keys on returned style objects will not generate errors.\r\n//        This affects lookup types used as functional decorations on IComponent and IStatelessComponent, e.g.:\r\n//        export const styles: IStackComponent['styles'] = props => {\r\n//        Existing issue: https://github.com/Microsoft/TypeScript/issues/241\r\n\r\n/**\r\n * Helper interface for accessing user props children.\r\n */\r\nexport type IPropsWithChildren<TProps> = TProps & { children?: React.ReactNode };\r\n\r\n/**\r\n * Helper type defining style sections, one for each component slot.\r\n */\r\nexport type IComponentStyles<TSlots> = { [key in keyof TSlots]?: IStyle };\r\n\r\n/**\r\n * Function declaration for component styles functions.\r\n */\r\nexport type IStylesFunction<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> = (\r\n  props: TViewProps,\r\n  theme: ITheme,\r\n  tokens: TTokens\r\n) => TStyleSet;\r\n\r\n/**\r\n * Composite type for component styles functions and objects.\r\n */\r\nexport type IStylesFunctionOrObject<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> =\r\n  | IStylesFunction<TViewProps, TTokens, TStyleSet>\r\n  | TStyleSet;\r\n\r\n/**\r\n * Tokens can be defined as an object, function, or an array of objects and functions.\r\n */\r\nexport type IToken<TViewProps, TTokens> = ITokenBase<TViewProps, TTokens> | ITokenBaseArray<TViewProps, TTokens>;\r\n\r\n/**\r\n * Function declaration for component token functions.\r\n */\r\nexport type ITokenFunction<TViewProps, TTokens> = (props: TViewProps, theme: ITheme) => IToken<TViewProps, TTokens>;\r\n\r\n/**\r\n * Composite type for component token functions and objects.\r\n */\r\nexport type ITokenFunctionOrObject<TViewProps, TTokens> = ITokenFunction<TViewProps, TTokens> | TTokens;\r\n\r\n/**\r\n * Composite base type that includes all possible resolutions of token functions in an array.\r\n */\r\nexport type ITokenBase<TViewProps, TTokens> = ITokenFunctionOrObject<TViewProps, TTokens> | false | null | undefined;\r\n\r\n/**\r\n * Composite token base array type allowing for token objects, functions, and function resolutions.\r\n */\r\nexport interface ITokenBaseArray<TViewProps, TTokens> extends Array<IToken<TViewProps, TTokens>> {}\r\n\r\n/**\r\n * Optional props for styleable components. If these props are present, they will automatically be\r\n * used by Foundation when applying theming and styling.\r\n */\r\nexport interface IStyleableComponentProps<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> {\r\n  className?: string;\r\n  styles?: IStylesFunctionOrObject<TViewProps, TTokens, TStyleSet>;\r\n  theme?: ITheme;\r\n  tokens?: ITokenFunctionOrObject<TViewProps, TTokens>;\r\n}\r\n\r\nexport type ICustomizationProps<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>> = IStyleableComponentProps<\r\n  TViewProps,\r\n  TTokens,\r\n  TStyleSet\r\n> &\r\n  Required<Pick<IStyleableComponentProps<TViewProps, TTokens, TStyleSet>, 'theme'>>;\r\n\r\n/**\r\n * Enforce props contract on state components, including the view prop and its shape.\r\n */\r\nexport type IStateComponentProps<TComponentProps, TViewProps> = TComponentProps & {\r\n  renderView: IViewRenderer<TViewProps>;\r\n};\r\n\r\n/**\r\n * Imposed state component props contract with styling props as well as a renderView\r\n * prop that the StateComponent should make use of in its render output (and should be its only render output.)\r\n */\r\nexport type IStateComponentType<TComponentProps, TViewProps> = React.ComponentType<IStateComponentProps<TComponentProps, TViewProps>>;\r\n\r\n/**\r\n * Defines a view component.\r\n */\r\nexport type IViewComponent<TViewProps> = (props: IPropsWithChildren<TViewProps>) => JSX.Element | null;\r\n\r\n/**\r\n * Handles rendering view component.\r\n */\r\nexport type IViewRenderer<TViewProps> = (props?: TViewProps) => JSX.Element | null;\r\n\r\n/**\r\n * Component used by foundation to tie elements together.\r\n *\r\n * * TComponentProps: A styleable props interface for the created component.\r\n * * TTokens: The type for tokens props.\r\n * * TStyleSet: The type for styles properties.\r\n * * TViewProps: The props specific to the view, including processed properties outputted by optional state component. If state\r\n * component is not provided, TComponentProps is the same as TViewProps.\r\n * * TStatics: Static type for statics applied to created component object.\r\n */\r\nexport interface IComponent<TComponentProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>, TViewProps = TComponentProps, TStatics = {}> {\r\n  /**\r\n   * Display name to identify component in React hierarchy.\r\n   */\r\n  displayName: string;\r\n  /**\r\n   * List of fields which can be customized.\r\n   */\r\n  fields?: string[];\r\n  /**\r\n   * Styles prop to pass into component.\r\n   */\r\n  styles?: IStylesFunctionOrObject<TViewProps, TTokens, TStyleSet>;\r\n  /**\r\n   * React view component.\r\n   */\r\n  view: IViewComponent<TViewProps>;\r\n  /**\r\n   * Optional state component that processes TComponentProps into TViewProps.\r\n   */\r\n  state?: IStateComponentType<TComponentProps, TViewProps>;\r\n  /**\r\n   * Optional static object to assign to constructed component.\r\n   */\r\n  statics?: TStatics;\r\n  /**\r\n   * Tokens prop to pass into component.\r\n   */\r\n  tokens?: ITokenFunctionOrObject<TViewProps, TTokens>;\r\n  /**\r\n   * Default prop for which to map primitive values.\r\n   */\r\n  factoryOptions?: IFactoryOptions<TComponentProps>;\r\n}\r\n\r\n/**\r\n * Factory options for creating component.\r\n */\r\nexport interface IFactoryOptions<TProps> {\r\n  /**\r\n   * Default prop for which to map primitive values.\r\n   */\r\n  defaultProp?: keyof TProps | 'children';\r\n}\r\n"]}