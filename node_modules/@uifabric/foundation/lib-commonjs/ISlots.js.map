{"version":3,"file":"ISlots.js","sourceRoot":"../src/","sources":["ISlots.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle } from '@uifabric/styling';\r\nimport { IComponentStyles, IPropsWithChildren } from './IComponent';\r\n\r\n/**\r\n * Signature of components that have component factories.\r\n */\r\nexport interface ISlotCreator<TProps> {\r\n  create?: ISlotFactory<TProps>;\r\n}\r\n\r\n/**\r\n * Slottable version of React.ComponentType.\r\n */\r\nexport type ISlottableComponentType<TProps> = React.ComponentType<TProps> & ISlotCreator<TProps>;\r\n\r\n/**\r\n * Slottable version of React.ReactType.\r\n */\r\nexport type ISlottableReactType<TProps> = React.ReactType<TProps> & ISlotCreator<TProps>;\r\n\r\n/**\r\n * Props generated by Foundation.\r\n */\r\nexport interface IProcessedSlotProps {\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * An interface for defining slots. Each key in TSlot must point to an ISlottableType.\r\n */\r\nexport type ISlotDefinition<TSlots> = { [prop in keyof TSlots]: ISlottableReactType<TSlots[prop]> };\r\n\r\n/**\r\n * Created Slot structure used for rendering by components.\r\n */\r\nexport type ISlot<TProps> = ((componentProps: IPropsWithChildren<TProps> | undefined | null) => JSX.Element) & { isSlot?: boolean };\r\n\r\n/**\r\n * Interface for a slot factory that consumes both componnent and user slot prop and generates rendered output.\r\n */\r\nexport type ISlotFactory<TProps> = (\r\n  componentProps: TProps & IProcessedSlotProps,\r\n  userProps: ISlotPropRenderFunction<TProps> | (ISlotPropValue<TProps> & IProcessedSlotProps) | undefined,\r\n  defaultStyles: IStyle\r\n) => JSX.Element;\r\n\r\n/**\r\n * Interface for aggregated slots objects used internally by components.\r\n */\r\nexport type ISlots<TSlots> = { [slot in keyof TSlots]: ISlot<TSlots[slot]> };\r\nexport type ISlotProps<TProps extends TSlots, TSlots> = { [key in keyof TSlots]: ISlotProp<TProps[key]> };\r\n\r\n/**\r\n * User properties that are automatically applied by Slot utilities using slot name.\r\n */\r\nexport interface IDefaultSlotProps<TSlots> {\r\n  _defaultStyles: IComponentStyles<TSlots>;\r\n}\r\n\r\n/**\r\n * Slot type used for defining Slot props. This interface defines the following slot properties:\r\n *    1. ISlotPropValue.\r\n *    2. ISlotRender function.\r\n */\r\nexport type ISlotProp<TProps, TShorthandPropType = never> =\r\n  | ISlotPropValue<TProps, TShorthandPropType>\r\n  | ISlotPropRenderFunction<TProps, TShorthandPropType>;\r\n\r\n/**\r\n * Slot type used for defining Slot props. This interface defines the following slot properties:\r\n *    1. Component props object (defined by TProps.)\r\n *    2. ISlotRender function.\r\n *    3. Optional shorthand prop type, defined by TShorthandPropType.\r\n * The conditional type check automatically applies 'children' prop to TProps if TShorthandPropType is ReactNode.\r\n */\r\nexport type ISlotPropValue<TProps, TShorthandPropType = never> =\r\n  | TShorthandPropType\r\n  | TProps\r\n  | (TShorthandPropType extends React.ReactNode ? IPropsWithChildren<TProps> : never);\r\n\r\n/**\r\n * Render function interface used by Slot props.\r\n */\r\nexport type ISlotPropRenderFunction<TProps, TShorthandPropType = never> = (\r\n  render: ISlotRenderer<TProps, TShorthandPropType>\r\n) => JSX.Element;\r\n\r\n/**\r\n * Render function interface used by Slot props.\r\n */\r\nexport type ISlotRenderer<TProps, TShorthandPropType = never> = (\r\n  renderContent: ISlotRender<TProps>,\r\n  props?: ISlotPropValue<TProps, TShorthandPropType>\r\n) => JSX.Element;\r\n\r\n/**\r\n * Content rendering provided by component.\r\n */\r\nexport type ISlotRender<TProps> = (componentType: React.ReactType<TProps>, props: TProps) => JSX.Element;\r\n"]}