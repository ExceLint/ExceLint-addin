/// <reference types="react" />
import { IStyle } from '@uifabric/styling';
import { IComponentStyles, IPropsWithChildren } from './IComponent';
/**
 * Signature of components that have component factories.
 */
export interface ISlotCreator<TProps> {
    create?: ISlotFactory<TProps>;
}
/**
 * Slottable version of React.ComponentType.
 */
export declare type ISlottableComponentType<TProps> = React.ComponentType<TProps> & ISlotCreator<TProps>;
/**
 * Slottable version of React.ReactType.
 */
export declare type ISlottableReactType<TProps> = React.ReactType<TProps> & ISlotCreator<TProps>;
/**
 * Props generated by Foundation.
 */
export interface IProcessedSlotProps {
    className?: string;
}
/**
 * An interface for defining slots. Each key in TSlot must point to an ISlottableType.
 */
export declare type ISlotDefinition<TSlots> = {
    [prop in keyof TSlots]: ISlottableReactType<TSlots[prop]>;
};
/**
 * Created Slot structure used for rendering by components.
 */
export declare type ISlot<TProps> = ((componentProps: IPropsWithChildren<TProps> | undefined | null) => JSX.Element) & {
    isSlot?: boolean;
};
/**
 * Interface for a slot factory that consumes both componnent and user slot prop and generates rendered output.
 */
export declare type ISlotFactory<TProps> = (componentProps: TProps & IProcessedSlotProps, userProps: ISlotPropRenderFunction<TProps> | (ISlotPropValue<TProps> & IProcessedSlotProps) | undefined, defaultStyles: IStyle) => JSX.Element;
/**
 * Interface for aggregated slots objects used internally by components.
 */
export declare type ISlots<TSlots> = {
    [slot in keyof TSlots]: ISlot<TSlots[slot]>;
};
export declare type ISlotProps<TProps extends TSlots, TSlots> = {
    [key in keyof TSlots]: ISlotProp<TProps[key]>;
};
/**
 * User properties that are automatically applied by Slot utilities using slot name.
 */
export interface IDefaultSlotProps<TSlots> {
    _defaultStyles: IComponentStyles<TSlots>;
}
/**
 * Slot type used for defining Slot props. This interface defines the following slot properties:
 *    1. ISlotPropValue.
 *    2. ISlotRender function.
 */
export declare type ISlotProp<TProps, TShorthandPropType = never> = ISlotPropValue<TProps, TShorthandPropType> | ISlotPropRenderFunction<TProps, TShorthandPropType>;
/**
 * Slot type used for defining Slot props. This interface defines the following slot properties:
 *    1. Component props object (defined by TProps.)
 *    2. ISlotRender function.
 *    3. Optional shorthand prop type, defined by TShorthandPropType.
 * The conditional type check automatically applies 'children' prop to TProps if TShorthandPropType is ReactNode.
 */
export declare type ISlotPropValue<TProps, TShorthandPropType = never> = TShorthandPropType | TProps | (TShorthandPropType extends React.ReactNode ? IPropsWithChildren<TProps> : never);
/**
 * Render function interface used by Slot props.
 */
export declare type ISlotPropRenderFunction<TProps, TShorthandPropType = never> = (render: ISlotRenderer<TProps, TShorthandPropType>) => JSX.Element;
/**
 * Render function interface used by Slot props.
 */
export declare type ISlotRenderer<TProps, TShorthandPropType = never> = (renderContent: ISlotRender<TProps>, props?: ISlotPropValue<TProps, TShorthandPropType>) => JSX.Element;
/**
 * Content rendering provided by component.
 */
export declare type ISlotRender<TProps> = (componentType: React.ReactType<TProps>, props: TProps) => JSX.Element;
