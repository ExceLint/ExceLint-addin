{"version":3,"file":"ThemeProvider.js","sourceRoot":"../src/","sources":["ThemeProvider.tsx"],"names":[],"mappings":";;;IASA;;;;;OAKG;IACU,QAAA,aAAa,GAAkD,UAAC,KAA0B;QAC7F,IAAA,qBAAM,EAAE,mBAAK,EAAE,iDAAO,CAAW;QAEzC,0HAA0H;QAC1H,8HAA8H;QAC9H,2CAA2C;QAC3C,mCAAmC;QACnC,IAAM,gBAAgB,GAAyC,UAAA,OAAO;YACpE,OAAO,0BAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC;QAEF,OAAO,oBAAC,sBAAU,uBAAK,IAAI,IAAE,gBAAgB,EAAE,gBAAgB,IAAI,CAAC;IACtE,CAAC,CAAC","sourcesContent":["import * as React from 'react';\r\nimport { getThemedContext, ISchemeNames, ITheme } from '@uifabric/styling';\r\nimport { Customizer, ICustomizerProps } from '@uifabric/utilities';\r\n\r\nexport interface IThemeProviderProps {\r\n  scheme?: ISchemeNames;\r\n  theme?: ITheme;\r\n}\r\n\r\n/**\r\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\r\n * for a given scheme name.\r\n *\r\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\r\n */\r\nexport const ThemeProvider: React.StatelessComponent<IThemeProviderProps> = (props: IThemeProviderProps) => {\r\n  const { scheme, theme, ...rest } = props;\r\n\r\n  // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme in context\r\n  //        and uses quick global store accessor to trigger change by passing in theme object as child and triggering re-render.\r\n  //        (perf benefits need verification)\r\n  // tslint:disable-next-line:typedef\r\n  const contextTransform: ICustomizerProps['contextTransform'] = context => {\r\n    return getThemedContext(context, scheme, theme);\r\n  };\r\n\r\n  return <Customizer {...rest} contextTransform={contextTransform} />;\r\n};\r\n"]}