{"version":3,"file":"useRefEffect.js","sourceRoot":"../src/","sources":["useRefEffect.ts"],"names":[],"mappings":";;;IAOA;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,SAAgB,YAAY,CAAI,QAA2C,EAAE,OAAwB;QAAxB,wBAAA,EAAA,cAAwB;QAOnG,IAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAU;YACjC,GAAG,EAAE,MAAM,CAAC,MAAM,CAChB,UAAC,KAAe;gBACd,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,KAAK,KAAK,EAAE;oBAC9B,IAAI,IAAI,CAAC,OAAO,EAAE;wBAChB,IAAI,CAAC,OAAO,EAAE,CAAC;wBACf,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;qBAC1B;oBAED,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC;oBAEzB,IAAI,KAAK,KAAK,IAAI,EAAE;wBAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;qBACrC;iBACF;YACH,CAAC,EACD;gBACE,OAAO,EAAE,OAAO;aACjB,CACF;YACD,QAAQ,UAAA;SACT,CAAC,CAAC,OAAO,CAAC;QAEX,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAjCD,oCAiCC","sourcesContent":["import * as React from 'react';\r\n\r\n/**\r\n * A callback ref function that also has a .current member for the ref's current value.\r\n */\r\nexport type RefCallback<T> = ((value: T | null) => void) & React.RefObject<T>;\r\n\r\n/**\r\n * Creates a ref, and calls a callback whenever the ref changes to a non-null value. The callback can optionally return\r\n * a cleanup function that'll be called before the value changes, and when the ref is unmounted.\r\n *\r\n * This can be used to work around a limitation that useEffect cannot depend on `ref.current` (see\r\n * https://github.com/facebook/react/issues/14387#issuecomment-503616820).\r\n *\r\n * Usage example:\r\n * ```ts\r\n * const myRef = useRefEffect<HTMLElement>(element => {\r\n *  ...\r\n *  return () => { ... cleanup ... };\r\n * });\r\n * ```\r\n * ```jsx\r\n * <div ref={myRef} />\r\n * ```\r\n *\r\n * @param callback - Called whenever the ref's value changes to non-null. Can optionally return a cleanup function.\r\n * @param initial - (Optional) The initial value for the ref.\r\n *\r\n * @returns A function that should be called to set the ref's value. The object also has a `.current` member that can be\r\n * used to access the ref's value (like a normal RefObject). It can be hooked up to an element's `ref` property.\r\n */\r\nexport function useRefEffect<T>(callback: (value: T) => (() => void) | void, initial: T | null = null): RefCallback<T> {\r\n  type RefData = {\r\n    ref: ((value: T | null) => void) & React.MutableRefObject<T | null>;\r\n    callback: (value: T) => (() => void) | void;\r\n    cleanup?: (() => void) | void;\r\n  };\r\n\r\n  const data = React.useRef<RefData>({\r\n    ref: Object.assign(\r\n      (value: T | null) => {\r\n        if (data.ref.current !== value) {\r\n          if (data.cleanup) {\r\n            data.cleanup();\r\n            data.cleanup = undefined;\r\n          }\r\n\r\n          data.ref.current = value;\r\n\r\n          if (value !== null) {\r\n            data.cleanup = data.callback(value);\r\n          }\r\n        }\r\n      },\r\n      {\r\n        current: initial,\r\n      },\r\n    ),\r\n    callback,\r\n  }).current;\r\n\r\n  data.callback = callback;\r\n\r\n  return data.ref;\r\n}\r\n"]}