{"version":3,"file":"useBoolean.js","sourceRoot":"../src/","sources":["useBoolean.ts"],"names":[],"mappings":";;;IAaA;;;;;;OAMG;IACH,SAAgB,UAAU,CAAC,YAAqB;QACxC,IAAA,iCAAgD,EAA/C,aAAK,EAAE,gBAAwC,CAAC;QACvD,qFAAqF;QACrF,2EAA2E;QAC3E,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAErC,IAAM,OAAO,GAAG,mBAAQ,CAAC,cAAM,OAAA;YAC7B,QAAQ,CAAC,IAAI,CAAC,CAAC;YACf,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC;QAC1B,CAAC,EAH8B,CAG9B,CAAC,CAAC;QACH,IAAM,QAAQ,GAAG,mBAAQ,CAAC,cAAM,OAAA;YAC9B,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChB,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC;QAC3B,CAAC,EAH+B,CAG/B,CAAC,CAAC;QACH,IAAM,MAAM,GAAG,mBAAQ,CAAC,cAAM,OAAA,cAAM,OAAA,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,EAA3C,CAA2C,EAAjD,CAAiD,CAAC,CAAC;QAEjF,OAAO,CAAC,KAAK,EAAE,EAAE,OAAO,SAAA,EAAE,QAAQ,UAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;IAChD,CAAC;IAjBD,gCAiBC","sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /** Toggle the value. Always has the same identity. */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n  // Storing the value in a ref is redundant but allows the `toggle` callback to have a\n  // constant identity, which overall is probably better for consumers' perf.\n  const valueRef = React.useRef(value);\n\n  const setTrue = useConst(() => () => {\n    setValue(true);\n    valueRef.current = true;\n  });\n  const setFalse = useConst(() => () => {\n    setValue(false);\n    valueRef.current = false;\n  });\n  const toggle = useConst(() => () => (valueRef.current ? setFalse() : setTrue()));\n\n  return [value, { setTrue, setFalse, toggle }];\n}\n"]}