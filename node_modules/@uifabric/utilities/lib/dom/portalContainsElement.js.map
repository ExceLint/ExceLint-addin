{"version":3,"file":"portalContainsElement.js","sourceRoot":"../src/","sources":["dom/portalContainsElement.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,qBAAqB,EAAE,MAAM,sBAAsB,CAAC;AAE7D;;;;;;GAMG;AACH,MAAM,gCAAgC,MAAmB,EAAE,MAAoB;IAC7E,IAAM,YAAY,GAAG,oBAAoB,CACvC,MAAM,EACN,UAAC,WAAwB,IAAK,OAAA,MAAM,KAAK,WAAW,IAAI,WAAW,CAAC,YAAY,CAAC,qBAAqB,CAAC,EAAzE,CAAyE,CACxG,CAAC;IACF,OAAO,YAAY,KAAK,IAAI,IAAI,YAAY,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;AACnF,CAAC","sourcesContent":["import { findElementRecursive } from './findElementRecursive';\r\nimport { DATA_PORTAL_ATTRIBUTE } from './setPortalAttribute';\r\n\r\n/**\r\n * Determine whether a target is within a portal from perspective of root or optional parent.\r\n * This function only works against portal components that use the setPortalAttribute function.\r\n * If both parent and child are within the same portal this function will return false.\r\n * @param target - Element to query portal containment status of.\r\n * @param parent - Optional parent perspective. Search for containing portal stops at parent (or root if parent is undefined or invalid.)\r\n */\r\nexport function portalContainsElement(target: HTMLElement, parent?: HTMLElement): boolean {\r\n  const elementMatch = findElementRecursive(\r\n    target,\r\n    (testElement: HTMLElement) => parent === testElement || testElement.hasAttribute(DATA_PORTAL_ATTRIBUTE)\r\n  );\r\n  return elementMatch !== null && elementMatch.hasAttribute(DATA_PORTAL_ATTRIBUTE);\r\n}\r\n"]}