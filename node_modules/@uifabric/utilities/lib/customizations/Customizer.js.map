{"version":3,"file":"Customizer.js","sourceRoot":"../src/","sources":["customizations/Customizer.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAClD,OAAO,EAAE,iBAAiB,EAAsB,MAAM,qBAAqB,CAAC;AAC5E,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAG5D;;;;;;;;;;;;;GAaG;AACH;IAAgC,sCAAiC;IAAjE;QAAA,qEA2BC;QADS,4BAAsB,GAAG,cAAM,OAAA,KAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,CAAC;;IAC5D,CAAC;IA1BQ,sCAAiB,GAAxB;QACE,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACtD,CAAC;IAEM,yCAAoB,GAA3B;QACE,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACxD,CAAC;IAEM,2BAAM,GAAb;QAAA,iBAeC;QAdS,IAAA,8CAAgB,CAAgB;QACxC,OAAO,CACL,oBAAC,iBAAiB,CAAC,QAAQ,QACxB,UAAC,aAAiC;YACjC,IAAI,UAAU,GAAG,mBAAmB,CAAC,KAAI,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;YAEhE,IAAI,gBAAgB,EAAE;gBACpB,UAAU,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC;aAC3C;YAED,OAAO,oBAAC,iBAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,UAAU,IAAG,KAAI,CAAC,KAAK,CAAC,QAAQ,CAA8B,CAAC;QAC3G,CAAC,CAC0B,CAC9B,CAAC;IACJ,CAAC;IAGH,iBAAC;AAAD,CAAC,AA3BD,CAAgC,KAAK,CAAC,SAAS,GA2B9C","sourcesContent":["import * as React from 'react';\r\nimport { Customizations } from './Customizations';\r\nimport { CustomizerContext, ICustomizerContext } from './CustomizerContext';\r\nimport { mergeCustomizations } from './mergeCustomizations';\r\nimport { ICustomizerProps } from './Customizer.types';\r\n\r\n/**\r\n * The Customizer component allows for default props to be mixed into components which\r\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\r\n * injection scenarios like:\r\n *\r\n * 1. render svg icons instead of the icon font within all buttons\r\n * 2. inject a custom theme object into a component\r\n *\r\n * Props are provided via the settings prop which should be one of the following:\r\n * - A json map which contains 1 or more name/value pairs representing injectable props.\r\n * - A function that receives the current settings and returns the new ones that apply to the scope\r\n *\r\n * @public\r\n */\r\nexport class Customizer extends React.Component<ICustomizerProps> {\r\n  public componentDidMount(): void {\r\n    Customizations.observe(this._onCustomizationChange);\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    Customizations.unobserve(this._onCustomizationChange);\r\n  }\r\n\r\n  public render(): React.ReactElement<{}> {\r\n    const { contextTransform } = this.props;\r\n    return (\r\n      <CustomizerContext.Consumer>\r\n        {(parentContext: ICustomizerContext) => {\r\n          let newContext = mergeCustomizations(this.props, parentContext);\r\n\r\n          if (contextTransform) {\r\n            newContext = contextTransform(newContext);\r\n          }\r\n\r\n          return <CustomizerContext.Provider value={newContext}>{this.props.children}</CustomizerContext.Provider>;\r\n        }}\r\n      </CustomizerContext.Consumer>\r\n    );\r\n  }\r\n\r\n  private _onCustomizationChange = () => this.forceUpdate();\r\n}\r\n"]}