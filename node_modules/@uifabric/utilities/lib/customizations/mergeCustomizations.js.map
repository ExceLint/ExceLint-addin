{"version":3,"file":"mergeCustomizations.js","sourceRoot":"../src/","sources":["customizations/mergeCustomizations.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AAIrE;;;;;;GAMG;AACH,MAAM,8BAA8B,KAAuB,EAAE,aAAiC;IACpF,IAAA,yCAAqD,EAArD,0EAAqD,CAAyB;IAEtF,OAAO;QACL,cAAc,EAAE;YACd,QAAQ,EAAE,aAAa,CAAC,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC;YAChE,cAAc,EAAE,mBAAmB,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC;YACxF,mBAAmB,EAAE,IAAI;SAC1B;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { mergeSettings, mergeScopedSettings } from './mergeSettings';\r\nimport { ICustomizerProps } from './Customizer.types';\r\nimport { ICustomizerContext } from './CustomizerContext';\r\n\r\n/**\r\n * Merge props and customizations giving priority to props over context.\r\n * NOTE: This function will always perform multiple merge operations. Use with caution.\r\n * @param props - New settings to merge in.\r\n * @param parentContext - Context containing current settings.\r\n * @returns Merged customizations.\r\n */\r\nexport function mergeCustomizations(props: ICustomizerProps, parentContext: ICustomizerContext): ICustomizerContext {\r\n  const { customizations = { settings: {}, scopedSettings: {} } } = parentContext || {};\r\n\r\n  return {\r\n    customizations: {\r\n      settings: mergeSettings(customizations.settings, props.settings),\r\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\r\n      inCustomizerContext: true\r\n    }\r\n  };\r\n}\r\n"]}