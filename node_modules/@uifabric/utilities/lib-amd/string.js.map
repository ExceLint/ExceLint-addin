{"version":3,"file":"string.js","sourceRoot":"../src/","sources":["string.ts"],"names":[],"mappings":";;;IAAA,gFAAgF;IAChF,IAAM,iBAAiB,GAAG,SAAS,CAAC;IAEpC,+EAA+E;IAC/E,IAAM,YAAY,GAAG,UAAU,CAAC;IAEhC;;;;;;;;;;;;OAYG;IACH,kCAAkC;IAClC,gBAAuB,CAAS;QAC9B,YAAY,CAAC;QADmB,gBAAgB;aAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;YAAhB,+BAAgB;;QAGhD,IAAI,IAAI,GAAG,MAAM,CAAC;QAClB,0BAA0B;QAC1B,sBAAsB,KAAa;YACjC,uBAAuB;YACvB,kCAAkC;YAClC,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAQ,CAAC,CAAC;YAEpE,+DAA+D;YAC/D,IAAI,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,EAAE;gBACrD,WAAW,GAAG,EAAE,CAAC;aAClB;YAED,OAAO,WAAW,CAAC;QACrB,CAAC;QACD,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAC/C,CAAC;IAlBD,wBAkBC","sourcesContent":["// Regex that finds { and } so they can be removed on a lookup for string format\r\nconst FORMAT_ARGS_REGEX = /[\\{\\}]/g;\r\n\r\n// Regex that finds {#} so it can be replaced by the arguments in string format\r\nconst FORMAT_REGEX = /\\{\\d+\\}/g;\r\n\r\n/**\r\n * String format method, used for scenarios where at runtime you\r\n * need to evaluate a formatted string given a tokenized string. This\r\n * usually only is needed in localization scenarios.\r\n\r\n * @example\r\n * ```tsx\r\n * \"I love {0} every {1}\".format(\"CXP\")\r\n * ```\r\n * will result in a Debug Exception.\r\n *\r\n * @public\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function format(s: string, ...values: any[]): string {\r\n  'use strict';\r\n\r\n  let args = values;\r\n  // Callback match function\r\n  function replace_func(match: string): string {\r\n    // looks up in the args\r\n    // tslint:disable-next-line:no-any\r\n    let replacement = args[match.replace(FORMAT_ARGS_REGEX, '') as any];\r\n\r\n    // catches undefined in nondebug and null in debug and nondebug\r\n    if (replacement === null || replacement === undefined) {\r\n      replacement = '';\r\n    }\r\n\r\n    return replacement;\r\n  }\r\n  return s.replace(FORMAT_REGEX, replace_func);\r\n}\r\n"]}