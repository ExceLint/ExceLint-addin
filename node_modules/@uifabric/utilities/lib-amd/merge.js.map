{"version":3,"file":"merge.js","sourceRoot":"../src/","sources":["merge.ts"],"names":[],"mappings":";;;IAAA;;;;OAIG;IACH,eAA8B,MAAkB;QAAE,cAAkD;aAAlD,UAAkD,EAAlD,qBAAkD,EAAlD,IAAkD;YAAlD,6BAAkD;;QAClG,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;YAAjB,IAAM,GAAG,aAAA;YACZ,MAAM,CAAC,MAAM,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC;SAC3B;QAED,OAAO,MAAW,CAAC;IACrB,CAAC;IAND,sBAMC;IAED;;;;;OAKG;IACH,kCAAkC;IAClC,gBAAmB,MAAS,EAAE,MAAS,EAAE,kBAA8B;QAA9B,mCAAA,EAAA,uBAA8B;QACrE,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEhC,KAAK,IAAI,MAAI,IAAI,MAAM,EAAE;YACvB,IAAI,MAAM,CAAC,cAAc,CAAC,MAAI,CAAC,EAAE;gBAC/B,IAAM,KAAK,GAAG,MAAM,CAAC,MAAI,CAAC,CAAC;gBAE3B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,IAAM,mBAAmB,GAAG,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;oBAEnE,kCAAkC;oBACjC,MAAc,CAAC,MAAI,CAAC,GAAG,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAI,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAAC;iBAC7G;qBAAM;oBACL,MAAM,CAAC,MAAI,CAAC,GAAG,KAAK,CAAC;iBACtB;aACF;SACF;QAED,kBAAkB,CAAC,GAAG,EAAE,CAAC;QAEzB,OAAO,MAAM,CAAC;IAChB,CAAC","sourcesContent":["/**\r\n * Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged\r\n * together in the order provided. If an object creates a circular reference, it will assign the\r\n * original reference.\r\n */\r\nexport function merge<T = {}>(target: Partial<T>, ...args: (Partial<T> | null | undefined | false)[]): T {\r\n  for (const arg of args) {\r\n    _merge(target || {}, arg);\r\n  }\r\n\r\n  return target as T;\r\n}\r\n\r\n/**\r\n * The _merge helper iterates through all props on source and assigns them to target.\r\n * When the value is an object, we will create a deep clone of the object. However if\r\n * there is a circular reference, the value will not be deep cloned and will persist\r\n * the reference.\r\n */\r\n// tslint:disable-next-line:no-any\r\nfunction _merge<T>(target: T, source: T, circularReferences: any[] = []): T {\r\n  circularReferences.push(source);\r\n\r\n  for (let name in source) {\r\n    if (source.hasOwnProperty(name)) {\r\n      const value = source[name];\r\n\r\n      if (typeof value === 'object') {\r\n        const isCircularReference = circularReferences.indexOf(value) > -1;\r\n\r\n        // tslint:disable-next-line:no-any\r\n        (target as any)[name] = isCircularReference ? value : _merge(target[name] || {}, value, circularReferences);\r\n      } else {\r\n        target[name] = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  circularReferences.pop();\r\n\r\n  return target;\r\n}\r\n"]}