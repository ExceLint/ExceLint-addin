{"version":3,"file":"hoist.js","sourceRoot":"../src/","sources":["hoist.ts"],"names":[],"mappings":";;;IAAA,IAAM,0BAA0B,GAAG;QACjC,UAAU;QACV,QAAQ;QACR,oBAAoB;QACpB,2BAA2B;QAC3B,mBAAmB;QACnB,2BAA2B;QAC3B,kCAAkC;QAClC,uBAAuB;QACvB,qBAAqB;QACrB,yBAAyB;QACzB,4BAA4B;QAC5B,oBAAoB;QACpB,sBAAsB;KACvB,CAAC;IAEF;;;;;;;;OAQG;IACH;IACE,kCAAkC;IAClC,WAAgB;IAChB,kCAAkC;IAClC,MAAW,EACX,UAAiD;QAAjD,2BAAA,EAAA,uCAAiD;QAEjD,IAAI,OAAO,GAAa,EAAE,CAAC;gCAClB,UAAU;YACjB,IACE,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,UAAU;gBACxC,WAAW,CAAC,UAAU,CAAC,KAAK,SAAS;gBACrC,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EACtD;gBACA,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACzB,2CAA2C;gBAC3C,WAAW,CAAC,UAAU,CAAC,GAAG;oBACxB,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;gBAC9C,CAAC,CAAC;gBACF,mBAAmB;aACpB;QACH,CAAC;QAbD,KAAK,IAAI,UAAU,IAAI,MAAM;oBAApB,UAAU;SAalB;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAxBD,oCAwBC;IAED;;;;;;OAMG;IACH,kCAAkC;IAClC,wBAA+B,MAAW,EAAE,WAAqB;QAC/D,WAAW,CAAC,OAAO,CAAC,UAAC,UAAkB,IAAK,OAAA,OAAO,MAAM,CAAC,UAAU,CAAC,EAAzB,CAAyB,CAAC,CAAC;IACzE,CAAC;IAFD,wCAEC","sourcesContent":["const REACT_LIFECYCLE_EXCLUSIONS = [\r\n  'setState',\r\n  'render',\r\n  'componentWillMount',\r\n  'UNSAFE_componentWillMount',\r\n  'componentDidMount',\r\n  'componentWillReceiveProps',\r\n  'UNSAFE_componentWillReceiveProps',\r\n  'shouldComponentUpdate',\r\n  'componentWillUpdate',\r\n  'getSnapshotBeforeUpdate',\r\n  'UNSAFE_componentWillUpdate',\r\n  'componentDidUpdate',\r\n  'componentWillUnmount'\r\n];\r\n\r\n/**\r\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\r\n *\r\n * @public\r\n * @param destination - The instance of the object to hoist the methods onto.\r\n * @param source - The instance of the object where the methods are hoisted from.\r\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\r\n * @returns An array of names of methods that were hoisted.\r\n */\r\nexport function hoistMethods(\r\n  // tslint:disable-next-line:no-any\r\n  destination: any,\r\n  // tslint:disable-next-line:no-any\r\n  source: any,\r\n  exclusions: string[] = REACT_LIFECYCLE_EXCLUSIONS\r\n): string[] {\r\n  let hoisted: string[] = [];\r\n  for (let methodName in source) {\r\n    if (\r\n      typeof source[methodName] === 'function' &&\r\n      destination[methodName] === undefined &&\r\n      (!exclusions || exclusions.indexOf(methodName) === -1)\r\n    ) {\r\n      hoisted.push(methodName);\r\n      /* tslint:disable:no-function-expression */\r\n      destination[methodName] = function(): void {\r\n        source[methodName].apply(source, arguments);\r\n      };\r\n      /* tslint:enable */\r\n    }\r\n  }\r\n\r\n  return hoisted;\r\n}\r\n\r\n/**\r\n * Provides a method for convenience to unhoist hoisted methods.\r\n *\r\n * @public\r\n * @param source - The source object upon which methods were hoisted.\r\n * @param methodNames - An array of method names to unhoist.\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function unhoistMethods(source: any, methodNames: string[]): void {\r\n  methodNames.forEach((methodName: string) => delete source[methodName]);\r\n}\r\n"]}