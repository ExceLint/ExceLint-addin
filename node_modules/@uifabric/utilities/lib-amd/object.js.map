{"version":3,"file":"object.js","sourceRoot":"../src/","sources":["object.ts"],"names":[],"mappings":"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","sourcesContent":["import { Stylesheet } from '@uifabric/merge-styles';\r\n\r\n// Initialize global window id.\r\nconst CURRENT_ID_PROPERTY = '__currentId__';\r\nconst DEFAULT_ID_STRING = 'id__';\r\n\r\ndeclare const process: {};\r\n\r\n// tslint:disable-next-line:no-any\r\nlet _global: any = (typeof window !== 'undefined' && window) || process;\r\n\r\nif (_global[CURRENT_ID_PROPERTY] === undefined) {\r\n  _global[CURRENT_ID_PROPERTY] = 0;\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nfunction checkProperties(a: any, b: any): boolean {\r\n  for (let propName in a) {\r\n    if (a.hasOwnProperty(propName)) {\r\n      if (!b.hasOwnProperty(propName) || b[propName] !== a[propName]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Compares a to b and b to a.\r\n *\r\n * @public\r\n */\r\nexport function shallowCompare<TA, TB>(a: TA, b: TB): boolean {\r\n  return checkProperties(a, b) && checkProperties(b, a);\r\n}\r\n\r\n/**\r\n * Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more\r\n * objects as arguments and they will be merged sequentially into the target. Note that this will\r\n * shallow merge; it will not create new cloned values for target members.\r\n *\r\n * @public\r\n * @param target - Target object to merge following object arguments into.\r\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\r\n * @returns Resulting merged target.\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function assign(target: any, ...args: any[]): any {\r\n  return filteredAssign.apply(this, [null, target].concat(args));\r\n}\r\n\r\n/**\r\n * Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter\r\n * the resulting merges. This allows for scenarios where you want to merge \"everything except that one thing\"\r\n * or \"properties that start with data-\". Note that this will shallow merge; it will not create new cloned\r\n * values for target members.\r\n *\r\n * @public\r\n * @param isAllowed - Callback to determine if the given propName is allowed in the result.\r\n * @param target - Target object to merge following object arguments into.\r\n * @param args - One or more objects that will be mixed into the target in the order they are provided.\r\n * @returns Resulting merged target.\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function filteredAssign(isAllowed: (propName: string) => boolean, target: any, ...args: any[]): any {\r\n  target = target || {};\r\n\r\n  for (let sourceObject of args) {\r\n    if (sourceObject) {\r\n      for (let propName in sourceObject) {\r\n        if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {\r\n          target[propName] = sourceObject[propName];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\n// Configure ids to reset on stylesheet resets.\r\nconst stylesheet = Stylesheet.getInstance();\r\n\r\nif (stylesheet && stylesheet.onReset) {\r\n  stylesheet.onReset(resetIds);\r\n}\r\n\r\n/**\r\n * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)\r\n *\r\n * @public\r\n */\r\nexport function getId(prefix?: string): string {\r\n  let index = _global[CURRENT_ID_PROPERTY]++;\r\n\r\n  return (prefix || DEFAULT_ID_STRING) + index;\r\n}\r\n\r\n/**\r\n * Resets id counter to an (optional) number.\r\n *\r\n * @public\r\n */\r\nexport function resetIds(counter: number = 0): void {\r\n  _global[CURRENT_ID_PROPERTY] = counter;\r\n}\r\n\r\n/* Takes an enum and iterates over each value of the enum (as a string), running the callback on each, returning a mapped array.\r\n * The callback takes as a first parameter the string that represents the name of the entry, and the second parameter is the\r\n * value of that entry, which is the value you'd normally use when using the enum (usually a number).\r\n * */\r\nexport function mapEnumByName<T>(\r\n  // tslint:disable-next-line:no-any\r\n  theEnum: any,\r\n  callback: (name?: string, value?: string | number) => T | undefined\r\n): (T | undefined)[] | undefined {\r\n  // map<any> to satisfy compiler since it doesn't realize we strip out undefineds in the .filter() call\r\n  return Object.keys(theEnum)\r\n    .map<T | undefined>((p: string | number) => {\r\n      // map on each property name as a string\r\n      if (String(Number(p)) !== p) {\r\n        // if the property is not just a number (because enums in TypeScript will map both ways)\r\n        return callback(p as string, theEnum[p]);\r\n      }\r\n    })\r\n    .filter((v: T | undefined) => !!v); // only return elements with values\r\n}\r\n\r\n/**\r\n * Get all values in an object dictionary\r\n *\r\n * @param obj - The dictionary to get values for\r\n */\r\n// tslint:disable-next-line:no-any\r\nexport function values<T>(obj: any): T[] {\r\n  return Object.keys(obj).reduce((arr: T[], key: string): T[] => {\r\n    arr.push(obj[key]);\r\n    return arr;\r\n  }, []);\r\n}\r\n"]}