{"version":3,"file":"Async.js","sourceRoot":"../src/","sources":["Async.ts"],"names":[],"mappings":"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","sourcesContent":["declare function setTimeout(cb: Function, delay: number): number;\r\ndeclare function setInterval(cb: Function, delay: number): number;\r\n\r\n/**\r\n * Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled.\r\n * This Async helper class solves these issues by tying async code to the lifetime of a disposable object.\r\n *\r\n * Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a\r\n * new instance of the class and remember to call dispose() during your code's dispose handler.\r\n *\r\n * @public\r\n */\r\nexport class Async {\r\n  private _timeoutIds: { [id: number]: boolean } | null = null;\r\n  private _immediateIds: { [id: number]: boolean } | null = null;\r\n  private _intervalIds: { [id: number]: boolean } | null = null;\r\n  private _animationFrameIds: { [id: number]: boolean } | null = null;\r\n  private _isDisposed: boolean;\r\n  private _parent: object | null;\r\n  // tslint:disable-next-line:no-any\r\n  private _onErrorHandler: ((e: any) => void) | undefined;\r\n  private _noop: () => void;\r\n  // tslint:disable-next-line:no-any\r\n  constructor(parent?: object, onError?: (e: any) => void) {\r\n    this._isDisposed = false;\r\n    this._parent = parent || null;\r\n    this._onErrorHandler = onError;\r\n    this._noop = () => {\r\n      /* do nothing */\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dispose function, clears all async operations.\r\n   */\r\n  public dispose(): void {\r\n    let id;\r\n\r\n    this._isDisposed = true;\r\n    this._parent = null;\r\n\r\n    // Clear timeouts.\r\n    if (this._timeoutIds) {\r\n      for (id in this._timeoutIds) {\r\n        if (this._timeoutIds.hasOwnProperty(id)) {\r\n          this.clearTimeout(parseInt(id, 10));\r\n        }\r\n      }\r\n\r\n      this._timeoutIds = null;\r\n    }\r\n\r\n    // Clear immediates.\r\n    if (this._immediateIds) {\r\n      for (id in this._immediateIds) {\r\n        if (this._immediateIds.hasOwnProperty(id)) {\r\n          this.clearImmediate(parseInt(id, 10));\r\n        }\r\n      }\r\n\r\n      this._immediateIds = null;\r\n    }\r\n\r\n    // Clear intervals.\r\n    if (this._intervalIds) {\r\n      for (id in this._intervalIds) {\r\n        if (this._intervalIds.hasOwnProperty(id)) {\r\n          this.clearInterval(parseInt(id, 10));\r\n        }\r\n      }\r\n      this._intervalIds = null;\r\n    }\r\n\r\n    // Clear animation frames.\r\n    if (this._animationFrameIds) {\r\n      for (id in this._animationFrameIds) {\r\n        if (this._animationFrameIds.hasOwnProperty(id)) {\r\n          this.cancelAnimationFrame(parseInt(id, 10));\r\n        }\r\n      }\r\n\r\n      this._animationFrameIds = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * SetTimeout override, which will auto cancel the timeout during dispose.\r\n   * @param callback - Callback to execute.\r\n   * @param duration - Duration in milliseconds.\r\n   * @returns The setTimeout id.\r\n   */\r\n  public setTimeout(callback: () => void, duration: number): number {\r\n    let timeoutId = 0;\r\n\r\n    if (!this._isDisposed) {\r\n      if (!this._timeoutIds) {\r\n        this._timeoutIds = {};\r\n      }\r\n\r\n      /* tslint:disable:ban-native-functions */\r\n      timeoutId = setTimeout(() => {\r\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\r\n\r\n        try {\r\n          // Now delete the record and call the callback.\r\n          if (this._timeoutIds) {\r\n            delete this._timeoutIds[timeoutId];\r\n          }\r\n          callback.apply(this._parent);\r\n        } catch (e) {\r\n          if (this._onErrorHandler) {\r\n            this._onErrorHandler(e);\r\n          }\r\n        }\r\n      }, duration);\r\n      /* tslint:enable:ban-native-functions */\r\n\r\n      this._timeoutIds[timeoutId] = true;\r\n    }\r\n\r\n    return timeoutId;\r\n  }\r\n\r\n  /**\r\n   * Clears the timeout.\r\n   * @param id - Id to cancel.\r\n   */\r\n  public clearTimeout(id: number): void {\r\n    if (this._timeoutIds && this._timeoutIds[id]) {\r\n      /* tslint:disable:ban-native-functions */\r\n      clearTimeout(id);\r\n      delete this._timeoutIds[id];\r\n      /* tslint:enable:ban-native-functions */\r\n    }\r\n  }\r\n\r\n  /**\r\n   * SetImmediate override, which will auto cancel the immediate during dispose.\r\n   * @param callback - Callback to execute.\r\n   * @returns The setTimeout id.\r\n   */\r\n  public setImmediate(callback: () => void): number {\r\n    let immediateId = 0;\r\n\r\n    if (!this._isDisposed) {\r\n      if (!this._immediateIds) {\r\n        this._immediateIds = {};\r\n      }\r\n\r\n      /* tslint:disable:ban-native-functions */\r\n      let setImmediateCallback = () => {\r\n        // Time to execute the timeout, enqueue it as a foreground task to be executed.\r\n\r\n        try {\r\n          // Now delete the record and call the callback.\r\n          if (this._immediateIds) {\r\n            delete this._immediateIds[immediateId];\r\n          }\r\n          callback.apply(this._parent);\r\n        } catch (e) {\r\n          this._logError(e);\r\n        }\r\n      };\r\n\r\n      immediateId = window.setImmediate ? window.setImmediate(setImmediateCallback) : window.setTimeout(setImmediateCallback, 0);\r\n      /* tslint:enable:ban-native-functions */\r\n\r\n      this._immediateIds[immediateId] = true;\r\n    }\r\n\r\n    return immediateId;\r\n  }\r\n\r\n  /**\r\n   * Clears the immediate.\r\n   * @param id - Id to cancel.\r\n   */\r\n  public clearImmediate(id: number): void {\r\n    if (this._immediateIds && this._immediateIds[id]) {\r\n      /* tslint:disable:ban-native-functions */\r\n      window.clearImmediate ? window.clearImmediate(id) : window.clearTimeout(id);\r\n      delete this._immediateIds[id];\r\n      /* tslint:enable:ban-native-functions */\r\n    }\r\n  }\r\n\r\n  /**\r\n   * SetInterval override, which will auto cancel the timeout during dispose.\r\n   * @param callback - Callback to execute.\r\n   * @param duration - Duration in milliseconds.\r\n   * @returns The setTimeout id.\r\n   */\r\n  public setInterval(callback: () => void, duration: number): number {\r\n    let intervalId = 0;\r\n\r\n    if (!this._isDisposed) {\r\n      if (!this._intervalIds) {\r\n        this._intervalIds = {};\r\n      }\r\n\r\n      /* tslint:disable:ban-native-functions */\r\n      intervalId = setInterval(() => {\r\n        // Time to execute the interval callback, enqueue it as a foreground task to be executed.\r\n        try {\r\n          callback.apply(this._parent);\r\n        } catch (e) {\r\n          this._logError(e);\r\n        }\r\n      }, duration);\r\n      /* tslint:enable:ban-native-functions */\r\n\r\n      this._intervalIds[intervalId] = true;\r\n    }\r\n\r\n    return intervalId;\r\n  }\r\n\r\n  /**\r\n   * Clears the interval.\r\n   * @param id - Id to cancel.\r\n   */\r\n  public clearInterval(id: number): void {\r\n    if (this._intervalIds && this._intervalIds[id]) {\r\n      /* tslint:disable:ban-native-functions */\r\n      clearInterval(id);\r\n      delete this._intervalIds[id];\r\n      /* tslint:enable:ban-native-functions */\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a function that, when executed, will only call the func function at most once per\r\n   * every wait milliseconds. Provide an options object to indicate that func should be invoked\r\n   * on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled\r\n   * function will return the result of the last func call.\r\n   *\r\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\r\n   * the timeout only if the the throttled function is invoked more than once during the wait timeout.\r\n   *\r\n   * @param func - The function to throttle.\r\n   * @param wait - The number of milliseconds to throttle executions to. Defaults to 0.\r\n   * @param options - The options object.\r\n   * @returns The new throttled function.\r\n   */\r\n  public throttle<T extends Function>(\r\n    func: T,\r\n    wait?: number,\r\n    options?: {\r\n      leading?: boolean;\r\n      trailing?: boolean;\r\n    }\r\n  ): T | (() => void) {\r\n    if (this._isDisposed) {\r\n      return this._noop;\r\n    }\r\n\r\n    let waitMS = wait || 0;\r\n    let leading = true;\r\n    let trailing = true;\r\n    let lastExecuteTime = 0;\r\n    let lastResult: T;\r\n    // tslint:disable-next-line:no-any\r\n    let lastArgs: any[];\r\n    let timeoutId: number | null = null;\r\n\r\n    if (options && typeof options.leading === 'boolean') {\r\n      leading = options.leading;\r\n    }\r\n\r\n    if (options && typeof options.trailing === 'boolean') {\r\n      trailing = options.trailing;\r\n    }\r\n\r\n    let callback = (userCall?: boolean) => {\r\n      let now = new Date().getTime();\r\n      let delta = now - lastExecuteTime;\r\n      let waitLength = leading ? waitMS - delta : waitMS;\r\n      if (delta >= waitMS && (!userCall || leading)) {\r\n        lastExecuteTime = now;\r\n        if (timeoutId) {\r\n          this.clearTimeout(timeoutId);\r\n          timeoutId = null;\r\n        }\r\n        lastResult = func.apply(this._parent, lastArgs);\r\n      } else if (timeoutId === null && trailing) {\r\n        timeoutId = this.setTimeout(callback, waitLength);\r\n      }\r\n\r\n      return lastResult;\r\n    };\r\n\r\n    // tslint:disable-next-line:no-any\r\n    let resultFunction: () => T = (...args: any[]) => {\r\n      lastArgs = args;\r\n      return callback(true);\r\n    };\r\n\r\n    return resultFunction;\r\n  }\r\n\r\n  /**\r\n   * Creates a function that will delay the execution of func until after wait milliseconds have\r\n   * elapsed since the last time it was invoked. Provide an options object to indicate that func\r\n   * should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls\r\n   * to the debounced function will return the result of the last func call.\r\n   *\r\n   * Note: If leading and trailing options are true func will be called on the trailing edge of\r\n   * the timeout only if the the debounced function is invoked more than once during the wait\r\n   * timeout.\r\n   *\r\n   * @param func - The function to debounce.\r\n   * @param wait - The number of milliseconds to delay.\r\n   * @param options - The options object.\r\n   * @returns The new debounced function.\r\n   */\r\n  public debounce<T extends Function>(\r\n    func: T,\r\n    wait?: number,\r\n    options?: {\r\n      leading?: boolean;\r\n      maxWait?: number;\r\n      trailing?: boolean;\r\n    }\r\n  ): ICancelable<T> & (() => void) {\r\n    if (this._isDisposed) {\r\n      let noOpFunction: ICancelable<T> & (() => T) = (() => {\r\n        /** Do nothing */\r\n      }) as ICancelable<T> & (() => T);\r\n\r\n      noOpFunction.cancel = () => {\r\n        return;\r\n      };\r\n      /* tslint:disable:no-any */\r\n      noOpFunction.flush = (() => null) as any;\r\n      /* tslint:enable:no-any */\r\n      noOpFunction.pending = () => false;\r\n\r\n      return noOpFunction;\r\n    }\r\n\r\n    let waitMS = wait || 0;\r\n    let leading = false;\r\n    let trailing = true;\r\n    let maxWait: number | null = null;\r\n    let lastCallTime = 0;\r\n    let lastExecuteTime = new Date().getTime();\r\n    let lastResult: T;\r\n    // tslint:disable-next-line:no-any\r\n    let lastArgs: any[];\r\n    let timeoutId: number | null = null;\r\n\r\n    if (options && typeof options.leading === 'boolean') {\r\n      leading = options.leading;\r\n    }\r\n\r\n    if (options && typeof options.trailing === 'boolean') {\r\n      trailing = options.trailing;\r\n    }\r\n\r\n    if (options && typeof options.maxWait === 'number' && !isNaN(options.maxWait)) {\r\n      maxWait = options.maxWait;\r\n    }\r\n\r\n    let markExecuted = (time: number) => {\r\n      if (timeoutId) {\r\n        this.clearTimeout(timeoutId);\r\n        timeoutId = null;\r\n      }\r\n      lastExecuteTime = time;\r\n    };\r\n\r\n    let invokeFunction = (time: number) => {\r\n      markExecuted(time);\r\n      lastResult = func.apply(this._parent, lastArgs);\r\n    };\r\n\r\n    let callback = (userCall?: boolean) => {\r\n      let now = new Date().getTime();\r\n      let executeImmediately = false;\r\n      if (userCall) {\r\n        if (leading && now - lastCallTime >= waitMS) {\r\n          executeImmediately = true;\r\n        }\r\n        lastCallTime = now;\r\n      }\r\n      let delta = now - lastCallTime;\r\n      let waitLength = waitMS - delta;\r\n      let maxWaitDelta = now - lastExecuteTime;\r\n      let maxWaitExpired = false;\r\n\r\n      if (maxWait !== null) {\r\n        // maxWait only matters when there is a pending callback\r\n        if (maxWaitDelta >= maxWait && timeoutId) {\r\n          maxWaitExpired = true;\r\n        } else {\r\n          waitLength = Math.min(waitLength, maxWait - maxWaitDelta);\r\n        }\r\n      }\r\n\r\n      if (delta >= waitMS || maxWaitExpired || executeImmediately) {\r\n        invokeFunction(now);\r\n      } else if ((timeoutId === null || !userCall) && trailing) {\r\n        timeoutId = this.setTimeout(callback, waitLength);\r\n      }\r\n\r\n      return lastResult;\r\n    };\r\n\r\n    let pending = (): boolean => {\r\n      return !!timeoutId;\r\n    };\r\n\r\n    let cancel = (): void => {\r\n      if (pending()) {\r\n        // Mark the debounced function as having executed\r\n        markExecuted(new Date().getTime());\r\n      }\r\n    };\r\n\r\n    let flush = (): T => {\r\n      if (pending()) {\r\n        invokeFunction(new Date().getTime());\r\n      }\r\n\r\n      return lastResult;\r\n    };\r\n\r\n    // tslint:disable-next-line:no-any\r\n    let resultFunction: ICancelable<T> & (() => T) = ((...args: any[]) => {\r\n      lastArgs = args;\r\n      return callback(true);\r\n    }) as ICancelable<T> & (() => T);\r\n\r\n    resultFunction.cancel = cancel;\r\n    resultFunction.flush = flush;\r\n    resultFunction.pending = pending;\r\n\r\n    return resultFunction;\r\n  }\r\n\r\n  public requestAnimationFrame(callback: () => void): number {\r\n    let animationFrameId = 0;\r\n\r\n    if (!this._isDisposed) {\r\n      if (!this._animationFrameIds) {\r\n        this._animationFrameIds = {};\r\n      }\r\n\r\n      /* tslint:disable:ban-native-functions */\r\n      let animationFrameCallback = () => {\r\n        try {\r\n          // Now delete the record and call the callback.\r\n          if (this._animationFrameIds) {\r\n            delete this._animationFrameIds[animationFrameId];\r\n          }\r\n\r\n          callback.apply(this._parent);\r\n        } catch (e) {\r\n          this._logError(e);\r\n        }\r\n      };\r\n\r\n      animationFrameId = window.requestAnimationFrame\r\n        ? window.requestAnimationFrame(animationFrameCallback)\r\n        : window.setTimeout(animationFrameCallback, 0);\r\n      /* tslint:enable:ban-native-functions */\r\n\r\n      this._animationFrameIds[animationFrameId] = true;\r\n    }\r\n\r\n    return animationFrameId;\r\n  }\r\n\r\n  public cancelAnimationFrame(id: number): void {\r\n    if (this._animationFrameIds && this._animationFrameIds[id]) {\r\n      /* tslint:disable:ban-native-functions */\r\n      window.cancelAnimationFrame ? window.cancelAnimationFrame(id) : window.clearTimeout(id);\r\n      /* tslint:enable:ban-native-functions */\r\n      delete this._animationFrameIds[id];\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  protected _logError(e: any): void {\r\n    if (this._onErrorHandler) {\r\n      this._onErrorHandler(e);\r\n    }\r\n  }\r\n}\r\n\r\nexport type ICancelable<T> = {\r\n  flush: () => T;\r\n  cancel: () => void;\r\n  pending: () => boolean;\r\n};\r\n"]}