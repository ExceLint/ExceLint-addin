{"version":3,"file":"elementContains.js","sourceRoot":"../src/","sources":["dom/elementContains.ts"],"names":[],"mappings":";;;IACA;;;;;;OAMG;IACH,yBAAgC,MAA0B,EAAE,KAAyB,EAAE,mBAAmC;QAAnC,oCAAA,EAAA,0BAAmC;QACxH,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,MAAM,IAAI,KAAK,EAAE;YACnB,IAAI,mBAAmB,EAAE;gBACvB,WAAW,GAAG,KAAK,CAAC;gBACpB,OAAO,KAAK,EAAE;oBACZ,IAAI,UAAU,GAAuB,qBAAS,CAAC,KAAK,CAAC,CAAC;oBACtD,IAAI,UAAU,KAAK,MAAM,EAAE;wBACzB,WAAW,GAAG,IAAI,CAAC;wBACnB,MAAM;qBACP;oBACD,KAAK,GAAG,UAAU,CAAC;iBACpB;aACF;iBAAM,IAAI,MAAM,CAAC,QAAQ,EAAE;gBAC1B,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;aACtC;SACF;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAlBD,0CAkBC","sourcesContent":["import { getParent } from './getParent';\r\n/**\r\n * Determines whether or not a parent element contains a given child element.\r\n * If `allowVirtualParents` is true, this method may return `true` if the child\r\n * has the parent in its virtual element hierarchy.\r\n *\r\n * @public\r\n */\r\nexport function elementContains(parent: HTMLElement | null, child: HTMLElement | null, allowVirtualParents: boolean = true): boolean {\r\n  let isContained = false;\r\n  if (parent && child) {\r\n    if (allowVirtualParents) {\r\n      isContained = false;\r\n      while (child) {\r\n        let nextParent: HTMLElement | null = getParent(child);\r\n        if (nextParent === parent) {\r\n          isContained = true;\r\n          break;\r\n        }\r\n        child = nextParent;\r\n      }\r\n    } else if (parent.contains) {\r\n      isContained = parent.contains(child);\r\n    }\r\n  }\r\n  return isContained;\r\n}\r\n"]}