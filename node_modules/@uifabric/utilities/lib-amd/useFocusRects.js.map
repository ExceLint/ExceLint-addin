{"version":3,"file":"useFocusRects.js","sourceRoot":"../src/","sources":["useFocusRects.ts"],"names":[],"mappings":";;;IAKA;;;OAGG;IACH,IAAI,aAAa,GAAG,IAAI,OAAO,EAAkB,CAAC;IAElD,SAAS,gBAAgB,CAAC,GAAW,EAAE,KAAa;QAClD,IAAI,QAAQ,CAAC;QACb,IAAM,SAAS,GAAG,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,SAAS,EAAE;YACb,QAAQ,GAAG,SAAS,GAAG,KAAK,CAAC;SAC9B;aAAM;YACL,QAAQ,GAAG,CAAC,CAAC;SACd;QAED,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACjC,OAAO,QAAQ,CAAC;IAClB,CAAC;IAID;;;;;;;;;;;;;;OAcG;IACH,SAAgB,aAAa,CAAC,OAAsC;QAClE,KAAK,CAAC,SAAS,CAAC;;YACd,IAAM,GAAG,GAAG,qBAAS,OAAC,OAAO,0CAAE,OAAO,CAAc,CAAC;YAErD,IAAI,CAAC,GAAG,IAAI,OAAA,GAAG,CAAC,YAAY,0CAAE,iBAAiB,MAAK,IAAI,EAAE;gBACxD,OAAO,SAAS,CAAC;aAClB;YAED,IAAI,KAAK,GAAG,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACrC,IAAI,KAAK,IAAI,CAAC,EAAE;gBACd,GAAG,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;gBACtD,GAAG,CAAC,gBAAgB,CAAC,aAAa,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;gBAC1D,GAAG,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;aACnD;YAED,OAAO;;gBACL,IAAI,CAAC,GAAG,IAAI,OAAA,GAAG,CAAC,YAAY,0CAAE,iBAAiB,MAAK,IAAI,EAAE;oBACxD,OAAO;iBACR;gBAED,KAAK,GAAG,gBAAgB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClC,IAAI,KAAK,KAAK,CAAC,EAAE;oBACf,GAAG,CAAC,mBAAmB,CAAC,WAAW,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;oBACzD,GAAG,CAAC,mBAAmB,CAAC,aAAa,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;oBAC7D,GAAG,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;iBACtD;YACH,CAAC,CAAC;QACJ,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAChB,CAAC;IA5BD,sCA4BC;IAED;;;OAGG;IACU,QAAA,UAAU,GAAwE,UAAA,KAAK;QAClG,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;IAEF,SAAS,YAAY,CAAC,EAAc;QAClC,uCAAkB,CAAC,KAAK,EAAE,EAAE,CAAC,MAAiB,CAAC,CAAC;IAClD,CAAC;IAED,SAAS,cAAc,CAAC,EAAgB;QACtC,IAAI,EAAE,CAAC,WAAW,KAAK,OAAO,EAAE;YAC9B,uCAAkB,CAAC,KAAK,EAAE,EAAE,CAAC,MAAiB,CAAC,CAAC;SACjD;IACH,CAAC;IAED,SAAS,UAAU,CAAC,EAAiB;QACnC,mDAAmD;QACnD,IAAI,+BAAoB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;YAClC,uCAAkB,CAAC,IAAI,EAAE,EAAE,CAAC,MAAiB,CAAC,CAAC;SAChD;IACH,CAAC","sourcesContent":["import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n\n/**\n * Counter for mounted component that uses focus rectangle.\n * We want to cleanup the listners before last component that uses focus rectangle unmounts.\n */\nlet mountCounters = new WeakMap<Window, number>();\n\nfunction setMountCounters(key: Window, delta: number): number {\n  let newValue;\n  const currValue = mountCounters.get(key);\n  if (currValue) {\n    newValue = currValue + delta;\n  } else {\n    newValue = 1;\n  }\n\n  mountCounters.set(key, newValue);\n  return newValue;\n}\n\ntype AppWindow = (Window & { FabricConfig?: { disableFocusRects?: boolean } }) | undefined;\n\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param rootRef - A Ref object. Focus rectangle can be applied on itself and all its children.\n */\nexport function useFocusRects(rootRef?: React.RefObject<HTMLElement>): void {\n  React.useEffect(() => {\n    const win = getWindow(rootRef?.current) as AppWindow;\n\n    if (!win || win.FabricConfig?.disableFocusRects === true) {\n      return undefined;\n    }\n\n    let count = setMountCounters(win, 1);\n    if (count <= 1) {\n      win.addEventListener('mousedown', _onMouseDown, true);\n      win.addEventListener('pointerdown', _onPointerDown, true);\n      win.addEventListener('keydown', _onKeyDown, true);\n    }\n\n    return () => {\n      if (!win || win.FabricConfig?.disableFocusRects === true) {\n        return;\n      }\n\n      count = setMountCounters(win, -1);\n      if (count === 0) {\n        win.removeEventListener('mousedown', _onMouseDown, true);\n        win.removeEventListener('pointerdown', _onPointerDown, true);\n        win.removeEventListener('keydown', _onKeyDown, true);\n      }\n    };\n  }, [rootRef]);\n}\n\n/**\n * Function Component wrapper which enables calling `useFocusRects` hook.\n * Renders nothing.\n */\nexport const FocusRects: React.FunctionComponent<{ rootRef?: React.RefObject<HTMLElement> }> = props => {\n  useFocusRects(props.rootRef);\n  return null;\n};\n\nfunction _onMouseDown(ev: MouseEvent): void {\n  setFocusVisibility(false, ev.target as Element);\n}\n\nfunction _onPointerDown(ev: PointerEvent): void {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target as Element);\n  }\n}\n\nfunction _onKeyDown(ev: KeyboardEvent): void {\n  // eslint-disable-next-line deprecation/deprecation\n  if (isDirectionalKeyCode(ev.which)) {\n    setFocusVisibility(true, ev.target as Element);\n  }\n}\n"]}