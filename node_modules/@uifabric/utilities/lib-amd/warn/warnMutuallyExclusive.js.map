{"version":3,"file":"warnMutuallyExclusive.js","sourceRoot":"../src/","sources":["warn/warnMutuallyExclusive.ts"],"names":[],"mappings":";;;IACA;;;;;;;OAOG;IACH,+BAAyC,aAAqB,EAAE,KAAQ,EAAE,YAA6B;QACrG,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;YAC3E,KAAK,IAAM,QAAQ,IAAI,YAAY,EAAE;gBACnC,IAAI,KAAK,IAAI,QAAQ,IAAI,KAAK,EAAE;oBAC9B,IAAI,uBAAuB,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;oBACrD,IAAI,uBAAuB,IAAI,uBAAuB,IAAI,KAAK,EAAE;wBAC/D,WAAI,CAAI,aAAa,mBAAc,QAAQ,sCAAiC,YAAY,CAAC,QAAQ,CAAC,6BAA0B,CAAC,CAAC;qBAC/H;iBACF;aACF;SACF;IACH,CAAC;IAXD,sDAWC","sourcesContent":["import { ISettingsMap, warn } from './warn';\r\n/**\r\n * Warns when two props which are mutually exclusive are both being used.\r\n *\r\n * @public\r\n * @param componentName - The name of the component being used.\r\n * @param props - The props passed into the component.\r\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\r\n */\r\nexport function warnMutuallyExclusive<P>(componentName: string, props: P, exclusiveMap: ISettingsMap<P>): void {\r\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\r\n    for (const propName in exclusiveMap) {\r\n      if (props && propName in props) {\r\n        let propInExclusiveMapValue = exclusiveMap[propName];\r\n        if (propInExclusiveMapValue && propInExclusiveMapValue in props) {\r\n          warn(`${componentName} property '${propName}' is mutually exclusive with '${exclusiveMap[propName]}'. Use one or the other.`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}