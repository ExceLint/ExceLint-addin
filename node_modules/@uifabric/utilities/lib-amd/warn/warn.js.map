{"version":3,"file":"warn.js","sourceRoot":"../src/","sources":["warn/warn.ts"],"names":[],"mappings":";;;IAAA,IAAI,gBAAgB,GAA4C,SAAS,CAAC;IAI1E;;;;;OAKG;IACH,cAAqB,OAAe;QAClC,IAAI,gBAAgB,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;YAC/F,gBAAgB,CAAC,OAAO,CAAC,CAAC;SAC3B;aAAM,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;YAClC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACvB;IACH,CAAC;IAND,oBAMC;IAED;;;;;;OAMG;IACH,4BAAmC,eAA2C;QAC5E,gBAAgB,GAAG,eAAe,CAAC;IACrC,CAAC;IAFD,gDAEC","sourcesContent":["let _warningCallback: ((message: string) => void) | undefined = undefined;\r\n\r\nexport type ISettingsMap<T> = { [P in keyof T]?: string };\r\n\r\n/**\r\n * Sends a warning to console, if the api is present.\r\n *\r\n * @public\r\n * @param message - Warning message.\r\n */\r\nexport function warn(message: string): void {\r\n  if (_warningCallback && typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\r\n    _warningCallback(message);\r\n  } else if (console && console.warn) {\r\n    console.warn(message);\r\n  }\r\n}\r\n\r\n/**\r\n * Configures the warning callback. Passing in undefined will reset it to use the default\r\n * console.warn function.\r\n *\r\n * @public\r\n * @param warningCallback - Callback to override the generated warnings.\r\n */\r\nexport function setWarningCallback(warningCallback?: (message: string) => void): void {\r\n  _warningCallback = warningCallback;\r\n}\r\n"]}