{"version":3,"file":"GlobalSettings.js","sourceRoot":"../src/","sources":["GlobalSettings.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;;;;IAEH,wBAAwB;IAExB,IAAM,yBAAyB,GAAG,oBAAoB,CAAC;IACvD,IAAM,wBAAwB,GAAG,eAAe,CAAC;IAEjD,IAAI,QAAQ,GAAG,CAAC,CAAC;IAyBjB;;;;;;OAMG;IACH;QAAA;QAoDA,CAAC;QAnDe,uBAAQ,GAAtB,UAA0B,GAAW,EAAE,YAA4B;YACjE,IAAM,cAAc,GAAG,kBAAkB,EAAE,CAAC;YAE5C,IAAI,cAAc,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;gBACrC,cAAc,CAAC,GAAG,CAAC,GAAG,OAAO,YAAY,KAAK,UAAU,CAAC,CAAC,CAAE,YAAyB,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC;aACxG;YAED,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC;QAEa,uBAAQ,GAAtB,UAA0B,GAAW,EAAE,KAAQ;YAC7C,IAAM,cAAc,GAAG,kBAAkB,EAAE,CAAC;YAC5C,IAAM,SAAS,GAAG,cAAc,CAAC,wBAAwB,CAAC,CAAC;YAC3D,IAAI,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;YAEnC,IAAI,KAAK,KAAK,QAAQ,EAAE;gBACtB,cAAc,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAE5B,IAAI,iBAAiB,GAAG;oBACtB,QAAQ,UAAA;oBACR,KAAK,OAAA;oBACL,GAAG,KAAA;iBACJ,CAAC;gBAEF,KAAK,IAAI,EAAE,IAAI,SAAS,EAAE;oBACxB,IAAI,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE;wBAChC,SAAS,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC;qBAClC;iBACF;aACF;YAED,OAAO,KAAK,CAAC;QACf,CAAC;QAEa,gCAAiB,GAA/B,UAAgC,EAAwB;YACtD,yGAAyG;YACzG,kGAAkG;YAClG,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC;YACnB,IAAM,SAAS,GAAG,aAAa,EAAE,CAAC;YAElC,IAAI,CAAC,EAAE,EAAE;gBACP,EAAE,GAAG,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aACrC;YAED,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;QACrB,CAAC;QAEa,mCAAoB,GAAlC,UAAmC,EAAwB;YACzD,IAAM,SAAS,GAAG,aAAa,EAAE,CAAC;YAClC,OAAO,SAAS,CAAC,EAAE,CAAC,MAAgB,CAAC,CAAC;QACxC,CAAC;QACH,qBAAC;IAAD,CAAC,AApDD,IAoDC;IApDY,wCAAc;IAsD3B;QACE,IAAM,SAAS,GAA2B,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAEtF,IAAI,CAAC,SAAS,CAAC,yBAAyB,CAAC,EAAE;YACzC,SAAS,CAAC,yBAAyB,CAAC;gBAClC,GAAC,wBAAwB,IAAG,EAAE;mBAC/B,CAAC;SACH;QAED,OAAO,SAAS,CAAC,yBAAyB,CAAC,CAAC;;IAC9C,CAAC;IAED;QACE,IAAM,cAAc,GAAG,kBAAkB,EAAE,CAAC;QAC5C,OAAO,cAAc,CAAC,wBAAwB,CAAC,CAAC;IAClD,CAAC","sourcesContent":["/**\r\n * Storing global state in local module variables has issues when more than one copy\r\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\r\n * a prebundled script.)\r\n *\r\n * This file contains helpers to deal with the getting and setting local state, and allows\r\n * callers to get called back when it mutates.\r\n */\r\n\r\n// tslint:disable:no-any\r\n\r\nconst GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\r\nconst CALLBACK_STATE_PROP_NAME = '__callbacks__';\r\n\r\nlet _counter = 0;\r\n\r\n/**\r\n * Change description used for change callbacks in GlobalSettings.\r\n *\r\n * @public\r\n */\r\nexport interface IChangeDescription {\r\n  key: string;\r\n  // tslint:disable-next-line:no-any\r\n  oldValue: any;\r\n  // tslint:disable-next-line:no-any\r\n  value: any;\r\n}\r\n\r\n/**\r\n * Change event callback.\r\n *\r\n * @public\r\n */\r\nexport interface IChangeEventCallback {\r\n  __id__?: string;\r\n  (changeDescription?: IChangeDescription): void;\r\n}\r\n\r\n/**\r\n * Global settings helper, which stores settings in the global (window) namespace.\r\n * If window is not provided, it will store settings in module scope. Provides a\r\n * way to observe changes as well when their values change.\r\n *\r\n * @public\r\n */\r\nexport class GlobalSettings {\r\n  public static getValue<T>(key: string, defaultValue?: T | (() => T)): T {\r\n    const globalSettings = _getGlobalSettings();\r\n\r\n    if (globalSettings[key] === undefined) {\r\n      globalSettings[key] = typeof defaultValue === 'function' ? (defaultValue as Function)() : defaultValue;\r\n    }\r\n\r\n    return globalSettings[key];\r\n  }\r\n\r\n  public static setValue<T>(key: string, value: T): T {\r\n    const globalSettings = _getGlobalSettings();\r\n    const callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\r\n    let oldValue = globalSettings[key];\r\n\r\n    if (value !== oldValue) {\r\n      globalSettings[key] = value;\r\n\r\n      let changeDescription = {\r\n        oldValue,\r\n        value,\r\n        key\r\n      };\r\n\r\n      for (let id in callbacks) {\r\n        if (callbacks.hasOwnProperty(id)) {\r\n          callbacks[id](changeDescription);\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public static addChangeListener(cb: IChangeEventCallback): void {\r\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\r\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\r\n    let id = cb.__id__;\r\n    const callbacks = _getCallbacks();\r\n\r\n    if (!id) {\r\n      id = cb.__id__ = String(_counter++);\r\n    }\r\n\r\n    callbacks[id] = cb;\r\n  }\r\n\r\n  public static removeChangeListener(cb: IChangeEventCallback): void {\r\n    const callbacks = _getCallbacks();\r\n    delete callbacks[cb.__id__ as string];\r\n  }\r\n}\r\n\r\nfunction _getGlobalSettings(): { [key: string]: any } {\r\n  const globalObj: { [key: string]: any } = typeof window !== 'undefined' ? window : {};\r\n\r\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\r\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = {\r\n      [CALLBACK_STATE_PROP_NAME]: {}\r\n    };\r\n  }\r\n\r\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\r\n}\r\n\r\nfunction _getCallbacks(): { [key: string]: () => void } {\r\n  const globalSettings = _getGlobalSettings();\r\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\r\n}\r\n"]}