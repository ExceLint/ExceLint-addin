{"version":3,"file":"Rectangle.js","sourceRoot":"../src/","sources":["Rectangle.ts"],"names":[],"mappings":";;;IAAA;;;;OAIG;IACH;QAME,mBAAY,IAAgB,EAAE,KAAiB,EAAE,GAAe,EAAE,MAAkB;YAAxE,qBAAA,EAAA,QAAgB;YAAE,sBAAA,EAAA,SAAiB;YAAE,oBAAA,EAAA,OAAe;YAAE,uBAAA,EAAA,UAAkB;YAClF,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC;QAKD,sBAAI,4BAAK;YAHT;;eAEG;iBACH;gBACE,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YAChC,CAAC;;;WAAA;QAKD,sBAAI,6BAAM;YAHV;;eAEG;iBACH;gBACE,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;YAChC,CAAC;;;WAAA;QAED;;WAEG;QACI,0BAAM,GAAb,UAAc,IAAe;YAC3B,+HAA+H;YAC/H,kCAAkC;YAClC,OAAO,CACL,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACnE,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACzE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACrE,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CACxE,CAAC;QACJ,CAAC;QACH,gBAAC;IAAD,CAAC,AAxCD,IAwCC;IAxCY,8BAAS","sourcesContent":["/**\r\n * Rectangle helper class.\r\n *\r\n * @public\r\n */\r\nexport class Rectangle {\r\n  public top: number;\r\n  public bottom: number;\r\n  public left: number;\r\n  public right: number;\r\n\r\n  constructor(left: number = 0, right: number = 0, top: number = 0, bottom: number = 0) {\r\n    this.top = top;\r\n    this.bottom = bottom;\r\n    this.left = left;\r\n    this.right = right;\r\n  }\r\n\r\n  /**\r\n   * Calculated automatically by subtracting the right from left\r\n   */\r\n  get width(): number {\r\n    return this.right - this.left;\r\n  }\r\n\r\n  /**\r\n   * Calculated automatically by subtracting the bottom from top.\r\n   */\r\n  get height(): number {\r\n    return this.bottom - this.top;\r\n  }\r\n\r\n  /**\r\n   * Tests if another rect is approximately equal to this rect (within 4 decimal places.)\r\n   */\r\n  public equals(rect: Rectangle): boolean {\r\n    // I'm fixing it to 4 decimal places because it allows enough precision and will handle cases when something should be rounded,\r\n    // like .999999 should round to 1.\r\n    return (\r\n      parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) &&\r\n      parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) &&\r\n      parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) &&\r\n      parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4))\r\n    );\r\n  }\r\n}\r\n"]}