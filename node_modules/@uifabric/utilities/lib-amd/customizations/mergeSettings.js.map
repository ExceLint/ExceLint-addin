{"version":3,"file":"mergeSettings.js","sourceRoot":"../src/","sources":["customizations/mergeSettings.ts"],"names":[],"mappings":";;;IAEA;;;;;;OAMG;IACH,uBAA8B,WAA2B,EAAE,WAA2C;QAAxE,4BAAA,EAAA,gBAA2B;QACvD,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAE3G,OAAO,iBAAiB,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAJD,sCAIC;IAED,6BAAoC,WAA2B,EAAE,WAA2C;QAAxE,4BAAA,EAAA,gBAA2B;QAC7D,IAAM,iBAAiB,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC;QAEjH,OAAO,iBAAiB,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;IAJD,kDAIC;IAED,6BAA6B,QAAwC;QACnE,OAAO,OAAO,QAAQ,KAAK,UAAU,CAAC;IACxC,CAAC;IAED,4BAA4B,WAAoB;QAC9C,OAAO,UAAC,QAAmB,IAAK,OAAA,CAAC,WAAW,CAAC,CAAC,sBAAM,QAAQ,EAAK,WAAW,EAAG,CAAC,CAAC,QAAQ,CAAC,EAA1D,CAA0D,CAAC;IAC7F,CAAC;IAED,kCAAkC,uBAAuC;QAAvC,wCAAA,EAAA,4BAAuC;QACvE,OAAO,UAAC,iBAA4B;YAClC,IAAM,iBAAiB,wBAAmB,iBAAiB,CAAE,CAAC;YAE9D,KAAK,IAAI,SAAS,IAAI,uBAAuB,EAAE;gBAC7C,IAAI,uBAAuB,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;oBACrD,iBAAiB,CAAC,SAAS,CAAC,wBAAQ,iBAAiB,CAAC,SAAS,CAAC,EAAK,uBAAuB,CAAC,SAAS,CAAC,CAAE,CAAC;iBAC3G;aACF;YAED,OAAO,iBAAiB,CAAC;QAC3B,CAAC,CAAC;IACJ,CAAC","sourcesContent":["import { ISettings, ISettingsFunction } from './Customizations';\r\n\r\n/**\r\n * Merge new and old settings, giving priority to new settings.\r\n * New settings is optional in which case oldSettings is returned as-is.\r\n * @param oldSettings - Old settings to fall back to.\r\n * @param newSettings - New settings that will be merged over oldSettings.\r\n * @returns Merged settings.\r\n */\r\nexport function mergeSettings(oldSettings: ISettings = {}, newSettings?: ISettings | ISettingsFunction): ISettings {\r\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\r\n\r\n  return mergeSettingsWith(oldSettings);\r\n}\r\n\r\nexport function mergeScopedSettings(oldSettings: ISettings = {}, newSettings?: ISettings | ISettingsFunction): ISettings {\r\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\r\n\r\n  return mergeSettingsWith(oldSettings);\r\n}\r\n\r\nfunction _isSettingsFunction(settings?: ISettings | ISettingsFunction): settings is ISettingsFunction {\r\n  return typeof settings === 'function';\r\n}\r\n\r\nfunction _settingsMergeWith(newSettings?: object): (settings: ISettings) => ISettings {\r\n  return (settings: ISettings) => (newSettings ? { ...settings, ...newSettings } : settings);\r\n}\r\n\r\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps: ISettings = {}): (scopedSettings: ISettings) => ISettings {\r\n  return (oldScopedSettings: ISettings): ISettings => {\r\n    const newScopedSettings: ISettings = { ...oldScopedSettings };\r\n\r\n    for (let scopeName in scopedSettingsFromProps) {\r\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\r\n        newScopedSettings[scopeName] = { ...oldScopedSettings[scopeName], ...scopedSettingsFromProps[scopeName] };\r\n      }\r\n    }\r\n\r\n    return newScopedSettings;\r\n  };\r\n}\r\n"]}