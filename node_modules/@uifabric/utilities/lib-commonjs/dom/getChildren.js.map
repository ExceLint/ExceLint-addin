{"version":3,"file":"getChildren.js","sourceRoot":"../src/","sources":["dom/getChildren.ts"],"names":[],"mappings":";;AAAA,uDAAsD;AACtD;;;;;;GAMG;AACH,qBAA4B,MAAmB,EAAE,oBAAoC;IAApC,qCAAA,EAAA,2BAAoC;IACnF,IAAM,QAAQ,GAAkB,EAAE,CAAC;IACnC,IAAI,MAAM,EAAE;QACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAgB,CAAC,CAAC;SACvD;QACD,IAAI,oBAAoB,IAAI,mCAAgB,CAAC,MAAM,CAAC,EAAE;YACpD,QAAQ,CAAC,IAAI,OAAb,QAAQ,EAAS,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE;SAC5C;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAXD,kCAWC","sourcesContent":["import { isVirtualElement } from './isVirtualElement';\r\n/**\r\n * Gets the elements which are child elements of the given element.\r\n * If `allowVirtualChildren` is `true`, this method enumerates virtual child elements\r\n * after the original children.\r\n * @param parent - The element to get the children of.\r\n * @param allowVirtualChildren - true if the method should enumerate virtual child elements.\r\n */\r\nexport function getChildren(parent: HTMLElement, allowVirtualChildren: boolean = true): HTMLElement[] {\r\n  const children: HTMLElement[] = [];\r\n  if (parent) {\r\n    for (let i = 0; i < parent.children.length; i++) {\r\n      children.push(parent.children.item(i) as HTMLElement);\r\n    }\r\n    if (allowVirtualChildren && isVirtualElement(parent)) {\r\n      children.push(...parent._virtual.children);\r\n    }\r\n  }\r\n  return children;\r\n}\r\n"]}