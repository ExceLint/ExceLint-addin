{"version":3,"file":"styled.js","sourceRoot":"../src/","sources":["styled.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { concatStyleSets, IStyleSet, IStyleFunctionOrObject, IConcatenatedStyleSet } from '@uifabric/merge-styles';\r\nimport { Customizations } from './customizations/Customizations';\r\nimport { CustomizerContext, ICustomizerContext } from './customizations/CustomizerContext';\r\n\r\nexport interface IPropsWithStyles<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>> {\r\n  styles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\r\n}\r\n\r\nexport interface ICustomizableProps {\r\n  /**\r\n   * Name of scope, which can be targeted using the Customizer.\r\n   */\r\n  scope: string;\r\n\r\n  /**\r\n   * List of fields which can be customized.\r\n   * @defaultvalue [ 'theme', 'styles' ]\r\n   */\r\n  fields?: string[];\r\n}\r\n\r\nconst DefaultFields = ['theme', 'styles'];\r\n\r\n/**\r\n * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve\r\n * getStyles functional props, and mix customized props passed in using concatStyleSets.\r\n *\r\n * @example\r\n * ```tsx\r\n * export const Toggle = styled(\r\n *   ToggleBase,\r\n *   props => ({ root: { background: 'red' }})\r\n * );\r\n * ```\r\n * @param Component - The unstyled base component to render, which receives styles.\r\n * @param baseStyles - The styles which should be curried with the component.\r\n * @param getProps - A helper which provides default props.\r\n * @param customizable - An object which defines which props can be customized using the Customizer.\r\n */\r\nexport function styled<\r\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>,\r\n  TStyleProps,\r\n  TStyleSet extends IStyleSet<TStyleSet>\r\n>(\r\n  Component: React.ComponentClass<TComponentProps> | React.StatelessComponent<TComponentProps>,\r\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\r\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\r\n  customizable?: ICustomizableProps\r\n): React.StatelessComponent<TComponentProps> {\r\n  customizable = customizable || { scope: '', fields: undefined };\r\n\r\n  const { scope, fields = DefaultFields } = customizable;\r\n\r\n  class Wrapped extends React.Component<TComponentProps, {}> {\r\n    // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\r\n    // able to drop IE 11 support and compile with ES6 libs\r\n    // tslint:disable-next-line:no-any\r\n    public static displayName = `Styled${Component.displayName || (Component as any).name}`;\r\n\r\n    private _inCustomizerContext = false;\r\n\r\n    public render(): JSX.Element {\r\n      return (\r\n        <CustomizerContext.Consumer>\r\n          {(context: ICustomizerContext) => {\r\n            this._inCustomizerContext = !!context.customizations.inCustomizerContext;\r\n\r\n            const settings = Customizations.getSettings(fields, scope, context.customizations);\r\n            const { styles: customizedStyles, ...rest } = settings;\r\n            const styles = (styleProps: TStyleProps) => _resolve(styleProps, baseStyles, customizedStyles, this.props.styles);\r\n\r\n            const additionalProps = getProps ? getProps(this.props) : undefined;\r\n            return <Component {...rest} {...additionalProps} {...this.props} styles={styles} />;\r\n          }}\r\n        </CustomizerContext.Consumer>\r\n      );\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n      if (!this._inCustomizerContext) {\r\n        Customizations.observe(this._onSettingsChanged);\r\n      }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n      if (!this._inCustomizerContext) {\r\n        Customizations.unobserve(this._onSettingsChanged);\r\n      }\r\n    }\r\n\r\n    private _onSettingsChanged = () => this.forceUpdate();\r\n  }\r\n\r\n  // This preserves backwards compatibility.\r\n  // tslint:disable-next-line:no-any\r\n  return Wrapped as any;\r\n}\r\n\r\nfunction _resolve<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>>(\r\n  styleProps: TStyleProps,\r\n  ...allStyles: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[]\r\n): IConcatenatedStyleSet<TStyleSet> | undefined {\r\n  const result: Partial<TStyleSet>[] = [];\r\n\r\n  for (const styles of allStyles) {\r\n    if (styles) {\r\n      result.push(typeof styles === 'function' ? styles(styleProps) : styles);\r\n    }\r\n  }\r\n  if (result.length) {\r\n    // cliffkoh: I cannot figure out how to avoid the cast to any here.\r\n    // It is something to do with the use of Omit in IStyleSet.\r\n    // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on\r\n    // the official version).\r\n    // tslint:disable-next-line:no-any\r\n    return concatStyleSets(...(result as any)) as IConcatenatedStyleSet<TStyleSet>;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n"]}