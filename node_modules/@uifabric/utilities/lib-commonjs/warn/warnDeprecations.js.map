{"version":3,"file":"warnDeprecations.js","sourceRoot":"../src/","sources":["warn/warnDeprecations.ts"],"names":[],"mappings":";;AAAA,+BAA4C;AAC5C;;;;;;;;GAQG;AACH,0BAAoC,aAAqB,EAAE,KAAQ,EAAE,cAA+B;IAClG,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;QAC3E,KAAK,IAAM,QAAQ,IAAI,cAAc,EAAE;YACrC,IAAI,KAAK,IAAI,QAAQ,IAAI,KAAK,EAAE;gBAC9B,IAAI,kBAAkB,GAAM,aAAa,mBAAc,QAAQ,wCAAqC,CAAC;gBACrG,IAAM,mBAAmB,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACrD,IAAI,mBAAmB,EAAE;oBACvB,kBAAkB,IAAI,WAAS,mBAAmB,eAAY,CAAC;iBAChE;gBACD,WAAI,CAAC,kBAAkB,CAAC,CAAC;aAC1B;SACF;KACF;AACH,CAAC;AAbD,4CAaC","sourcesContent":["import { ISettingsMap, warn } from './warn';\r\n/**\r\n * Warns when a deprecated props are being used.\r\n *\r\n * @public\r\n * @param componentName - The name of the component being used.\r\n * @param props - The props passed into the component.\r\n * @param deprecationMap - The map of deprecations, where key is the prop name and the value is\r\n * either null or a replacement prop name.\r\n */\r\nexport function warnDeprecations<P>(componentName: string, props: P, deprecationMap: ISettingsMap<P>): void {\r\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\r\n    for (const propName in deprecationMap) {\r\n      if (props && propName in props) {\r\n        let deprecationMessage = `${componentName} property '${propName}' was used but has been deprecated.`;\r\n        const replacementPropName = deprecationMap[propName];\r\n        if (replacementPropName) {\r\n          deprecationMessage += ` Use '${replacementPropName}' instead.`;\r\n        }\r\n        warn(deprecationMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}