{"version":3,"file":"array.js","sourceRoot":"../src/","sources":["array.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Helper to find the index of an item within an array, using a callback to\r\n * determine the match.\r\n *\r\n * @public\r\n * @param array - Array to search.\r\n * @param cb - Callback which returns true on matches.\r\n */\r\nexport function findIndex<T>(array: T[], cb: (item: T, index: number) => boolean): number {\r\n  let index = -1;\r\n\r\n  for (let i = 0; array && i < array.length; i++) {\r\n    if (cb(array[i], i)) {\r\n      index = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return index;\r\n}\r\n\r\n/**\r\n * Helper to find the first item within an array that satisfies the callback.\r\n * @param array - Array to search\r\n * @param cb - Callback which returns true on matches\r\n */\r\nexport function find<T>(array: T[], cb: (item: T, index: number) => boolean): T | undefined {\r\n  let index = findIndex(array, cb);\r\n\r\n  if (index < 0) {\r\n    return undefined;\r\n  }\r\n\r\n  return array[index];\r\n}\r\n\r\n/**\r\n * Creates an array of a given size and helper method to populate.\r\n *\r\n * @public\r\n * @param size - Size of array.\r\n * @param getItem - Callback to populate given cell index.\r\n */\r\nexport function createArray<T>(size: number, getItem: (index: number) => T): T[] {\r\n  let array: T[] = [];\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    array.push(getItem(i));\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n/**\r\n * Convert the given array to a matrix with columnCount number\r\n * of columns.\r\n *\r\n * @public\r\n * @param items - The array to convert\r\n * @param columnCount - The number of columns for the resulting matrix\r\n * @returns A matrix of items\r\n */\r\nexport function toMatrix<T>(items: T[], columnCount: number): T[][] {\r\n  return items.reduce(\r\n    (rows: T[][], currentValue: T, index: number) => {\r\n      if (index % columnCount === 0) {\r\n        rows.push([currentValue]);\r\n      } else {\r\n        rows[rows.length - 1].push(currentValue);\r\n      }\r\n      return rows;\r\n    },\r\n    [] as T[][]\r\n  );\r\n}\r\n\r\n/**\r\n * Given an array, it returns a new array that does not contain the item at the given index.\r\n * @param array - The array to operate on\r\n * @param index - The index of the element to remove\r\n */\r\nexport function removeIndex<T>(array: T[], index: number): T[] {\r\n  return array.filter((_: T, i: number) => index !== i);\r\n}\r\n\r\n/**\r\n * Given an array, this function returns a new array where the element at a given index has been replaced.\r\n * @param array - The array to operate on\r\n * @param newElement - The element that will be placed in the new array\r\n * @param index - The index of the element that should be replaced\r\n */\r\nexport function replaceElement<T>(array: T[], newElement: T, index: number): T[] {\r\n  const copy = array.slice();\r\n  copy[index] = newElement;\r\n  return copy;\r\n}\r\n\r\n/**\r\n * Given an array, this function returns a new array where an element has been inserted at the given index.\r\n * @param array - The array to operate on\r\n * @param index - The index where an element should be inserted\r\n * @param itemToAdd - The element to insert\r\n */\r\nexport function addElementAtIndex<T>(array: T[], index: number, itemToAdd: T): T[] {\r\n  const copy = array.slice();\r\n  copy.splice(index, 0, itemToAdd);\r\n  return copy;\r\n}\r\n\r\n/**\r\n * Given an array where each element is of type T or T[], flatten it into an array of T\r\n * @param array - The array where each element can optionally also be an array\r\n */\r\nexport function flatten<T>(array: (T | T[])[]): T[] {\r\n  let result: T[] = [];\r\n  array.forEach((item: T | T[]): T[] => (result = result.concat(item)));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a boolean indicating if the two given arrays are equal in length and values.\r\n *\r\n * @param array1 - First array to compare\r\n * @param array2 - Second array to compare\r\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\r\n */\r\nexport function arraysEqual<T>(array1: T[], array2: T[]): boolean {\r\n  if (array1.length !== array2.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < array1.length; i++) {\r\n    if (array1[i] !== array2[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n"]}