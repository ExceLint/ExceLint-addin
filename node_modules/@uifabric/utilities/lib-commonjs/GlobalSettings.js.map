{"version":3,"file":"GlobalSettings.js","sourceRoot":"../src/","sources":["GlobalSettings.ts"],"names":[],"mappings":";AAAA;;;;;;;GAOG;;AAEH,wBAAwB;AAExB,IAAM,yBAAyB,GAAG,oBAAoB,CAAC;AACvD,IAAM,wBAAwB,GAAG,eAAe,CAAC;AAEjD,IAAI,QAAQ,GAAG,CAAC,CAAC;AAyBjB;;;;;;GAMG;AACH;IAAA;IAoDA,CAAC;IAnDe,uBAAQ,GAAtB,UAA0B,GAAW,EAAE,YAA4B;QACjE,IAAM,cAAc,GAAG,kBAAkB,EAAE,CAAC;QAE5C,IAAI,cAAc,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;YACrC,cAAc,CAAC,GAAG,CAAC,GAAG,OAAO,YAAY,KAAK,UAAU,CAAC,CAAC,CAAE,YAAyB,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC;SACxG;QAED,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IAEa,uBAAQ,GAAtB,UAA0B,GAAW,EAAE,KAAQ;QAC7C,IAAM,cAAc,GAAG,kBAAkB,EAAE,CAAC;QAC5C,IAAM,SAAS,GAAG,cAAc,CAAC,wBAAwB,CAAC,CAAC;QAC3D,IAAI,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;QAEnC,IAAI,KAAK,KAAK,QAAQ,EAAE;YACtB,cAAc,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YAE5B,IAAI,iBAAiB,GAAG;gBACtB,QAAQ,UAAA;gBACR,KAAK,OAAA;gBACL,GAAG,KAAA;aACJ,CAAC;YAEF,KAAK,IAAI,EAAE,IAAI,SAAS,EAAE;gBACxB,IAAI,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE;oBAChC,SAAS,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC;iBAClC;aACF;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEa,gCAAiB,GAA/B,UAAgC,EAAwB;QACtD,yGAAyG;QACzG,kGAAkG;QAClG,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC;QACnB,IAAM,SAAS,GAAG,aAAa,EAAE,CAAC;QAElC,IAAI,CAAC,EAAE,EAAE;YACP,EAAE,GAAG,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrC;QAED,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;IAEa,mCAAoB,GAAlC,UAAmC,EAAwB;QACzD,IAAM,SAAS,GAAG,aAAa,EAAE,CAAC;QAClC,OAAO,SAAS,CAAC,EAAE,CAAC,MAAgB,CAAC,CAAC;IACxC,CAAC;IACH,qBAAC;AAAD,CAAC,AApDD,IAoDC;AApDY,wCAAc;AAsD3B;IACE,IAAM,SAAS,GAA2B,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;IAEtF,IAAI,CAAC,SAAS,CAAC,yBAAyB,CAAC,EAAE;QACzC,SAAS,CAAC,yBAAyB,CAAC;YAClC,GAAC,wBAAwB,IAAG,EAAE;eAC/B,CAAC;KACH;IAED,OAAO,SAAS,CAAC,yBAAyB,CAAC,CAAC;;AAC9C,CAAC;AAED;IACE,IAAM,cAAc,GAAG,kBAAkB,EAAE,CAAC;IAC5C,OAAO,cAAc,CAAC,wBAAwB,CAAC,CAAC;AAClD,CAAC","sourcesContent":["/**\r\n * Storing global state in local module variables has issues when more than one copy\r\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\r\n * a prebundled script.)\r\n *\r\n * This file contains helpers to deal with the getting and setting local state, and allows\r\n * callers to get called back when it mutates.\r\n */\r\n\r\n// tslint:disable:no-any\r\n\r\nconst GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\r\nconst CALLBACK_STATE_PROP_NAME = '__callbacks__';\r\n\r\nlet _counter = 0;\r\n\r\n/**\r\n * Change description used for change callbacks in GlobalSettings.\r\n *\r\n * @public\r\n */\r\nexport interface IChangeDescription {\r\n  key: string;\r\n  // tslint:disable-next-line:no-any\r\n  oldValue: any;\r\n  // tslint:disable-next-line:no-any\r\n  value: any;\r\n}\r\n\r\n/**\r\n * Change event callback.\r\n *\r\n * @public\r\n */\r\nexport interface IChangeEventCallback {\r\n  __id__?: string;\r\n  (changeDescription?: IChangeDescription): void;\r\n}\r\n\r\n/**\r\n * Global settings helper, which stores settings in the global (window) namespace.\r\n * If window is not provided, it will store settings in module scope. Provides a\r\n * way to observe changes as well when their values change.\r\n *\r\n * @public\r\n */\r\nexport class GlobalSettings {\r\n  public static getValue<T>(key: string, defaultValue?: T | (() => T)): T {\r\n    const globalSettings = _getGlobalSettings();\r\n\r\n    if (globalSettings[key] === undefined) {\r\n      globalSettings[key] = typeof defaultValue === 'function' ? (defaultValue as Function)() : defaultValue;\r\n    }\r\n\r\n    return globalSettings[key];\r\n  }\r\n\r\n  public static setValue<T>(key: string, value: T): T {\r\n    const globalSettings = _getGlobalSettings();\r\n    const callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\r\n    let oldValue = globalSettings[key];\r\n\r\n    if (value !== oldValue) {\r\n      globalSettings[key] = value;\r\n\r\n      let changeDescription = {\r\n        oldValue,\r\n        value,\r\n        key\r\n      };\r\n\r\n      for (let id in callbacks) {\r\n        if (callbacks.hasOwnProperty(id)) {\r\n          callbacks[id](changeDescription);\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public static addChangeListener(cb: IChangeEventCallback): void {\r\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\r\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\r\n    let id = cb.__id__;\r\n    const callbacks = _getCallbacks();\r\n\r\n    if (!id) {\r\n      id = cb.__id__ = String(_counter++);\r\n    }\r\n\r\n    callbacks[id] = cb;\r\n  }\r\n\r\n  public static removeChangeListener(cb: IChangeEventCallback): void {\r\n    const callbacks = _getCallbacks();\r\n    delete callbacks[cb.__id__ as string];\r\n  }\r\n}\r\n\r\nfunction _getGlobalSettings(): { [key: string]: any } {\r\n  const globalObj: { [key: string]: any } = typeof window !== 'undefined' ? window : {};\r\n\r\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\r\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = {\r\n      [CALLBACK_STATE_PROP_NAME]: {}\r\n    };\r\n  }\r\n\r\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\r\n}\r\n\r\nfunction _getCallbacks(): { [key: string]: () => void } {\r\n  const globalSettings = _getGlobalSettings();\r\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\r\n}\r\n"]}