{"version":3,"file":"setVersion.js","sourceRoot":"../src/","sources":["setVersion.ts"],"names":[],"mappings":";;AAAA,wGAAwG;AACxG,+DAA+D;AAC/D,IAAM,aAAa,GAA+B,EAAE,CAAC;AACrD,oBAA2B,WAAmB,EAAE,cAAsB;IACpE,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QACjC,kCAAkC;QAClC,IAAM,QAAQ,GAAG,CAAE,MAAc,CAAC,YAAY,GAAI,MAAc,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC;QAErF,oIAAoI;QACpI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE;YACzD,aAAa,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC;YAC5C,IAAM,QAAQ,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;YACvE,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SAC/B;KACF;AACH,CAAC;AAZD,gCAYC","sourcesContent":["// A packages cache that makes sure that we don't inject the same packageName twice in the same bundle -\r\n// this cache is local to the module closure inside this bundle\r\nconst packagesCache: { [name: string]: string } = {};\r\nexport function setVersion(packageName: string, packageVersion: string): void {\r\n  if (typeof window !== 'undefined') {\r\n    // tslint:disable-next-line:no-any\r\n    const packages = ((window as any).__packages__ = (window as any).__packages__ || {});\r\n\r\n    // We allow either the global packages or local packages caches to invalidate so testing can just clear the global to set this state\r\n    if (!packages[packageName] || !packagesCache[packageName]) {\r\n      packagesCache[packageName] = packageVersion;\r\n      const versions = (packages[packageName] = packages[packageName] || []);\r\n      versions.push(packageVersion);\r\n    }\r\n  }\r\n}\r\n"]}