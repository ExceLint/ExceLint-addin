{"version":3,"file":"PerformanceMetricsTelemetryProcessor.js","sourceRoot":"","sources":["../../TelemetryProcessors/PerformanceMetricsTelemetryProcessor.ts"],"names":[],"mappings":";;AAGA,sEAAyE;AACzE,yDAA2D;AAE3D,8CAAqD,QAA4B,EAAE,MAA+B;IAC9G,0DAA0D;IAC1D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACT,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED,kEAAkE;IAClE,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7B,KAAK,aAAa,CAAC,mBAAmB,CAAC,SAAS;YAC5C,sBAAsB,CAAC,cAAc,EAAE,CAAC;YACxC,KAAK,CAAC;QACV,KAAK,aAAa,CAAC,mBAAmB,CAAC,OAAO;YAC1C,IAAM,WAAW,GAA2B,QAAQ,CAAC,IAAY,CAAC,QAAQ,CAAC;YAC3E,sBAAsB,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;YAC/E,KAAK,CAAC;QACV,KAAK,aAAa,CAAC,mBAAmB,CAAC,UAAU;YAC7C,IAAM,oBAAoB,GAAoC,QAAQ,CAAC,IAAY,CAAC,QAAQ,CAAC;YAC7F,sBAAsB,CAAC,eAAe,CAAC,oBAAoB,CAAC,QAAQ,EAAE,oBAAoB,CAAC,OAAO,CAAC,CAAC;YACpG,KAAK,CAAC;IACd,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC;AArBD,oFAqBC","sourcesContent":["import Contracts = require(\"../Declarations/Contracts\");\nimport Logging = require(\"../Library/Logging\");\nimport QuickPulseStateManager = require(\"../Library/QuickPulseStateManager\")\nimport AutoCollectPerformance = require(\"../AutoCollection/Performance\");\nimport * as TelemetryType from \"../Declarations/Contracts\";\n\nexport function performanceMetricsTelemetryProcessor(envelope: Contracts.Envelope, client?: QuickPulseStateManager): boolean {\n    // If live metrics is enabled, forward all telemetry there\n    if (client) {\n        client.addDocument(envelope);\n    }\n\n    // Increment rate counters (for standard metrics and live metrics)\n    switch (envelope.data.baseType) {\n        case TelemetryType.TelemetryTypeString.Exception:\n            AutoCollectPerformance.countException();\n            break;\n        case TelemetryType.TelemetryTypeString.Request:\n            const requestData: Contracts.RequestData = (envelope.data as any).baseData;\n            AutoCollectPerformance.countRequest(requestData.duration, requestData.success);\n            break;\n        case TelemetryType.TelemetryTypeString.Dependency:\n            const remoteDependencyData: Contracts.RemoteDependencyData = (envelope.data as any).baseData;\n            AutoCollectPerformance.countDependency(remoteDependencyData.duration, remoteDependencyData.success);\n            break;\n    }\n    return true;\n}\n"]}