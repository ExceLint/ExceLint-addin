{"version":3,"file":"DiagnosticLogger.js","sourceRoot":"","sources":["../../Bootstrap/DiagnosticLogger.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAEb,2BAA6B;AAE7B,uCAAyC;AACzC,2CAA0C;AAC1C,qDAAgD;AAEhD;IAmBI,0BAAoB,OAAwC;QAAxC,wBAAA,EAAA,iBAAwC;QAAxC,YAAO,GAAP,OAAO,CAAiC;IAAG,CAAC;IAEhE,qCAAU,GAAV,UAAW,OAAyC,EAAE,EAAyB;QAC3E,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,UAAU,IAAI,IAAI,CAAC,OAAO,YAAY,uBAAU,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;QAC/B,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC9B,IAAM,iBAAiB,gBAChB,gBAAgB,CAAC,eAAe,IACnC,OAAO,SAAA,EACP,KAAK,qBACL,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GACjC,CAAC;YACF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,wBAAkC,CAAC,CAAC,CAAC;gBAClD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAChC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC;IACL,CAAC;IAED,mCAAQ,GAAR,UAAS,OAAyC,EAAE,EAAyB;QACzE,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,UAAU,IAAI,IAAI,CAAC,OAAO,YAAY,uBAAU,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;QAC/B,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC9B,IAAM,iBAAiB,gBAChB,gBAAgB,CAAC,eAAe,IACnC,OAAO,SAAA,EACP,KAAK,uBACL,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GACjC,CAAC;YACF,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAC1C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;IACL,CAAC;IAxDsB,kCAAiB,GAAW,oCAAoC,CAAC;IACjE,gCAAe,GAAW,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,IAAI,CAAC,IAAI,CAAC,qBAAO,EAAE,8BAA8B,CAAC,CAAC;IAChI,gCAAe,GAA4B;QACrD,OAAO,EAAE,IAAI;QACb,KAAK,EAAE,IAAI;QACX,IAAI,EAAE,IAAI;QACV,MAAM,EAAE,2CAA2C;QACnD,UAAU,EAAE;YACR,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE,SAAS;YACpB,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB;YACvC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,8BAA8B;YAChD,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,0CAA0C;YACxE,UAAU,EAAE,OAAO;YACnB,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;SACvG;KACJ,CAAA;IAyCL,uBAAC;CAAA,AA1DD,IA0DC;AA1DY,4CAAgB","sourcesContent":["\"use strict\";\n\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport * as DataModel from \"./DataModel\";\nimport { FileWriter } from \"./FileWriter\";\nimport { homedir } from \"./Helpers/FileHelpers\";\n\nexport class DiagnosticLogger {\n    public static readonly DEFAULT_FILE_NAME: string = \"application-insights-extension.log\";\n    public static readonly DEFAULT_LOG_DIR: string = process.env.APPLICATIONINSIGHTS_LOGDIR || path.join(homedir, \"LogFiles/ApplicationInsights\");\n    public static DefaultEnvelope: DataModel.DiagnosticLog = {\n        message: null,\n        level: null,\n        time: null,\n        logger: \"applicationinsights.extension.diagnostics\",\n        properties: {\n            language: \"nodejs\",\n            operation: \"Startup\",\n            siteName: process.env.WEBSITE_SITE_NAME,\n            ikey: process.env.APPINSIGHTS_INSTRUMENTATIONKEY,\n            extensionVersion: process.env.ApplicationInsightsAgent_EXTENSION_VERSION,\n            sdkVersion: \"1.8.8\",\n            subscriptionId: process.env.WEBSITE_OWNER_NAME ? process.env.WEBSITE_OWNER_NAME.split(\"+\")[0] : null,\n        }\n    }\n\n    constructor(private _writer: DataModel.AgentLogger = console) {}\n\n    logMessage(message: DataModel.DiagnosticLog | string, cb?: (err: Error) => void) {\n        if (typeof cb === \"function\" && this._writer instanceof FileWriter) {\n            this._writer.callback = cb;\n        }\n        if (typeof message === \"string\") {\n            const diagnosticMessage: DataModel.DiagnosticLog = {\n                ...DiagnosticLogger.DefaultEnvelope,\n                message,\n                level: DataModel.SeverityLevel.INFO,\n                time: new Date().toISOString(),\n            };\n            this._writer.log(diagnosticMessage);\n        } else {\n            if (message.level === DataModel.SeverityLevel.ERROR) {\n                this._writer.error(message);\n            } else {\n                this._writer.log(message);\n            }\n        }\n    }\n\n    logError(message: DataModel.DiagnosticLog | string, cb?: (err: Error) => void) {\n        if (typeof cb === \"function\" && this._writer instanceof FileWriter) {\n            this._writer.callback = cb;\n        }\n        if (typeof message === \"string\") {\n            const diagnosticMessage: DataModel.DiagnosticLog = {\n                ...DiagnosticLogger.DefaultEnvelope,\n                message,\n                level: DataModel.SeverityLevel.ERROR,\n                time: new Date().toUTCString()\n            };\n            this._writer.error(diagnosticMessage);\n        } else {\n            this._writer.error(message);\n        }\n    }\n}\n"]}