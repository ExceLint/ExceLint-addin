{"version":3,"file":"Default.js","sourceRoot":"","sources":["../../Bootstrap/Default.ts"],"names":[],"mappings":"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","sourcesContent":["import * as types from \"../applicationinsights\";\nimport * as Helpers from \"./Helpers\";\nimport * as DataModel from \"./DataModel\";\nimport Constants = require(\"../Declarations/Constants\");\nimport { StatusLogger, StatusContract } from \"./StatusLogger\";\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\n\n// Private configuration vars\nlet _appInsights: typeof types | null;\nlet _prefix = \"ad_\"; // App Services, Default\nlet _logger: DiagnosticLogger = new DiagnosticLogger(console);\nlet _statusLogger: StatusLogger = new StatusLogger(console);\n\n// Env var local constants\nconst _setupString = process.env.APPLICATIONINSIGHTS_CONNECTION_STRING || process.env.APPINSIGHTS_INSTRUMENTATIONKEY;\nconst forceStart = process.env.APPLICATIONINSIGHTS_FORCE_START === \"true\";\n\n// Other local constants\nconst defaultStatus: StatusContract = {\n    ...StatusLogger.DEFAULT_STATUS,\n    Ikey: _setupString,\n};\n\n/**\n * Sets the attach-time logger\n * @param logger logger which implements the `AgentLogger` interface\n */\nexport function setLogger(logger: DiagnosticLogger) {\n    return _logger = logger;\n}\n\n/**\n * Sets the string which is prefixed to the existing sdkVersion, e.g. `ad_`, `alr_`\n * @param prefix string prefix, including underscore. Defaults to `ad_`\n */\nexport function setUsagePrefix(prefix: string) {\n    _prefix = prefix;\n}\n\nexport function setStatusLogger(statusLogger: StatusLogger) {\n    _statusLogger = statusLogger;\n}\n\n/**\n * Try to setup and start this app insights instance if attach is enabled.\n * @param setupString connection string or instrumentation key\n */\nexport function setupAndStart(setupString = _setupString): typeof types | null {\n    // If app already contains SDK, skip agent attach\n    if (!forceStart && Helpers.sdkAlreadyExists(_logger)) {\n        _statusLogger.logStatus({\n            ...defaultStatus,\n            AgentInitializedSuccessfully: false,\n            SDKPresent: true,\n            Reason: \"SDK already exists\"\n        })\n        return null;\n    }\n\n    if (!setupString) {\n        const message = \"Application Insights wanted to be started, but no Connection String or Instrumentation Key was provided\";\n        _logger.logError(message, setupString);\n        _statusLogger.logStatus({\n            ...defaultStatus,\n            AgentInitializedSuccessfully: false,\n            Reason: message,\n        });\n        return null;\n    }\n\n    try {\n        _appInsights = require(\"../applicationinsights\");\n        if (_appInsights.defaultClient) {\n            // setupAndStart was already called, return the result\n            _logger.logError(\"Setup was attempted on the Application Insights Client multiple times. Aborting and returning the first client instance\");\n            return _appInsights;\n        }\n\n        const prefixInternalSdkVersion = function (envelope: types.Contracts.Envelope, _contextObjects: Object) {\n            try {\n                var appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;\n                envelope.tags[appInsightsSDKVersion] = _prefix + envelope.tags[appInsightsSDKVersion];\n            } catch (e) {\n                _logger.logError(\"Error prefixing SDK version\", e);\n            }\n            return true;\n        }\n\n        const copyOverPrefixInternalSdkVersionToHeartBeatMetric = function (envelope: types.Contracts.Envelope, _contextObjects: Object) {\n            var appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;\n            const sdkVersion = envelope.tags[appInsightsSDKVersion] || \"\";\n            if (envelope.name === Constants.HeartBeatMetricName) {\n                ((envelope.data as any).baseData).properties = ((envelope.data as any).baseData).properties || {};\n                ((envelope.data as any).baseData).properties[\"sdk\"] = sdkVersion;\n            }\n\n            return true;\n        }\n\n        // Instrument the SDK\n        _appInsights.setup(setupString).setSendLiveMetrics(true);\n        _appInsights.defaultClient.addTelemetryProcessor(prefixInternalSdkVersion);\n        _appInsights.defaultClient.addTelemetryProcessor(copyOverPrefixInternalSdkVersionToHeartBeatMetric);\n        _appInsights.start();\n\n        // Agent successfully instrumented the SDK\n        _logger.logMessage(\"Application Insights was started with setupString: \" + setupString);\n        _statusLogger.logStatus({\n            ...defaultStatus,\n            AgentInitializedSuccessfully: true\n        });\n    } catch (e) {\n        _logger.logError(\"Error setting up Application Insights\", e);\n        _statusLogger.logStatus({\n            ...defaultStatus,\n            AgentInitializedSuccessfully: false,\n            Reason: `Error setting up Application Insights: ${e && e.message}`\n        })\n    }\n    return _appInsights;\n}\n"]}