{"version":3,"file":"AsyncHooksScopeManager.js","sourceRoot":"","sources":["../../AutoCollection/AsyncHooksScopeManager.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yEAA2F;AAE3F,iCAAsC;AAEtC;;;GAGG;AACH,IAAY,QA6BX;AA7BD,WAAY,QAAQ;IAChB,iEAAiE;IACjE,+CAAY,CAAA;IAEZ;;;OAGG;IACH,2CAAU,CAAA;IAEV;;;OAGG;IACH,2CAAU,CAAA;IAEV;;;;OAIG;IACH,+CAAY,CAAA;IAEZ;;;;OAIG;IACH,+CAAY,CAAA;AAChB,CAAC,EA7BW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QA6BnB;AA2BD;IAAA;IAyCA,CAAC;IAxCU,iDAAM,GAAb;QACI,IAAM,OAAO,GAAG,qDAAyB,CAAC,iBAAiB,EAAS,CAAC;QACrE,MAAM,cAAM,OAAO,IAAE,QAAQ,EAAE,cAAM,OAAA,OAAO,EAAP,CAAO,EAAE,QAAQ,EAAE,cAAO,CAAC,IAAG;IACvE,CAAC;IAEM,+CAAI,GAAX,UAAY,IAAU,EAAE,EAAa;QACjC,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAM,kBAAkB,GAAG,gCAAgC,CAAC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;QACrG,MAAM,CAAC,qDAAyB,CAAC,cAAc,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAE,CAAC;IAC9E,CAAC;IAEM,+CAAI,GAAX,UAAe,MAAS;QACpB,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,qDAAyB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,YAAY,qBAAY,CAAC,CAAC,CAAC;YACxC,qDAAyB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAEM,iDAAM,GAAb;QACI,qDAAyB,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,kDAAO,GAAd;QACI,qDAAyB,CAAC,OAAO,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEc,+CAAc,GAA7B,UAA8B,IAAU,EAAE,YAAqB,EAAE,IAAa;QAC1E,IAAM,SAAS,GAAG,YAAY,GAAG,MAAI,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,SAAI,YAAY,MAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC;QACxG,IAAM,OAAO,gBACN,IAAI,CAAC,OAAO,EAAE,IACjB,UAAU,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,GACnD,CAAC;QACF,IAAM,kBAAkB,GAAG,qDAAyB,CAAC,mBAAmB,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,CAAA;QAClG,MAAM,CAAC,kBAAkB,CAAC;IAC9B,CAAC;IACL,uCAAC;AAAD,CAAC,AAzCD,IAyCC;AAzCY,4EAAgC;AA2ChC,QAAA,iBAAiB,GAAG,IAAI,gCAAgC,EAAE,CAAC","sourcesContent":["import { CorrelationContextManager, CorrelationContext } from \"./CorrelationContextManager\"\nimport { ISpanContext } from \"diagnostic-channel\";\nimport { EventEmitter } from \"events\";\n\n/**\n * Type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum SpanKind {\n    /** Default value. Indicates that the span is used internally. */\n    INTERNAL = 0,\n\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SERVER = 1,\n\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    CLIENT = 2,\n\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    PRODUCER = 3,\n\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    CONSUMER = 4,\n}\n\nexport interface Link {\n    /** The {@link SpanContext} of a linked span. */\n    spanContext: SpanContext;\n    /** A set of {@link Attributes} on the link. */\n    attributes?: Record<string, string>;\n}\n\nexport interface SpanContext {\n    traceId: string;\n    spanId: string;\n    traceFlags?: { toString: () => string };\n    tracestate?: string;\n}\n\nexport interface Span {\n    _duration: [number, number]; // hrTime\n    name: string;\n    parentSpanId?: string;\n    status: { code: number, message?: string },\n    attributes: Record<string, string>,\n    kind: SpanKind;\n    links: Link[];\n    context: () => SpanContext;\n}\n\nexport class OpenTelemetryScopeManagerWrapper {\n    public active() {\n        const context = CorrelationContextManager.getCurrentContext() as any;\n        return { ...context, getValue: () => context, setValue: () => {} };\n    }\n\n    public with(span: Span, fn: () => any) {\n        const parentSpanId = span.parentSpanId;\n        const name = span.name;\n        const correlationContext = OpenTelemetryScopeManagerWrapper._spanToContext(span, parentSpanId, name);\n        return CorrelationContextManager.runWithContext(correlationContext, fn)();\n    }\n\n    public bind<T>(target: T): T {\n        if (typeof target === \"function\") {\n            return CorrelationContextManager.wrapCallback(target);\n        } else if (target instanceof EventEmitter) {\n            CorrelationContextManager.wrapEmitter(target);\n        }\n        return target;\n    }\n\n    public enable(): this {\n        CorrelationContextManager.enable();\n        return this;\n    }\n\n    public disable(): this {\n        CorrelationContextManager.disable();\n        return this;\n    }\n\n    private static _spanToContext(span: Span, parentSpanId?: string, name?: string): CorrelationContext {\n        const _parentId = parentSpanId ? `|${span.context().traceId}.${parentSpanId}.` : span.context().traceId;\n        const context: ISpanContext = {\n            ...span.context(),\n            traceFlags: span.context().traceFlags.toString()\n        };\n        const correlationContext = CorrelationContextManager.spanToContextObject(context, _parentId, name)\n        return correlationContext;\n    }\n}\n\nexport const AsyncScopeManager = new OpenTelemetryScopeManagerWrapper();\n"]}