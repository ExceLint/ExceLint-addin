{"version":3,"file":"HttpDependencies.js","sourceRoot":"","sources":["../../AutoCollection/HttpDependencies.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\nimport https = require(\"https\");\nimport url = require(\"url\");\n\nimport Contracts = require(\"../Declarations/Contracts\");\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\nimport Logging = require(\"../Library/Logging\");\nimport Util = require(\"../Library/Util\");\nimport RequestResponseHeaders = require(\"../Library/RequestResponseHeaders\");\nimport HttpDependencyParser = require(\"./HttpDependencyParser\");\nimport { CorrelationContextManager, CorrelationContext, PrivateCustomProperties } from \"./CorrelationContextManager\";\nimport CorrelationIdManager = require(\"../Library/CorrelationIdManager\");\nimport Traceparent = require(\"../Library/Traceparent\");\n\nimport * as DiagChannel from \"./diagnostic-channel/initialization\";\n\nclass AutoCollectHttpDependencies {\n    public static disableCollectionRequestOption = 'disableAppInsightsAutoCollection';\n\n    public static INSTANCE: AutoCollectHttpDependencies;\n\n    private static requestNumber = 1;\n    private static alreadyAutoCollectedFlag = '_appInsightsAutoCollected';\n\n    private _client: TelemetryClient;\n    private _isEnabled: boolean;\n    private _isInitialized: boolean;\n\n    constructor(client: TelemetryClient) {\n        if (!!AutoCollectHttpDependencies.INSTANCE) {\n            throw new Error(\"Client request tracking should be configured from the applicationInsights object\");\n        }\n\n        AutoCollectHttpDependencies.INSTANCE = this;\n        this._client = client;\n    }\n\n    public enable(isEnabled: boolean) {\n        this._isEnabled = isEnabled;\n        if (this._isEnabled && !this._isInitialized) {\n            this._initialize();\n        }\n        if (DiagChannel.IsInitialized) {\n            require(\"./diagnostic-channel/azure-coretracing.sub\").enable(true, this._client);\n            require(\"./diagnostic-channel/mongodb.sub\").enable(isEnabled, this._client);\n            require(\"./diagnostic-channel/mysql.sub\").enable(isEnabled, this._client);\n            require(\"./diagnostic-channel/redis.sub\").enable(isEnabled, this._client);\n            require(\"./diagnostic-channel/postgres.sub\").enable(isEnabled, this._client);\n        }\n    }\n\n    public isInitialized() {\n        return this._isInitialized;\n    }\n\n    private _initialize() {\n        this._isInitialized = true;\n\n        const originalGet = http.get;\n        const originalRequest = http.request;\n        const originalHttpsRequest = https.request;\n\n        const clientRequestPatch = (request: http.ClientRequest, options: http.RequestOptions | https.RequestOptions) => {\n            var shouldCollect = !(<any>options)[AutoCollectHttpDependencies.disableCollectionRequestOption] &&\n                !(<any>request)[AutoCollectHttpDependencies.alreadyAutoCollectedFlag];\n\n            // If someone else patched traceparent headers onto this request\n            if (options.headers && options.headers['user-agent'] && options.headers['user-agent'].toString().indexOf('azsdk-js') !== -1) {\n                shouldCollect = false;\n            }\n\n            (<any>request)[AutoCollectHttpDependencies.alreadyAutoCollectedFlag] = true;\n\n            if (request && options && shouldCollect) {\n                CorrelationContextManager.wrapEmitter(request);\n                AutoCollectHttpDependencies.trackRequest(this._client, {options: options, request: request});\n            }\n        };\n\n        // On node >= v0.11.12 and < 9.0 (excluding 8.9.0) https.request just calls http.request (with additional options).\n        // On node < 0.11.12, 8.9.0, and 9.0 > https.request is handled separately\n        // Patch both and leave a flag to not double-count on versions that just call through\n        // We add the flag to both http and https to protect against strange double collection in other scenarios\n        http.request = (options, ...requestArgs: any[]) => {\n            const request: http.ClientRequest = originalRequest.call(http, options, ...requestArgs);\n            clientRequestPatch(request, options);\n            return request;\n        };\n\n        https.request = (options, ...requestArgs: any[]) => {\n            const request: http.ClientRequest = originalHttpsRequest.call(https, options, ...requestArgs);\n            clientRequestPatch(request, options);\n            return request;\n        };\n\n        // Node 8 calls http.request from http.get using a local reference!\n        // We have to patch .get manually in this case and can't just assume request is enough\n        // We have to replace the entire method in this case. We can't call the original.\n        // This is because calling the original will give us no chance to set headers as it internally does .end().\n        http.get = (options, ...requestArgs: any[]) => {\n            const request: http.ClientRequest = http.request.call(http, options, ...requestArgs);\n            request.end();\n            return request;\n        };\n        https.get = (options, ...requestArgs: any[]) => {\n            const request: http.ClientRequest = https.request.call(https, options, ...requestArgs);\n            request.end();\n            return request;\n        };\n    }\n\n    /**\n     * Tracks an outgoing request. Because it may set headers this method must be called before\n     * writing content to or ending the request.\n     */\n    public static trackRequest(client: TelemetryClient, telemetry: Contracts.NodeHttpDependencyTelemetry) {\n        if (!telemetry.options || !telemetry.request || !client) {\n            Logging.info(\"AutoCollectHttpDependencies.trackRequest was called with invalid parameters: \", !telemetry.options, !telemetry.request, !client);\n            return;\n        }\n\n        let requestParser = new HttpDependencyParser(telemetry.options, telemetry.request);\n\n        const currentContext = CorrelationContextManager.getCurrentContext();\n        let uniqueRequestId: string;\n        let uniqueTraceparent: string;\n        if (currentContext && currentContext.operation && currentContext.operation.traceparent && Traceparent.isValidTraceId(currentContext.operation.traceparent.traceId)) {\n            currentContext.operation.traceparent.updateSpanId();\n            uniqueRequestId = currentContext.operation.traceparent.getBackCompatRequestId();\n        } else if (CorrelationIdManager.w3cEnabled) {\n            // Start an operation now so that we can include the w3c headers in the outgoing request\n            const traceparent = new Traceparent();\n            uniqueTraceparent = traceparent.toString();\n            uniqueRequestId = traceparent.getBackCompatRequestId();\n        } else {\n            uniqueRequestId = currentContext && currentContext.operation && (currentContext.operation.parentId + AutoCollectHttpDependencies.requestNumber++ + '.');\n        }\n\n        // Add the source correlationId to the request headers, if a value was not already provided.\n        // The getHeader/setHeader methods aren't available on very old Node versions, and\n        // are not included in the v0.10 type declarations currently used. So check if the\n        // methods exist before invoking them.\n        if (Util.canIncludeCorrelationHeader(client, requestParser.getUrl()) && telemetry.request.getHeader && telemetry.request.setHeader) {\n            if (client.config && client.config.correlationId) {\n                // getHeader returns \"any\" type in newer versions of node. In basic scenarios, this will be <string | string[] | number>, but could be modified to anything else via middleware\n                const correlationHeader = <any>telemetry.request.getHeader(RequestResponseHeaders.requestContextHeader)\n                try {\n                    Util.safeIncludeCorrelationHeader(client, telemetry.request, correlationHeader);\n                } catch (err) {\n                    Logging.warn(\"Request-Context header could not be set. Correlation of requests may be lost\", err);\n                }\n\n                if (currentContext && currentContext.operation) {\n                    try {\n                        telemetry.request.setHeader(RequestResponseHeaders.requestIdHeader, uniqueRequestId);\n                        // Also set legacy headers\n                        if (!client.config.ignoreLegacyHeaders) {\n                            telemetry.request.setHeader(RequestResponseHeaders.parentIdHeader, currentContext.operation.id);\n                            telemetry.request.setHeader(RequestResponseHeaders.rootIdHeader, uniqueRequestId);\n                        }\n\n                        // Set W3C headers, if available\n                        if (uniqueTraceparent || currentContext.operation.traceparent) {\n                            telemetry.request.setHeader(RequestResponseHeaders.traceparentHeader, uniqueTraceparent || currentContext.operation.traceparent.toString());\n                        } else if (CorrelationIdManager.w3cEnabled) {\n                            // should never get here since we set uniqueTraceparent above for the w3cEnabled scenario\n                            const traceparent = new Traceparent().toString();\n                            telemetry.request.setHeader(RequestResponseHeaders.traceparentHeader, traceparent);\n                        }\n                        if (currentContext.operation.tracestate) {\n                            const tracestate = currentContext.operation.tracestate.toString();\n                            if (tracestate) {\n                                telemetry.request.setHeader(RequestResponseHeaders.traceStateHeader, tracestate)\n                            }\n                        }\n\n                        const correlationContextHeader = (<PrivateCustomProperties>currentContext.customProperties).serializeToHeader();\n                        if (correlationContextHeader) {\n                            telemetry.request.setHeader(RequestResponseHeaders.correlationContextHeader, correlationContextHeader);\n                        }\n                    } catch (err) {\n                        Logging.warn(\"Correlation headers could not be set. Correlation of requests may be lost.\", err);\n                    }\n                }\n            }\n        }\n\n        // Collect dependency telemetry about the request when it finishes.\n        if (telemetry.request.on) {\n            telemetry.request.on('response', (response: http.ClientResponse) => {\n                requestParser.onResponse(response);\n\n                var dependencyTelemetry = requestParser.getDependencyTelemetry(telemetry, uniqueRequestId);\n\n                dependencyTelemetry.contextObjects = dependencyTelemetry.contextObjects || {};\n                dependencyTelemetry.contextObjects[\"http.RequestOptions\"] = telemetry.options;\n                dependencyTelemetry.contextObjects[\"http.ClientRequest\"] = telemetry.request;\n                dependencyTelemetry.contextObjects[\"http.ClientResponse\"] = response;\n\n                client.trackDependency(dependencyTelemetry);\n            });\n            telemetry.request.on('error', (e: Error) => {\n                requestParser.onError(e);\n\n                var dependencyTelemetry = requestParser.getDependencyTelemetry(telemetry, uniqueRequestId);\n\n                dependencyTelemetry.contextObjects = dependencyTelemetry.contextObjects || {};\n                dependencyTelemetry.contextObjects[\"http.RequestOptions\"] = telemetry.options;\n                dependencyTelemetry.contextObjects[\"http.ClientRequest\"] = telemetry.request;\n                dependencyTelemetry.contextObjects[\"Error\"] = e;\n\n                client.trackDependency(dependencyTelemetry);\n            });\n        }\n    }\n\n    public dispose() {\n        AutoCollectHttpDependencies.INSTANCE = null;\n        this.enable(false);\n        this._isInitialized = false;\n    }\n}\n\nexport = AutoCollectHttpDependencies;\n"]}