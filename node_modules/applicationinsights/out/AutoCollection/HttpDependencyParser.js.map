{"version":3,"file":"HttpDependencyParser.js","sourceRoot":"","sources":["../../AutoCollection/HttpDependencyParser.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\nimport https = require(\"https\");\nimport url = require(\"url\");\n\nimport Contracts = require(\"../Declarations/Contracts\");\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\nimport Logging = require(\"../Library/Logging\");\nimport Util = require(\"../Library/Util\");\nimport RequestResponseHeaders = require(\"../Library/RequestResponseHeaders\");\nimport RequestParser = require(\"./RequestParser\");\nimport CorrelationIdManager = require(\"../Library/CorrelationIdManager\");\n\n/**\n * Helper class to read data from the request/response objects and convert them into the telemetry contract\n */\nclass HttpDependencyParser extends RequestParser {\n    private correlationId: string;\n\n    constructor(requestOptions: object | string | http.RequestOptions | https.RequestOptions, request: http.ClientRequest) {\n        super();\n        if (request && (<any>request).method && requestOptions) {\n            // The ClientRequest.method property isn't documented, but is always there.\n            this.method = (<any>request).method;\n\n            this.url = HttpDependencyParser._getUrlFromRequestOptions(requestOptions, request);\n            this.startTime = +new Date();\n        }\n    }\n\n    /**\n     * Called when the ClientRequest emits an error event.\n     */\n    public onError(error: Error) {\n        this._setStatus(undefined, error);\n    }\n\n    /**\n     * Called when the ClientRequest emits a response event.\n     */\n    public onResponse(response: http.ClientResponse) {\n        this._setStatus(response.statusCode, undefined);\n        this.correlationId = Util.getCorrelationContextTarget(response, RequestResponseHeaders.requestContextTargetKey);\n    }\n\n    /**\n     * Gets a dependency data contract object for a completed ClientRequest.\n     */\n    public getDependencyTelemetry(baseTelemetry?: Contracts.Telemetry, dependencyId?: string): Contracts.DependencyTelemetry {\n        let urlObject = url.parse(this.url);\n        urlObject.search = undefined;\n        urlObject.hash = undefined;\n        let dependencyName = this.method.toUpperCase() + \" \" + urlObject.pathname;\n\n\n        let remoteDependencyType = Contracts.RemoteDependencyDataConstants.TYPE_HTTP;\n\n        let remoteDependencyTarget = urlObject.hostname;\n\n        if (urlObject.port) {\n            remoteDependencyTarget += \":\" + urlObject.port;\n        }\n\n        if (this.correlationId) {\n            remoteDependencyType = Contracts.RemoteDependencyDataConstants.TYPE_AI;\n            if (this.correlationId !== CorrelationIdManager.correlationIdPrefix) {\n                remoteDependencyTarget += \" | \" + this.correlationId;\n            }\n        } else {\n            remoteDependencyType = Contracts.RemoteDependencyDataConstants.TYPE_HTTP;\n        }\n\n        var dependencyTelemetry: Contracts.DependencyTelemetry & Contracts.Identified = {\n            id: dependencyId,\n            name: dependencyName,\n            data: this.url,\n            duration: this.duration,\n            success: this._isSuccess(),\n            resultCode: this.statusCode ? this.statusCode.toString() : null,\n            properties: this.properties || {},\n            dependencyTypeName: remoteDependencyType,\n            target: remoteDependencyTarget\n        };\n\n        if (baseTelemetry && baseTelemetry.time) {\n            dependencyTelemetry.time = baseTelemetry.time;\n        } else if (this.startTime) {\n            dependencyTelemetry.time = new Date(this.startTime);\n        }\n\n        // We should keep any parameters the user passed in\n        // Except the fields defined above in requestTelemetry, which take priority\n        // Except the properties field, where they're merged instead, with baseTelemetry taking priority\n        if (baseTelemetry) {\n            // Copy missing fields\n            for (let key in baseTelemetry) {\n                if (!(<any>dependencyTelemetry)[key]) {\n                    (<any>dependencyTelemetry)[key] = (<any>baseTelemetry)[key];\n                }\n            }\n            // Merge properties\n            if (baseTelemetry.properties) {\n                for (let key in baseTelemetry.properties) {\n                    dependencyTelemetry.properties[key] = baseTelemetry.properties[key];\n                }\n            }\n        }\n\n        return dependencyTelemetry;\n    }\n\n    /**\n     * Builds a URL from request options, using the same logic as http.request(). This is\n     * necessary because a ClientRequest object does not expose a url property.\n     */\n    private static _getUrlFromRequestOptions(options: any, request: http.ClientRequest) {\n        if (typeof options === 'string') {\n            if (options.indexOf(\"http://\") === 0 || options.indexOf(\"https://\") === 0) {\n                // protocol exists, parse normally\n                options = url.parse(options);\n            } else {\n                // protocol not found, insert http/https where appropriate\n                const parsed = url.parse(options);\n                if (parsed.host === \"443\") {\n                    options = url.parse(\"https://\" + options);\n                } else {\n                    options = url.parse(\"http://\" + options)\n                }\n            }\n        } else if (options && typeof (url as any).URL === 'function' && options instanceof (url as any).URL) {\n            return url.format(options);\n        } else {\n            // Avoid modifying the original options object.\n            let originalOptions = options;\n            options = {};\n            if (originalOptions) {\n                Object.keys(originalOptions).forEach(key => {\n                    options[key] = originalOptions[key];\n                });\n            }\n        }\n\n        // Oddly, url.format ignores path and only uses pathname and search,\n        // so create them from the path, if path was specified\n        if (options.path) {\n            const parsedQuery = url.parse(options.path);\n            options.pathname = parsedQuery.pathname;\n            options.search = parsedQuery.search;\n        }\n\n        // Similarly, url.format ignores hostname and port if host is specified,\n        // even if host doesn't have the port, but http.request does not work\n        // this way. It will use the port if one is not specified in host,\n        // effectively treating host as hostname, but will use the port specified\n        // in host if it exists.\n        if (options.host && options.port) {\n            // Force a protocol so it will parse the host as the host, not path.\n            // It is discarded and not used, so it doesn't matter if it doesn't match\n            const parsedHost = url.parse(`http://${options.host}`);\n            if (!parsedHost.port && options.port) {\n                options.hostname = options.host;\n                delete options.host;\n            }\n        }\n\n        // Mix in default values used by http.request and others\n        options.protocol = options.protocol || ((<any>request).agent && (<any>request).agent.protocol) || undefined;\n        options.hostname = options.hostname || 'localhost';\n\n        return url.format(options);\n    }\n}\n\nexport = HttpDependencyParser;\n"]}