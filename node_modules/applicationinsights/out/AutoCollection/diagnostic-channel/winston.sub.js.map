{"version":3,"file":"winston.sub.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/winston.sub.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license. See LICENSE file in the project root for details.\nimport TelemetryClient = require(\"../../Library/TelemetryClient\");\nimport { SeverityLevel } from \"../../Declarations/Contracts\";\n\nimport { channel, IStandardEvent } from \"diagnostic-channel\";\n\nimport { winston } from \"diagnostic-channel-publishers\";\n\nlet clients: TelemetryClient[] = [];\n\nconst winstonToAILevelMap: { [key: string]: (og: string) => number } = {\n    syslog(og: string) {\n        const map: { [key: string ]: number } = {\n            emerg: SeverityLevel.Critical,\n            alert: SeverityLevel.Critical,\n            crit: SeverityLevel.Critical,\n            error: SeverityLevel.Error,\n            warning: SeverityLevel.Warning,\n            notice: SeverityLevel.Information,\n            info: SeverityLevel.Information,\n            debug: SeverityLevel.Verbose\n        };\n\n        return map[og] === undefined ? SeverityLevel.Information : map[og];\n    },\n    npm(og: string) {\n        const map: { [key: string ]: number } = {\n            error: SeverityLevel.Error,\n            warn: SeverityLevel.Warning,\n            info: SeverityLevel.Information,\n            verbose: SeverityLevel.Verbose,\n            debug: SeverityLevel.Verbose,\n            silly: SeverityLevel.Verbose\n        };\n\n        return map[og] === undefined ? SeverityLevel.Information : map[og];\n    },\n    unknown(og: string) {\n        return SeverityLevel.Information;\n    }\n};\n\nconst subscriber = (event: IStandardEvent<winston.IWinstonData>) => {\n    const message = event.data.message as Error | string;\n    clients.forEach((client) => {\n        if (message instanceof Error) {\n            client.trackException({\n                exception: message,\n                properties: event.data.meta\n            });\n        } else {\n            const AIlevel = winstonToAILevelMap[event.data.levelKind](event.data.level);\n            client.trackTrace({\n                message: message,\n                severity: AIlevel,\n                properties: event.data.meta\n            });\n        }\n    });\n};\n\nexport function enable(enabled: boolean, client: TelemetryClient) {\n    if (enabled) {\n        if (clients.length === 0) {\n            channel.subscribe<winston.IWinstonData>(\"winston\", subscriber);\n        };\n        clients.push(client);\n    } else {\n        clients = clients.filter((c) => c != client);\n        if (clients.length === 0) {\n            channel.unsubscribe(\"winston\", subscriber);\n        }\n    }\n}\n\nexport function dispose() {\n    channel.unsubscribe(\"winston\", subscriber);\n    clients = [];\n}"]}