{
  "_from": "css-loader@2.1.1",
  "_id": "css-loader@2.1.1",
  "_inBundle": false,
  "_integrity": "sha512-OcKJU/lt232vl1P9EEDamhoO9iKY3tIjY5GU+XDLblAykTdgs6Ux9P1hTHve8nFKy5KPpOXOsVI/hIwi3841+w==",
  "_location": "/css-loader",
  "_phantomChildren": {
    "ajv": "6.10.0",
    "ajv-errors": "1.0.1",
    "ajv-keywords": "3.4.0",
    "color-convert": "1.9.3",
    "escape-string-regexp": "1.0.5",
    "source-map": "0.6.1"
  },
  "_requested": {
    "escapedName": "css-loader",
    "fetchSpec": "2.1.1",
    "name": "css-loader",
    "raw": "css-loader@2.1.1",
    "rawSpec": "2.1.1",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/css-loader/-/css-loader-2.1.1.tgz",
  "_shasum": "d8254f72e412bb2238bb44dd674ffbef497333ea",
  "_spec": "css-loader@2.1.1",
  "_where": "/Users/emery/git/OhSheet/addin/ExceLint-addin",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "babel": {
    "presets": [
      [
        "@babel/preset-env",
        {
          "targets": {
            "node": "6.9.0"
          },
          "useBuiltIns": "usage"
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/css-loader/issues"
  },
  "bundleDependencies": false,
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "dependencies": {
    "camelcase": "^5.2.0",
    "icss-utils": "^4.1.0",
    "loader-utils": "^1.2.3",
    "normalize-path": "^3.0.0",
    "postcss": "^7.0.14",
    "postcss-modules-extract-imports": "^2.0.0",
    "postcss-modules-local-by-default": "^2.0.6",
    "postcss-modules-scope": "^2.1.0",
    "postcss-modules-values": "^2.0.0",
    "postcss-value-parser": "^3.3.0",
    "schema-utils": "^1.0.0"
  },
  "deprecated": false,
  "description": "css loader module for webpack",
  "devDependencies": {
    "@babel/cli": "^7.1.5",
    "@babel/core": "^7.1.6",
    "@babel/polyfill": "^7.0.0",
    "@babel/preset-env": "^7.1.6",
    "@commitlint/cli": "^7.2.1",
    "@commitlint/config-conventional": "^7.1.2",
    "@webpack-contrib/defaults": "^3.0.0",
    "@webpack-contrib/eslint-config-webpack": "^3.0.0",
    "babel-jest": "^24.1.0",
    "cross-env": "^5.2.0",
    "del": "^4.0.0",
    "del-cli": "^1.1.0",
    "eslint": "^5.9.0",
    "eslint-plugin-import": "^2.14.0",
    "eslint-plugin-prettier": "^3.0.0",
    "file-loader": "^3.0.1",
    "husky": "^1.2.0",
    "jest": "^24.1.0",
    "lint-staged": "^8.1.0",
    "memory-fs": "^0.4.1",
    "postcss-loader": "^3.0.0",
    "postcss-preset-env": "^6.4.0",
    "prettier": "^1.15.2",
    "sass": "^1.15.1",
    "sass-loader": "^7.1.0",
    "standard-version": "^5.0.0",
    "strip-ansi": "^5.0.0",
    "webpack": "^4.26.1"
  },
  "engines": {
    "node": ">= 6.9.0"
  },
  "files": [
    "dist/",
    "index.js",
    "lib/"
  ],
  "homepage": "https://github.com/webpack-contrib/css-loader",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "css",
    "import",
    "loader",
    "url",
    "webpack"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "dist/cjs.js",
  "name": "css-loader",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^4.0.0"
  },
  "prettier": {
    "arrowParens": "always",
    "singleQuote": true,
    "trailingComma": "es5"
  },
  "readme": "<div align=\"center\">\n  <img width=\"180\" height=\"180\" vspace=\"20\"\n    src=\"https://cdn.worldvectorlogo.com/logos/css-3.svg\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# css-loader\n\nThe `css-loader` interprets `@import` and `url()` like `import/require()` and will resolve them.\n\n## Getting Started\n\nTo begin, you'll need to install `css-loader`:\n\n```console\nnpm install --save-dev css-loader\n```\n\nThen add the plugin to your `webpack` config. For example:\n\n**file.js**\n\n```js\nimport css from 'file.css';\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\nGood loaders for requiring your assets are the [file-loader](https://github.com/webpack/file-loader) and the [url-loader](https://github.com/webpack/url-loader) which you should specify in your config (see [below](https://github.com/webpack-contrib/css-loader#assets)).\n\nAnd run `webpack` via your preferred method.\n\n### `toString`\n\nYou can also use the css-loader results directly as a string, such as in Angular's component style.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['to-string-loader', 'css-loader'],\n      },\n    ],\n  },\n};\n```\n\nor\n\n```js\nconst css = require('./test.css').toString();\n\nconsole.log(css); // {String}\n```\n\nIf there are SourceMaps, they will also be included in the result string.\n\nIf, for one reason or another, you need to extract CSS as a\nplain string resource (i.e. not wrapped in a JS module) you\nmight want to check out the [extract-loader](https://github.com/peerigon/extract-loader).\nIt's useful when you, for instance, need to post process the CSS as a string.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'handlebars-loader', // handlebars loader expects raw resource string\n          'extract-loader',\n          'css-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\n## Options\n\n|                    Name                     |         Type          |     Default     | Description                                                              |\n| :-----------------------------------------: | :-------------------: | :-------------: | :----------------------------------------------------------------------- |\n|              **[`url`](#url)**              | `{Boolean\\|Function}` |     `true`      | Enable/Disable `url()` handling                                          |\n|           **[`import`](#import)**           | `{Boolean\\/Function}` |     `true`      | Enable/Disable @import handling                                          |\n|          **[`modules`](#modules)**          |  `{Boolean\\|String}`  |     `false`     | Enable/Disable CSS Modules and setup mode                                |\n|   **[`localIdentName`](#localidentname)**   |      `{String}`       | `[hash:base64]` | Configure the generated ident                                            |\n|          **[`context`](#context)**          |      `{String}`       |   `undefined`   | Allow to redefine basic loader context for local ident name              |\n|       **[`hashPrefix`](#hashprefix)**       |      `{String}`       |   `undefined`   | Allow to add custom hash to generate more unique classes                 |\n|    **[`getLocalIdent`](#getlocalident)**    |     `{Function}`      |   `undefined`   | Configure the function to generate classname based on a different schema |\n|        **[`sourceMap`](#sourcemap)**        |      `{Boolean}`      |     `false`     | Enable/Disable Sourcemaps                                                |\n|        **[`camelCase`](#camelcase)**        |  `{Boolean\\|String}`  |     `false`     | Export Classnames in CamelCase                                           |\n|    **[`importLoaders`](#importloaders)**    |      `{Number}`       |       `0`       | Number of loaders applied before CSS loader                              |\n| **[`exportOnlyLocals`](#exportonlylocals)** |      `{Boolean}`      |     `false`     | Export only locals                                                       |\n\n### `url`\n\nType: `Boolean|Function`\nDefault: `true`\n\nControl `url()` resolving. Absolute URLs and root-relative URLs are not resolving.\n\nExamples resolutions:\n\n```\nurl(image.png) => require('./image.png')\nurl('image.png') => require('./image.png')\nurl(./image.png) => require('./image.png')\nurl('./image.png') => require('./image.png')\nurl('http://dontwritehorriblecode.com/2112.png') => require('http://dontwritehorriblecode.com/2112.png')\nimage-set(url('image2x.png') 1x, url('image1x.png') 2x) => require('./image1x.png') and require('./image2x.png')\n```\n\nTo import assets from a `node_modules` path (include `resolve.modules`) and for `alias`, prefix it with a `~`:\n\n```\nurl(~module/image.png) => require('module/image.png')\nurl('~module/image.png') => require('module/image.png')\nurl(~aliasDirectory/image.png) => require('otherDirectory/image.png')\n```\n\n#### `Boolean`\n\nEnable/disable `url()` resolving.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          url: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\nAllow to filter `url()`. All filtered `url()` will not be resolved (left in the code as they were written).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          url: (url, resourcePath) => {\n            // resourcePath - path to css file\n\n            // `url()` with `img.png` stay untouched\n            return url.includes('img.png');\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `import`\n\nType: `Boolean`\nDefault: `true`\n\nControl `@import` resolving. Absolute urls in `@import` will be moved in runtime code.\n\nExamples resolutions:\n\n```\n@import 'style.css' => require('./style.css')\n@import url(style.css) => require('./style.css')\n@import url('style.css') => require('./style.css')\n@import './style.css' => require('./style.css')\n@import url(./style.css) => require('./style.css')\n@import url('./style.css') => require('./style.css')\n@import url('http://dontwritehorriblecode.com/style.css') => @import url('http://dontwritehorriblecode.com/style.css') in runtime\n```\n\nTo import styles from a `node_modules` path (include `resolve.modules`) and for `alias`, prefix it with a `~`:\n\n```\n@import url(~module/style.css) => require('module/style.css')\n@import url('~module/style.css') => require('module/style.css')\n@import url(~aliasDirectory/style.css) => require('otherDirectory/style.css')\n```\n\n#### `Boolean`\n\nEnable/disable `@import` resolving.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          import: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\nAllow to filter `@import`. All filtered `@import` will not be resolved (left in the code as they were written).\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          import: (parsedImport, resourcePath) => {\n            // parsedImport.url - url of `@import`\n            // parsedImport.media - media query of `@import`\n            // resourcePath - path to css file\n\n            // `@import` with `style.css` stay untouched\n            return parsedImport.url.includes('style.css');\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### [`modules`](https://github.com/css-modules/css-modules)\n\nType: `Boolean|String`\nDefault: `false`\n\nThe `modules` option enables/disables the **CSS Modules** spec and setup basic behaviour.\n\n|      Name      |    Type     | Description                                                                                                                      |\n| :------------: | :---------: | :------------------------------------------------------------------------------------------------------------------------------- |\n|   **`true`**   | `{Boolean}` | Enables local scoped CSS by default (use **local** mode by default)                                                              |\n|  **`false`**   | `{Boolean}` | Disable the **CSS Modules** spec, all **CSS Modules** features (like `@value`, `:local`, `:global` and `composes`) will not work |\n| **`'local'`**  | `{String}`  | Enables local scoped CSS by default (same as `true` value)                                                                       |\n| **`'global'`** | `{String}`  | Enables global scoped CSS by default                                                                                             |\n\nUsing `false` value increase performance because we avoid parsing **CSS Modules** features, it will be useful for developers who use vanilla css or use other technologies.\n\nYou can read about **modes** below.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          modules: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n##### `Scope`\n\nUsing `local` value requires you to specify `:global` classes.\nUsing `global` value requires you to specify `:local` classes.\n\nYou can find more information [here](https://github.com/css-modules/css-modules).\n\nStyles can be locally scoped to avoid globally scoping styles.\n\nThe syntax `:local(.className)` can be used to declare `className` in the local scope. The local identifiers are exported by the module.\n\nWith `:local` (without brackets) local mode can be switched on for this selector.\nThe `:global(.className)` nocation can be used to declare an explicit global selector.\nWith `:global` (without brackets) global mode can be switched on for this selector.\n\nThe loader replaces local selectors with unique identifiers. The chosen unique identifiers are exported by the module.\n\n```css\n:local(.className) {\n  background: red;\n}\n:local .className {\n  color: green;\n}\n:local(.className .subClass) {\n  color: green;\n}\n:local .className .subClass :global(.global-class-name) {\n  color: blue;\n}\n```\n\n```css\n._23_aKvs-b8bW2Vg3fwHozO {\n  background: red;\n}\n._23_aKvs-b8bW2Vg3fwHozO {\n  color: green;\n}\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 {\n  color: green;\n}\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 .global-class-name {\n  color: blue;\n}\n```\n\n> ℹ️ Identifiers are exported\n\n```js\nexports.locals = {\n  className: '_23_aKvs-b8bW2Vg3fwHozO',\n  subClass: '_13LGdX8RMStbBE9w-t0gZ1',\n};\n```\n\nCamelCase is recommended for local selectors. They are easier to use within the imported JS module.\n\nYou can use `:local(#someId)`, but this is not recommended. Use classes instead of ids.\n\n##### `Composing`\n\nWhen declaring a local classname you can compose a local class from another local classname.\n\n```css\n:local(.className) {\n  background: red;\n  color: yellow;\n}\n\n:local(.subClass) {\n  composes: className;\n  background: blue;\n}\n```\n\nThis doesn't result in any change to the CSS itself but exports multiple classnames.\n\n```js\nexports.locals = {\n  className: '_23_aKvs-b8bW2Vg3fwHozO',\n  subClass: '_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO',\n};\n```\n\n```css\n._23_aKvs-b8bW2Vg3fwHozO {\n  background: red;\n  color: yellow;\n}\n\n._13LGdX8RMStbBE9w-t0gZ1 {\n  background: blue;\n}\n```\n\n##### `Importing`\n\nTo import a local classname from another module.\n\n```css\n:local(.continueButton) {\n  composes: button from 'library/button.css';\n  background: red;\n}\n```\n\n```css\n:local(.nameEdit) {\n  composes: edit highlight from './edit.css';\n  background: red;\n}\n```\n\nTo import from multiple modules use multiple `composes:` rules.\n\n```css\n:local(.className) {\n  composes: edit hightlight from './edit.css';\n  composes: button from 'module/button.css';\n  composes: classFromThisModule;\n  background: red;\n}\n```\n\n### `localIdentName`\n\nType: `String`\nDefault: `[hash:base64]`\n\nYou can configure the generated ident with the `localIdentName` query parameter.\nSee [loader-utils's documentation](https://github.com/webpack/loader-utils#interpolatename) for more information on options.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          modules: true,\n          localIdentName: '[path][name]__[local]--[hash:base64:5]',\n        },\n      },\n    ],\n  },\n};\n```\n\n### `context`\n\nType: `String`\nDefault: `undefined`\n\nAllow to redefine basic loader context for local ident name.\nBy default we use `rootContext` of loader.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          modules: true,\n          context: path.resolve(__dirname, 'context'),\n        },\n      },\n    ],\n  },\n};\n```\n\n### `hashPrefix`\n\nType: `String`\nDefault: `undefined`\n\nAllow to add custom hash to generate more unique classes.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          modules: true,\n          hashPrefix: 'hash',\n        },\n      },\n    ],\n  },\n};\n```\n\n### `getLocalIdent`\n\nType: `Function`\nDefault: `undefined`\n\nYou can also specify the absolute path to your custom `getLocalIdent` function to generate classname based on a different schema.\nBy default we use built-in function to generate a classname.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          modules: true,\n          getLocalIdent: (context, localIdentName, localName, options) => {\n            return 'whatever_random_class_name';\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `sourceMap`\n\nType: `Boolean`\nDefault: `false`\n\nTo include source maps set the `sourceMap` option.\n\nI.e. the `mini-css-extract-plugin` can handle them.\n\nThey are not enabled by default because they expose a runtime overhead and increase in bundle size (JS source maps do not). In addition to that relative paths are buggy and you need to use an absolute public path which includes the server URL.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          sourceMap: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n### `camelCase`\n\nType: `Boolean|String`\nDefault: `false`\n\nBy default, the exported JSON keys mirror the class names. If you want to camelize class names (useful in JS), pass the query parameter `camelCase` to css-loader.\n\n|        Name        |    Type     | Description                                                                                                              |\n| :----------------: | :---------: | :----------------------------------------------------------------------------------------------------------------------- |\n|    **`false`**     | `{Boolean}` | Class names will be camelized, the original class name will not to be removed from the locals                            |\n|     **`true`**     | `{Boolean}` | Class names will be camelized                                                                                            |\n|   **`'dashes'`**   | `{String}`  | Only dashes in class names will be camelized                                                                             |\n|    **`'only'`**    | `{String}`  | Introduced in `0.27.1`. Class names will be camelized, the original class name will be removed from the locals           |\n| **`'dashesOnly'`** | `{String}`  | Introduced in `0.27.1`. Dashes in class names will be camelized, the original class name will be removed from the locals |\n\n**file.css**\n\n```css\n.class-name {\n}\n```\n\n**file.js**\n\n```js\nimport { className } from 'file.css';\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          camelCase: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n### `importLoaders`\n\nType: `Number`\nDefault: `0`\n\nThe option `importLoaders` allows you to configure how many loaders before `css-loader` should be applied to `@import`ed resources.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 2, // 0 => no loaders (default); 1 => postcss-loader; 2 => postcss-loader, sass-loader\n            },\n          },\n          'postcss-loader',\n          'sass-loader',\n        ],\n      },\n    ],\n  },\n};\n```\n\nThis may change in the future when the module system (i. e. webpack) supports loader matching by origin.\n\n### `exportOnlyLocals`\n\nType: `Boolean`\nDefault: `false`\n\nExport only locals (**useful** when you use **css modules**).\nFor pre-rendering with `mini-css-extract-plugin` you should use this option instead of `style-loader!css-loader` **in the pre-rendering bundle**.\nIt doesn't embed CSS but only exports the identifier mappings.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'css-loader',\n        options: {\n          exportOnlyLocals: true,\n        },\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### Assets\n\nThe following `webpack.config.js` can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as [Data URLs](https://tools.ietf.org/html/rfc2397) and copy larger files to the output directory.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        test: /\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n        },\n      },\n    ],\n  },\n};\n```\n\n### Extract\n\nFor production builds it's recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on.\n\n- This can be achieved by using the [mini-css-extract-plugin](https://github.com/webpack-contrib/mini-css-extract-plugin) to extract the CSS when running in production mode.\n\n- As an alternative, if seeking better development performance and css outputs that mimic production. [extract-css-chunks-webpack-plugin](https://github.com/faceyspacey/extract-css-chunks-webpack-plugin) offers a hot module reload friendly, extended version of mini-css-extract-plugin. HMR real CSS files in dev, works like mini-css in non-dev\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/css-loader.svg\n[npm-url]: https://npmjs.com/package/css-loader\n[node]: https://img.shields.io/node/v/css-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/css-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/css-loader\n[tests]: https://img.shields.io/circleci/project/github/webpack-contrib/css-loader.svg\n[tests-url]: https://circleci.com/gh/webpack-contrib/css-loader\n[cover]: https://codecov.io/gh/webpack-contrib/css-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/css-loader\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=css-loader\n[size-url]: https://packagephobia.now.sh/result?p=css-loader\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/css-loader.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --ignore 'src/**/*.test.js' --copy-files",
    "ci:coverage": "npm run test:coverage -- --runInBand",
    "ci:lint": "npm run lint && npm run security",
    "ci:lint:commits": "commitlint --from=origin/master --to=${CIRCLE_SHA1}",
    "ci:test": "npm run test:only -- --runInBand",
    "clean": "del-cli dist",
    "commitlint": "commitlint",
    "commitmsg": "commitlint -e $GIT_PARAMS",
    "defaults": "webpack-defaults",
    "lint": "eslint --cache src test",
    "prebuild": "npm run clean",
    "prepublish": "npm run build",
    "pretest": "npm run lint",
    "release": "standard-version",
    "security": "npm audit",
    "start": "npm run build -- -w",
    "test": "npm run test:only",
    "test:coverage": "jest --collectCoverageFrom='src/**/*.js' --coverage",
    "test:only": "jest",
    "test:watch": "jest --watch"
  },
  "version": "2.1.1"
}
