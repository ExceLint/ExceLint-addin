{
  "_args": [
    [
      "extract-text-webpack-plugin@4.0.0-beta.0",
      "/mnt/c/Users/t-emberg/Documents/GitHub/ExceLint-addin"
    ]
  ],
  "_from": "extract-text-webpack-plugin@4.0.0-beta.0",
  "_id": "extract-text-webpack-plugin@4.0.0-beta.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/extract-text-webpack-plugin",
  "_nodeVersion": "9.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/extract-text-webpack-plugin_4.0.0-beta.0_1519786273691_0.8815864573131751"
  },
  "_npmUser": {
    "email": "michael.ciniawsky@gmail.com",
    "name": "michael-ciniawsky"
  },
  "_npmVersion": "5.7.1",
  "_phantomChildren": {
    "ajv": "6.10.0",
    "ajv-keywords": "3.4.0"
  },
  "_requested": {
    "name": "extract-text-webpack-plugin",
    "raw": "extract-text-webpack-plugin@4.0.0-beta.0",
    "rawSpec": "4.0.0-beta.0",
    "scope": null,
    "spec": "4.0.0-beta.0",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/extract-text-webpack-plugin/-/extract-text-webpack-plugin-4.0.0-beta.0.tgz",
  "_shasum": "f7361d7ff430b42961f8d1321ba8c1757b5d4c42",
  "_shrinkwrap": null,
  "_spec": "extract-text-webpack-plugin@4.0.0-beta.0",
  "_where": "/mnt/c/Users/t-emberg/Documents/GitHub/ExceLint-addin",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/extract-text-webpack-plugin/issues"
  },
  "dependencies": {
    "async": "^2.4.1",
    "loader-utils": "^1.1.0",
    "schema-utils": "^0.4.5",
    "webpack-sources": "^1.1.0"
  },
  "description": "Extract text from bundle into a file.",
  "devDependencies": {
    "@commitlint/cli": "^5.2.8",
    "@commitlint/config-angular": "^5.1.1",
    "@webpack-contrib/eslint-config-webpack": "^2.0.2",
    "babel-cli": "^6.26.0",
    "babel-jest": "^22.2.2",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-polyfill": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "conventional-github-releaser": "^2.0.0",
    "cross-env": "^5.1.3",
    "css-loader": "^0.28.9",
    "del": "^3.0.0",
    "del-cli": "^1.1.0",
    "eslint": "^4.17.0",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-prettier": "^2.6.0",
    "file-loader": "^1.1.6",
    "husky": "^0.14.3",
    "jest": "^22.3.0",
    "lint-staged": "^6.1.0",
    "memory-fs": "^0.4.1",
    "nsp": "^3.1.0",
    "pre-commit": "^1.2.2",
    "prettier": "^1.10.2",
    "raw-loader": "^0.5.1",
    "standard-version": "^4.3.0",
    "style-loader": "^0.19.1",
    "webpack": "^4.0.0",
    "webpack-defaults": "^2.0.0-rc.4"
  },
  "directories": {},
  "dist": {
    "fileCount": 13,
    "integrity": "sha512-Hypkn9jUTnFr0DpekNam53X47tXn3ucY08BQumv7kdGgeVUBLq3DJHJTi6HNxv4jl9W+Skxjz9+RnK0sJyqqjA==",
    "shasum": "f7361d7ff430b42961f8d1321ba8c1757b5d4c42",
    "tarball": "https://registry.npmjs.org/extract-text-webpack-plugin/-/extract-text-webpack-plugin-4.0.0-beta.0.tgz",
    "unpackedSize": 48857
  },
  "engines": {
    "node": ">= 6.9.0 || >= 8.9.0"
  },
  "files": [
    "dist"
  ],
  "gitHead": "5dbbcd99a5964175f85c302641829cd20e139c09",
  "homepage": "https://github.com/webpack-contrib/extract-text-webpack-plugin",
  "jest": {
    "testEnvironment": "node"
  },
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "dist/cjs.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "d3viant0ne",
      "email": "wiens.joshua@gmail.com"
    },
    {
      "name": "ericclemmons",
      "email": "eric@smarterspam.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "jtangelder",
      "email": "j.tangelder@gmail.com"
    },
    {
      "name": "michael-ciniawsky",
      "email": "michael.ciniawsky@gmail.com"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "spacek33z",
      "email": "kees@webduck.nl"
    },
    {
      "name": "thelarkinn",
      "email": "sean.larkin@cuw.edu"
    }
  ],
  "name": "extract-text-webpack-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "^3.0.0 || ^4.0.0"
  },
  "pre-commit": "lint-staged",
  "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://cdn.rawgit.com/webpack-contrib/extract-text-webpack-plugin/574e3200/logo.svg\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n  <h1>Extract Text Plugin</h1>\n  <p>Extract text from a bundle, or bundles, into a separate file.</p>\n</div>\n\n<h2 align=\"center\">Install</h2>\n\n```bash\n# for webpack 3\nnpm install --save-dev extract-text-webpack-plugin\n# for webpack 2\nnpm install --save-dev extract-text-webpack-plugin@2.1.2\n# for webpack 1\nnpm install --save-dev extract-text-webpack-plugin@1.0.1\n```\n\n<h2 align=\"center\">Usage</h2>\n\n> :warning: For webpack v1, see [the README in the webpack-1 branch](https://github.com/webpack/extract-text-webpack-plugin/blob/webpack-1/README.md).\n\n```js\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ExtractTextPlugin.extract({\n          fallback: \"style-loader\",\n          use: \"css-loader\"\n        })\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin(\"styles.css\"),\n  ]\n}\n```\n\nIt moves all the required `*.css` modules in entry chunks into a separate CSS file. So your styles are no longer inlined into the JS bundle, but in a separate CSS file (`styles.css`). If your total stylesheet volume is big, it will be faster because the CSS bundle is loaded in parallel to the JS bundle.\n\n|Advantages|Caveats|\n|:---------|:------|\n| Fewer style tags (older IE has a limit) | Additional HTTP request |\n| CSS SourceMap (with `devtool: \"source-map\"` and `extract-text-webpack-plugin?sourceMap`) | Longer compilation time |\n| CSS requested in parallel | No runtime public path modification |\n| CSS cached separate | No Hot Module Replacement |\n| Faster runtime (less code and DOM operations) | ... |\n\n<h2 align=\"center\">Options</h2>\n\n```js\nnew ExtractTextPlugin(options: filename | object)\n```\n\n|Name|Type|Description|\n|:--:|:--:|:----------|\n|**`id`**|`{String}`|Unique ident for this plugin instance. (For advanced usage only, by default automatically generated)|\n|**`filename`**|`{String\\|Function}`|Name of the result file. May contain `[name]`, `[id]` and `[contenthash]`|\n|**`allChunks`**|`{Boolean}`|Extract from all additional chunks too (by default it extracts only from the initial chunk(s))<br />When using `optimization.splitChunks` and there are extracted chunks (from `ExtractTextPlugin.extract`) in the commons chunk, `allChunks` **must** be set to `true`|\n|**`disable`**|`{Boolean}`|Disables the plugin|\n|**`ignoreOrder`**|`{Boolean}`|Disables order check (useful for CSS Modules!), `false` by default|\n\n* `[name]` name of the chunk\n* `[id]` number of the chunk\n* `[contenthash]` hash of the content of the extracted file\n* `[<hashType>:contenthash:<digestType>:<length>]` optionally you can configure\n  * other `hashType`s, e.g. `sha1`, `md5`, `sha256`, `sha512`\n  * other `digestType`s, e.g. `hex`, `base26`, `base32`, `base36`, `base49`, `base52`, `base58`, `base62`, `base64`\n  * and `length`, the length of the hash in chars\n\n> :warning: `ExtractTextPlugin` generates a file **per entry**, so you must use `[name]`, `[id]` or `[contenthash]` when using multiple entries.\n\n#### `#extract`\n\n```js\nExtractTextPlugin.extract(options: loader | object)\n```\n\nCreates an extracting loader from an existing loader. Supports loaders of type `{ loader: [name]-loader -> {String}, options: {} -> {Object} }`.\n\n|Name|Type|Description|\n|:--:|:--:|:----------|\n|**`options.use`**|`{String}`/`{Array}`/`{Object}`|Loader(s) that should be used for converting the resource to a CSS exporting module _(required)_|\n|**`options.fallback`**|`{String}`/`{Array}`/`{Object}`|loader(e.g `'style-loader'`) that should be used when the CSS is not extracted (i.e. in an additional chunk when `allChunks: false`)|\n|**`options.publicPath`**|`{String}`|Override the `publicPath` setting for this loader|\n\n\n#### Multiple Instances\n\nThere is also an `extract` function on the instance. You should use this if you have more than one instance of  `ExtractTextPlugin`.\n\n```js\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\n// Create multiple instances\nconst extractCSS = new ExtractTextPlugin('stylesheets/[name]-one.css');\nconst extractLESS = new ExtractTextPlugin('stylesheets/[name]-two.css');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: extractCSS.extract([ 'css-loader', 'postcss-loader' ])\n      },\n      {\n        test: /\\.less$/i,\n        use: extractLESS.extract([ 'css-loader', 'less-loader' ])\n      },\n    ]\n  },\n  plugins: [\n    extractCSS,\n    extractLESS\n  ]\n};\n```\n\n### Extracting Sass or LESS\n\nThe configuration is the same, switch out `sass-loader` for `less-loader` when necessary.\n\n```js\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.scss$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader', 'sass-loader']\n        })\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin('style.css')\n    //if you want to pass in options, you can do so:\n    //new ExtractTextPlugin({\n    //  filename: 'style.css'\n    //})\n  ]\n}\n```\n\n### `url()` Resolving\n\nIf you are finding that urls are not resolving properly when you run webpack. You can expand your loader functionality with options. The `url: false` property allows your paths resolved without any changes.\n\n```js\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.scss$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n            {\n                loader: 'css-loader',\n                options: {\n                    // If you are having trouble with urls not resolving add this setting.\n                    // See https://github.com/webpack-contrib/css-loader#url\n                    url: false,\n                    minimize: true,\n                    sourceMap: true\n                }\n            }, \n            {\n                loader: 'sass-loader',\n                options: {\n                    sourceMap: true\n                }\n            }\n          ]\n        })\n      }\n    ]\n  }\n}\n```\n\n### Modify filename\n\n`filename` parameter could be `Function`. It passes `getPath` to process the format like `css/[name].css` and returns the real file name, `css/js/a.css`. You can replace `css/js` with `css` then you will get the new path `css/a.css`.\n\n\n```js\nentry: {\n  'js/a': \"./a\"\n},\nplugins: [\n  new ExtractTextPlugin({\n    filename:  (getPath) => {\n      return getPath('css/[name].css').replace('css/js', 'css');\n    },\n    allChunks: true\n  })\n]\n```\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars3.githubusercontent.com/u/166921?v=3&s=150\">\n        </br>\n        <a href=\"https://github.com/bebraw\">Juho Vepsäläinen</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars2.githubusercontent.com/u/8420490?v=3&s=150\">\n        </br>\n        <a href=\"https://github.com/d3viant0ne\">Joshua Wiens</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars3.githubusercontent.com/u/533616?v=3&s=150\">\n        </br>\n        <a href=\"https://github.com/SpaceK33z\">Kees Kluskens</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars3.githubusercontent.com/u/3408176?v=3&s=150\">\n        </br>\n        <a href=\"https://github.com/TheLarkInn\">Sean Larkin</a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n\n\n[npm]: https://img.shields.io/npm/v/extract-text-webpack-plugin.svg\n[npm-url]: https://npmjs.com/package/extract-text-webpack-plugin\n\n[node]: https://img.shields.io/node/v/extract-text-webpack-plugin.svg\n[node-url]: https://nodejs.org\n\n[deps]: https://david-dm.org/webpack-contrib/extract-text-webpack-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/extract-text-webpack-plugin\n\n[tests]: http://img.shields.io/travis/webpack-contrib/extract-text-webpack-plugin.svg\n[tests-url]: https://travis-ci.org/webpack-contrib/extract-text-webpack-plugin\n\n[cover]: https://coveralls.io/repos/github/webpack-contrib/extract-text-webpack-plugin/badge.svg\n[cover-url]: https://coveralls.io/github/webpack-contrib/extract-text-webpack-plugin\n\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/extract-text-webpack-plugin.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src -d dist --ignore 'src/**/*.test.js' --copy-files",
    "ci:coverage": "npm run test:coverage -- --runInBand",
    "ci:lint": "npm run lint && npm run security",
    "ci:lint:commits": "commitlint --from=${CIRCLE_BRANCH} --to=${CIRCLE_SHA1}",
    "ci:test": "npm run test -- --runInBand",
    "clean": "del-cli dist",
    "commitlint": "commitlint",
    "commitmsg": "commitlint -e $GIT_PARAMS",
    "defaults": "webpack-defaults",
    "lint": "eslint --cache src test",
    "lint-staged": "lint-staged",
    "prebuild": "npm run clean",
    "prepare": "npm run build",
    "release": "standard-version",
    "release:ci": "conventional-github-releaser -p angular",
    "release:validate": "commitlint --from=$(git describe --tags --abbrev=0) --to=$(git rev-parse HEAD)",
    "security": "nsp check",
    "start": "npm run build -- -w",
    "test": "jest",
    "test:coverage": "jest --collectCoverageFrom='src/**/*.js' --coverage",
    "test:watch": "jest --watch"
  },
  "version": "4.0.0-beta.0"
}
