{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value\r\n * to use if that slot is not specified by the theme.\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\n\r\n// Declaring a global here in case that the execution environment is Node.js (without importing the\r\n// entire node.js d.ts for now)\r\ndeclare let global: any; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\nexport interface IThemingInstruction {\r\n  theme?: string;\r\n  defaultValue?: string;\r\n  rawString?: string;\r\n}\r\n\r\nexport type ThemableArray = IThemingInstruction[];\r\n\r\nexport interface ITheme {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface IStyleSheet {\r\n  cssText: string;\r\n}\r\n\r\ninterface IExtendedHtmlStyleElement extends HTMLStyleElement {\r\n  styleSheet: IStyleSheet;\r\n}\r\n\r\n/**\r\n * Performance Measurement of loading styles\r\n */\r\ninterface IMeasurement {\r\n  /**\r\n   * Count of style element injected, which is the slow operation in IE\r\n   */\r\n  count: number;\r\n  /**\r\n   * Total duration of all loadStyles exections\r\n   */\r\n  duration: number;\r\n}\r\n\r\ninterface IRunState {\r\n  mode: Mode;\r\n  buffer: ThemableArray[];\r\n  flushTimer: number;\r\n}\r\n\r\ninterface IThemeState {\r\n  theme: ITheme | undefined;\r\n  lastStyleElement: IExtendedHtmlStyleElement;\r\n  registeredStyles: IStyleRecord[]; // records of already registered non-themable styles\r\n  registeredThemableStyles: IStyleRecord[]; // records of already registered themable styles\r\n  loadStyles: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined;\r\n  perf: IMeasurement;\r\n  runState: IRunState;\r\n}\r\n\r\ninterface IStyleRecord {\r\n  styleElement: Element;\r\n  themableStyle: ThemableArray;\r\n}\r\n\r\ninterface ICustomEvent<T> extends Event {\r\n  args?: T;\r\n}\r\n\r\n/**\r\n * object returned from resolveThemableArray function\r\n */\r\ninterface IThemableArrayResolveResult {\r\n  /** this string is the processed styles in string */\r\n  styleString: string;\r\n\r\n  /** this boolean indicates if this style array is themable */\r\n  themable: boolean;\r\n}\r\n\r\n/**\r\n * In sync mode, styles are registered as style elements synchronously with loadStyles() call.\r\n * In async mode, styles are buffered and registered as batch in async timer for performance purpose.\r\n */\r\nexport const enum Mode {\r\n  sync,\r\n  async\r\n}\r\n\r\n/**\r\n * Themable styles and non-themable styles are tracked separately\r\n * Specify ClearStyleOptions when calling clearStyles API to specify which group of registered styles should be cleared.\r\n */\r\nexport const enum ClearStyleOptions {\r\n  /** only themable styles will be cleared */\r\n  onlyThemable = 1,\r\n  /** only non-themable styles will be cleared */\r\n  onlyNonThemable = 2,\r\n  /** both themable and non-themable styles will be cleared */\r\n  all = 3\r\n}\r\n\r\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\r\n// load-themed-styles hosted on the page.\r\nconst _root: any = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\r\nconst _styleNonce: string = _root && _root.CSPSettings && _root.CSPSettings.nonce;\r\n\r\nconst _themeState: IThemeState = initializeThemeState();\r\n\r\n/**\r\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\r\n */\r\nconst _themeTokenRegex: RegExp = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\r\n\r\nconst now: () => number = () =>\r\n  typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\r\n\r\nfunction measure(func: () => void): void {\r\n  const start: number = now();\r\n  func();\r\n  const end: number = now();\r\n  _themeState.perf.duration += end - start;\r\n}\r\n\r\n/**\r\n * initialize global state object\r\n */\r\nfunction initializeThemeState(): IThemeState {\r\n  let state: IThemeState = _root.__themeState__ || {\r\n    theme: undefined,\r\n    lastStyleElement: undefined,\r\n    registeredStyles: []\r\n  };\r\n\r\n  if (!state.runState) {\r\n    state = {\r\n      ...state,\r\n      perf: {\r\n        count: 0,\r\n        duration: 0\r\n      },\r\n      runState: {\r\n        flushTimer: 0,\r\n        mode: Mode.sync,\r\n        buffer: []\r\n      }\r\n    };\r\n  }\r\n  if (!state.registeredThemableStyles) {\r\n    state = {\r\n      ...state,\r\n      registeredThemableStyles: []\r\n    };\r\n  }\r\n  _root.__themeState__ = state;\r\n  return state;\r\n}\r\n\r\n/**\r\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\r\n * event is fired.\r\n * @param {string | ThemableArray} styles Themable style text to register.\r\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\r\n */\r\nexport function loadStyles(styles: string | ThemableArray, loadAsync: boolean = false): void {\r\n  measure(() => {\r\n    const styleParts: ThemableArray = Array.isArray(styles) ? styles : splitStyles(styles);\r\n    const { mode, buffer, flushTimer } = _themeState.runState;\r\n    if (loadAsync || mode === Mode.async) {\r\n      buffer.push(styleParts);\r\n      if (!flushTimer) {\r\n        _themeState.runState.flushTimer = asyncLoadStyles();\r\n      }\r\n    } else {\r\n      applyThemableStyles(styleParts);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\r\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\r\n * a loadStyles callback that gets called when styles are loaded or reloaded\r\n */\r\nexport function configureLoadStyles(\r\n  loadStylesFn: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined\r\n): void {\r\n  _themeState.loadStyles = loadStylesFn;\r\n}\r\n\r\n/**\r\n * Configure run mode of load-themable-styles\r\n * @param mode load-themable-styles run mode, async or sync\r\n */\r\nexport function configureRunMode(mode: Mode): void {\r\n  _themeState.runState.mode = mode;\r\n}\r\n\r\n/**\r\n * external code can call flush to synchronously force processing of currently buffered styles\r\n */\r\nexport function flush(): void {\r\n  measure(() => {\r\n    const styleArrays: ThemableArray[] = _themeState.runState.buffer.slice();\r\n    _themeState.runState.buffer = [];\r\n    const mergedStyleArray: ThemableArray = ([] as ThemableArray).concat.apply([], styleArrays);\r\n    if (mergedStyleArray.length > 0) {\r\n      applyThemableStyles(mergedStyleArray);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * register async loadStyles\r\n */\r\nfunction asyncLoadStyles(): number {\r\n  return setTimeout(() => {\r\n    _themeState.runState.flushTimer = 0;\r\n    flush();\r\n  }, 0);\r\n}\r\n\r\n/**\r\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\r\n * is fired.\r\n * @param {string} styleText Style to register.\r\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\r\n */\r\nfunction applyThemableStyles(stylesArray: ThemableArray, styleRecord?: IStyleRecord): void {\r\n  if (_themeState.loadStyles) {\r\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\r\n  } else {\r\n    registerStyles(stylesArray);\r\n  }\r\n}\r\n\r\n/**\r\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\r\n * replaced.\r\n * @param {theme} theme JSON object of theme tokens to values.\r\n */\r\nexport function loadTheme(theme: ITheme | undefined): void {\r\n  _themeState.theme = theme;\r\n\r\n  // reload styles.\r\n  reloadStyles();\r\n}\r\n\r\n/**\r\n * Clear already registered style elements and style records in theme_State object\r\n * @param option - specify which group of registered styles should be cleared.\r\n * Default to be both themable and non-themable styles will be cleared\r\n */\r\nexport function clearStyles(option: ClearStyleOptions = ClearStyleOptions.all): void {\r\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyNonThemable) {\r\n    clearStylesInternal(_themeState.registeredStyles);\r\n    _themeState.registeredStyles = [];\r\n  }\r\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyThemable) {\r\n    clearStylesInternal(_themeState.registeredThemableStyles);\r\n    _themeState.registeredThemableStyles = [];\r\n  }\r\n}\r\n\r\nfunction clearStylesInternal(records: IStyleRecord[]): void {\r\n  records.forEach((styleRecord: IStyleRecord) => {\r\n    const styleElement: HTMLStyleElement = styleRecord && (styleRecord.styleElement as HTMLStyleElement);\r\n    if (styleElement && styleElement.parentElement) {\r\n      styleElement.parentElement.removeChild(styleElement);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Reloads styles.\r\n */\r\nfunction reloadStyles(): void {\r\n  if (_themeState.theme) {\r\n    const themableStyles: ThemableArray[] = [];\r\n    for (const styleRecord of _themeState.registeredThemableStyles) {\r\n      themableStyles.push(styleRecord.themableStyle);\r\n    }\r\n    if (themableStyles.length > 0) {\r\n      clearStyles(ClearStyleOptions.onlyThemable);\r\n      applyThemableStyles(([] as ThemableArray).concat.apply([], themableStyles));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Find theme tokens and replaces them with provided theme values.\r\n * @param {string} styles Tokenized styles to fix.\r\n */\r\nexport function detokenize(styles: string | undefined): string | undefined {\r\n  if (styles) {\r\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\r\n  }\r\n\r\n  return styles;\r\n}\r\n\r\n/**\r\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\r\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\r\n */\r\nfunction resolveThemableArray(splitStyleArray: ThemableArray): IThemableArrayResolveResult {\r\n  const { theme }: IThemeState = _themeState;\r\n  let themable: boolean = false;\r\n  // Resolve the array of theming instructions to an array of strings.\r\n  // Then join the array to produce the final CSS string.\r\n  const resolvedArray: (string | undefined)[] = (splitStyleArray || []).map(\r\n    (currentValue: IThemingInstruction) => {\r\n      const themeSlot: string | undefined = currentValue.theme;\r\n      if (themeSlot) {\r\n        themable = true;\r\n        // A theming annotation. Resolve it.\r\n        const themedValue: string | undefined = theme ? theme[themeSlot] : undefined;\r\n        const defaultValue: string = currentValue.defaultValue || 'inherit';\r\n\r\n        // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\r\n        // Allow the themedValue to be undefined to explicitly request the default value.\r\n        if (\r\n          theme &&\r\n          !themedValue &&\r\n          console &&\r\n          !(themeSlot in theme) &&\r\n          typeof DEBUG !== 'undefined' &&\r\n          DEBUG\r\n        ) {\r\n          console.warn(`Theming value not provided for \"${themeSlot}\". Falling back to \"${defaultValue}\".`);\r\n        }\r\n\r\n        return themedValue || defaultValue;\r\n      } else {\r\n        // A non-themable string. Preserve it.\r\n        return currentValue.rawString;\r\n      }\r\n    }\r\n  );\r\n\r\n  return {\r\n    styleString: resolvedArray.join(''),\r\n    themable: themable\r\n  };\r\n}\r\n\r\n/**\r\n * Split tokenized CSS into an array of strings and theme specification objects\r\n * @param {string} styles Tokenized styles to split.\r\n */\r\nexport function splitStyles(styles: string): ThemableArray {\r\n  const result: ThemableArray = [];\r\n  if (styles) {\r\n    let pos: number = 0; // Current position in styles.\r\n    let tokenMatch: RegExpExecArray | null;\r\n    while ((tokenMatch = _themeTokenRegex.exec(styles))) {\r\n      const matchIndex: number = tokenMatch.index;\r\n      if (matchIndex > pos) {\r\n        result.push({\r\n          rawString: styles.substring(pos, matchIndex)\r\n        });\r\n      }\r\n\r\n      result.push({\r\n        theme: tokenMatch[1],\r\n        defaultValue: tokenMatch[2] // May be undefined\r\n      });\r\n\r\n      // index of the first character after the current match\r\n      pos = _themeTokenRegex.lastIndex;\r\n    }\r\n\r\n    // Push the rest of the string after the last match.\r\n    result.push({\r\n      rawString: styles.substring(pos)\r\n    });\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Registers a set of style text. If it is registered too early, we will register it when the\r\n * window.load event is fired.\r\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\r\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\r\n */\r\nfunction registerStyles(styleArray: ThemableArray): void {\r\n  if (typeof document === 'undefined') {\r\n    return;\r\n  }\r\n  const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\r\n  const styleElement: HTMLStyleElement = document.createElement('style');\r\n  const { styleString, themable } = resolveThemableArray(styleArray);\r\n\r\n  styleElement.setAttribute('data-load-themed-styles', 'true');\r\n  if (_styleNonce) {\r\n    styleElement.setAttribute('nonce', _styleNonce);\r\n  }\r\n  styleElement.appendChild(document.createTextNode(styleString));\r\n  _themeState.perf.count++;\r\n  head.appendChild(styleElement);\r\n\r\n  const ev: ICustomEvent<{ newStyle: HTMLStyleElement }> = document.createEvent('HTMLEvents');\r\n  ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);\r\n  ev.args = {\r\n    newStyle: styleElement\r\n  };\r\n  document.dispatchEvent(ev);\r\n\r\n  const record: IStyleRecord = {\r\n    styleElement: styleElement,\r\n    themableStyle: styleArray\r\n  };\r\n\r\n  if (themable) {\r\n    _themeState.registeredThemableStyles.push(record);\r\n  } else {\r\n    _themeState.registeredStyles.push(record);\r\n  }\r\n}\r\n"]}