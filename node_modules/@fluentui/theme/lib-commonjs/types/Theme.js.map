{"version":3,"file":"Theme.js","sourceRoot":"../src/","sources":["types/Theme.ts"],"names":[],"mappings":"","sourcesContent":["import { IRawStyle } from '@uifabric/merge-styles';\nimport { IStyleFunctionOrObject } from '@uifabric/utilities';\nimport { IPalette } from './IPalette';\nimport { IFontStyles } from './IFontStyles';\nimport { ISemanticColors } from './ISemanticColors';\nimport { ISpacing } from './ISpacing';\nimport { IEffects } from './IEffects';\nimport { IScheme, ISchemeNames } from './IScheme';\n\n/**\n * A ramp of size values.\n */\nexport type SizeValue = 'smallest' | 'smaller' | 'small' | 'medium' | 'large' | 'larger' | 'largest';\n\n/**\n * A baseline set of color plates.\n */\nexport type ColorTokenSet = {\n  background?: string;\n  contentColor?: string;\n  secondaryContentColor?: string;\n  linkColor?: string;\n  iconColor?: string;\n  menuIconColor?: string;\n  borderColor?: string;\n  dividerColor?: string;\n  focusColor?: string;\n  focusInnerColor?: string;\n  opacity?: string;\n  highContrast?: ColorTokens;\n};\n\n/**\n * A set of states for each color plate to use.\n *\n * Note:\n *\n * State names here align to a consistent naming convention:\n *\n * The component is _____\n *\n * Bad: \"hover\", Good: \"hovered\"\n *\n * Additional considerations:\n *\n * The term \"active\" in css means that the keyboard or mouse button\n * which activates the component is pressed down. It is however ambiguous\n * with a focused state, as the HTML object model refers to the focused\n * element as the \"activeElement\". To resolve ambiguity and to be more\n * compatible with other platforms reusing token names, we have decided to snap\n * to \"pressed\".\n */\nexport type ColorTokens = ColorTokenSet & {\n  checked?: ColorTokens;\n  checkedHovered?: ColorTokens;\n  checkedPressed?: ColorTokens;\n  disabled?: ColorTokenSet;\n  expanded?: ColorTokenSet;\n  focused?: ColorTokenSet;\n  hovered?: ColorTokenSet;\n  pressed?: ColorTokenSet;\n};\n\nexport type FontTokens = Partial<{\n  fontFamily: string;\n  fontSize: string;\n  fontWeight: string;\n}>;\n\n/**\n * A token set can provide a single string or object, mapping additional sub-parts of a token set.\n */\nexport type TokenSetType = { [key: string]: TokenSetType | string | number | undefined };\n\n/**\n * Recursive partial type.\n */\nexport type RecursivePartial<T> = {\n  [P in keyof T]?: T[P] extends Array<infer I> ? Array<RecursivePartial<I>> : RecursivePartial<T[P]>;\n};\n\nexport interface Tokens {\n  color: {\n    body: ColorTokenSet & TokenSetType;\n    brand: ColorTokenSet & TokenSetType;\n    [key: string]: TokenSetType;\n  };\n\n  [key: string]: TokenSetType;\n}\n\n/**\n * A set of style configurations for variants of a component (e.g. primary is a variant for the Button component).\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type Variants = Record<string, any>;\n\n/**\n * {@docCategory Theme}\n * Component-level styles and variants.\n */\nexport interface ComponentStyles {\n  /**\n   * styles prop for a component.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  styles?: IStyleFunctionOrObject<any, any>;\n\n  /**\n   * The variants property is still in an experimental phase. This is only applied by `ThemeProvider`.\n   */\n  variants?: Variants;\n}\n\n/**\n * {@docCategory Theme}\n * Component-level styles and token set.\n */\nexport type ComponentsStyles = {\n  [componentName: string]: ComponentStyles;\n};\n\n/**\n * {@docCategory Theme}\n * A prepared (fully expanded) theme object.\n */\nexport interface Theme extends IScheme {\n  /**\n   * Component-level styles and token set.\n   * This is still in an experimental phase and is only applied by `ThemeProvider`.\n   */\n  components?: ComponentsStyles;\n\n  /**\n   * @internal\n   * CSS stylesheets to be registered.\n   * This is still in an experimental phase and is only applied by `ThemeProvider`.\n   */\n  stylesheets?: string[];\n\n  /**\n   * @internal\n   * Id of the theme. This is for internal use only.\n   */\n  id?: string;\n\n  /**\n   * @internal\n   * Global tokens. This is for internal use only and is not production-ready.\n   * */\n  tokens?: RecursivePartial<Tokens>;\n\n  /**\n   * @internal\n   * The schemes property is still in an experimental phase. The intent is to have it work\n   * in conjunction with new 'schemes' prop that any component making use of Foundation can use.\n   * Alternative themes that can be referred to by name.\n   */\n  schemes?: { [P in ISchemeNames]?: IScheme };\n}\n\n/**\n * {@docCategory Theme}\n * A partial theme.\n */\nexport interface PartialTheme {\n  components?: ComponentsStyles;\n\n  palette?: Partial<IPalette>;\n  fonts?: Partial<IFontStyles>;\n  semanticColors?: Partial<ISemanticColors>;\n  isInverted?: boolean;\n  disableGlobalClassNames?: boolean;\n  rtl?: boolean;\n  spacing?: Partial<ISpacing>;\n  effects?: Partial<IEffects>;\n\n  /**\n   * Use this property to specify font property defaults.\n   */\n  defaultFontStyle?: IRawStyle;\n\n  /**\n   * @internal\n   * CSS stylesheets to be registered.\n   * This is still in an experimental phase and is only applied by `ThemeProvider`.\n   */\n  stylesheets?: string[];\n\n  /**\n   * @internal\n   * Global tokens. This is experimental and not production-ready.\n   * */\n  tokens?: RecursivePartial<Tokens>;\n\n  /**\n   * @internal\n   * The schemes property is still in an experimental phase. The intent is to have it work\n   * in conjunction with new 'schemes' prop that any component making use of Foundation can use.\n   * Alternative themes that can be referred to by name.\n   */\n  schemes?: { [P in ISchemeNames]?: IScheme };\n}\n"]}