{"version":3,"file":"WindowProvider.js","sourceRoot":"../src/","sources":["WindowProvider.tsx"],"names":[],"mappings":";;;IAYA;;OAEG;IACU,QAAA,aAAa,GAAG,KAAK,CAAC,aAAa,CAAsB;QACpE,MAAM,EAAE,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;KACxD,CAAC,CAAC;IAEH;;OAEG;IACU,QAAA,SAAS,GAAG,cAA0B,OAAA,KAAK,CAAC,UAAU,CAAC,qBAAa,CAAC,CAAC,MAAM,EAAtC,CAAsC,CAAC;IAE1F;;OAEG;IACU,QAAA,WAAW,GAAG,mCAA4B,KAAK,CAAC,UAAU,CAAC,qBAAa,CAAC,CAAC,MAAM,0CAAE,QAAQ,GAAA,CAAC;IAExG;;;;OAIG;IACU,QAAA,cAAc,GAAiD,UAAA,KAAK;QAC/E,OAAO,oBAAC,qBAAa,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,IAAG,KAAK,CAAC,QAAQ,CAA0B,CAAC;IACzF,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\n/**\n * Props for the WindowProvider component.\n */\nexport type WindowProviderProps = {\n  /**\n   * Provide the active window.\n   */\n  window: Window | undefined;\n};\n\n/**\n * Context for providing the window.\n */\nexport const WindowContext = React.createContext<WindowProviderProps>({\n  window: typeof window === 'object' ? window : undefined,\n});\n\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useWindow = (): Window | undefined => React.useContext(WindowContext).window;\n\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useDocument = (): Document | undefined => React.useContext(WindowContext).window?.document;\n\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\nexport const WindowProvider: React.FunctionComponent<WindowProviderProps> = props => {\n  return <WindowContext.Provider value={props}>{props.children}</WindowContext.Provider>;\n};\n"]}