{"version":3,"file":"shallowUntilTarget.js","sourceRoot":"../src/","sources":["common/shallowUntilTarget.ts"],"names":[],"mappings":";;;IAsBA;;;;;;;OAOG;IACH,4BACE,iBAAwC,EACxC,eAAuB,EACvB,OAGC;QAHD,wBAAA,EAAA;YACE,QAAQ,EAAE,EAAE;YACZ,cAAc,EAAE,EAAE;SACnB;QAEO,IAAA,2BAAQ,EAAE,uCAAc,CAAa;QAE7C,IAAI,IAAI,GAAG,gBAAO,CAAO,iBAAiB,EAAE,cAAc,CAAC,CAAC;QAC5D,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAE3B,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE;YACvF,oBAAoB;YACpB,8CAA8C;YAC9C,qDAAqD;YACrD,OAAO,IAAI,CAAC;SACb;QAED,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI,QAAQ,EAAE,KAAK,EAAE,EAAE;YAC9C,kDAAkD;YAClD,mCAAmC;YACnC,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE;gBACvD,qDAAqD;gBACrD,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;aAC7C;YACD,8CAA8C;YAC9C,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAC5C,QAAQ,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;SACxB;QAED,MAAM,IAAI,KAAK,CACb,oBAAkB,eAAe,4BAAuB,iBAAiB,6BACzD,QAAQ,WAAQ,CACjC,CAAC;IACJ,CAAC;IApCD,gDAoCC","sourcesContent":["import { shallow, ShallowWrapper } from 'enzyme';\r\n\r\n/**\r\n * Duplicated enzyme's ShallowRendererProps\r\n *\r\n * @internal\r\n */\r\nexport interface IShallowRendererProps {\r\n  lifecycleExperimental?: boolean;\r\n  disableLifecycleMethods?: boolean;\r\n}\r\n\r\n/**\r\n * ShallowUntilTarget Interface\r\n *\r\n * @internal\r\n */\r\nexport interface IShallowUntilTarget {\r\n  maxTries: number;\r\n  shallowOptions: IShallowRendererProps;\r\n}\r\n\r\n/**\r\n * An extention of enzyme's shallow function which will fail to work\r\n * with decorated components and/or components using the styled() function.\r\n * This function allows you to pass a 'target' component (e.g. ComponentBase)\r\n * and keep running shallow on each child component till a match is found.\r\n *\r\n * @public\r\n */\r\nexport function shallowUntilTarget<P, S>(\r\n  componentInstance: React.ReactElement<P>,\r\n  TargetComponent: string,\r\n  options: IShallowUntilTarget = {\r\n    maxTries: 10,\r\n    shallowOptions: {}\r\n  }\r\n): ShallowWrapper {\r\n  const { maxTries, shallowOptions } = options;\r\n\r\n  let root = shallow<P, S>(componentInstance, shallowOptions);\r\n  let rootType = root.type();\r\n\r\n  if (typeof rootType === 'string' || rootType.toString().indexOf(TargetComponent) !== -1) {\r\n    // Default shallow()\r\n    // If type() is a string then it's a DOM Node.\r\n    // If it were wrapped, it would be a React component.\r\n    return root;\r\n  }\r\n\r\n  for (let tries = 1; tries <= maxTries; tries++) {\r\n    // Check for target as a string to avoid conflicts\r\n    // with decoratored components name\r\n    if (rootType.toString().indexOf(TargetComponent) !== -1) {\r\n      // Now that we found the target component, render it.\r\n      return root.first().shallow(shallowOptions);\r\n    }\r\n    // Unwrap the next component in the hierarchy.\r\n    root = root.first().shallow(shallowOptions);\r\n    rootType = root.type();\r\n  }\r\n\r\n  throw new Error(\r\n    `Could not find ${TargetComponent} in React instance: ${componentInstance};\r\n    gave up after ${maxTries} tries`\r\n  );\r\n}\r\n"]}