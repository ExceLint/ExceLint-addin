{"version":3,"file":"ChoiceGroup.types.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/ChoiceGroup.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\n\r\nimport { IIconProps } from '../../Icon';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles } from './ChoiceGroupOption/ChoiceGroupOption.types';\r\n\r\nexport interface IChoiceGroup {\r\n  /**\r\n   * Gets the current checked option.\r\n   */\r\n  checkedOption: IChoiceGroupOption | undefined;\r\n\r\n  /**\r\n   * Sets focus to the choiceGroup.\r\n   */\r\n  focus: () => void;\r\n}\r\n\r\nexport interface IChoiceGroupProps extends React.InputHTMLAttributes<HTMLElement | HTMLInputElement> {\r\n  /**\r\n   * Optional callback to access the IChoiceGroup interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IChoiceGroup>;\r\n\r\n  /**\r\n   * The options for the choice group.\r\n   */\r\n  options?: IChoiceGroupOption[];\r\n\r\n  /**\r\n   * The key of the option that will be initially checked.\r\n   */\r\n  defaultSelectedKey?: string | number;\r\n\r\n  /**\r\n   * The key of the selected option. If you provide this, you must maintain selection\r\n   * state by observing onChange events and passing a new value in when changed.\r\n   */\r\n  selectedKey?: string | number;\r\n\r\n  /**\r\n   * A callback for receiving a notification when the choice has been changed.\r\n   */\r\n  onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => void;\r\n\r\n  /**\r\n   * Descriptive label for the choice group.\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Deprecated and will be removed by 07/17/2017. Use `onChange` instead.\r\n   * @deprecated Use `onChange` instead.\r\n   */\r\n  onChanged?: (option: IChoiceGroupOption, evt?: React.FormEvent<HTMLElement | HTMLInputElement>) => void;\r\n\r\n  /**\r\n   * Theme (provided through customization.)\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IChoiceGroupStyleProps, IChoiceGroupStyles>;\r\n\r\n  /**\r\n   * Aria labelled by prop for the ChoiceGroup itself\r\n   */\r\n  ariaLabelledBy?: string;\r\n}\r\n\r\nexport interface IChoiceGroupOption extends React.HTMLAttributes<HTMLElement | HTMLInputElement> {\r\n  /**\r\n   * A required key to uniquely identify the option.\r\n   */\r\n  key: string;\r\n\r\n  /**\r\n   * The text string for the option.\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * Optional override of option render\r\n   */\r\n  onRenderField?: IRenderFunction<IChoiceGroupOption>;\r\n\r\n  /**\r\n   * Optional override of label render\r\n   */\r\n  onRenderLabel?: (option: IChoiceGroupOption) => JSX.Element;\r\n\r\n  /**\r\n   * The Icon component props for choice field\r\n   */\r\n  iconProps?: IIconProps;\r\n\r\n  /**\r\n   * The src of image for choice field.\r\n   */\r\n  imageSrc?: string;\r\n\r\n  /**\r\n   * The alt of image for choice field. Defaults to '' if not set.\r\n   */\r\n  imageAlt?: string;\r\n\r\n  /**\r\n   * The src of image for choice field which is selected.\r\n   */\r\n  selectedImageSrc?: string;\r\n\r\n  /**\r\n   * The width and height of the image in px for choice field.\r\n   * @defaultvalue \\{ width: 32, height: 32 \\}\r\n   */\r\n  imageSize?: { width: number; height: number };\r\n\r\n  /**\r\n   * Whether or not the option is disabled.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Whether or not the option is checked.\r\n   */\r\n  checked?: boolean;\r\n\r\n  /**\r\n   * DOM id to tag the ChoiceGroup input with, for reference.\r\n   * Should be used for 'aria-owns' and other such uses, rather than direct reference for programmatic purposes.\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * DOM id to tag the ChoiceGroup label with, for reference.\r\n   * Should be used for 'aria-owns' and other such uses, rather than direct reference for programmatic purposes.\r\n   */\r\n  labelId?: string;\r\n\r\n  /**\r\n   * The aria label of the ChoiceGroupOption for the benefit of screen readers.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles>;\r\n}\r\n\r\nexport interface IChoiceGroupStyleProps {\r\n  theme: ITheme;\r\n  className?: string;\r\n  optionsContainIconOrImage?: boolean;\r\n}\r\n\r\nexport interface IChoiceGroupStyles {\r\n  applicationRole?: IStyle;\r\n  root?: IStyle;\r\n  label?: IStyle;\r\n  flexContainer?: IStyle;\r\n}\r\n"]}