{"version":3,"file":"ChoiceGroup.base.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/ChoiceGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n\r\nimport { Label } from '../../Label';\r\nimport { initializeComponentRef, warnDeprecations, warnMutuallyExclusive, classNamesFunction, find, getId } from '../../Utilities';\r\nimport { IChoiceGroup, IChoiceGroupOption, IChoiceGroupProps, IChoiceGroupStyleProps, IChoiceGroupStyles } from './ChoiceGroup.types';\r\nimport { ChoiceGroupOption, OnChangeCallback, OnFocusCallback } from './ChoiceGroupOption/index';\r\n\r\nconst getClassNames = classNamesFunction<IChoiceGroupStyleProps, IChoiceGroupStyles>();\r\n\r\nexport interface IChoiceGroupState {\r\n  keyChecked: string | number;\r\n\r\n  /** Is true when the control has focus. */\r\n  keyFocused?: string | number;\r\n}\r\n\r\nexport class ChoiceGroupBase extends React.Component<IChoiceGroupProps, IChoiceGroupState> implements IChoiceGroup {\r\n  public static defaultProps: IChoiceGroupProps = {\r\n    options: []\r\n  };\r\n\r\n  private _id: string;\r\n  private _labelId: string;\r\n  private _inputElement = React.createRef<HTMLInputElement>();\r\n  private focusedVars: { [key: string]: OnFocusCallback } = {};\r\n  private changedVars: { [key: string]: OnChangeCallback } = {};\r\n\r\n  constructor(props: IChoiceGroupProps) {\r\n    super(props);\r\n\r\n    initializeComponentRef(this);\r\n\r\n    if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\r\n      warnDeprecations('ChoiceGroup', props, { onChanged: 'onChange' });\r\n      warnMutuallyExclusive('ChoiceGroup', props, {\r\n        selectedKey: 'defaultSelectedKey'\r\n      });\r\n    }\r\n\r\n    const validDefaultSelectedKey: boolean = !!props.options && props.options.some(option => option.key === props.defaultSelectedKey);\r\n\r\n    this.state = {\r\n      keyChecked:\r\n        props.defaultSelectedKey === undefined || !validDefaultSelectedKey ? this._getKeyChecked(props)! : props.defaultSelectedKey,\r\n      keyFocused: undefined\r\n    };\r\n\r\n    this._id = getId('ChoiceGroup');\r\n    this._labelId = getId('ChoiceGroupLabel');\r\n  }\r\n\r\n  /**\r\n   * Gets the current checked option.\r\n   */\r\n  public get checkedOption(): IChoiceGroupOption | undefined {\r\n    const { options = [] } = this.props;\r\n    const { keyChecked: key } = this.state;\r\n    return find(options, (value: IChoiceGroupOption) => value.key === key);\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IChoiceGroupProps): void {\r\n    const newKeyChecked = this._getKeyChecked(newProps);\r\n    const oldKeyChecked = this._getKeyChecked(this.props);\r\n\r\n    if (newKeyChecked !== oldKeyChecked) {\r\n      this.setState({\r\n        keyChecked: newKeyChecked!\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { className, theme, styles, options, label, required, disabled, name, role } = this.props;\r\n    const { keyChecked, keyFocused } = this.state;\r\n\r\n    const classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className,\r\n      optionsContainIconOrImage: options!.some(option => Boolean(option.iconProps || option.imageSrc))\r\n    });\r\n\r\n    const ariaLabelledBy = this.props.ariaLabelledBy\r\n      ? this.props.ariaLabelledBy\r\n      : label\r\n      ? this._id + '-label'\r\n      : (this.props as any)['aria-labelledby'];\r\n\r\n    return (\r\n      <div role={role} className={classNames.applicationRole}>\r\n        <div className={classNames.root} role=\"radiogroup\" {...ariaLabelledBy && { 'aria-labelledby': ariaLabelledBy }}>\r\n          {label && (\r\n            <Label className={classNames.label} required={required} id={this._id + '-label'}>\r\n              {label}\r\n            </Label>\r\n          )}\r\n          <div className={classNames.flexContainer}>\r\n            {options!.map((option: IChoiceGroupOption) => {\r\n              const innerOptionProps = {\r\n                ...option,\r\n                focused: option.key === keyFocused,\r\n                checked: option.key === keyChecked,\r\n                disabled: option.disabled || disabled,\r\n                id: `${this._id}-${option.key}`,\r\n                labelId: `${this._labelId}-${option.key}`,\r\n                name: name || this._id,\r\n                required\r\n              };\r\n\r\n              return (\r\n                <ChoiceGroupOption\r\n                  key={option.key}\r\n                  onBlur={this._onBlur}\r\n                  onFocus={this._onFocus(option.key)}\r\n                  onChange={this._onChange(option.key)}\r\n                  {...innerOptionProps}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    const { options } = this.props;\r\n    if (options) {\r\n      for (const option of options) {\r\n        const elementToFocus = document.getElementById(`${this._id}-${option.key}`);\r\n        if (elementToFocus && elementToFocus.getAttribute('data-is-focusable') === 'true') {\r\n          elementToFocus.focus(); // focus on checked or default focusable key\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    if (this._inputElement.current) {\r\n      this._inputElement.current.focus();\r\n    }\r\n  }\r\n\r\n  private _onFocus = (key: string) =>\r\n    this.focusedVars[key]\r\n      ? this.focusedVars[key]\r\n      : (this.focusedVars[key] = (ev: React.FocusEvent<HTMLElement>, option: IChoiceGroupOption) => {\r\n          this.setState({\r\n            keyFocused: key,\r\n            keyChecked: this.state.keyChecked\r\n          });\r\n        });\r\n\r\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>, option: IChoiceGroupOption) => {\r\n    this.setState({\r\n      keyFocused: undefined,\r\n      keyChecked: this.state.keyChecked\r\n    });\r\n  };\r\n\r\n  private _onChange = (key: string) =>\r\n    this.changedVars[key]\r\n      ? this.changedVars[key]\r\n      : (this.changedVars[key] = (evt, option: IChoiceGroupOption) => {\r\n          const { onChanged, onChange, selectedKey, options = [] } = this.props;\r\n\r\n          // Only manage state in uncontrolled scenarios.\r\n          if (selectedKey === undefined) {\r\n            this.setState({\r\n              keyChecked: key\r\n            });\r\n          }\r\n\r\n          const originalOption = find(options, (value: IChoiceGroupOption) => value.key === key);\r\n\r\n          // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\r\n          if (onChange) {\r\n            onChange(evt, originalOption);\r\n          } else if (onChanged) {\r\n            onChanged(originalOption!);\r\n          }\r\n        });\r\n\r\n  private _getKeyChecked(props: IChoiceGroupProps): string | number | undefined {\r\n    if (props.selectedKey !== undefined) {\r\n      return props.selectedKey;\r\n    }\r\n\r\n    const { options = [] } = props;\r\n\r\n    const optionsChecked = options.filter((option: IChoiceGroupOption) => {\r\n      return option.checked;\r\n    });\r\n\r\n    if (optionsChecked.length === 0) {\r\n      return undefined;\r\n    } else {\r\n      return optionsChecked[0].key;\r\n    }\r\n  }\r\n}\r\n"]}