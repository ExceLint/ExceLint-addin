{"version":3,"file":"ChoiceGroup.Label.Example.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/examples/ChoiceGroup.Label.Example.tsx"],"names":[],"mappings":";;;IAYA;QAA6C,mDAAkD;QAA/F;YAAA,qEAiDC;YAhDQ,WAAK,GAAkC;gBAC5C,QAAQ,EAAE,EAAE;aACb,CAAC;YAEF,iEAAiE;YACjE,6FAA6F;YACrF,cAAQ,GAAW,iBAAK,CAAC,cAAc,CAAC,CAAC;YAuCzC,eAAS,GAAG,UAAC,EAAqC,EAAE,MAAW;gBACrE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACtB,CAAC,CAAC;;QACJ,CAAC;QAxCQ,wCAAM,GAAb;YACE,OAAO,CACL;gBACE,oBAAC,aAAK,IAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,mBAEhC;gBACR,oBAAC,yBAAW,IACV,kBAAkB,EAAC,GAAG,EACtB,OAAO,EAAE;wBACP;4BACE,GAAG,EAAE,GAAG;4BACR,IAAI,EAAE,UAAU;4BAChB,oBAAoB,EAAE,OAAO;yBACR;wBACvB;4BACE,GAAG,EAAE,GAAG;4BACR,IAAI,EAAE,UAAU;yBACjB;wBACD;4BACE,GAAG,EAAE,GAAG;4BACR,IAAI,EAAE,UAAU;4BAChB,QAAQ,EAAE,IAAI;yBACf;wBACD;4BACE,GAAG,EAAE,GAAG;4BACR,IAAI,EAAE,UAAU;4BAChB,QAAQ,EAAE,IAAI;yBACf;qBACF,EACD,QAAQ,EAAE,IAAI,CAAC,SAAS,EACxB,cAAc,EAAE,IAAI,CAAC,QAAQ,EAC7B,QAAQ,EAAE,IAAI,GACd,CACE,CACP,CAAC;QACJ,CAAC;QAKH,8BAAC;IAAD,CAAC,AAjDD,CAA6C,KAAK,CAAC,SAAS,GAiD3D;IAjDY,0DAAuB","sourcesContent":["import * as React from 'react';\r\nimport { ChoiceGroup, IChoiceGroupOption } from 'office-ui-fabric-react/lib/ChoiceGroup';\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\nimport { getId } from 'office-ui-fabric-react/lib/Utilities';\r\n\r\n/**\r\n * Interface for ChoiceGroupLabelExample state.\r\n */\r\nexport interface IChoiceGroupLabelExampleState {\r\n  imageKey: string;\r\n}\r\n\r\nexport class ChoiceGroupLabelExample extends React.Component<{}, IChoiceGroupLabelExampleState> {\r\n  public state: IChoiceGroupLabelExampleState = {\r\n    imageKey: ''\r\n  };\r\n\r\n  // Use getId() to ensure that the label ID is unique on the page.\r\n  // (It's also okay to use a plain string without getId() and manually ensure its uniqueness.)\r\n  private _labelId: string = getId('labelElement');\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <Label id={this._labelId} required={true}>\r\n          Custom label\r\n        </Label>\r\n        <ChoiceGroup\r\n          defaultSelectedKey=\"B\"\r\n          options={[\r\n            {\r\n              key: 'A',\r\n              text: 'Option A',\r\n              'data-automation-id': 'auto1'\r\n            } as IChoiceGroupOption,\r\n            {\r\n              key: 'B',\r\n              text: 'Option B'\r\n            },\r\n            {\r\n              key: 'C',\r\n              text: 'Option C',\r\n              disabled: true\r\n            },\r\n            {\r\n              key: 'D',\r\n              text: 'Option D',\r\n              disabled: true\r\n            }\r\n          ]}\r\n          onChange={this._onChange}\r\n          ariaLabelledBy={this._labelId}\r\n          required={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onChange = (ev: React.FormEvent<HTMLInputElement>, option: any): void => {\r\n    console.dir(option);\r\n  };\r\n}\r\n"]}