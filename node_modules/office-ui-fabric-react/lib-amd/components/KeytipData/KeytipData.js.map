{"version":3,"file":"KeytipData.js","sourceRoot":"../src/","sources":["components/KeytipData/KeytipData.tsx"],"names":[],"mappings":";;;IAMA;;OAEG;IACH;QAAgC,sCAA0D;QAA1F;YAAA,qEA+DC;YA7DS,oBAAc,GAAkB,6BAAa,CAAC,WAAW,EAAE,CAAC;;QA6DtE,CAAC;QA3DQ,sCAAiB,GAAxB;YACE,mCAAmC;YACnC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;gBAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;aACpE;QACH,CAAC;QAEM,yCAAoB,GAA3B;YACE,qCAAqC;YACrC,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAChG,CAAC;QAEM,uCAAkB,GAAzB;YACE,iCAAiC;YACjC,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5F,CAAC;QAEM,2BAAM,GAAb;YACQ,IAAA,eAAuD,EAArD,sBAAQ,EAAE,4BAAW,EAAE,oCAAe,CAAgB;YAC9D,IAAI,iBAAiB,GAAQ,EAAE,CAAC;YAChC,IAAI,WAAW,EAAE;gBACf,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;aACrE;YACD,OAAO,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QACrC,CAAC;QAEO,iCAAY,GAApB;YACE,0BACE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,IAC1B,IAAI,CAAC,KAAK,CAAC,WAAY,EAC1B;QACJ,CAAC;QAED;;;;WAIG;QACK,iCAAY,GAApB,UAAqB,WAAyB,EAAE,kBAA2B;YACzE,IAAI,WAAW,EAAE;gBACf,gDAAgD;gBAChD,IAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;gBAE1E,mEAAmE;gBACnE,IAAM,eAAe,GAAG,gCAAkB,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;gBACxE,IAAI,YAAY,GAAO,cAAc,CAAC,YAAY,QAAC,CAAC;gBACpD,IAAI,cAAc,CAAC,mBAAmB,EAAE;oBACtC,YAAY,GAAG,4BAAc,CAAC,YAAY,EAAE,cAAc,CAAC,mBAAmB,CAAC,CAAC;iBACjF;gBACD,IAAM,KAAK,GAAG,2BAAa,CAAC,YAAY,CAAC,CAAC;gBAE1C,OAAO;oBACL,kBAAkB,EAAE,oCAAwB,CAAC,kBAAkB,EAAE,eAAe,CAAC;oBACjF,iBAAiB,EAAE,KAAK;oBACxB,yBAAyB,EAAE,KAAK;iBACjC,CAAC;aACH;YACD,OAAO,SAAS,CAAC;QACnB,CAAC;QACH,iBAAC;IAAD,CAAC,AA/DD,CAAgC,yBAAa,GA+D5C;IA/DY,gCAAU","sourcesContent":["import { BaseComponent, IRenderComponent, mergeAriaAttributeValues } from '../../Utilities';\r\nimport { IKeytipDataProps } from './KeytipData.types';\r\nimport { IKeytipProps } from '../../Keytip';\r\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\r\nimport { mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/KeytipUtils';\r\n\r\n/**\r\n * A small element to help the target component correctly read out its aria-describedby for its Keytip\r\n */\r\nexport class KeytipData extends BaseComponent<IKeytipDataProps & IRenderComponent<{}>, {}> {\r\n  private _uniqueId: string;\r\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\r\n\r\n  public componentDidMount() {\r\n    // Register Keytip in KeytipManager\r\n    if (this.props.keytipProps) {\r\n      this._uniqueId = this._keytipManager.register(this._getKtpProps());\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    // Unregister Keytip in KeytipManager\r\n    this.props.keytipProps && this._keytipManager.unregister(this._getKtpProps(), this._uniqueId);\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    // Update Keytip in KeytipManager\r\n    this.props.keytipProps && this._keytipManager.update(this._getKtpProps(), this._uniqueId);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { children, keytipProps, ariaDescribedBy } = this.props;\r\n    let nativeKeytipProps: any = {};\r\n    if (keytipProps) {\r\n      nativeKeytipProps = this._getKtpAttrs(keytipProps, ariaDescribedBy);\r\n    }\r\n    return children(nativeKeytipProps);\r\n  }\r\n\r\n  private _getKtpProps(): IKeytipProps {\r\n    return {\r\n      disabled: this.props.disabled,\r\n      ...this.props.keytipProps!\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets the aria- and data- attributes to attach to the component\r\n   * @param keytipProps\r\n   * @param describedByPrepend\r\n   */\r\n  private _getKtpAttrs(keytipProps: IKeytipProps, describedByPrepend?: string): any {\r\n    if (keytipProps) {\r\n      // Add the parent overflow sequence if necessary\r\n      const newKeytipProps = this._keytipManager.addParentOverflow(keytipProps);\r\n\r\n      // Construct aria-describedby and data-ktp-id attributes and return\r\n      const ariaDescribedBy = getAriaDescribedBy(newKeytipProps.keySequences);\r\n      let keySequences = [...newKeytipProps.keySequences];\r\n      if (newKeytipProps.overflowSetSequence) {\r\n        keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\r\n      }\r\n      const ktpId = sequencesToID(keySequences);\r\n\r\n      return {\r\n        'aria-describedby': mergeAriaAttributeValues(describedByPrepend, ariaDescribedBy),\r\n        'data-ktp-target': ktpId,\r\n        'data-ktp-execute-target': ktpId\r\n      };\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n"]}