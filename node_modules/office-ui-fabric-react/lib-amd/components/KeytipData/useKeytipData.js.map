{"version":3,"file":"useKeytipData.js","sourceRoot":"../src/","sources":["components/KeytipData/useKeytipData.ts"],"names":[],"mappings":";;;IAYA;;OAEG;IACH,SAAgB,aAAa,CAAC,OAA0B;;QACtD,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAU,CAAC;QACxC,IAAM,WAAW,GAA6B,OAAO,CAAC,WAAW;YAC/D,CAAC,oBACG,QAAQ,EAAE,OAAO,CAAC,QAAQ,IACvB,OAAO,CAAC,WAAW,EAE1B,CAAC,CAAC,SAAS,CAAC;QAEd,IAAM,aAAa,GAAG,sBAAQ,CAAgB,qBAAa,CAAC,WAAW,EAAE,CAAC,CAAC;QAE3E,KAAK,CAAC,SAAS,CAAC;YACd,mCAAmC;YACnC,IAAI,WAAW,EAAE;gBACf,QAAQ,CAAC,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;aACxD;YAED,OAAO;gBACL,qCAAqC;gBACrC,WAAW,IAAI,aAAa,CAAC,UAAU,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAQ,CAAC,CAAC;YAC1E,CAAC,CAAC;YACF,yEAAyE;YACzE,uDAAuD;QACzD,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,IAAM,WAAW,GAAG,yBAAW,CAAC,OAAO,CAAC,CAAC;QAEzC,IACE,QAAQ,CAAC,OAAO;YAChB,WAAW;YACX,CAAC,OAAA,WAAW,0CAAE,WAAW,MAAK,OAAO,CAAC,WAAW,IAAI,OAAA,WAAW,0CAAE,QAAQ,MAAK,OAAO,CAAC,QAAQ,CAAC,EAChG;YACA,aAAa,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;SACrD;QAED,IAAI,iBAAiB,GAAgB;YACnC,eAAe,EAAE,SAAS;YAC1B,QAAQ,EAAE,SAAS;SACpB,CAAC;QAEF,IAAI,WAAW,EAAE;YACf,iBAAiB,GAAG,aAAa,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;SACxF;QAED,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IA7CD,sCA6CC;IAED;;;;OAIG;IACH,SAAS,aAAa,CACpB,aAA4B,EAC5B,WAAyB,EACzB,kBAA2B;QAE3B,gDAAgD;QAChD,IAAM,cAAc,GAAG,aAAa,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAEpE,wDAAwD;QACxD,IAAM,eAAe,GAAG,oCAAwB,CAC9C,kBAAkB,EAClB,0BAAkB,CAAC,cAAc,CAAC,YAAY,CAAC,CAC/C,CAAC;QAEH,IAAI,YAAY,0BAAO,cAAc,CAAC,YAAY,CAAC,CAAC;QACpD,IAAI,cAAc,CAAC,mBAAmB,EAAE;YACtC,YAAY,GAAG,sBAAc,CAAC,YAAY,EAAE,cAAc,CAAC,mBAAmB,CAAC,CAAC;SACjF;QACD,IAAM,QAAQ,GAAG,qBAAa,CAAC,YAAY,CAAC,CAAC;QAE7C,OAAO;YACL,eAAe,iBAAA;YACf,QAAQ,UAAA;SACT,CAAC;IACJ,CAAC","sourcesContent":["import * as React from 'react';\nimport { useConst, usePrevious } from '@uifabric/react-hooks';\nimport { mergeAriaAttributeValues } from '../../Utilities';\nimport { KeytipDataOptions } from './KeytipData.types';\nimport { IKeytipProps } from '../../Keytip';\nimport { KeytipManager, mergeOverflows, sequencesToID, getAriaDescribedBy } from '../../utilities/keytips/index';\n\nexport interface IKeytipData {\n  ariaDescribedBy: string | undefined;\n  keytipId: string | undefined;\n}\n\n/**\n * Hook that creates attributes for components which are enabled with Keytip.\n */\nexport function useKeytipData(options: KeytipDataOptions): IKeytipData {\n  const uniqueId = React.useRef<string>();\n  const keytipProps: IKeytipProps | undefined = options.keytipProps\n    ? {\n        disabled: options.disabled,\n        ...options.keytipProps,\n      }\n    : undefined;\n\n  const keytipManager = useConst<KeytipManager>(KeytipManager.getInstance());\n\n  React.useEffect(() => {\n    // Register Keytip in KeytipManager\n    if (keytipProps) {\n      uniqueId.current = keytipManager.register(keytipProps);\n    }\n\n    return () => {\n      // Unregister Keytip in KeytipManager\n      keytipProps && keytipManager.unregister(keytipProps, uniqueId.current!);\n    };\n    // this is meant to run only at mount, and updates are handled separately\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const prevOptions = usePrevious(options);\n\n  if (\n    uniqueId.current &&\n    keytipProps &&\n    (prevOptions?.keytipProps !== options.keytipProps || prevOptions?.disabled !== options.disabled)\n  ) {\n    keytipManager.update(keytipProps, uniqueId.current);\n  }\n\n  let nativeKeytipProps: IKeytipData = {\n    ariaDescribedBy: undefined,\n    keytipId: undefined,\n  };\n\n  if (keytipProps) {\n    nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);\n  }\n\n  return nativeKeytipProps;\n}\n\n/**\n * Gets the aria- and data- attributes to attach to the component\n * @param keytipProps - options for Keytip\n * @param describedByPrepend - ariaDescribedBy value to prepend\n */\nfunction getKeytipData(\n  keytipManager: KeytipManager,\n  keytipProps: IKeytipProps,\n  describedByPrepend?: string,\n): IKeytipData {\n  // Add the parent overflow sequence if necessary\n  const newKeytipProps = keytipManager.addParentOverflow(keytipProps);\n\n  // Construct aria-describedby and data-ktp-id attributes\n  const ariaDescribedBy = mergeAriaAttributeValues(\n    describedByPrepend,\n    getAriaDescribedBy(newKeytipProps.keySequences),\n  )!;\n\n  let keySequences = [...newKeytipProps.keySequences];\n  if (newKeytipProps.overflowSetSequence) {\n    keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);\n  }\n  const keytipId = sequencesToID(keySequences);\n\n  return {\n    ariaDescribedBy,\n    keytipId,\n  };\n}\n"]}