define(["require", "exports", "tslib", "../../Styling", "./MessageBar.types"], function (require, exports, tslib_1, Styling_1, MessageBar_types_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GlobalClassNames = {
        root: 'ms-MessageBar',
        error: 'ms-MessageBar--error',
        blocked: 'ms-MessageBar--blocked',
        severeWarning: 'ms-MessageBar--severeWarning',
        success: 'ms-MessageBar--success',
        warning: 'ms-MessageBar--warning',
        multiline: 'ms-MessageBar-multiline',
        singleline: 'ms-MessageBar-singleline',
        dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',
        expandingSingleLine: 'ms-MessageBar-expandingSingleLine',
        content: 'ms-MessageBar-content',
        iconContainer: 'ms-MessageBar-icon',
        text: 'ms-MessageBar-text',
        innerText: 'ms-MessageBar-innerText',
        dismissSingleLine: 'ms-MessageBar-dismissSingleLine',
        expandSingleLine: 'ms-MessageBar-expandSingleLine',
        dismissal: 'ms-MessageBar-dismissal',
        expand: 'ms-MessageBar-expand',
        actions: 'ms-MessageBar-actions',
        actionsSingleline: 'ms-MessageBar-actionsSingleLine'
    };
    // Returns the background color of the MessageBar root element based on the type of MessageBar.
    var getRootBackground = function (messageBarType, palette, semanticColors) {
        switch (messageBarType) {
            case MessageBar_types_1.MessageBarType.error:
            case MessageBar_types_1.MessageBarType.blocked:
                return semanticColors.errorBackground;
            case MessageBar_types_1.MessageBarType.severeWarning:
                return semanticColors.blockingBackground;
            case MessageBar_types_1.MessageBarType.success:
                return semanticColors.successBackground;
            case MessageBar_types_1.MessageBarType.warning:
                return semanticColors.warningBackground;
        }
        return palette.neutralLighter;
    };
    // Returns the icon color based on the type of MessageBar.
    var getIconColor = function (messageBarType, palette, semanticColors) {
        switch (messageBarType) {
            case MessageBar_types_1.MessageBarType.error:
            case MessageBar_types_1.MessageBarType.blocked:
            case MessageBar_types_1.MessageBarType.severeWarning:
                return semanticColors.errorText;
            case MessageBar_types_1.MessageBarType.success:
                return palette.green;
            case MessageBar_types_1.MessageBarType.warning:
                return semanticColors.warningText;
        }
        return palette.neutralSecondary;
    };
    exports.getStyles = function (props) {
        var theme = props.theme, className = props.className, messageBarType = props.messageBarType, onDismiss = props.onDismiss, actions = props.actions, truncated = props.truncated, isMultiline = props.isMultiline, expandSingleLine = props.expandSingleLine;
        var semanticColors = theme.semanticColors, palette = theme.palette, fonts = theme.fonts;
        var SmallScreenSelector = Styling_1.getScreenSelector(0, Styling_1.ScreenWidthMaxSmall);
        var classNames = Styling_1.getGlobalClassNames(GlobalClassNames, theme);
        var dismissalAndExpandIconStyle = {
            fontSize: 12,
            height: 12,
            lineHeight: '12px',
            color: palette.neutralPrimary,
            selectors: (_a = {},
                _a[Styling_1.HighContrastSelector] = {
                    MsHighContrastAdjust: 'none',
                    color: 'window'
                },
                _a)
        };
        var dismissalAndExpandSingleLineStyle = {
            display: 'flex',
            selectors: {
                '& .ms-Button-icon': dismissalAndExpandIconStyle
            }
        };
        var dismissalAndExpandStyle = {
            flexShrink: 0,
            margin: 8,
            marginLeft: 0,
            selectors: (_b = {
                    '& .ms-Button-icon': dismissalAndExpandIconStyle
                },
                _b[SmallScreenSelector] = {
                    margin: '0px 0px 0px 8px'
                },
                _b)
        };
        var focusStyle = Styling_1.getFocusStyle(theme, 0, 'relative', undefined, palette.black);
        return {
            root: [
                classNames.root,
                theme.fonts.medium,
                messageBarType === MessageBar_types_1.MessageBarType.error && classNames.error,
                messageBarType === MessageBar_types_1.MessageBarType.blocked && classNames.blocked,
                messageBarType === MessageBar_types_1.MessageBarType.severeWarning && classNames.severeWarning,
                messageBarType === MessageBar_types_1.MessageBarType.success && classNames.success,
                messageBarType === MessageBar_types_1.MessageBarType.warning && classNames.warning,
                isMultiline ? classNames.multiline : classNames.singleline,
                !isMultiline && onDismiss && classNames.dismissalSingleLine,
                !isMultiline && truncated && classNames.expandingSingleLine,
                {
                    background: getRootBackground(messageBarType, palette, semanticColors),
                    color: palette.neutralPrimary,
                    minHeight: 32,
                    width: '100%',
                    boxSizing: 'border-box',
                    display: 'flex',
                    position: 'relative',
                    wordBreak: 'break-word',
                    selectors: (_c = {
                            '& .ms-Link': tslib_1.__assign({ color: palette.themeDark }, fonts.small)
                        },
                        _c[Styling_1.HighContrastSelector] = {
                            background: 'windowText'
                        },
                        _c)
                },
                isMultiline && {
                    flexDirection: 'column'
                },
                !isMultiline && {
                    selectors: (_d = {},
                        _d[SmallScreenSelector] = {
                            flexDirection: 'column'
                        },
                        _d)
                },
                truncated && {
                    flexDirection: 'column',
                    selectors: {
                        '& .ms-Button-icon': dismissalAndExpandIconStyle
                    }
                },
                className
            ],
            content: [
                classNames.content,
                {
                    display: 'flex',
                    lineHeight: 'normal',
                    width: '100%',
                    boxSizing: 'border-box',
                    selectors: {
                        '&:before': {
                            pointerEvents: 'none',
                            position: 'absolute',
                            right: 0,
                            bottom: 0,
                            left: 0,
                            top: 0,
                            margin: 0,
                            selectors: (_e = {},
                                _e[Styling_1.HighContrastSelector] = {
                                    background: 'WindowText',
                                    color: 'Window',
                                    content: ' '
                                },
                                _e)
                        }
                    }
                },
                !isMultiline && {
                    selectors: (_f = {},
                        _f[SmallScreenSelector] = {
                            flexDirection: 'row'
                        },
                        _f)
                },
                (truncated || isMultiline) && {
                    flexDirection: 'row'
                }
            ],
            iconContainer: [
                classNames.iconContainer,
                {
                    fontSize: 16,
                    minWidth: 16,
                    minHeight: 16,
                    display: 'flex',
                    color: palette.neutralSecondary,
                    flexShrink: 0,
                    margin: 16,
                    marginRight: 0,
                    selectors: (_g = {},
                        _g[SmallScreenSelector] = {
                            margin: '8px 0px 8px 8px'
                        },
                        _g)
                }
            ],
            icon: {
                color: getIconColor(messageBarType, palette, semanticColors),
                selectors: (_h = {},
                    _h[Styling_1.HighContrastSelector] = {
                        MsHighContrastAdjust: 'none',
                        color: 'window'
                    },
                    _h)
            },
            text: [
                classNames.text,
                tslib_1.__assign({ minWidth: 0, display: 'flex', flexGrow: 1, margin: '16px 8px' }, fonts.small, { selectors: (_j = {},
                        _j[SmallScreenSelector] = {
                            margin: '8px 0px 8px 8px'
                        },
                        _j[Styling_1.HighContrastSelector] = {
                            MsHighContrastAdjust: 'none',
                            color: 'window'
                        },
                        _j) }),
                !onDismiss && {
                    marginRight: 16,
                    selectors: (_k = {},
                        _k[SmallScreenSelector] = {
                            marginRight: 8
                        },
                        _k)
                },
                isMultiline &&
                    actions && {
                    marginBottom: 8,
                    selectors: (_l = {},
                        _l[SmallScreenSelector] = {
                            marginBottom: 0
                        },
                        _l)
                },
                !isMultiline &&
                    actions && {
                    selectors: (_m = {},
                        _m[SmallScreenSelector] = {
                            marginBottom: 0
                        },
                        _m)
                }
            ],
            innerText: [
                classNames.innerText,
                {
                    lineHeight: 16,
                    selectors: {
                        '& span': {
                            selectors: {
                                '& a': {
                                    paddingLeft: 4
                                }
                            }
                        }
                    }
                },
                truncated && {
                    overflow: 'visible',
                    whiteSpace: 'pre-wrap'
                },
                !isMultiline && {
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap'
                },
                !isMultiline &&
                    !truncated && {
                    selectors: (_o = {},
                        _o[SmallScreenSelector] = {
                            overflow: 'visible',
                            whiteSpace: 'pre-wrap'
                        },
                        _o)
                },
                expandSingleLine && {
                    overflow: 'visible',
                    whiteSpace: 'pre-wrap'
                }
            ],
            dismissSingleLine: [classNames.dismissSingleLine, dismissalAndExpandSingleLineStyle],
            expandSingleLine: [classNames.expandSingleLine, dismissalAndExpandSingleLineStyle],
            dismissal: [classNames.dismissal, dismissalAndExpandStyle, focusStyle],
            expand: [classNames.expand, dismissalAndExpandStyle, focusStyle],
            actions: [
                isMultiline ? classNames.actions : classNames.actionsSingleline,
                {
                    display: 'flex',
                    flexGrow: 0,
                    flexShrink: 0,
                    flexBasis: 'auto',
                    flexDirection: 'row-reverse',
                    alignItems: 'center',
                    margin: '8px 8px 8px 0',
                    selectors: {
                        '& button:nth-child(n+2)': {
                            marginLeft: 8
                        }
                    }
                },
                isMultiline && {
                    margin: '0px 12px 12px 0',
                    selectors: {
                        '& button:nth-child(n+2)': {
                            marginLeft: 12
                        }
                    }
                }
            ]
        };
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    };
});
//# sourceMappingURL=MessageBar.styles.js.map