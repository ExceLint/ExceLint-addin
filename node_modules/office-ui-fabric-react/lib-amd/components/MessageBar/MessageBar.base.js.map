{"version":3,"file":"MessageBar.base.js","sourceRoot":"../src/","sources":["components/MessageBar/MessageBar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  DelayedRender,\n  getId,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n  css,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nexport interface IMessageBarState {\n  labelId?: string;\n  showContent?: boolean;\n  expandSingleLine?: boolean;\n}\n\nexport class MessageBarBase extends React.Component<IMessageBarProps, IMessageBarState> {\n  public static defaultProps: IMessageBarProps = {\n    messageBarType: MessageBarType.info,\n    onDismiss: undefined,\n    isMultiline: true,\n  };\n\n  private ICON_MAP = {\n    [MessageBarType.info]: 'Info',\n    [MessageBarType.warning]: 'Info',\n    [MessageBarType.error]: 'ErrorBadge',\n    [MessageBarType.blocked]: 'Blocked2',\n    [MessageBarType.severeWarning]: 'Warning',\n    [MessageBarType.success]: 'Completed',\n  };\n\n  private _classNames: { [key in keyof IMessageBarStyles]: string };\n\n  constructor(props: IMessageBarProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      labelId: getId('MessageBar'),\n      // eslint-disable-next-line react/no-unused-state\n      showContent: false,\n      expandSingleLine: false,\n    };\n  }\n\n  public render(): JSX.Element {\n    const { isMultiline } = this.props;\n\n    this._classNames = this._getClassNames();\n\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\n  }\n\n  private _getActionsDiv(): JSX.Element | null {\n    if (this.props.actions) {\n      return <div className={this._classNames.actions}>{this.props.actions}</div>;\n    }\n    return null;\n  }\n\n  private _getDismissDiv(): JSX.Element | null {\n    const { onDismiss, dismissIconProps } = this.props;\n    if (onDismiss) {\n      return (\n        <IconButton\n          disabled={false}\n          className={this._classNames.dismissal}\n          onClick={onDismiss}\n          iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n          title={this.props.dismissButtonAriaLabel}\n          ariaLabel={this.props.dismissButtonAriaLabel}\n        />\n      );\n    }\n    return null;\n  }\n\n  private _getDismissSingleLine(): JSX.Element | null {\n    if (this.props.onDismiss) {\n      return <div className={this._classNames.dismissSingleLine}>{this._getDismissDiv()}</div>;\n    }\n    return null;\n  }\n\n  private _getExpandSingleLine(): JSX.Element | null {\n    if (!this.props.actions && this.props.truncated) {\n      return (\n        <div className={this._classNames.expandSingleLine}>\n          <IconButton\n            disabled={false}\n            className={this._classNames.expand}\n            onClick={this._onClick}\n            iconProps={{ iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' }}\n            ariaLabel={this.props.overflowButtonAriaLabel}\n            aria-expanded={this.state.expandSingleLine}\n          />\n        </div>\n      );\n    }\n    return null;\n  }\n\n  private _getIconSpan(): JSX.Element {\n    const { messageBarIconProps } = this.props;\n    return (\n      <div className={this._classNames.iconContainer} aria-hidden>\n        {messageBarIconProps ? (\n          <Icon {...messageBarIconProps} className={css(this._classNames.icon, messageBarIconProps.className)} />\n        ) : (\n          <Icon iconName={this.ICON_MAP[this.props.messageBarType!]} className={this._classNames.icon} />\n        )}\n      </div>\n    );\n  }\n\n  private _renderMultiLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getDismissDiv()}\n        </div>\n        {this._getActionsDiv()}\n      </div>\n    );\n  }\n\n  private _renderSingleLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    return (\n      <div className={this._classNames.root} {...this._getRegionProps()}>\n        <div className={this._classNames.content}>\n          {this._getIconSpan()}\n          {this._renderInnerText()}\n          {this._getExpandSingleLine()}\n          {this._getActionsDiv()}\n          {this._getDismissSingleLine()}\n        </div>\n      </div>\n    );\n  }\n\n  private _renderInnerText(): JSX.Element {\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div\n        className={this._classNames.text}\n        id={this.state.labelId}\n        role=\"status\"\n        aria-live={this._getAnnouncementPriority()}\n      >\n        <span className={this._classNames.innerText} {...nativeProps}>\n          <DelayedRender>\n            <span>{this.props.children}</span>\n          </DelayedRender>\n        </span>\n      </div>\n    );\n  }\n\n  private _getRegionProps = () => {\n    const hasActions = !!this._getActionsDiv() || !!this._getDismissDiv();\n    const regionProps = {\n      'aria-describedby': this.state.labelId,\n      role: 'region',\n    };\n\n    return hasActions ? regionProps : {};\n  };\n\n  private _getClassNames(): { [key in keyof IMessageBarStyles]: string } {\n    const { theme, className, messageBarType, onDismiss, actions, truncated, isMultiline } = this.props;\n    const { expandSingleLine } = this.state;\n\n    return getClassNames(this.props.styles!, {\n      theme: theme!,\n      messageBarType: messageBarType || MessageBarType.info,\n      onDismiss: onDismiss !== undefined,\n      actions: actions !== undefined,\n      truncated: truncated,\n      isMultiline: isMultiline,\n      expandSingleLine: expandSingleLine,\n      className,\n    });\n  }\n\n  private _getAnnouncementPriority(): 'assertive' | 'polite' {\n    switch (this.props.messageBarType) {\n      case MessageBarType.blocked:\n      case MessageBarType.error:\n      case MessageBarType.severeWarning:\n        return 'assertive';\n    }\n    return 'polite';\n  }\n\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    this.setState({ expandSingleLine: !this.state.expandSingleLine });\n  };\n}\n"]}