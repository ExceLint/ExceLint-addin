define(["require", "exports", "tslib", "react", "office-ui-fabric-react/lib/Button", "office-ui-fabric-react/lib/Label", "office-ui-fabric-react/lib/Utilities", "./Button.Basic.Example.styles"], function (require, exports, tslib_1, React, Button_1, Label_1, Utilities_1, Button_Basic_Example_styles_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ButtonCommandExample = /** @class */ (function (_super) {
        tslib_1.__extends(ButtonCommandExample, _super);
        function ButtonCommandExample() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ButtonCommandExample.prototype.render = function () {
            var _a = this.props, disabled = _a.disabled, checked = _a.checked;
            var getClassNames = Utilities_1.classNamesFunction();
            var classNames = getClassNames(Button_Basic_Example_styles_1.getStyles, {});
            return (React.createElement("div", { className: Utilities_1.css(classNames.twoup) },
                React.createElement("div", null,
                    React.createElement(Label_1.Label, null, "CommandButton that focuses on menu"),
                    React.createElement(Button_1.CommandButton, { "data-automation-id": "test", disabled: disabled, checked: checked, iconProps: { iconName: 'Add' }, text: "Create account", menuProps: {
                            items: [
                                {
                                    key: 'emailMessage',
                                    text: 'Email message',
                                    iconProps: { iconName: 'Mail' }
                                },
                                {
                                    key: 'calendarEvent',
                                    text: 'Calendar event',
                                    iconProps: { iconName: 'Calendar' }
                                }
                            ]
                        } })),
                React.createElement("div", null,
                    React.createElement(Label_1.Label, null, "CommandButton that doesn't focus on menu"),
                    React.createElement(Button_1.CommandButton, { "data-automation-id": "test", disabled: disabled, checked: checked, iconProps: { iconName: 'Add' }, text: "Create account", menuProps: {
                            shouldFocusOnMount: false,
                            items: [
                                {
                                    key: 'emailMessage',
                                    text: 'Email message',
                                    iconProps: { iconName: 'Mail' }
                                },
                                {
                                    key: 'calendarEvent',
                                    text: 'Calendar event',
                                    iconProps: { iconName: 'Calendar' }
                                }
                            ]
                        } }))));
        };
        return ButtonCommandExample;
    }(React.Component));
    exports.ButtonCommandExample = ButtonCommandExample;
});
//# sourceMappingURL=Button.Command.Example.js.map