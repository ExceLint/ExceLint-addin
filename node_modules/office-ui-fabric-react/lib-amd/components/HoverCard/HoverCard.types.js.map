{"version":3,"file":"HoverCard.types.js","sourceRoot":"../src/","sources":["components/HoverCard/HoverCard.types.ts"],"names":[],"mappings":";;;IAwIA,IAAY,YAUX;IAVD,WAAY,YAAY;QACtB;;WAEG;QACH,iDAAS,CAAA;QAET;;WAEG;QACH,mDAAU,CAAA;IACZ,CAAC,EAVW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAUvB;IAED,IAAY,aAUX;IAVD,WAAY,aAAa;QACvB;;WAEG;QACH,oCAAmB,CAAA;QAEnB;;WAEG;QACH,4CAA2B,CAAA;IAC7B,CAAC,EAVW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAUxB","sourcesContent":["import * as React from 'react';\r\n\r\nimport { IExpandingCardProps } from './ExpandingCard.types';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject, KeyCodes } from '../../Utilities';\r\nimport { IPlainCardProps } from './PlainCard/PlainCard.types';\r\n\r\nexport interface IHoverCard {}\r\n\r\n/**\r\n * HoverCard component props.\r\n */\r\nexport interface IHoverCardProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * Optional callback to access the IHoverCardHost interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IHoverCard>;\r\n\r\n  /**\r\n   * Additional CSS class(es) to apply to the HoverCard root element.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Length of card dismiss delay. A min number is necessary for pointer to hop between target and card\r\n   * @defaultvalue 100\r\n   */\r\n  cardDismissDelay?: number;\r\n\r\n  /**\r\n   * Length of compact card delay\r\n   * @defaultvalue 500\r\n   */\r\n  cardOpenDelay?: number;\r\n\r\n  /**\r\n   * Time in ms when expanded card should open after compact card\r\n   * @defaultvalue 1500\r\n   */\r\n  expandedCardOpenDelay?: number;\r\n\r\n  /**\r\n   * Additional ExpandingCard props to pass through HoverCard like renderers, target. gapSpace etc.\r\n   * Used along with 'type' prop set to HoverCardType.expanding.\r\n   * Reference detail properties in ICardProps and IExpandingCardProps.\r\n   */\r\n  expandingCardProps?: IExpandingCardProps;\r\n\r\n  /**\r\n   * Enables instant open of the full card upon click\r\n   * @defaultvalue false\r\n   */\r\n  instantOpenOnClick?: boolean;\r\n\r\n  /**\r\n   * Callback when card becomes visible\r\n   */\r\n  onCardVisible?: () => void;\r\n\r\n  /**\r\n   * Callback when card hides\r\n   */\r\n  onCardHide?: () => void;\r\n\r\n  /**\r\n   * HotKey used for opening the HoverCard when tabbed to target.\r\n   * @defaultvalue 'KeyCodes.c'\r\n   */\r\n  openHotKey?: KeyCodes;\r\n\r\n  /**\r\n   * Additional PlainCard props to pass through HoverCard like renderers, target, gapSpace etc.\r\n   * Used along with 'type' prop set to HoverCardType.plain.\r\n   * See for more details ICardProps and IPlainCardProps interfaces.\r\n   */\r\n  plainCardProps?: IPlainCardProps;\r\n\r\n  /**\r\n   * Whether or not to mark the container as described by the hover card.\r\n   * If not specified, the caller should mark as element as described by the hover card id.\r\n   */\r\n  setAriaDescribedBy?: boolean;\r\n\r\n  /**\r\n   * Callback when visible card is expanded.\r\n   */\r\n  onCardExpand?: () => void;\r\n\r\n  /**\r\n   * Set to true to set focus on the first focusable element in the card. Works in pair with the 'trapFocus' prop.\r\n   * @defaultvalue false\r\n   */\r\n  setInitialFocus?: boolean;\r\n\r\n  /**\r\n   * Should block hover card or not\r\n   */\r\n  shouldBlockHoverCard?: () => void;\r\n\r\n  /**\r\n   * If true disables Card dismiss upon mouse leave, so that card sticks around.\r\n   * @defaultvalue false\r\n   */\r\n  sticky?: boolean;\r\n\r\n  /**\r\n   * Custom styles for this component\r\n   */\r\n  styles?: IStyleFunctionOrObject<IHoverCardStyleProps, IHoverCardStyles>;\r\n\r\n  /**\r\n   * Optional target element to tag hover card on.\r\n   * If not provided and using HoverCard as a wrapper, don't set 'data-is-focusable=true' attribute to the root of the wrapped child.\r\n   * When no target given, HoverCard will use it's root as a target and become the focusable element with a focus listener attached to it.\r\n   */\r\n  target?: HTMLElement | string;\r\n\r\n  /**\r\n   * Theme provided by higher order component.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Set to true if you want to render the content of the HoverCard in a FocusTrapZone for accessibility reasons.\r\n   * Optionally 'setInitialFocus' prop can be set to true to move focus inside the FocusTrapZone.\r\n   */\r\n  trapFocus?: boolean;\r\n\r\n  /**\r\n   * Type of the hover card to render.\r\n   * @defaultvalue HoverCardType.expanding\r\n   */\r\n  type?: HoverCardType;\r\n}\r\n\r\nexport enum OpenCardMode {\r\n  /**\r\n   * Open card by hover\r\n   */\r\n  hover = 0,\r\n\r\n  /**\r\n   * Open card by hot key\r\n   */\r\n  hotKey = 1\r\n}\r\n\r\nexport enum HoverCardType {\r\n  /**\r\n   * Plain card consisting of one part responsive to the size of content.\r\n   */\r\n  plain = 'PlainCard',\r\n\r\n  /**\r\n   * File card consisting of two parts: compact and expanded. Has some default sizes if not specified.\r\n   */\r\n  expanding = 'ExpandingCard'\r\n}\r\n\r\nexport interface IHoverCardStyleProps {\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Optional className(s) for the host div of HoverCard.\r\n   */\r\n  className?: string;\r\n}\r\n\r\nexport interface IHoverCardStyles {\r\n  /**\r\n   * Style for the host element in the default enabled, non-toggled state.\r\n   */\r\n  host?: IStyle;\r\n}\r\n"]}