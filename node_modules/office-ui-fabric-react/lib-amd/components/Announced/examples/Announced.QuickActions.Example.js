define(["require", "exports", "tslib", "react", "../Announced", "office-ui-fabric-react/lib/DetailsList", "office-ui-fabric-react/lib/MarqueeSelection", "office-ui-fabric-react/lib/Button", "office-ui-fabric-react/lib/Dialog", "office-ui-fabric-react/lib/TextField", "office-ui-fabric-react/lib/Utilities"], function (require, exports, tslib_1, React, Announced_1, DetailsList_1, MarqueeSelection_1, Button_1, Dialog_1, TextField_1, Utilities_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _items = [];
    var _columns = [
        {
            key: 'column1',
            name: 'Name',
            fieldName: 'name',
            minWidth: 100,
            maxWidth: 200,
            isResizable: true,
            ariaLabel: 'Operations for name'
        },
        {
            key: 'column2',
            name: 'Modified',
            fieldName: 'modified',
            minWidth: 100,
            maxWidth: 200,
            isResizable: true,
            ariaLabel: 'Operations for modified'
        },
        {
            key: 'column3',
            name: 'Modified By',
            fieldName: 'modifiedby',
            minWidth: 100,
            maxWidth: 200,
            isResizable: true,
            ariaLabel: 'Operations for modifiedby'
        },
        {
            key: 'column4',
            name: 'File Size',
            fieldName: 'filesize',
            minWidth: 100,
            maxWidth: 200,
            isResizable: true,
            ariaLabel: 'Operations for filesize'
        }
    ];
    var _names = [
        'Annie Lindqvist',
        'Aaron Reid',
        'Alex Lundberg',
        'Roko Kolar',
        'Christian Bergqvist',
        'Valentina Lovric',
        'Makenzie Sharett'
    ];
    var nullFunction = function () { return null; };
    function generateRandomDate() {
        return new Date(new Date(2010, 0, 1).getTime() + Math.random() * (new Date().getTime() - new Date(2010, 0, 1).getTime())).toDateString();
    }
    var AnnouncedQuickActionsExample = /** @class */ (function (_super) {
        tslib_1.__extends(AnnouncedQuickActionsExample, _super);
        function AnnouncedQuickActionsExample(props) {
            var _this = _super.call(this, props) || this;
            _this._detailsList = Utilities_1.createRef();
            _this._textField = Utilities_1.createRef();
            // Populate with items for demos.
            if (_items.length === 0) {
                for (var i = 0; i < 20; i++) {
                    _items.push({
                        key: i,
                        name: 'Item ' + i,
                        modified: generateRandomDate(),
                        modifiedby: _names[Math.floor(Math.random() * _names.length)],
                        filesize: Math.floor(Math.random() * 30).toString() + ' MB'
                    });
                }
            }
            _this._selection = new DetailsList_1.Selection({
                onSelectionChanged: function () { return _this.setState({ selectionDetails: _this._getSelectionDetails() }); }
            });
            _this._onRenderRow = _this._onRenderRow.bind(_this);
            _this._deleteItem = _this._deleteItem.bind(_this);
            _this._onRenderItemColumn = _this._onRenderItemColumn.bind(_this);
            _this._closeRenameDialog = _this._closeRenameDialog.bind(_this);
            _this._renderAnnounced = _this._renderAnnounced.bind(_this);
            _this.state = {
                items: _items,
                selectionDetails: _this._getSelectionDetails(),
                renameDialogOpen: false,
                dialogContent: undefined,
                announced: undefined
            };
            return _this;
        }
        AnnouncedQuickActionsExample.prototype.render = function () {
            var _a = this.state, items = _a.items, renameDialogOpen = _a.renameDialogOpen, dialogContent = _a.dialogContent;
            return (React.createElement(React.Fragment, null,
                this._renderAnnounced(),
                React.createElement(MarqueeSelection_1.MarqueeSelection, { selection: this._selection },
                    React.createElement(DetailsList_1.DetailsList, { componentRef: this._detailsList, items: items, columns: _columns, setKey: "set", layoutMode: DetailsList_1.DetailsListLayoutMode.fixedColumns, selection: this._selection, selectionPreservedOnEmptyClick: true, ariaLabelForSelectionColumn: "Toggle selection", ariaLabelForSelectAllCheckbox: "Toggle selection for all items", onRenderItemColumn: this._onRenderItemColumn, onRenderRow: this._onRenderRow }),
                    React.createElement(Dialog_1.Dialog, { hidden: !renameDialogOpen, onDismiss: this._closeRenameDialog, closeButtonAriaLabel: "Close" }, dialogContent))));
        };
        AnnouncedQuickActionsExample.prototype._onRenderRow = function (props) {
            return React.createElement(DetailsList_1.DetailsRow, tslib_1.__assign({}, props));
        };
        AnnouncedQuickActionsExample.prototype._onRenderItemColumn = function (item, index, column) {
            var _this = this;
            var fieldContent = item[column.fieldName || ''];
            switch (column.key) {
                case 'column1':
                    return (React.createElement("div", null,
                        fieldContent,
                        React.createElement(Button_1.IconButton, { iconProps: { iconName: 'MoreVertical' }, role: "button", "aria-haspopup": true, "aria-label": "Show actions", onRenderMenuIcon: nullFunction, styles: { root: { float: 'right', height: 'inherit' } }, menuProps: {
                                items: [
                                    {
                                        key: 'delete',
                                        text: 'Delete',
                                        onClick: function () { return _this._deleteItem(index); }
                                    },
                                    {
                                        key: 'rename',
                                        text: 'Rename',
                                        onClick: function () { return _this._renameItem(item, index); }
                                    }
                                ]
                            } })));
                default:
                    return React.createElement("span", null, fieldContent);
            }
        };
        AnnouncedQuickActionsExample.prototype._renderAnnounced = function () {
            var announced = this.state.announced;
            return announced;
        };
        AnnouncedQuickActionsExample.prototype._deleteItem = function (index) {
            var items = this.state.items;
            items.splice(items.indexOf(items[index]), 1);
            this.setState({
                items: items.slice(),
                announced: React.createElement(Announced_1.Announced, { message: "Item deleted" })
            });
            return;
        };
        AnnouncedQuickActionsExample.prototype._renameItem = function (item, index) {
            this.setState({
                renameDialogOpen: true,
                dialogContent: (React.createElement(React.Fragment, null,
                    React.createElement(TextField_1.TextField, { componentRef: this._textField, label: "Rename", value: item.name }),
                    React.createElement(Dialog_1.DialogFooter, null,
                        React.createElement(Button_1.PrimaryButton, { onClick: this._updateItemName.bind(this, item, index), text: "Save" }))))
            });
            return;
        };
        AnnouncedQuickActionsExample.prototype._updateItemName = function (item, index) {
            if (this._textField && this._textField.current) {
                var items = this.state.items;
                items[index].name = this._textField.current.value || items[index].name;
                this.setState({
                    renameDialogOpen: false,
                    items: items.slice(),
                    announced: React.createElement(Announced_1.Announced, { message: "Item renamed" })
                });
            }
            else {
                return;
            }
        };
        AnnouncedQuickActionsExample.prototype._closeRenameDialog = function () {
            this.setState({
                renameDialogOpen: false
            });
        };
        AnnouncedQuickActionsExample.prototype._getSelectionDetails = function () {
            var selectionCount = this._selection.getSelectedCount();
            switch (selectionCount) {
                case 0:
                    return 'No items selected';
                case 1:
                    return '1 item selected: ' + this._selection.getSelection()[0].name;
                default:
                    return selectionCount + " items selected";
            }
        };
        return AnnouncedQuickActionsExample;
    }(React.Component));
    exports.AnnouncedQuickActionsExample = AnnouncedQuickActionsExample;
});
//# sourceMappingURL=Announced.QuickActions.Example.js.map