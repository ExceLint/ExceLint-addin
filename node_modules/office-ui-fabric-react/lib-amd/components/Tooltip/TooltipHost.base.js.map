{"version":3,"file":"TooltipHost.base.js","sourceRoot":"../src/","sources":["components/Tooltip/TooltipHost.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  divProperties,\r\n  getNativeProps,\r\n  getId,\r\n  assign,\r\n  hasOverflow,\r\n  portalContainsElement,\r\n  classNamesFunction\r\n} from '../../Utilities';\r\nimport { ITooltipHostProps, TooltipOverflowMode, ITooltipHostStyles, ITooltipHostStyleProps, ITooltipHost } from './TooltipHost.types';\r\nimport { Tooltip } from './Tooltip';\r\nimport { TooltipDelay } from './Tooltip.types';\r\n\r\nexport interface ITooltipHostState {\r\n  isTooltipVisible: boolean;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\r\n\r\nexport class TooltipHostBase extends BaseComponent<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\r\n  public static defaultProps = {\r\n    delay: TooltipDelay.medium\r\n  };\r\n\r\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\r\n\r\n  // The wrapping div that gets the hover events\r\n  private _tooltipHost = React.createRef<HTMLDivElement>();\r\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\r\n\r\n  // The ID of the setTimeout that will eventually close the tooltip if the\r\n  // the tooltip isn't hovered over.\r\n  private _closingTimer = -1;\r\n\r\n  // Constructor\r\n  constructor(props: ITooltipHostProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isTooltipVisible: false\r\n    };\r\n  }\r\n\r\n  // Render\r\n  public render(): JSX.Element {\r\n    const {\r\n      calloutProps,\r\n      children,\r\n      content,\r\n      delay,\r\n      directionalHint,\r\n      directionalHintForRTL,\r\n      hostClassName: className,\r\n      id,\r\n      setAriaDescribedBy = true,\r\n      tooltipProps,\r\n      styles,\r\n      theme\r\n    } = this.props;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className\r\n    });\r\n\r\n    const { isTooltipVisible } = this.state;\r\n    const tooltipId = id || getId('tooltip');\r\n    const isContentPresent = !!(content || (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent()));\r\n    const showTooltip = isTooltipVisible && isContentPresent;\r\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\r\n\r\n    return (\r\n      <div\r\n        className={this._classNames.root}\r\n        ref={this._tooltipHost}\r\n        {...{ onFocusCapture: this._onTooltipMouseEnter }}\r\n        {...{ onBlurCapture: this._hideTooltip }}\r\n        onMouseEnter={this._onTooltipMouseEnter}\r\n        onMouseLeave={this._onTooltipMouseLeave}\r\n        aria-describedby={ariaDescribedBy}\r\n      >\r\n        {children}\r\n        {showTooltip && (\r\n          <Tooltip\r\n            id={tooltipId}\r\n            delay={delay}\r\n            content={content}\r\n            targetElement={this._getTargetElement()}\r\n            directionalHint={directionalHint}\r\n            directionalHintForRTL={directionalHintForRTL}\r\n            calloutProps={assign({}, calloutProps, {\r\n              onMouseEnter: this._onTooltipMouseEnter,\r\n              onMouseLeave: this._onTooltipMouseLeave\r\n            })}\r\n            onMouseEnter={this._onTooltipMouseEnter}\r\n            onMouseLeave={this._onTooltipMouseLeave}\r\n            {...getNativeProps(this.props, divProperties)}\r\n            {...tooltipProps}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\r\n      TooltipHostBase._currentVisibleTooltip = undefined;\r\n    }\r\n  }\r\n\r\n  public show = (): void => {\r\n    this._toggleTooltip(true);\r\n  };\r\n\r\n  public dismiss = (): void => {\r\n    this._hideTooltip();\r\n  };\r\n\r\n  private _getTargetElement(): HTMLElement | undefined {\r\n    if (!this._tooltipHost.current) {\r\n      return undefined;\r\n    }\r\n\r\n    const { overflowMode } = this.props;\r\n\r\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\r\n    // to the parent element, otherwise it might look off.\r\n    if (overflowMode !== undefined) {\r\n      switch (overflowMode) {\r\n        case TooltipOverflowMode.Parent:\r\n          return this._tooltipHost.current.parentElement!;\r\n\r\n        case TooltipOverflowMode.Self:\r\n          return this._tooltipHost.current;\r\n      }\r\n    }\r\n\r\n    return this._tooltipHost.current;\r\n  }\r\n\r\n  // Show Tooltip\r\n  private _onTooltipMouseEnter = (ev: any): void => {\r\n    const { overflowMode } = this.props;\r\n\r\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\r\n      TooltipHostBase._currentVisibleTooltip.dismiss();\r\n    }\r\n    TooltipHostBase._currentVisibleTooltip = this;\r\n\r\n    if (overflowMode !== undefined) {\r\n      const overflowElement = this._getTargetElement();\r\n      if (overflowElement && !hasOverflow(overflowElement)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement())) {\r\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\r\n      return;\r\n    }\r\n\r\n    this._toggleTooltip(true);\r\n    this._clearDismissTimer();\r\n  };\r\n\r\n  // Hide Tooltip\r\n  private _onTooltipMouseLeave = (ev: any): void => {\r\n    if (this.props.closeDelay) {\r\n      this._clearDismissTimer();\r\n\r\n      this._closingTimer = this._async.setTimeout(() => {\r\n        this._toggleTooltip(false);\r\n      }, this.props.closeDelay);\r\n    } else {\r\n      this._toggleTooltip(false);\r\n    }\r\n    if (TooltipHostBase._currentVisibleTooltip === this) {\r\n      TooltipHostBase._currentVisibleTooltip = undefined;\r\n    }\r\n  };\r\n\r\n  private _clearDismissTimer = (): void => {\r\n    this._async.clearTimeout(this._closingTimer);\r\n  };\r\n\r\n  // Hide Tooltip\r\n  private _hideTooltip = (): void => {\r\n    this._toggleTooltip(false);\r\n  };\r\n\r\n  private _toggleTooltip(isTooltipVisible: boolean): void {\r\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\r\n      this.setState({ isTooltipVisible }, () => this.props.onTooltipToggle && this.props.onTooltipToggle(this.state.isTooltipVisible));\r\n    }\r\n  }\r\n}\r\n"]}