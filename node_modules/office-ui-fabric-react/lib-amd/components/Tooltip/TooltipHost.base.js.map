{"version":3,"file":"TooltipHost.base.js","sourceRoot":"../src/","sources":["components/Tooltip/TooltipHost.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport {\n  initializeComponentRef,\n  Async,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow,\n  portalContainsElement,\n  classNamesFunction,\n  KeyCodes,\n} from '../../Utilities';\nimport {\n  ITooltipHostProps,\n  TooltipOverflowMode,\n  ITooltipHostStyles,\n  ITooltipHostStyleProps,\n  ITooltipHost,\n} from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\n\nexport interface ITooltipHostState {\n  isAriaPlaceholderRendered: boolean;\n  isTooltipVisible: boolean;\n}\n\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\n\nexport class TooltipHostBase extends React.Component<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\n  public static defaultProps = {\n    delay: TooltipDelay.medium,\n  };\n\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost = React.createRef<HTMLDivElement>();\n\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\n  private _async: Async;\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _defaultTooltipId = getId('tooltip');\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false,\n    };\n\n    this._async = new Async(this);\n  }\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      calloutProps,\n      children,\n      content,\n      directionalHint,\n      directionalHintForRTL,\n      hostClassName: className,\n      id,\n      setAriaDescribedBy = true,\n      tooltipProps,\n      styles,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    const { isAriaPlaceholderRendered, isTooltipVisible } = this.state;\n    const tooltipId = id || this._defaultTooltipId;\n    const isContentPresent = !!(\n      content ||\n      (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent())\n    );\n    const showTooltip = isTooltipVisible && isContentPresent;\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        ref={this._tooltipHost}\n        {...{ onFocusCapture: this._onTooltipMouseEnter }}\n        {...{ onBlurCapture: this._hideTooltip }}\n        onMouseEnter={this._onTooltipMouseEnter}\n        onMouseLeave={this._onTooltipMouseLeave}\n        onKeyDown={this._onTooltipKeyDown}\n        aria-describedby={ariaDescribedBy}\n      >\n        {children}\n        {showTooltip && (\n          <Tooltip\n            id={tooltipId}\n            content={content}\n            targetElement={this._getTargetElement()}\n            directionalHint={directionalHint}\n            directionalHintForRTL={directionalHintForRTL}\n            calloutProps={assign({}, calloutProps, {\n              onDismiss: this._hideTooltip,\n              onMouseEnter: this._onTooltipMouseEnter,\n              onMouseLeave: this._onTooltipMouseLeave,\n            })}\n            onMouseEnter={this._onTooltipMouseEnter}\n            onMouseLeave={this._onTooltipMouseLeave}\n            {...getNativeProps(this.props, divProperties)}\n            {...tooltipProps}\n          />\n        )}\n        {isAriaPlaceholderRendered && (\n          <div id={tooltipId} style={hiddenContentStyle as React.CSSProperties}>\n            {content}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  public componentWillUnmount(): void {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  }\n\n  public show = (): void => {\n    this._toggleTooltip(true);\n  };\n\n  public dismiss = (): void => {\n    this._hideTooltip();\n  };\n\n  private _getTargetElement = (): HTMLElement | undefined => {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  };\n\n  // Show Tooltip\n  private _onTooltipMouseEnter = (ev: any): void => {\n    const { overflowMode, delay } = this.props;\n\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\n      TooltipHostBase._currentVisibleTooltip.dismiss();\n    }\n    TooltipHostBase._currentVisibleTooltip = this;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement())) {\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\n      return;\n    }\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (delay !== TooltipDelay.zero) {\n      this.setState({ isAriaPlaceholderRendered: true });\n      const delayTime = this._getDelayTime(delay!); // non-null assertion because we set it in `defaultProps`\n\n      this._openTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(true);\n      }, delayTime);\n    } else {\n      this._toggleTooltip(true);\n    }\n  };\n\n  // Hide Tooltip\n  private _onTooltipMouseLeave = (ev: any): void => {\n    const { closeDelay } = this.props;\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (closeDelay) {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(false);\n      }, closeDelay);\n    } else {\n      this._toggleTooltip(false);\n    }\n\n    if (TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n  };\n\n  private _onTooltipKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if ((ev.which === KeyCodes.escape || ev.ctrlKey) && this.state.isTooltipVisible) {\n      this._hideTooltip();\n      ev.stopPropagation();\n    }\n  };\n\n  private _clearDismissTimer = (): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n  };\n\n  private _clearOpenTimer = (): void => {\n    this._async.clearTimeout(this._openTimerId);\n  };\n\n  // Hide Tooltip\n  private _hideTooltip = (): void => {\n    this._clearOpenTimer();\n    this._clearDismissTimer();\n    this._toggleTooltip(false);\n  };\n\n  private _toggleTooltip = (isTooltipVisible: boolean): void => {\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState(\n        { isAriaPlaceholderRendered: false, isTooltipVisible },\n        () => this.props.onTooltipToggle && this.props.onTooltipToggle(isTooltipVisible),\n      );\n    }\n  };\n\n  private _getDelayTime = (delay: TooltipDelay): number => {\n    switch (delay) {\n      case TooltipDelay.medium:\n        return 300;\n      case TooltipDelay.long:\n        return 500;\n      default:\n        return 0;\n    }\n  };\n}\n"]}