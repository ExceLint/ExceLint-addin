{"version":3,"file":"Tooltip.Basic.Example.js","sourceRoot":"../src/","sources":["components/Tooltip/examples/Tooltip.Basic.Example.tsx"],"names":[],"mappings":";;;IAKA;QAAyC,+CAAyB;QAAlE;YAAA,qEAcC;YAbC,2DAA2D;YAC3D,yFAAyF;YACjF,aAAO,GAAW,iBAAK,CAAC,aAAa,CAAC,CAAC;;QAWjD,CAAC;QATQ,oCAAM,GAAb;YACE,OAAO,CACL;gBACE,oBAAC,qBAAW,IAAC,OAAO,EAAC,qBAAqB,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE;oBACxF,oBAAC,sBAAa,uBAAkB,IAAI,CAAC,OAAO,oBAA+B,CAC/D,CACV,CACP,CAAC;QACJ,CAAC;QACH,0BAAC;IAAD,CAAC,AAdD,CAAyC,KAAK,CAAC,SAAS,GAcvD;IAdY,kDAAmB","sourcesContent":["import * as React from 'react';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';\r\nimport { getId } from 'office-ui-fabric-react/lib/Utilities';\r\n\r\nexport class TooltipBasicExample extends React.Component<any, any> {\r\n  // Use getId() to ensure that the ID is unique on the page.\r\n  // (It's also okay to use a plain string without getId() and manually ensure uniqueness.)\r\n  private _hostId: string = getId('tooltipHost');\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div>\r\n        <TooltipHost content=\"This is the tooltip\" id={this._hostId} calloutProps={{ gapSpace: 0 }}>\r\n          <DefaultButton aria-labelledby={this._hostId}>Hover Over Me</DefaultButton>\r\n        </TooltipHost>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}