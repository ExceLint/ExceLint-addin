define(["require", "exports", "tslib", "react", "../../Utilities", "./Tooltip.types", "../../Callout", "../../common/DirectionalHint"], function (require, exports, tslib_1, React, Utilities_1, Tooltip_types_1, Callout_1, DirectionalHint_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var getClassNames = Utilities_1.classNamesFunction();
    var TooltipBase = /** @class */ (function (_super) {
        tslib_1.__extends(TooltipBase, _super);
        function TooltipBase() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._onRenderContent = function (props) {
                return React.createElement("p", { className: _this._classNames.subText }, props.content);
            };
            return _this;
        }
        TooltipBase.prototype.render = function () {
            var _a = this.props, className = _a.className, calloutProps = _a.calloutProps, delay = _a.delay, directionalHint = _a.directionalHint, directionalHintForRTL = _a.directionalHintForRTL, styles = _a.styles, id = _a.id, maxWidth = _a.maxWidth, _b = _a.onRenderContent, onRenderContent = _b === void 0 ? this._onRenderContent : _b, targetElement = _a.targetElement, theme = _a.theme;
            this._classNames = getClassNames(styles, {
                theme: theme,
                className: className || (calloutProps && calloutProps.className),
                delay: delay,
                maxWidth: maxWidth
            });
            return (React.createElement(Callout_1.Callout, tslib_1.__assign({ target: targetElement, directionalHint: directionalHint, directionalHintForRTL: directionalHintForRTL }, calloutProps, Utilities_1.getNativeProps(this.props, Utilities_1.divProperties, ['id']), { className: this._classNames.root }),
                React.createElement("div", { className: this._classNames.content, id: id, role: "tooltip", onMouseEnter: this.props.onMouseEnter, onMouseLeave: this.props.onMouseLeave }, onRenderContent(this.props, this._onRenderContent))));
        };
        // Specify default props values
        TooltipBase.defaultProps = {
            directionalHint: DirectionalHint_1.DirectionalHint.topCenter,
            delay: Tooltip_types_1.TooltipDelay.medium,
            maxWidth: '364px',
            calloutProps: {
                isBeakVisible: true,
                beakWidth: 16,
                gapSpace: 0,
                setInitialFocus: true,
                doNotLayer: false
            }
        };
        return TooltipBase;
    }(Utilities_1.BaseComponent));
    exports.TooltipBase = TooltipBase;
});
//# sourceMappingURL=Tooltip.base.js.map