{"version":3,"file":"Link.Basic.Example.js","sourceRoot":"../src/","sources":["components/Link/examples/Link.Basic.Example.tsx"],"names":[],"mappings":";;;IAIA;QAAsC,4CAAyB;QAA/D;;QAuBA,CAAC;QAtBQ,iCAAM,GAAb;YACE,OAAO,CACL,6BAAK,SAAS,EAAE,MAAM,CAAC,WAAW;gBAChC,8DAAsC;gBACtC,oBAAC,WAAI,IAAC,IAAI,EAAC,8CAA8C,mCAAoC;gBAC7F,uDAA+B;gBAC/B,oBAAC,WAAI,2CAAwC;;gBAAC,0FAAkE;gBAChH,oBAAC,WAAI,IAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAC,8CAA8C,qBAElE;gBACP;oBACG,GAAG;;oBACmB,oBAAC,WAAI,IAAC,IAAI,EAAC,8CAA8C,qCAAsC,CACjH;gBACP,+BAAM;gBACN,+BAAM;wUAIF,CACP,CAAC;QACJ,CAAC;QACH,uBAAC;IAAD,CAAC,AAvBD,CAAsC,KAAK,CAAC,SAAS,GAuBpD;IAvBY,4CAAgB","sourcesContent":["import * as React from 'react';\r\nimport { Link } from 'office-ui-fabric-react/lib/Link';\r\nimport * as styles from './Link.Example.scss';\r\n\r\nexport class LinkBasicExample extends React.Component<any, any> {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className={styles.linkExample}>\r\n        <span>When a link has an href, </span>\r\n        <Link href=\"http://dev.office.com/fabric/components/link\">it renders as an anchor tag.</Link>\r\n        <span> Without an href, </span>\r\n        <Link>the link is rendered as a button</Link>.<span> You can also use the disabled attribute to create a </span>\r\n        <Link disabled={true} href=\"http://dev.office.com/fabric/components/link\">\r\n          disabled link.\r\n        </Link>\r\n        <span>\r\n          {' '}\r\n          Example of a Link with <Link href=\"http://dev.office.com/fabric/components/link\">mixed link content that wraps.</Link>\r\n        </span>\r\n        <br />\r\n        <br />\r\n        It's not recommended to use Links with imgs because Links are meant to render textual inline content. Buttons are inline-block or in\r\n        the case of imgs, block. However, it is possible to create a linked image button by making a button with an unstyled variant and\r\n        adding the img content and href source to that.\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}