{"version":3,"file":"OverflowSet.base.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowSet.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '@fluentui/react-focus';\nimport { IKeytipProps } from '../../Keytip';\nimport {\n  initializeComponentRef,\n  classNamesFunction,\n  divProperties,\n  elementContains,\n  focusFirstChild,\n  getNativeProps,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport {\n  IOverflowSet,\n  IOverflowSetItemProps,\n  IOverflowSetProps,\n  IOverflowSetStyles,\n  IOverflowSetStyleProps,\n} from './OverflowSet.types';\n\nconst getClassNames = classNamesFunction<IOverflowSetStyleProps, IOverflowSetStyles>();\nconst COMPONENT_NAME = 'OverflowSet';\n\nexport class OverflowSetBase extends React.Component<IOverflowSetProps, {}> implements IOverflowSet {\n  private _focusZone = React.createRef<IFocusZone>();\n  private _persistedKeytips: { [uniqueID: string]: IKeytipProps } = {};\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\n  private _divContainer = React.createRef<HTMLDivElement>();\n  private _classNames: IProcessedStyleSet<IOverflowSetStyles>;\n\n  constructor(props: IOverflowSetProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      doNotContainWithinFocusZone: 'focusZoneProps',\n    });\n  }\n\n  public render(): JSX.Element {\n    const {\n      items,\n      overflowItems,\n      className,\n      // eslint-disable-next-line deprecation/deprecation\n      focusZoneProps,\n      styles,\n      vertical,\n      // eslint-disable-next-line deprecation/deprecation\n      doNotContainWithinFocusZone,\n      role,\n      overflowSide = 'end',\n    } = this.props;\n\n    this._classNames = getClassNames(styles, { className, vertical });\n\n    let Tag;\n    let uniqueComponentProps;\n\n    if (doNotContainWithinFocusZone) {\n      Tag = 'div';\n      uniqueComponentProps = {\n        ...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties),\n        ref: this._divContainer,\n      };\n    } else {\n      Tag = FocusZone;\n      uniqueComponentProps = {\n        ...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties),\n        ...focusZoneProps,\n        componentRef: this._focusZone,\n        direction: vertical ? FocusZoneDirection.vertical : FocusZoneDirection.horizontal,\n      };\n    }\n\n    const showOverflow = overflowItems && overflowItems.length > 0;\n\n    return (\n      <Tag\n        role={role || 'group'}\n        aria-orientation={role === 'menubar' ? (vertical === true ? 'vertical' : 'horizontal') : undefined}\n        {...uniqueComponentProps}\n        className={this._classNames.root}\n      >\n        {overflowSide === 'start' && showOverflow && this._onRenderOverflowButtonWrapper(overflowItems!)}\n        {items && this._onRenderItems(items)}\n        {overflowSide === 'end' && showOverflow && this._onRenderOverflowButtonWrapper(overflowItems!)}\n      </Tag>\n    );\n  }\n\n  /**\n   * Sets focus to the first tabbable item in the OverflowSet.\n   * @param forceIntoFirstElement - If true, focus will be forced into the first element,\n   * even if focus is already in theOverflowSet\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focus(forceIntoFirstElement?: boolean): boolean {\n    let focusSucceeded = false;\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.props.doNotContainWithinFocusZone) {\n      if (this._divContainer.current) {\n        focusSucceeded = focusFirstChild(this._divContainer.current);\n      }\n    } else if (this._focusZone.current) {\n      focusSucceeded = this._focusZone.current.focus(forceIntoFirstElement);\n    }\n\n    return focusSucceeded;\n  }\n\n  /**\n   * Sets focus to a specific child element within the OverflowSet.\n   * @param childElement - The child element within the zone to focus.\n   * @returns True if focus could be set to an active element, false if no operation was taken.\n   */\n  public focusElement(childElement?: HTMLElement): boolean {\n    let focusSucceeded = false;\n\n    if (!childElement) {\n      return false;\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.props.doNotContainWithinFocusZone) {\n      if (this._divContainer.current && elementContains(this._divContainer.current, childElement)) {\n        childElement.focus();\n        focusSucceeded = document.activeElement === childElement;\n      }\n    } else if (this._focusZone.current) {\n      focusSucceeded = this._focusZone.current.focusElement(childElement);\n    }\n\n    return focusSucceeded;\n  }\n\n  // Add keytip register/unregister handlers to lifecycle functions to correctly manage persisted keytips\n  public componentDidMount() {\n    this._registerPersistedKeytips();\n  }\n\n  public componentWillUnmount() {\n    this._unregisterPersistedKeytips();\n  }\n\n  public UNSAFE_componentWillUpdate() {\n    this._unregisterPersistedKeytips();\n  }\n\n  public componentDidUpdate() {\n    this._registerPersistedKeytips();\n  }\n\n  private _registerPersistedKeytips() {\n    Object.keys(this._persistedKeytips).forEach((key: string) => {\n      const keytip = this._persistedKeytips[key];\n      const uniqueID = this._keytipManager.register(keytip, true);\n      // Update map\n      this._persistedKeytips[uniqueID] = keytip;\n      delete this._persistedKeytips[key];\n    });\n  }\n\n  private _unregisterPersistedKeytips() {\n    // Delete all persisted keytips saved\n    Object.keys(this._persistedKeytips).forEach((uniqueID: string) => {\n      this._keytipManager.unregister(this._persistedKeytips[uniqueID], uniqueID, true);\n    });\n    this._persistedKeytips = {};\n  }\n\n  private _onRenderItems = (items: IOverflowSetItemProps[]): JSX.Element[] => {\n    return items.map((item, i) => {\n      return (\n        <div key={item.key} className={this._classNames.item}>\n          {this.props.onRenderItem(item)}\n        </div>\n      );\n    });\n  };\n\n  private _onRenderOverflowButtonWrapper = (items: any[]): JSX.Element => {\n    const wrapperDivProps: React.HTMLProps<HTMLDivElement> = {\n      className: this._classNames.overflowButton,\n    };\n\n    const overflowKeytipSequences = this.props.keytipSequences;\n    let newOverflowItems: any[] = [];\n\n    if (overflowKeytipSequences) {\n      items.forEach(overflowItem => {\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\n        if (keytip) {\n          // Create persisted keytip\n          const persistedKeytip: IKeytipProps = {\n            content: keytip.content,\n            keySequences: keytip.keySequences,\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled),\n            hasDynamicChildren: keytip.hasDynamicChildren,\n            hasMenu: keytip.hasMenu,\n          };\n\n          if (keytip.hasDynamicChildren || this._getSubMenuForItem(overflowItem)) {\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\n            persistedKeytip.onExecute = this._keytipManager.menuExecute.bind(\n              this._keytipManager,\n              overflowKeytipSequences,\n              overflowItem.keytipProps.keySequences,\n            );\n          } else {\n            // If the keytip doesn't have a submenu, just execute the original function\n            persistedKeytip.onExecute = keytip.onExecute;\n          }\n\n          // Add this persisted keytip to our internal list, use a temporary uniqueID (its content)\n          // uniqueID will get updated on register\n          this._persistedKeytips[persistedKeytip.content] = persistedKeytip;\n\n          // Add the overflow sequence to this item\n          const newOverflowItem = {\n            ...overflowItem,\n            keytipProps: {\n              ...keytip,\n              overflowSetSequence: overflowKeytipSequences,\n            },\n          };\n          newOverflowItems.push(newOverflowItem);\n        } else {\n          // Nothing to change, add overflowItem to list\n          newOverflowItems.push(overflowItem);\n        }\n      });\n    } else {\n      newOverflowItems = items;\n    }\n    return <div {...wrapperDivProps}>{this.props.onRenderOverflowButton(newOverflowItems)}</div>;\n  };\n\n  /**\n   * Gets the subMenu for an overflow item\n   * Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\n   */\n  private _getSubMenuForItem(item: any): any[] | undefined {\n    if (this.props.itemSubMenuProvider) {\n      return this.props.itemSubMenuProvider(item);\n    }\n    if (item.subMenuProps) {\n      return item.subMenuProps.items;\n    }\n    return undefined;\n  }\n}\n"]}