{"version":3,"file":"Callout.Nested.Example.js","sourceRoot":"../src/","sources":["components/Callout/examples/Callout.Nested.Example.tsx"],"names":[],"mappings":";;;IAeA;QAA0C,gDAAuE;QAAjH;YAAA,qEAsDC;YArDQ,WAAK,GAA+B;gBACzC,gBAAgB,EAAE,KAAK;aACxB,CAAC;YAGF,yEAAyE;YACzE,6FAA6F;YACrF,cAAQ,GAAW,iBAAK,CAAC,eAAe,CAAC,CAAC;YAyC1C,gBAAU,GAAG;gBACnB,KAAI,CAAC,QAAQ,CAAC;oBACZ,gBAAgB,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,gBAAgB;iBAC/C,CAAC,CAAC;YACL,CAAC,CAAC;;QACJ,CAAC;QA5CQ,qCAAM,GAAb;YAAA,iBAqCC;YApCS,IAAA,8CAAgB,CAAgB;YAExC,OAAO,CACL,6BAAK,SAAS,EAAC,mBAAmB;gBAChC,6BAAK,SAAS,EAAC,mCAAmC,EAAC,GAAG,EAAE,UAAA,UAAU,IAAI,OAAA,CAAC,KAAI,CAAC,kBAAkB,GAAG,UAAU,CAAC,EAAtC,CAAsC;oBAC1G,oBAAC,sBAAa,IAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,GAAI,CACjG;gBACL,gBAAgB,CAAC,CAAC,CAAC,CAClB;oBACE,oBAAC,iBAAO,IACN,IAAI,EAAC,aAAa,EAClB,cAAc,EAAE,IAAI,CAAC,QAAQ,EAC7B,SAAS,EAAC,2BAA2B,EACrC,QAAQ,EAAE,CAAC,EACX,MAAM,EAAE,IAAI,CAAC,kBAAkB,EAC/B,SAAS,EAAE,IAAI,CAAC,UAAU,EAC1B,eAAe,EAAE,IAAI;wBAErB,6BAAK,SAAS,EAAC,0BAA0B;4BACvC,2BAAG,SAAS,EAAC,yBAAyB,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,yBAEpD,CACA;wBACN,6BAAK,SAAS,EAAC,yBAAyB;4BACtC,6BAAK,SAAS,EAAC,2BAA2B;gCACxC,2BAAG,SAAS,EAAC,2BAA2B,wHAEpC,CACA,CACF;wBACN,oBAAC,uBAAU,IAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAI,CAC/B,CACN,CACP,CAAC,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;QACJ,CAAC;QAOH,2BAAC;IAAD,CAAC,AAtDD,CAA0C,KAAK,CAAC,SAAS,GAsDxD;IAtDY,oDAAoB","sourcesContent":["import * as React from 'react';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { Callout } from 'office-ui-fabric-react/lib/Callout';\r\nimport { CommandBar, ICommandBarItemProps } from 'office-ui-fabric-react/lib/CommandBar';\r\nimport { getId } from 'office-ui-fabric-react/lib/Utilities';\r\nimport './CalloutExample.scss';\r\n\r\nexport interface ICalloutNestedExampleProps {\r\n  items: ICommandBarItemProps[];\r\n}\r\n\r\nexport interface ICalloutNestedExampleState {\r\n  isCalloutVisible: boolean;\r\n}\r\n\r\nexport class CalloutNestedExample extends React.Component<ICalloutNestedExampleProps, ICalloutNestedExampleState> {\r\n  public state: ICalloutNestedExampleState = {\r\n    isCalloutVisible: false\r\n  };\r\n\r\n  private _menuButtonElement: HTMLElement | null;\r\n  // Use getId() to ensure that the callout title ID is unique on the page.\r\n  // (It's also okay to use a plain string without getId() and manually ensure its uniqueness.)\r\n  private _titleId: string = getId('callout-label');\r\n\r\n  public render(): JSX.Element {\r\n    const { isCalloutVisible } = this.state;\r\n\r\n    return (\r\n      <div className=\"ms-CalloutExample\">\r\n        <div className=\"ms-CalloutBasicExample-buttonArea\" ref={menuButton => (this._menuButtonElement = menuButton)}>\r\n          <DefaultButton onClick={this._onDismiss} text={isCalloutVisible ? 'Hide callout' : 'Show callout'} />\r\n        </div>\r\n        {isCalloutVisible ? (\r\n          <div>\r\n            <Callout\r\n              role=\"alertdialog\"\r\n              ariaLabelledBy={this._titleId}\r\n              className=\"ms-CalloutExample-callout\"\r\n              gapSpace={0}\r\n              target={this._menuButtonElement}\r\n              onDismiss={this._onDismiss}\r\n              setInitialFocus={true}\r\n            >\r\n              <div className=\"ms-CalloutExample-header\">\r\n                <p className=\"ms-CalloutExample-title\" id={this._titleId}>\r\n                  Callout title here\r\n                </p>\r\n              </div>\r\n              <div className=\"ms-CalloutExample-inner\">\r\n                <div className=\"ms-CalloutExample-content\">\r\n                  <p className=\"ms-CalloutExample-subText\">\r\n                    Message body is optional. If help documentation is available, consider adding a link to learn more at the bottom.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <CommandBar items={this.props.items} />\r\n            </Callout>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onDismiss = () => {\r\n    this.setState({\r\n      isCalloutVisible: !this.state.isCalloutVisible\r\n    });\r\n  };\r\n}\r\n"]}