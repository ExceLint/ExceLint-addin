{"version":3,"file":"ContextualMenuButton.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { buttonProperties, getNativeProps } from '../../../Utilities';\r\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\r\nimport { KeytipData } from '../../../KeytipData';\r\nimport { getIsChecked, isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\r\nimport { ContextualMenuItem } from '../ContextualMenuItem';\r\nimport { IKeytipDataProps } from '../../KeytipData/KeytipData.types';\r\n\r\nexport class ContextualMenuButton extends ContextualMenuItemWrapper {\r\n  private _btn = React.createRef<HTMLButtonElement>();\r\n\r\n  public render() {\r\n    const {\r\n      item,\r\n      classNames,\r\n      index,\r\n      focusableElementIndex,\r\n      totalItemCount,\r\n      hasCheckmarks,\r\n      hasIcons,\r\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\r\n      expandedMenuItemKey,\r\n      onItemMouseDown,\r\n      onItemClick,\r\n      openSubMenu,\r\n      dismissSubMenu,\r\n      dismissMenu\r\n    } = this.props;\r\n\r\n    const subMenuId = this._getSubMenuId(item);\r\n\r\n    const isChecked: boolean | null | undefined = getIsChecked(item);\r\n    const canCheck: boolean = isChecked !== null;\r\n    const defaultRole = canCheck ? 'menuitemcheckbox' : 'menuitem';\r\n    const itemHasSubmenu = hasSubmenu(item);\r\n    const { itemProps, ariaLabel } = item;\r\n\r\n    const buttonNativeProperties = getNativeProps<React.ButtonHTMLAttributes<HTMLButtonElement>>(item, buttonProperties);\r\n    // Do not add the disabled attribute to the button so that it is focusable\r\n    delete buttonNativeProperties.disabled;\r\n\r\n    const itemButtonProperties = {\r\n      className: classNames.root,\r\n      onClick: this._onItemClick,\r\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : undefined,\r\n      onMouseEnter: this._onItemMouseEnter,\r\n      onMouseLeave: this._onItemMouseLeave,\r\n      onMouseDown: (ev: React.MouseEvent<HTMLButtonElement>) => (onItemMouseDown ? onItemMouseDown(item, ev) : undefined),\r\n      onMouseMove: this._onItemMouseMove,\r\n      href: item.href,\r\n      title: item.title,\r\n      'aria-label': ariaLabel,\r\n      'aria-haspopup': itemHasSubmenu || undefined,\r\n      'aria-owns': item.key === expandedMenuItemKey ? subMenuId : undefined,\r\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\r\n      'aria-checked': canCheck ? !!isChecked : undefined,\r\n      'aria-posinset': focusableElementIndex + 1,\r\n      'aria-setsize': totalItemCount,\r\n      'aria-disabled': isItemDisabled(item),\r\n      role: item.role || defaultRole,\r\n      style: item.style\r\n    };\r\n\r\n    let { keytipProps } = item;\r\n    if (keytipProps && itemHasSubmenu) {\r\n      keytipProps = {\r\n        ...keytipProps,\r\n        hasMenu: true\r\n      };\r\n    }\r\n\r\n    return (\r\n      <KeytipData keytipProps={keytipProps} ariaDescribedBy={buttonNativeProperties['aria-describedby']} disabled={isItemDisabled(item)}>\r\n        {(keytipAttributes: IKeytipDataProps): JSX.Element => (\r\n          <button ref={this._btn} {...buttonNativeProperties} {...itemButtonProperties} {...keytipAttributes}>\r\n            <ChildrenRenderer\r\n              componentRef={item.componentRef}\r\n              item={item}\r\n              classNames={classNames}\r\n              index={index}\r\n              onCheckmarkClick={hasCheckmarks && onItemClick ? onItemClick : undefined}\r\n              hasIcons={hasIcons}\r\n              openSubMenu={openSubMenu}\r\n              dismissSubMenu={dismissSubMenu}\r\n              dismissMenu={dismissMenu}\r\n              getSubmenuTarget={this._getSubmenuTarget}\r\n              {...itemProps}\r\n            />\r\n          </button>\r\n        )}\r\n      </KeytipData>\r\n    );\r\n  }\r\n\r\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\r\n    return this._btn.current ? this._btn.current : undefined;\r\n  };\r\n}\r\n"]}