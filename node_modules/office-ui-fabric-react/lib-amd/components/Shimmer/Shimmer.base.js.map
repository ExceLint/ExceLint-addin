{"version":3,"file":"Shimmer.base.js","sourceRoot":"../src/","sources":["components/Shimmer/Shimmer.base.tsx"],"names":[],"mappings":";;;IAYA,IAAM,6BAA6B,GAAG,GAAG,CAAC,CAAC,QAAQ;IAEnD,IAAM,aAAa,GAAG,8BAAkB,EAAsC,CAAC;IAE/E;QAAiC,uCAA2C;QAQ1E,qBAAY,KAAoB;YAAhC,YACE,kBAAM,KAAK,CAAC,SAKb;YAHC,KAAI,CAAC,KAAK,GAAG;gBACX,aAAa,EAAE,KAAK,CAAC,YAAY;aAClC,CAAC;;QACJ,CAAC;QAEM,+CAAyB,GAAhC,UAAiC,SAAwB;YAAzD,iBAmBC;YAlBS,IAAA,qCAAY,CAAe;YAEnC,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;gBACrC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC9C,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;aACjC;YACD,IAAI,YAAY,EAAE;gBAChB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;oBAC3C,KAAI,CAAC,QAAQ,CAAC;wBACZ,aAAa,EAAE,YAAY;qBAC5B,CAAC,CAAC;oBACH,KAAI,CAAC,cAAc,GAAG,SAAS,CAAC;gBAClC,CAAC,EAAE,6BAA6B,CAAC,CAAC;aACnC;iBAAM;gBACL,IAAI,CAAC,QAAQ,CAAC;oBACZ,aAAa,EAAE,YAAY;iBAC5B,CAAC,CAAC;aACJ;QACH,CAAC;QAEM,4BAAM,GAAb;YACQ,IAAA,eAWQ,EAVZ,kBAAM,EACN,oCAAe,EACf,sBAAQ,EACR,8BAAY,EACZ,gBAAK,EACL,wBAAS,EACT,4CAAmB,EACnB,gBAAK,EACL,wBAAS,EACT,gCAAa,CACA;YAEP,IAAA,wCAAa,CAAgB;YAErC,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;gBACxC,KAAK,EAAE,KAAM;gBACb,YAAY,cAAA;gBACZ,SAAS,WAAA;gBACT,2BAA2B,EAAE,6BAA6B;gBAC1D,YAAY,EAAE,aAAa,IAAI,aAAa,CAAC,OAAO;gBACpD,gBAAgB,EAAE,aAAa,IAAI,aAAa,CAAC,WAAW;aAC7D,CAAC,CAAC;YAEH,IAAM,QAAQ,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,CAAC;YAE3D,OAAO,CACL,gDAAS,QAAQ,IAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;gBAChD,CAAC,aAAa,IAAI,CACjB,6BAAK,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,cAAc,IACtF,mBAAmB,CAAC,CAAC,CAAC,CACrB,mBAAmB,CACpB,CAAC,CAAC,CAAC,CACF,oBAAC,2CAAoB,IAAC,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,aAAa,IAAI,aAAa,CAAC,UAAU,GAAI,CACvH,CACG,CACP;gBACA,QAAQ,IAAI,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,IAAG,QAAQ,CAAO;gBAC1E,SAAS,IAAI,CAAC,YAAY,IAAI,CAC7B,6BAAK,IAAI,EAAC,QAAQ,eAAW,QAAQ;oBACnC,oBAAC,yBAAa;wBACZ,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,gBAAgB,IAAG,SAAS,CAAO,CACtD,CACZ,CACP,CACG,CACP,CAAC;QACJ,CAAC;QApFa,wBAAY,GAAkB;YAC1C,YAAY,EAAE,KAAK;SACpB,CAAC;QAmFJ,kBAAC;KAAA,AAtFD,CAAiC,yBAAa,GAsF7C;IAtFY,kCAAW","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\r\nimport { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\r\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\r\n\r\nexport interface IShimmerState {\r\n  /**\r\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\r\n   */\r\n  contentLoaded?: boolean;\r\n}\r\n\r\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\r\n\r\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\r\n\r\nexport class ShimmerBase extends BaseComponent<IShimmerProps, IShimmerState> {\r\n  public static defaultProps: IShimmerProps = {\r\n    isDataLoaded: false\r\n  };\r\n\r\n  private _classNames: { [key in keyof IShimmerStyles]: string };\r\n  private _lastTimeoutId: number | undefined;\r\n\r\n  constructor(props: IShimmerProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      contentLoaded: props.isDataLoaded\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: IShimmerProps): void {\r\n    const { isDataLoaded } = nextProps;\r\n\r\n    if (this._lastTimeoutId !== undefined) {\r\n      this._async.clearTimeout(this._lastTimeoutId);\r\n      this._lastTimeoutId = undefined;\r\n    }\r\n    if (isDataLoaded) {\r\n      this._lastTimeoutId = this._async.setTimeout(() => {\r\n        this.setState({\r\n          contentLoaded: isDataLoaded\r\n        });\r\n        this._lastTimeoutId = undefined;\r\n      }, TRANSITION_ANIMATION_INTERVAL);\r\n    } else {\r\n      this.setState({\r\n        contentLoaded: isDataLoaded\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      styles,\r\n      shimmerElements,\r\n      children,\r\n      isDataLoaded,\r\n      width,\r\n      className,\r\n      customElementsGroup,\r\n      theme,\r\n      ariaLabel,\r\n      shimmerColors\r\n    } = this.props;\r\n\r\n    const { contentLoaded } = this.state;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      isDataLoaded,\r\n      className,\r\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\r\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\r\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave\r\n    });\r\n\r\n    const divProps = getNativeProps(this.props, divProperties);\r\n\r\n    return (\r\n      <div {...divProps} className={this._classNames.root}>\r\n        {!contentLoaded && (\r\n          <div style={{ width: width ? width : '100%' }} className={this._classNames.shimmerWrapper}>\r\n            {customElementsGroup ? (\r\n              customElementsGroup\r\n            ) : (\r\n              <ShimmerElementsGroup shimmerElements={shimmerElements} backgroundColor={shimmerColors && shimmerColors.background} />\r\n            )}\r\n          </div>\r\n        )}\r\n        {children && <div className={this._classNames.dataWrapper}>{children}</div>}\r\n        {ariaLabel && !isDataLoaded && (\r\n          <div role=\"status\" aria-live=\"polite\">\r\n            <DelayedRender>\r\n              <div className={this._classNames.screenReaderText}>{ariaLabel}</div>\r\n            </DelayedRender>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}