{"version":3,"file":"Shimmer.base.js","sourceRoot":"../src/","sources":["components/Shimmer/Shimmer.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  DelayedRender,\n  getNativeProps,\n  divProperties,\n  Async,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { IShimmerProps, IShimmerStyleProps, IShimmerStyles } from './Shimmer.types';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\n\nexport interface IShimmerState {\n  /**\n   * Flag for knowing when to remove the shimmerWrapper from the DOM.\n   */\n  contentLoaded?: boolean;\n}\n\nconst TRANSITION_ANIMATION_INTERVAL = 200; /* ms */\n\nconst getClassNames = classNamesFunction<IShimmerStyleProps, IShimmerStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport class ShimmerBase extends React.Component<IShimmerProps, IShimmerState> {\n  public static defaultProps: IShimmerProps = {\n    isDataLoaded: false,\n  };\n\n  private _classNames: { [key in keyof IShimmerStyles]: string };\n  private _lastTimeoutId: number;\n  private _async: Async;\n\n  constructor(props: IShimmerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      contentLoaded: props.isDataLoaded,\n    };\n\n    this._async = new Async(this);\n  }\n\n  public componentDidUpdate(prevProps: IShimmerProps): void {\n    const { isDataLoaded } = this.props;\n\n    if (isDataLoaded !== prevProps.isDataLoaded) {\n      this._async.clearTimeout(this._lastTimeoutId);\n\n      // Removing the shimmerWrapper div from the DOM only after the fade out animation completed.\n      if (isDataLoaded) {\n        this._lastTimeoutId = this._async.setTimeout(() => {\n          this.setState({\n            contentLoaded: isDataLoaded,\n          });\n        }, TRANSITION_ANIMATION_INTERVAL);\n      } else {\n        this.setState({\n          contentLoaded: isDataLoaded,\n        });\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      styles,\n      shimmerElements,\n      children,\n      isDataLoaded,\n      width,\n      className,\n      customElementsGroup,\n      theme,\n      ariaLabel,\n      shimmerColors,\n    } = this.props;\n\n    const { contentLoaded } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      isDataLoaded,\n      className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL,\n      shimmerColor: shimmerColors && shimmerColors.shimmer,\n      shimmerWaveColor: shimmerColors && shimmerColors.shimmerWave,\n    });\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    return (\n      <div {...divProps} className={this._classNames.root}>\n        {!contentLoaded && (\n          <div style={{ width: width ? width : '100%' }} className={this._classNames.shimmerWrapper}>\n            <div className={this._classNames.shimmerGradient} />\n            {customElementsGroup ? (\n              customElementsGroup\n            ) : (\n              <ShimmerElementsGroup\n                shimmerElements={shimmerElements}\n                backgroundColor={shimmerColors && shimmerColors.background}\n              />\n            )}\n          </div>\n        )}\n        {children && <div className={this._classNames.dataWrapper}>{children}</div>}\n        {ariaLabel && !isDataLoaded && (\n          <div role=\"status\" aria-live=\"polite\">\n            <DelayedRender>\n              <div className={this._classNames.screenReaderText}>{ariaLabel}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]}