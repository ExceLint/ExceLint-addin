{"version":3,"file":"KeytipTree.js","sourceRoot":"../src/","sources":["components/KeytipLayer/KeytipTree.ts"],"names":[],"mappings":"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","sourcesContent":["import { find, values } from '../../Utilities';\nimport { IKeytipProps } from '../../Keytip';\nimport { IKeytipTreeNode } from './IKeytipTreeNode';\nimport { mergeOverflows, sequencesToID } from '../../utilities/keytips/KeytipUtils';\nimport { KTP_LAYER_ID } from '../../utilities/keytips/KeytipConstants';\n\n/**\n * This class is responsible for handling the parent/child relationships between keytips\n */\nexport class KeytipTree {\n  public currentKeytip?: IKeytipTreeNode;\n  public root: IKeytipTreeNode;\n  public nodeMap: { [nodeId: string]: IKeytipTreeNode } = {};\n\n  /**\n   * KeytipTree constructor\n   */\n  constructor() {\n    // Root has no keytipSequence\n    this.root = {\n      id: KTP_LAYER_ID,\n      children: [],\n      parent: '',\n      keySequences: [],\n    };\n    this.nodeMap[this.root.id] = this.root;\n  }\n\n  /**\n   * Add a keytip node to this KeytipTree\n   *\n   * @param keytipProps - Keytip to add to the Tree\n   * @param uniqueID - Unique ID for this keytip\n   * @param persisted - T/F if this keytip should be marked as persisted\n   */\n  public addNode(keytipProps: IKeytipProps, uniqueID: string, persisted?: boolean): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n\n    // Create node and add to map\n    const node = this._createNode(nodeID, parentID, [], keytipProps, persisted);\n    this.nodeMap[uniqueID] = node;\n\n    // Try to add self to parents children, if they exist\n    const parent = this.getNode(parentID);\n    if (parent) {\n      parent.children.push(nodeID);\n    }\n  }\n\n  /**\n   * Updates a node in the tree\n   *\n   * @param keytipProps - Keytip props to update\n   * @param uniqueID - Unique ID for this keytip\n   */\n  public updateNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last item to calculate the parent sequence\n    fullSequence.pop();\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n    const node = this.nodeMap[uniqueID];\n    const prevParent = node.parent;\n    const prevParentNode = this.getNode(prevParent);\n    const parent = this.getNode(parentID);\n    if (node) {\n      if (prevParentNode && prevParent !== parentID) {\n        // If parent has changed, remove child from old parent\n        const childIndex = prevParentNode.children.indexOf(node.id);\n        if (childIndex >= 0) {\n          prevParentNode.children.splice(childIndex, 1);\n        }\n      }\n      // If the ID of the node has changed, update node's parent's array of children with new ID\n      if (parent && node.id !== nodeID) {\n        const index = parent.children.indexOf(node.id);\n        if (index >= 0) {\n          parent.children[index] = nodeID;\n        } else {\n          parent.children.push(nodeID);\n        }\n      }\n      // Update values\n      node.id = nodeID;\n      node.keySequences = keytipProps.keySequences;\n      node.overflowSetSequence = keytipProps.overflowSetSequence;\n      node.onExecute = keytipProps.onExecute;\n      node.onReturn = keytipProps.onReturn;\n      node.hasDynamicChildren = keytipProps.hasDynamicChildren;\n      node.hasMenu = keytipProps.hasMenu;\n      node.parent = parentID;\n      node.disabled = keytipProps.disabled;\n    }\n  }\n\n  /**\n   * Removes a node from the KeytipTree\n   *\n   * @param sequence - full string of the node to remove\n   */\n  public removeNode(keytipProps: IKeytipProps, uniqueID: string): void {\n    const fullSequence = this._getFullSequence(keytipProps);\n    const nodeID = sequencesToID(fullSequence);\n\n    // Take off the last sequence to calculate the parent ID\n    fullSequence.pop();\n\n    // Parent ID is the root if there aren't any more sequences\n    const parentID = this._getParentID(fullSequence);\n    const parent = this.getNode(parentID);\n    if (parent) {\n      // Remove node from its parent's children\n      parent.children.splice(parent.children.indexOf(nodeID), 1);\n    }\n\n    if (this.nodeMap[uniqueID]) {\n      // Remove the node from the nodeMap\n      delete this.nodeMap[uniqueID];\n    }\n  }\n\n  /**\n   * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\n   * will match persisted nodes\n   *\n   * @param keySequence - string to match\n   * @param currentKeytip - The keytip whose children will try to match\n   * @returns The node that exactly matched the keySequence, or undefined if none matched\n   */\n  public getExactMatchedNode(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode | undefined {\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    return find(possibleNodes, (node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node) === keySequence && !node.disabled;\n    });\n  }\n\n  /**\n   * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\n   * disabled nodes but will match persisted nodes\n   *\n   * @param keySequence - string to partially match\n   * @param currentKeytip - The keytip whose children will try to partially match\n   * @returns List of tree nodes that partially match the given sequence\n   */\n  public getPartiallyMatchedNodes(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode[] {\n    // Get children that are persisted\n    const possibleNodes = this.getNodes(currentKeytip.children);\n    return possibleNodes.filter((node: IKeytipTreeNode) => {\n      return this._getNodeSequence(node).indexOf(keySequence) === 0 && !node.disabled;\n    });\n  }\n\n  /**\n   * Get the non-persisted children of the give node\n   * If no node is given, will use the 'currentKeytip'\n   *\n   * @param node - Node to get the children for\n   * @returns List of node IDs that are the children of the node\n   */\n  public getChildren(node?: IKeytipTreeNode): string[] {\n    if (!node) {\n      node = this.currentKeytip;\n      if (!node) {\n        return [];\n      }\n    }\n    const children = node.children;\n    return Object.keys(this.nodeMap).reduce((nodes: string[], key: string): string[] => {\n      if (children.indexOf(this.nodeMap[key].id) >= 0 && !this.nodeMap[key].persisted) {\n        nodes.push(this.nodeMap[key].id);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets all nodes from their IDs\n   *\n   * @param ids - List of keytip IDs\n   * @returns Array of nodes that match the given IDs, can be empty\n   */\n  public getNodes(ids: string[]): IKeytipTreeNode[] {\n    return Object.keys(this.nodeMap).reduce((nodes: IKeytipTreeNode[], key: string): IKeytipTreeNode[] => {\n      if (ids.indexOf(this.nodeMap[key].id) >= 0) {\n        nodes.push(this.nodeMap[key]);\n      }\n      return nodes;\n    }, []);\n  }\n\n  /**\n   * Gets a single node from its ID\n   *\n   * @param id - ID of the node to get\n   * @returns Node with the given ID, if found\n   */\n  public getNode(id: string): IKeytipTreeNode | undefined {\n    const nodeMapValues = values<IKeytipTreeNode>(this.nodeMap);\n    return find(nodeMapValues, (node: IKeytipTreeNode): boolean => {\n      return node.id === id;\n    });\n  }\n\n  /**\n   * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\n   *\n   * @param keytipProps - Keytip to test the parent for\n   * @returns T/F if the currentKeytip is this keytipProps' parent\n   */\n  public isCurrentKeytipParent(keytipProps: IKeytipProps): boolean {\n    if (this.currentKeytip) {\n      let fullSequence = [...keytipProps.keySequences];\n      if (keytipProps.overflowSetSequence) {\n        fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n      }\n      // Take off the last sequence to calculate the parent ID\n      fullSequence.pop();\n      // Parent ID is the root if there aren't any more sequences\n      const parentID = fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n      let matchesCurrWithoutOverflow = false;\n      if (this.currentKeytip.overflowSetSequence) {\n        const currKeytipIdWithoutOverflow = sequencesToID(this.currentKeytip.keySequences);\n        matchesCurrWithoutOverflow = currKeytipIdWithoutOverflow === parentID;\n      }\n      return matchesCurrWithoutOverflow || this.currentKeytip.id === parentID;\n    }\n    return false;\n  }\n\n  private _getParentID(fullSequence: string[]): string {\n    return fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\n  }\n\n  private _getFullSequence(keytipProps: IKeytipProps): string[] {\n    let fullSequence = [...keytipProps.keySequences];\n    if (keytipProps.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\n    }\n    return fullSequence;\n  }\n\n  private _getNodeSequence(node: IKeytipTreeNode): string {\n    let fullSequence = [...node.keySequences];\n    if (node.overflowSetSequence) {\n      fullSequence = mergeOverflows(fullSequence, node.overflowSetSequence);\n    }\n    return fullSequence[fullSequence.length - 1];\n  }\n\n  private _createNode(\n    id: string,\n    parentId: string,\n    children: string[],\n    keytipProps: IKeytipProps,\n    persisted?: boolean,\n  ): IKeytipTreeNode {\n    const {\n      keySequences,\n      hasDynamicChildren,\n      overflowSetSequence,\n      hasMenu,\n      onExecute,\n      onReturn,\n      disabled,\n    } = keytipProps;\n    const node = {\n      id,\n      keySequences,\n      overflowSetSequence,\n      parent: parentId,\n      children,\n      onExecute,\n      onReturn,\n      hasDynamicChildren,\n      hasMenu,\n      disabled,\n      persisted,\n    };\n    node.children = Object.keys(this.nodeMap).reduce((array: string[], nodeMapKey: string): string[] => {\n      if (this.nodeMap[nodeMapKey].parent === id) {\n        array.push(this.nodeMap[nodeMapKey].id);\n      }\n      return array;\n    }, []);\n    return node;\n  }\n}\n"]}