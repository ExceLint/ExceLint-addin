{"version":3,"file":"Popup.types.js","sourceRoot":"../src/","sources":["components/Popup/Popup.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { Popup } from './Popup';\r\nimport { IRefObject } from '../../Utilities';\r\n\r\nexport interface IPopup {}\r\n\r\nexport interface IPopupProps extends React.HTMLAttributes<Popup> {\r\n  /**\r\n   * Optional callback to access the IPopup interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IPopup>;\r\n\r\n  /**\r\n   * Aria role for popup\r\n   */\r\n  role?: string;\r\n\r\n  /**\r\n   * Accessible label text for the popup.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   *  Defines the element id referencing the element containing label text for popup.\r\n   */\r\n  ariaLabelledBy?: string;\r\n\r\n  /**\r\n   * Defines the element id referencing the element containing the description for the popup.\r\n   */\r\n  ariaDescribedBy?: string;\r\n\r\n  /**\r\n   * A callback function for when the popup is dismissed from the close button or light dismiss. If provided, will\r\n   * handle escape keypresses and call this. The event will be stopped/canceled.\r\n   */\r\n  onDismiss?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => any;\r\n\r\n  /**\r\n   *  Optional class name for the root popup div.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * If true, the unmounting of this component will cause focus to be restored to the element that had focus when first mounted.\r\n   * @defaultvalue true\r\n   */\r\n  shouldRestoreFocus?: boolean;\r\n}\r\n"]}