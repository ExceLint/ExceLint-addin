{"version":3,"file":"TextField.base.js","sourceRoot":"../src/","sources":["components/TextField/TextField.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport { Label, ILabelStyleProps, ILabelStyles } from '../../Label';\r\nimport { Icon } from '../../Icon';\r\nimport {\r\n  Async,\r\n  DelayedRender,\r\n  IStyleFunctionOrObject,\r\n  classNamesFunction,\r\n  createRef,\r\n  getId,\r\n  getNativeProps,\r\n  initializeComponentRef,\r\n  inputProperties,\r\n  textAreaProperties,\r\n  warnDeprecations,\r\n  warnMutuallyExclusive\r\n} from '../../Utilities';\r\nimport { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\r\n\r\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\r\n\r\nexport interface ITextFieldState {\r\n  value: string;\r\n\r\n  /** Is true when the control has focus. */\r\n  isFocused: boolean;\r\n\r\n  /**\r\n   * The validation error message.\r\n   *\r\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\r\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\r\n   */\r\n  errorMessage: string;\r\n}\r\n\r\nconst DEFAULT_STATE_VALUE = '';\r\n\r\nexport class TextFieldBase extends React.Component<ITextFieldProps, ITextFieldState> implements ITextField {\r\n  public static defaultProps: ITextFieldProps = {\r\n    multiline: false,\r\n    resizable: true,\r\n    autoAdjustHeight: false,\r\n    underlined: false,\r\n    borderless: false,\r\n    onChange: () => {\r\n      /* noop */\r\n    },\r\n    onBeforeChange: () => {\r\n      /* noop */\r\n    },\r\n    onNotifyValidationResult: () => {\r\n      /* noop */\r\n    },\r\n    onGetErrorMessage: () => undefined,\r\n    deferredValidationTime: 200,\r\n    errorMessage: '',\r\n    validateOnFocusIn: false,\r\n    validateOnFocusOut: false,\r\n    validateOnLoad: true\r\n  };\r\n\r\n  private _id: string;\r\n  private _descriptionId: string;\r\n  private _delayedValidate: (value: string | undefined) => void;\r\n  private _isMounted: boolean;\r\n  private _lastValidation: number;\r\n  private _latestValue: string | undefined;\r\n  private _latestValidateValue: string | undefined;\r\n  private _textElement = createRef<HTMLTextAreaElement | HTMLInputElement | null>();\r\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\r\n  private _async: Async;\r\n\r\n  /**\r\n   * If true, the text field is changing between single- and multi-line, so we'll need to reset\r\n   * focus after the change completes.\r\n   */\r\n  private _shouldResetFocusAfterRender: boolean | undefined;\r\n  /**\r\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\r\n   * selection/cursor after the change completes.\r\n   */\r\n  private _selectionBeforeInputTypeChange: [number | null, number | null] | undefined;\r\n\r\n  public constructor(props: ITextFieldProps) {\r\n    super(props);\r\n\r\n    initializeComponentRef(this);\r\n\r\n    this._async = new Async(this);\r\n\r\n    if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\r\n      warnDeprecations('TextField', props, {\r\n        iconClass: 'iconProps',\r\n        addonString: 'prefix',\r\n        onRenderAddon: 'onRenderPrefix',\r\n        onChanged: 'onChange'\r\n      });\r\n\r\n      warnMutuallyExclusive('TextField', props, {\r\n        value: 'defaultValue'\r\n      });\r\n    }\r\n\r\n    this._id = props.id || getId('TextField');\r\n    this._descriptionId = getId('TextFieldDescription');\r\n\r\n    if (props.value !== undefined) {\r\n      this._latestValue = props.value;\r\n    } else if (props.defaultValue !== undefined) {\r\n      this._latestValue = props.defaultValue;\r\n    } else {\r\n      this._latestValue = DEFAULT_STATE_VALUE;\r\n    }\r\n\r\n    this.state = {\r\n      value: this._latestValue,\r\n      isFocused: false,\r\n      errorMessage: ''\r\n    };\r\n\r\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\r\n    this._lastValidation = 0;\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of the text field.\r\n   */\r\n  public get value(): string | undefined {\r\n    return this.state.value;\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this._isMounted = true;\r\n    this._adjustInputHeight();\r\n\r\n    if (this.props.validateOnLoad) {\r\n      this._validate(this.state.value);\r\n    }\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ITextFieldProps): void {\r\n    const { onBeforeChange } = this.props;\r\n\r\n    // If old value prop was undefined, then component is controlled and we should\r\n    //    respect new undefined value and update state accordingly.\r\n    if (newProps.value !== this.state.value && (newProps.value !== undefined || this.props.value !== undefined)) {\r\n      if (onBeforeChange) {\r\n        onBeforeChange(newProps.value);\r\n      }\r\n\r\n      this._id = newProps.id || this._id;\r\n      this._setValue(newProps.value);\r\n\r\n      const { validateOnFocusIn, validateOnFocusOut } = newProps;\r\n      if (!(validateOnFocusIn || validateOnFocusOut)) {\r\n        this._delayedValidate(newProps.value);\r\n      }\r\n    }\r\n\r\n    // If component is not currently controlled and defaultValue changes, set value to new defaultValue.\r\n    if (newProps.defaultValue !== this.props.defaultValue && newProps.value === undefined) {\r\n      this._setValue(newProps.defaultValue);\r\n    }\r\n\r\n    // Text field is changing between single- and multi-line. After the change is complete,\r\n    // we'll need to reset focus and selection/cursor.\r\n    if (!!newProps.multiline !== !!this.props.multiline && this.state.isFocused) {\r\n      this._shouldResetFocusAfterRender = true;\r\n      this._selectionBeforeInputTypeChange = [this.selectionStart, this.selectionEnd];\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(): void {\r\n    if (this._shouldResetFocusAfterRender) {\r\n      // The text field has just changed between single- and multi-line, so we need to reset focus\r\n      // and selection/cursor.\r\n      this._shouldResetFocusAfterRender = false;\r\n      this.focus();\r\n      if (this._selectionBeforeInputTypeChange) {\r\n        const [start, end] = this._selectionBeforeInputTypeChange;\r\n        if (start !== null && end !== null) {\r\n          this.setSelectionRange(start, end);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    this._isMounted = false;\r\n    this._async.dispose();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      borderless,\r\n      className,\r\n      disabled,\r\n      iconClass,\r\n      iconProps,\r\n      inputClassName,\r\n      label,\r\n      multiline,\r\n      required,\r\n      underlined,\r\n      addonString, // @deprecated\r\n      prefix,\r\n      resizable,\r\n      suffix,\r\n      theme,\r\n      styles,\r\n      autoAdjustHeight,\r\n      onRenderAddon = this._onRenderAddon, // @deprecated\r\n      onRenderPrefix = this._onRenderPrefix,\r\n      onRenderSuffix = this._onRenderSuffix,\r\n      onRenderLabel = this._onRenderLabel,\r\n      onRenderDescription = this._onRenderDescription\r\n    } = this.props;\r\n    const { isFocused } = this.state;\r\n    const errorMessage = this._errorMessage;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className,\r\n      disabled,\r\n      focused: isFocused,\r\n      required,\r\n      multiline,\r\n      hasLabel: !!label,\r\n      hasErrorMessage: !!errorMessage,\r\n      borderless,\r\n      resizable,\r\n      hasIcon: !!iconProps,\r\n      underlined,\r\n      iconClass,\r\n      inputClassName,\r\n      autoAdjustHeight\r\n    });\r\n\r\n    return (\r\n      <div className={this._classNames.root}>\r\n        <div className={this._classNames.wrapper}>\r\n          {onRenderLabel(this.props, this._onRenderLabel)}\r\n          <div className={this._classNames.fieldGroup}>\r\n            {(addonString !== undefined || this.props.onRenderAddon) && (\r\n              <div className={this._classNames.prefix}>{onRenderAddon(this.props, this._onRenderAddon)}</div>\r\n            )}\r\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\r\n              <div className={this._classNames.prefix}>{onRenderPrefix(this.props, this._onRenderPrefix)}</div>\r\n            )}\r\n            {multiline ? this._renderTextArea() : this._renderInput()}\r\n            {(iconClass || iconProps) && <Icon className={this._classNames.icon} {...iconProps} />}\r\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\r\n              <div className={this._classNames.suffix}>{onRenderSuffix(this.props, this._onRenderSuffix)}</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {this._isDescriptionAvailable && (\r\n          <span id={this._descriptionId}>\r\n            {onRenderDescription(this.props, this._onRenderDescription)}\r\n            {errorMessage && (\r\n              <div role=\"alert\">\r\n                <DelayedRender>\r\n                  <p className={this._classNames.errorMessage}>\r\n                    <span data-automation-id=\"error-message\">{errorMessage}</span>\r\n                  </p>\r\n                </DelayedRender>\r\n              </div>\r\n            )}\r\n          </span>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the text field\r\n   */\r\n  public focus() {\r\n    if (this._textElement.current) {\r\n      this._textElement.current.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Blurs the text field.\r\n   */\r\n  public blur() {\r\n    if (this._textElement.current) {\r\n      this._textElement.current.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the text field\r\n   */\r\n  public select() {\r\n    if (this._textElement.current) {\r\n      this._textElement.current.select();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selection start of the text field to a specified value\r\n   */\r\n  public setSelectionStart(value: number): void {\r\n    if (this._textElement.current) {\r\n      this._textElement.current.selectionStart = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selection end of the text field to a specified value\r\n   */\r\n  public setSelectionEnd(value: number): void {\r\n    if (this._textElement.current) {\r\n      this._textElement.current.selectionEnd = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the selection start of the text field\r\n   */\r\n  public get selectionStart(): number | null {\r\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\r\n  }\r\n\r\n  /**\r\n   * Gets the selection end of the text field\r\n   */\r\n  public get selectionEnd(): number | null {\r\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\r\n  }\r\n\r\n  /**\r\n   * Sets the start and end positions of a selection in a text field.\r\n   * @param start - Index of the start of the selection.\r\n   * @param end - Index of the end of the selection.\r\n   */\r\n  public setSelectionRange(start: number, end: number): void {\r\n    if (this._textElement.current) {\r\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\r\n    }\r\n  }\r\n\r\n  private _setValue(value?: string) {\r\n    this._latestValue = value;\r\n    this.setState(\r\n      {\r\n        value: value || DEFAULT_STATE_VALUE,\r\n        errorMessage: ''\r\n      } as ITextFieldState,\r\n      () => {\r\n        this._adjustInputHeight();\r\n      }\r\n    );\r\n  }\r\n\r\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: true });\r\n    if (this.props.validateOnFocusIn) {\r\n      this._validate(this.state.value);\r\n    }\r\n  };\r\n\r\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: false });\r\n    if (this.props.validateOnFocusOut) {\r\n      this._validate(this.state.value);\r\n    }\r\n  };\r\n\r\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\r\n    const { label, required } = props;\r\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\r\n    const labelStyles = this._classNames.subComponentStyles\r\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\r\n      : undefined;\r\n\r\n    if (label) {\r\n      return (\r\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled}>\r\n          {props.label}\r\n        </Label>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\r\n    if (props.description) {\r\n      return <span className={this._classNames.description}>{props.description}</span>;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // @deprecated\r\n  private _onRenderAddon(props: ITextFieldProps): JSX.Element {\r\n    const { addonString } = props;\r\n    return <span style={{ paddingBottom: '1px' }}>{addonString}</span>;\r\n  }\r\n\r\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\r\n    const { prefix } = props;\r\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\r\n  }\r\n\r\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\r\n    const { suffix } = props;\r\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\r\n  }\r\n\r\n  private get _errorMessage(): string | undefined {\r\n    let { errorMessage } = this.state;\r\n    if (!errorMessage && this.props.errorMessage) {\r\n      errorMessage = this.props.errorMessage;\r\n    }\r\n\r\n    return errorMessage;\r\n  }\r\n\r\n  /**\r\n   * If a custom description render function is supplied then treat description as always available.\r\n   * Otherwise defer to the presence of description or error message text.\r\n   */\r\n  private get _isDescriptionAvailable(): boolean {\r\n    const props = this.props;\r\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\r\n  }\r\n\r\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\r\n    const textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\r\n\r\n    return (\r\n      <textarea\r\n        id={this._id}\r\n        {...textAreaProps}\r\n        ref={this._textElement}\r\n        value={this.state.value}\r\n        onInput={this._onInputChange}\r\n        onChange={this._onInputChange}\r\n        className={this._classNames.field}\r\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\r\n        aria-invalid={!!this._errorMessage}\r\n        aria-label={this.props.ariaLabel}\r\n        readOnly={this.props.readOnly}\r\n        onFocus={this._onFocus}\r\n        onBlur={this._onBlur}\r\n      />\r\n    );\r\n  }\r\n\r\n  private _renderInput(): React.ReactElement<React.HTMLAttributes<HTMLInputElement>> {\r\n    const inputProps = getNativeProps<React.HTMLAttributes<HTMLInputElement>>(this.props, inputProperties, ['defaultValue']);\r\n\r\n    return (\r\n      <input\r\n        type={'text'}\r\n        id={this._id}\r\n        {...inputProps}\r\n        ref={this._textElement}\r\n        value={this.state.value}\r\n        onInput={this._onInputChange}\r\n        onChange={this._onInputChange}\r\n        className={this._classNames.field}\r\n        aria-label={this.props.ariaLabel}\r\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\r\n        aria-invalid={!!this._errorMessage}\r\n        readOnly={this.props.readOnly}\r\n        onFocus={this._onFocus}\r\n        onBlur={this._onBlur}\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n    event.persist();\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    const value: string = element.value;\r\n\r\n    // Avoid doing unnecessary work when the value has not changed.\r\n    if (value === this._latestValue) {\r\n      return;\r\n    }\r\n    this._latestValue = value;\r\n\r\n    this.setState({ value: value } as ITextFieldState, () => {\r\n      this._adjustInputHeight();\r\n\r\n      if (this.props.onChange) {\r\n        this.props.onChange(event, value);\r\n      }\r\n\r\n      if (this.props.onChanged) {\r\n        this.props.onChanged(value);\r\n      }\r\n    });\r\n\r\n    const { validateOnFocusIn, validateOnFocusOut } = this.props;\r\n    if (!(validateOnFocusIn || validateOnFocusOut)) {\r\n      this._delayedValidate(value);\r\n    }\r\n\r\n    if (this.props.onBeforeChange) {\r\n      this.props.onBeforeChange(value);\r\n    }\r\n  };\r\n\r\n  private _validate(value: string | undefined): void {\r\n    const { validateOnFocusIn, validateOnFocusOut } = this.props;\r\n\r\n    // In case of _validate called multi-times during executing validate logic with promise return.\r\n    if (this._latestValidateValue === value && !(validateOnFocusIn || validateOnFocusOut)) {\r\n      return;\r\n    }\r\n\r\n    this._latestValidateValue = value;\r\n    const onGetErrorMessage = this.props.onGetErrorMessage as (value: string) => string | PromiseLike<string> | undefined;\r\n    const result = onGetErrorMessage(value || '');\r\n\r\n    if (result !== undefined) {\r\n      if (typeof result === 'string') {\r\n        this.setState({ errorMessage: result } as ITextFieldState);\r\n        this._notifyAfterValidate(value, result);\r\n      } else {\r\n        const currentValidation: number = ++this._lastValidation;\r\n\r\n        result.then((errorMessage: string) => {\r\n          if (this._isMounted && currentValidation === this._lastValidation) {\r\n            this.setState({ errorMessage } as ITextFieldState);\r\n          }\r\n          this._notifyAfterValidate(value, errorMessage);\r\n        });\r\n      }\r\n    } else {\r\n      this._notifyAfterValidate(value, '');\r\n    }\r\n  }\r\n\r\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string): void {\r\n    if (this._isMounted && value === this.state.value && this.props.onNotifyValidationResult) {\r\n      this.props.onNotifyValidationResult(errorMessage, value);\r\n    }\r\n  }\r\n\r\n  private _adjustInputHeight(): void {\r\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\r\n      const textField = this._textElement.current;\r\n      textField.style.height = '';\r\n      textField.style.height = textField.scrollHeight + 'px';\r\n    }\r\n  }\r\n}\r\n"]}