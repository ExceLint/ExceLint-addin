{"version":3,"file":"TextField.Styled.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.Styled.Example.tsx"],"names":[],"mappings":";;;IAOa,QAAA,sBAAsB,GAA6B;QAC9D,OAAO,CACL,oBAAC,aAAK,IAAC,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE;YAChC,oBAAC,WAAI,IAAC,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,ySAIlC;YACP,oBAAC,qBAAS,IAAC,KAAK,EAAC,2CAA2C,EAAC,QAAQ,QAAC,MAAM,EAAE,SAAS,GAAI;YAC3F,oBAAC,qBAAS,IAAC,KAAK,EAAC,4CAA4C,EAAC,QAAQ,QAAC,SAAS,EAAC,qBAAqB,GAAG,CACnG,CACT,CAAC;IACJ,CAAC,CAAC;IAEF,mBAAmB,KAA2B;QACpC,IAAA,yBAAQ,CAAW;QAC3B,OAAO;YACL,UAAU,EAAE;gBACV,EAAE,KAAK,EAAE,GAAG,EAAE;gBACd,QAAQ,IAAI;oBACV,cAAc,EAAE,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS;iBACrD;aACF;YACD,kBAAkB,EAAE;gBAClB,KAAK,EAAE,cAAc;aACtB;SACF,CAAC;IACJ,CAAC;IAED,wBAAwB,KAAuB;QACrC,IAAA,yBAAQ,CAAW;QAC3B,OAAO;YACL,IAAI,EAAE;gBACJ,QAAQ,IAAI;oBACV,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY;iBACxC;aACF;SACF,CAAC;IACJ,CAAC;;AAED;;;;;;;;;;;;;;;;;;EAkBE","sourcesContent":["import * as React from 'react';\r\nimport { ITextFieldStyleProps, ITextFieldStyles, TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { ILabelStyles, ILabelStyleProps } from 'office-ui-fabric-react/lib/Label';\r\nimport { Text } from 'office-ui-fabric-react/lib/Text';\r\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport './TextField.Styled.Example.scss';\r\n\r\nexport const TextFieldStyledExample: React.StatelessComponent = () => {\r\n  return (\r\n    <Stack tokens={{ childrenGap: 15 }}>\r\n      <Text styles={{ root: { maxWidth: 600 } }}>\r\n        These examples show how components that used to be styled using CSS can be styled using JS styling. The preferred method is JS\r\n        styling for several reasons: type safety for styling, more predictable behavior, and clear feedback via typing when component\r\n        changes affect existing styling code.\r\n      </Text>\r\n      <TextField label=\"Theme Primary Label, Red Top Border (JS):\" required styles={getStyles} />\r\n      <TextField label=\"Theme Primary Label, Red Top Border (CSS):\" required className=\"textField-cssStyled\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nfunction getStyles(props: ITextFieldStyleProps): Partial<ITextFieldStyles> {\r\n  const { required } = props;\r\n  return {\r\n    fieldGroup: [\r\n      { width: 300 },\r\n      required && {\r\n        borderTopColor: props.theme.semanticColors.errorText\r\n      }\r\n    ],\r\n    subComponentStyles: {\r\n      label: getLabelStyles\r\n    }\r\n  };\r\n}\r\n\r\nfunction getLabelStyles(props: ILabelStyleProps): ILabelStyles {\r\n  const { required } = props;\r\n  return {\r\n    root: [\r\n      required && {\r\n        color: props.theme.palette.themePrimary\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\n/*\r\nThis is the SCSS used in the CSS styling example.\r\nIf exporting to CodePen, paste this into the CSS section.\r\n-------------------------------------------------------------------------------------------\r\n// In the real SCSS, these variables are defined elsewhere and adjusted based on the theme.\r\n// The values provided below are from the default theme.\r\n$errorTextColor: #a80000;\r\n$ms-color-themePrimary: #0078d4;\r\n\r\n.textField-cssStyled {\r\n  .ms-TextField-fieldGroup {\r\n    width: 300px;\r\n    border-top-color: $errorTextColor;\r\n  }\r\n  .ms-Label {\r\n    color: $ms-color-themePrimary;\r\n  }\r\n}\r\n*/\r\n"]}