{"version":3,"file":"DocumentCardPreview.base.js","sourceRoot":"../src/","sources":["components/DocumentCard/DocumentCardPreview.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Icon } from '../../Icon';\r\nimport { Image } from '../../Image';\r\nimport { Link } from '../../Link';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport { BaseComponent, classNamesFunction, css } from '../../Utilities';\r\nimport {\r\n  IDocumentCardPreviewImage,\r\n  IDocumentCardPreviewProps,\r\n  IDocumentCardPreviewStyleProps,\r\n  IDocumentCardPreviewStyles\r\n} from './DocumentCardPreview.types';\r\n\r\nconst LIST_ITEM_COUNT = 3;\r\nconst getClassNames = classNamesFunction<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>();\r\n\r\nexport class DocumentCardPreviewBase extends BaseComponent<IDocumentCardPreviewProps, any> {\r\n  private _classNames: IProcessedStyleSet<IDocumentCardPreviewStyles>;\r\n\r\n  public render(): JSX.Element {\r\n    const { previewImages, styles, theme, className } = this.props;\r\n    let style, preview;\r\n    const isFileList = previewImages.length > 1;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className,\r\n      isFileList\r\n    });\r\n\r\n    if (previewImages.length > 1) {\r\n      // Render a list of files\r\n      preview = this._renderPreviewList(previewImages);\r\n    } else if (previewImages.length === 1) {\r\n      // Render a single preview\r\n      preview = this._renderPreviewImage(previewImages[0]);\r\n\r\n      // Override the border color if an accent color was provided\r\n      if (previewImages[0].accentColor) {\r\n        style = {\r\n          borderBottomColor: previewImages[0].accentColor\r\n        };\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={this._classNames.root} style={style}>\r\n        {preview}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderPreviewImage(previewImage: IDocumentCardPreviewImage): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> {\r\n    const { width, height, imageFit, previewIconProps, previewIconContainerClass } = previewImage;\r\n\r\n    if (previewIconProps) {\r\n      return (\r\n        <div className={css(this._classNames.previewIcon, previewIconContainerClass)} style={{ width: width, height: height }}>\r\n          <Icon {...previewIconProps} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const image = <Image width={width} height={height} imageFit={imageFit} src={previewImage.previewImageSrc} role=\"presentation\" alt=\"\" />;\r\n\r\n    let icon;\r\n    if (previewImage.iconSrc) {\r\n      icon = <Image className={this._classNames.icon} src={previewImage.iconSrc} role=\"presentation\" alt=\"\" />;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {image}\r\n        {icon}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderPreviewList = (previewImages: IDocumentCardPreviewImage[]): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> => {\r\n    const { getOverflowDocumentCountText } = this.props;\r\n\r\n    // Determine how many documents we won't be showing\r\n    const overflowDocumentCount = previewImages.length - LIST_ITEM_COUNT;\r\n\r\n    // Determine the overflow text that will be rendered after the preview list.\r\n    const overflowText = overflowDocumentCount\r\n      ? getOverflowDocumentCountText\r\n        ? getOverflowDocumentCountText(overflowDocumentCount)\r\n        : '+' + overflowDocumentCount\r\n      : null;\r\n\r\n    // Create list items for the documents to be shown\r\n    const fileListItems = previewImages.slice(0, LIST_ITEM_COUNT).map((file, fileIndex) => (\r\n      <li key={fileIndex}>\r\n        <Image className={this._classNames.fileListIcon} src={file.iconSrc} role=\"presentation\" alt=\"\" width=\"16px\" height=\"16px\" />\r\n        <Link {...(file.linkProps, { href: file.url || (file.linkProps && file.linkProps.href) })}>{file.name}</Link>\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <ul className={this._classNames.fileList}>{fileListItems}</ul>\r\n        {overflowText && <span className={this._classNames.fileListOverflowText}>{overflowText}</span>}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n"]}