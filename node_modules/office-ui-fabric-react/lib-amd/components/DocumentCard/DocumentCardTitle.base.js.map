{"version":3,"file":"DocumentCardTitle.base.js","sourceRoot":"../src/","sources":["components/DocumentCard/DocumentCardTitle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { Async, EventGroup, classNamesFunction } from '../../Utilities';\nimport {\n  IDocumentCardTitleProps,\n  IDocumentCardTitleStyleProps,\n  IDocumentCardTitleStyles,\n} from './DocumentCardTitle.types';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef } from '@uifabric/utilities';\n\nconst getClassNames = classNamesFunction<IDocumentCardTitleStyleProps, IDocumentCardTitleStyles>();\n\nexport interface IDocumentCardTitleState {\n  truncatedTitleFirstPiece?: string;\n  truncatedTitleSecondPiece?: string;\n  clientWidth?: number;\n  previousTitle: string;\n\n  /**\n   * In measuring, it will render a same style text with whiteSpace: 'nowrap', to get overflow rate.\n   * So that the logic can predict truncated text well.\n   */\n  needMeasurement: boolean;\n}\n\nconst TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD = 5;\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardTitleBase extends React.Component<IDocumentCardTitleProps, IDocumentCardTitleState> {\n  private _titleElement = React.createRef<HTMLDivElement>();\n  private _measureTitleElement = React.createRef<HTMLDivElement>();\n\n  private _titleTruncationTimer: number;\n  private _classNames: IProcessedStyleSet<IDocumentCardTitleStyles>;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IDocumentCardTitleProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      truncatedTitleFirstPiece: '',\n      truncatedTitleSecondPiece: '',\n      previousTitle: props.title,\n      needMeasurement: !!props.shouldTruncate,\n    };\n  }\n\n  public componentDidUpdate(): void {\n    if (this.props.title !== this.state.previousTitle) {\n      this.setState({\n        truncatedTitleFirstPiece: undefined,\n        truncatedTitleSecondPiece: undefined,\n        clientWidth: undefined,\n        previousTitle: this.props.title,\n        needMeasurement: !!this.props.shouldTruncate,\n      });\n    }\n\n    this._events.off(window, 'resize', this._updateTruncation);\n\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      requestAnimationFrame(this._shrinkTitle);\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  }\n\n  public componentDidMount(): void {\n    if (this.props.shouldTruncate) {\n      this._truncateTitle();\n      this._events.on(window, 'resize', this._updateTruncation);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { title, shouldTruncate, showAsSecondaryTitle, styles, theme, className } = this.props;\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece, needMeasurement } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      showAsSecondaryTitle,\n    });\n\n    let documentCardTitle;\n    if (needMeasurement) {\n      documentCardTitle = (\n        <div\n          className={this._classNames.root}\n          ref={this._measureTitleElement}\n          title={title}\n          style={{ whiteSpace: 'nowrap' }}\n        >\n          {title}\n        </div>\n      );\n    } else if (shouldTruncate && truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      documentCardTitle = (\n        <div className={this._classNames.root} ref={this._titleElement} title={title}>\n          {truncatedTitleFirstPiece}\n          &hellip;\n          {truncatedTitleSecondPiece}\n        </div>\n      );\n    } else {\n      documentCardTitle = (\n        <div className={this._classNames.root} ref={this._titleElement} title={title}>\n          {title}\n        </div>\n      );\n    }\n    return documentCardTitle;\n  }\n\n  // Truncate logic here way can't handle the case that chars with different widths are mixed very well.\n  // Let _shrinkTitle take care of that.\n  private _truncateTitle = (): void => {\n    if (!this.state.needMeasurement) {\n      return;\n    }\n\n    this._async.requestAnimationFrame(this._truncateWhenInAnimation);\n  };\n\n  private _truncateWhenInAnimation: () => void = () => {\n    const originalTitle = this.props.title;\n    const element: HTMLDivElement | null = this._measureTitleElement.current;\n\n    if (element) {\n      const style: CSSStyleDeclaration = getComputedStyle(element);\n      if (style.width && style.lineHeight && style.height) {\n        const { clientWidth, scrollWidth } = element;\n        const lines: number = Math.floor(\n          (parseInt(style.height, 10) + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD) / parseInt(style.lineHeight, 10),\n        );\n\n        // Use overflow to predict truncated length.\n        // Take an example.The text is: A text with A very long text that need to be truncated.ppt\n        // if container is like\n        // |A text with A very| long text that need to be truncated.ppt\n        // The scroll width is 58, (take two | out of length)\n        // The client width is 18\n        // the overflow rate is scrollWidth/clientWidth which should be close to length(overflowText)/length(visualText)\n        // And the length of remaining text should be truncated is (original Length)/(58/18) -3 = 15.\n        // So that the logic can predict truncated text well.\n        // first piece will be `A text `, * second piece will be `ated.ppt`\n        // |A text ...ated.ppt|\n        const overFlowRate: number = scrollWidth / (parseInt(style.width, 10) * lines);\n\n        if (overFlowRate > 1) {\n          const truncatedLength: number = originalTitle.length / overFlowRate - 3 /** Saved for separator */;\n          return this.setState({\n            truncatedTitleFirstPiece: originalTitle.slice(0, truncatedLength / 2),\n            truncatedTitleSecondPiece: originalTitle.slice(originalTitle.length - truncatedLength / 2),\n            clientWidth,\n            needMeasurement: false,\n          });\n        }\n      }\n    }\n\n    return this.setState({ needMeasurement: false });\n  };\n\n  private _shrinkTitle: () => void = () => {\n    const { truncatedTitleFirstPiece, truncatedTitleSecondPiece } = this.state;\n    if (truncatedTitleFirstPiece && truncatedTitleSecondPiece) {\n      const titleElement = this._titleElement.current;\n\n      if (!titleElement) {\n        return;\n      }\n\n      if (\n        titleElement.scrollHeight > titleElement.clientHeight + TRUNCATION_VERTICAL_OVERFLOW_THRESHOLD ||\n        titleElement.scrollWidth > titleElement.clientWidth\n      ) {\n        this.setState({\n          truncatedTitleFirstPiece: truncatedTitleFirstPiece.slice(0, truncatedTitleFirstPiece.length - 1),\n          truncatedTitleSecondPiece: truncatedTitleSecondPiece.slice(1),\n        });\n      }\n    }\n  };\n\n  private _updateTruncation(): void {\n    this._async.requestAnimationFrame(() => {\n      // Only update truncation if the title's size has changed since the last time we truncated\n      if (this._titleElement.current) {\n        const clientWidth: number = this._titleElement.current.clientWidth;\n        // Throttle truncation so that it doesn't happen during a window resize\n        clearTimeout(this._titleTruncationTimer);\n        if (this.state.clientWidth !== clientWidth) {\n          this._titleTruncationTimer = this._async.setTimeout(\n            () =>\n              this.setState({\n                truncatedTitleFirstPiece: undefined,\n                truncatedTitleSecondPiece: undefined,\n                needMeasurement: true,\n              }),\n            250,\n          );\n        }\n      }\n    });\n  }\n}\n"]}