{"version":3,"file":"ThemeGenerator.js","sourceRoot":"../src/","sources":["components/ThemeGenerator/ThemeGenerator.ts"],"names":[],"mappings":";;;IAOA;QAAA;QA6KA,CAAC;QA5KC;;;;;kJAK0I;QAC5H,sBAAO,GAArB,UACE,IAAoB,EACpB,KAAsB,EACtB,UAAkB,EAClB,eAAuB,EACvB,oBAA2B;YAF3B,2BAAA,EAAA,kBAAkB;YAClB,gCAAA,EAAA,uBAAuB;YACvB,qCAAA,EAAA,2BAA2B;YAE3B,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE;gBAC7B,mBAAmB;gBACnB,OAAO;aACR;YAED,IAAI,oBAAoB,EAAE;gBACxB,IAAI,aAAa,SAAQ,CAAC;gBAC1B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,aAAa,GAAG,2BAAkB,CAAC,KAAK,CAAE,CAAC,CAAC,2DAA2D;oBACvG,IAAI,CAAC,aAAa,EAAE;wBAClB,MAAM,iCAAiC,GAAG,KAAK,CAAC;qBACjD;iBACF;qBAAM;oBACL,aAAa,GAAG,KAAK,CAAC;iBACvB;gBACD,cAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,EAAE,UAAU,EAAE,eAAe,EAAE,oBAAoB,CAAC,CAAC;aACjG;iBAAM,IAAI,IAAI,CAAC,KAAK,EAAE;gBACrB,cAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,eAAe,EAAE,oBAAoB,CAAC,CAAC;aAC9F;QACH,CAAC;QAED;;;;WAIG;QACW,0BAAW,GAAzB,UAA0B,SAAsB,EAAE,UAAmB;YACnE,+GAA+G;YAC/G,KAAK,IAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,IAAI,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBACtC,IAAM,IAAI,GAAmB,SAAS,CAAC,QAAQ,CAAC,CAAC;oBACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;wBACjC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;4BACf,MAAM,qEAAqE,CAAC;yBAC7E;wBACD,cAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;qBACrE;iBACF;aACF;QACH,CAAC;QAED;;;;;WAKG;QACW,6BAAc,GAA5B,UAA6B,SAAsB;YACjD,IAAM,KAAK,GAAQ,EAAE,CAAC;YACtB,KAAK,IAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,IAAI,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBACtC,IAAM,IAAI,GAAmB,SAAS,CAAC,QAAQ,CAAC,CAAC;oBACjD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;iBACnE;aACF;YACD,OAAO,KAAK,CAAC;QACf,CAAC;QAED;;WAEG;QACW,6BAAc,GAA5B,UAA6B,SAAsB;YACjD,IAAM,iBAAiB,GAAG,mBAAmB,CAAC;YAC9C,IAAI,MAAM,GAAG,EAAE,CAAC;YAEhB,MAAM,IAAI,6BAA6B,CAAC;YAExC,KAAK,IAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,IAAI,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBACtC,IAAM,IAAI,GAAmB,SAAS,CAAC,QAAQ,CAAC,CAAC;oBACjD,IAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC9E,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;oBACzE,MAAM,IAAI,kBAAM,CAAC,iBAAiB,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;iBAClE;aACF;YACD,MAAM,IAAI,UAAU,CAAC;YACrB,OAAO,MAAM,CAAC;QAChB,CAAC;QAED;;;;WAIG;QACW,6BAAc,GAA5B,UAA6B,SAAsB;YACjD,IAAM,eAAe,GAAG,4CAA4C,CAAC;YACrE,IAAI,MAAM,GAAG,EAAE,CAAC;YAEhB,KAAK,IAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,IAAI,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBACtC,IAAM,IAAI,GAAmB,SAAS,CAAC,QAAQ,CAAC,CAAC;oBACjD,IAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC9E,MAAM,IAAI,kBAAM,CAAC,eAAe,EAAE,cAAc,EAAE,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;iBACnH;aACF;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;QAED;;;;;;WAMG;QACW,oCAAqB,GAAnC,UAAoC,SAAsB;YACxD,IAAM,aAAa,GAAG,kBAAkB,CAAC;YACzC,IAAI,MAAM,GAAG,EAAE,CAAC;YAEhB,KAAK,IAAM,QAAQ,IAAI,SAAS,EAAE;gBAChC,IAAI,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBACtC,IAAM,IAAI,GAAmB,SAAS,CAAC,QAAQ,CAAC,CAAC;oBACjD,IAAI,IAAI,CAAC,KAAK,EAAE;wBACd,kCAAkC;wBAClC,SAAS;qBACV;oBACD,IAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC9E,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;oBACvE,2CAA2C;oBAC3C,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,EAAE;wBACtD,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;qBAClD;oBACD,MAAM,IAAI,kBAAM,CAAC,aAAa,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;iBAC9D;aACF;YACD,OAAO,MAAM,GAAG,MAAM,GAAG,GAAG,CAAC;QAC/B,CAAC;QAED;;;yGAGiG;QAClF,uBAAQ,GAAvB,UAAwB,IAAoB,EAAE,KAAa,EAAE,UAAmB,EAAE,eAAwB,EAAE,oBAA2B;YAA3B,qCAAA,EAAA,2BAA2B;YACrI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE;gBAC7B,mBAAmB;gBACnB,OAAO;aACR;YAED,IAAI,oBAAoB,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAC/E,8CAA8C;gBAC9C,IAAI,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,IAAI,qBAAY,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBACnH,2BAA2B;oBAC3B,IAAI,IAAI,CAAC,iBAAiB,EAAE;wBAC1B,IAAI,CAAC,KAAK,GAAG,2BAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,OAAQ,EAAE,UAAU,CAAE,CAAC;qBACpE;yBAAM;wBACL,IAAI,CAAC,KAAK,GAAG,iBAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,OAAQ,EAAE,UAAU,CAAE,CAAC;qBAC1D;oBACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC3B;qBAAM;oBACL,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC1B;gBAED,+BAA+B;gBAC/B,KAA2B,UAAmB,EAAnB,KAAA,IAAI,CAAC,cAAc,EAAnB,cAAmB,EAAnB,IAAmB;oBAAzC,IAAM,YAAY,SAAA;oBACrB,cAAc,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,oBAAoB,CAAC,CAAC;iBAC5F;aACF;QACH,CAAC;QACH,qBAAC;IAAD,CAAC,AA7KD,IA6KC;IA7KY,wCAAc","sourcesContent":["import { IColor, getColorFromString } from '../../utilities/color/colors';\r\nimport { isValidShade, getShade, getBackgroundShade } from '../../utilities/color/shades';\r\nimport { format } from '../../Utilities';\r\n\r\nimport { IThemeSlotRule } from './IThemeSlotRule';\r\nimport { IThemeRules } from './IThemeRules';\r\n\r\nexport class ThemeGenerator {\r\n  /* Sets an IThemeSlotRule to the given color and cascades it to the rest of the theme, updating other IThemeSlotRules in the theme that\r\n   *   inherit from that color.\r\n   * isInverted: whether it's a dark theme or not, which affects the algorithm used to generate shades\r\n   * isCustomization should be true only if it's a user action, and indicates overwriting the slot's inheritance (if any)\r\n   * overwriteCustomColor: a slot could have a generated color based on its inheritance rules (isCustomized is false), or a custom color\r\n                            based on user input (isCustomized is true), this bool tells us whether to override existing customized colors */\r\n  public static setSlot(\r\n    rule: IThemeSlotRule,\r\n    color: string | IColor,\r\n    isInverted = false,\r\n    isCustomization = false,\r\n    overwriteCustomColor = true\r\n  ) {\r\n    if (!rule.color && rule.value) {\r\n      // not a color rule\r\n      return;\r\n    }\r\n\r\n    if (overwriteCustomColor) {\r\n      let colorAsIColor: IColor;\r\n      if (typeof color === 'string') {\r\n        colorAsIColor = getColorFromString(color)!; // the ! is a lie here but we'll verify it in the next line\r\n        if (!colorAsIColor) {\r\n          throw 'color is invalid in setSlot(): ' + color;\r\n        }\r\n      } else {\r\n        colorAsIColor = color;\r\n      }\r\n      ThemeGenerator._setSlot(rule, colorAsIColor, isInverted, isCustomization, overwriteCustomColor);\r\n    } else if (rule.color) {\r\n      ThemeGenerator._setSlot(rule, rule.color, isInverted, isCustomization, overwriteCustomColor);\r\n    }\r\n  }\r\n\r\n  /* Sets the color of each slot based on its rule. Slots that don't inherit must have a color already.\r\n   * If this completes without error, then the theme is ready to use. (All slots will have a color.)\r\n   * setSlot() can be called before this, but this must be called before getThemeAs*().\r\n   * Does not override colors of rules where isCustomized is true (i.e. doesn't override existing customizations).\r\n   */\r\n  public static insureSlots(slotRules: IThemeRules, isInverted: boolean) {\r\n    // Get all the \"root\" rules, the ones which don't inherit. Then \"set\" them to trigger updating dependent slots.\r\n    for (const ruleName in slotRules) {\r\n      if (slotRules.hasOwnProperty(ruleName)) {\r\n        const rule: IThemeSlotRule = slotRules[ruleName];\r\n        if (!rule.inherits && !rule.value) {\r\n          if (!rule.color) {\r\n            throw 'A color slot rule that does not inherit must provide its own color.';\r\n          }\r\n          ThemeGenerator._setSlot(rule, rule.color, isInverted, false, false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Gets the JSON-formatted blob that describes the theme, usable with the REST request endpoints\r\n   * { [theme slot name as string] : [color as string],\r\n   *  \"tokenName\": \"#f00f00\",\r\n   *  \"tokenName2\": \"#ba2ba2\",\r\n   *   ... }\r\n   */\r\n  public static getThemeAsJson(slotRules: IThemeRules): any {\r\n    const theme: any = {};\r\n    for (const ruleName in slotRules) {\r\n      if (slotRules.hasOwnProperty(ruleName)) {\r\n        const rule: IThemeSlotRule = slotRules[ruleName];\r\n        theme[rule.name] = rule.color ? rule.color.str : rule.value || '';\r\n      }\r\n    }\r\n    return theme;\r\n  }\r\n\r\n  /*\r\n   * Gets code-formatted load theme blob that can be copy and pasted.\r\n   */\r\n  public static getThemeAsCode(slotRules: IThemeRules): any {\r\n    const attributeTemplate = \"    {0}: '{1}',\\n\";\r\n    let output = '';\r\n\r\n    output += 'loadTheme({\\n  palette: {\\n';\r\n\r\n    for (const ruleName in slotRules) {\r\n      if (slotRules.hasOwnProperty(ruleName)) {\r\n        const rule: IThemeSlotRule = slotRules[ruleName];\r\n        const camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\r\n        const outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\r\n        output += format(attributeTemplate, camelCasedName, outputColor);\r\n      }\r\n    }\r\n    output += '  }\\n});';\r\n    return output;\r\n  }\r\n\r\n  /* Gets the theme as a list of SASS variables that can be used in code\r\n   * $tokenName: \"[theme:tokenName, default:#f00f00]\";\r\n   * $tokenName2: \"[theme:tokenName2, default:#ba2ba2]\";\r\n   * ...\r\n   */\r\n  public static getThemeAsSass(slotRules: IThemeRules): any {\r\n    const sassVarTemplate = '${0}Color: \"[theme: {1}, default: {2}]\";\\n';\r\n    let output = '';\r\n\r\n    for (const ruleName in slotRules) {\r\n      if (slotRules.hasOwnProperty(ruleName)) {\r\n        const rule: IThemeSlotRule = slotRules[ruleName];\r\n        const camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\r\n        output += format(sassVarTemplate, camelCasedName, camelCasedName, rule.color ? rule.color.str : rule.value || '');\r\n      }\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /* Gets the theme formatted for PowerShell scripts\r\n   * @{\r\n   * \"tokenName\" = \"#f00f00\";\r\n   * \"tokenName2\" = \"#ba2ba2\";\r\n   * ...\r\n   * }\r\n   */\r\n  public static getThemeForPowerShell(slotRules: IThemeRules): any {\r\n    const psVarTemplate = '\"{0}\" = \"{1}\";\\n';\r\n    let output = '';\r\n\r\n    for (const ruleName in slotRules) {\r\n      if (slotRules.hasOwnProperty(ruleName)) {\r\n        const rule: IThemeSlotRule = slotRules[ruleName];\r\n        if (rule.value) {\r\n          // skip this one, it's not a color\r\n          continue;\r\n        }\r\n        const camelCasedName = rule.name.charAt(0).toLowerCase() + rule.name.slice(1);\r\n        let outputColor = rule.color ? '#' + rule.color.hex : rule.value || '';\r\n        // powershell endpoint uses the RGBA format\r\n        if (rule.color && rule.color.a && rule.color.a !== 100) {\r\n          outputColor += String(rule.color.a.toString(16));\r\n        }\r\n        output += format(psVarTemplate, camelCasedName, outputColor);\r\n      }\r\n    }\r\n    return '@{\\n' + output + '}';\r\n  }\r\n\r\n  /* Sets the given slot's color to the appropriate color, shading it if necessary.\r\n     Then, iterates through all other rules (that are this rule's dependents) to update them accordingly.\r\n     isCustomization=true means it's a user provided color, set it to that raw color\r\n     isCustomization=false means the rule it's inheriting from changed, so updated using asShade */\r\n  private static _setSlot(rule: IThemeSlotRule, color: IColor, isInverted: boolean, isCustomization: boolean, overwriteCustomColor = true) {\r\n    if (!rule.color && rule.value) {\r\n      // not a color rule\r\n      return;\r\n    }\r\n\r\n    if (overwriteCustomColor || !rule.color || !rule.isCustomized || !rule.inherits) {\r\n      // set the rule's color under these conditions\r\n      if ((overwriteCustomColor || !rule.isCustomized) && !isCustomization && rule.inherits && isValidShade(rule.asShade)) {\r\n        // it's inheriting by shade\r\n        if (rule.isBackgroundShade) {\r\n          rule.color = getBackgroundShade(color, rule.asShade!, isInverted)!;\r\n        } else {\r\n          rule.color = getShade(color, rule.asShade!, isInverted)!;\r\n        }\r\n        rule.isCustomized = false;\r\n      } else {\r\n        rule.color = color;\r\n        rule.isCustomized = true;\r\n      }\r\n\r\n      // then update dependent colors\r\n      for (const ruleToUpdate of rule.dependentRules) {\r\n        ThemeGenerator._setSlot(ruleToUpdate, rule.color, isInverted, false, overwriteCustomColor);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}