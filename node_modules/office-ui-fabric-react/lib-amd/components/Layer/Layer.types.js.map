{"version":3,"file":"Layer.types.js","sourceRoot":"../src/","sources":["components/Layer/Layer.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { LayerBase } from './Layer.base';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\n\r\nexport interface ILayer {}\r\n\r\nexport interface ILayerProps extends React.HTMLAttributes<HTMLDivElement | LayerBase> {\r\n  /**\r\n   * Optional callback to access the ILayer interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<ILayer>;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules\r\n   */\r\n  styles?: IStyleFunctionOrObject<ILayerStyleProps, ILayerStyles>;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Additional css class to apply to the Layer\r\n   * @defaultvalue undefined\r\n   */\r\n  className?: string;\r\n\r\n  /** Callback for when the layer is mounted. */\r\n  onLayerMounted?: () => void;\r\n\r\n  /**\r\n   * Callback for when the layer is mounted.\r\n   */\r\n  onLayerDidMount?: () => void;\r\n\r\n  /**\r\n   * Callback for when the layer is unmounted.\r\n   */\r\n  onLayerWillUnmount?: () => void;\r\n\r\n  /**\r\n   * The optional id property provided on a LayerHost that this Layer should render within. The LayerHost does\r\n   * not need to be immediately available but once has been rendered, and if missing, we'll avoid trying\r\n   * to render the Layer content until the host is available. If an id is not provided, we will render the Layer\r\n   * content in a fixed position element rendered at the end of the document.\r\n   */\r\n  hostId?: string;\r\n\r\n  /**\r\n   * When enabled, Layer allows events to bubble up from Layer content.\r\n   * Traditionally Layer has not had this behavior. This prop preserves backwards compatibility by\r\n   * default while allowing users to opt in to the new event bubbling functionality.\r\n   */\r\n  eventBubblingEnabled?: boolean;\r\n\r\n  /**\r\n   * Whether the layer should be added as the first child of the host.\r\n   * If true, the layer will be inserted as the first child of the host\r\n   * By default, the layer will be appended at the end to the host\r\n   */\r\n  insertFirst?: boolean;\r\n}\r\n\r\nexport interface ILayerStyleProps {\r\n  /**\r\n   * Accept theme prop.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Accept custom classNames\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Check if Host\r\n   */\r\n  isNotHost?: boolean;\r\n}\r\n\r\nexport interface ILayerStyles {\r\n  /**\r\n   * Style for the root element when fixed.\r\n   */\r\n  root?: IStyle;\r\n  /**\r\n   * Style for the Fabric component.\r\n   */\r\n  content?: IStyle;\r\n}\r\n"]}