{"version":3,"file":"Layer.notification.js","sourceRoot":"../src/","sources":["components/Layer/Layer.notification.ts"],"names":[],"mappings":";;;IAAA,IAAM,eAAe,GAAyC,EAAE,CAAC;IAEjE,IAAI,oBAAwC,CAAC;IAE7C;;;;OAIG;IACH,SAAgB,aAAa,CAAC,MAAc,EAAE,QAAoB;QAChE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE;YAC5B,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;SAC9B;QAED,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAND,sCAMC;IAED;;;;OAIG;IACH,SAAgB,eAAe,CAAC,MAAc,EAAE,QAAoB;QAClE,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE;YAC3B,IAAM,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtD,IAAI,GAAG,IAAI,CAAC,EAAE;gBACZ,eAAe,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACvC,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxC,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;iBAChC;aACF;SACF;IACH,CAAC;IAVD,0CAUC;IAED;;;OAGG;IACH,SAAgB,iBAAiB,CAAC,EAAU;QAC1C,IAAI,eAAe,CAAC,EAAE,CAAC,EAAE;YACvB,eAAe,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,EAAE,EAAV,CAAU,CAAC,CAAC;SACrD;IACH,CAAC;IAJD,8CAIC;IAED;;;;;;;OAOG;IACH,SAAgB,gBAAgB,CAAC,QAAiB;QAChD,oBAAoB,GAAG,QAAQ,CAAC;IAClC,CAAC;IAFD,4CAEC;IAED;;OAEG;IACH,SAAgB,gBAAgB;QAC9B,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAFD,4CAEC","sourcesContent":["const _layersByHostId: { [hostId: string]: (() => void)[] } = {};\n\nlet _defaultHostSelector: string | undefined;\n\n/**\n * Register a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function registerLayer(hostId: string, callback: () => void) {\n  if (!_layersByHostId[hostId]) {\n    _layersByHostId[hostId] = [];\n  }\n\n  _layersByHostId[hostId].push(callback);\n}\n\n/**\n * Unregister a layer for a given host id\n * @param hostId Id of the layer host\n * @param layer Layer instance\n */\nexport function unregisterLayer(hostId: string, callback: () => void) {\n  if (_layersByHostId[hostId]) {\n    const idx = _layersByHostId[hostId].indexOf(callback);\n    if (idx >= 0) {\n      _layersByHostId[hostId].splice(idx, 1);\n      if (_layersByHostId[hostId].length === 0) {\n        delete _layersByHostId[hostId];\n      }\n    }\n  }\n}\n\n/**\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\n * care about the specific host.\n */\nexport function notifyHostChanged(id: string) {\n  if (_layersByHostId[id]) {\n    _layersByHostId[id].forEach(callback => callback());\n  }\n}\n\n/**\n * Sets the default target selector to use when determining the host in which\n * Layered content will be injected into. If not provided, an element will be\n * created at the end of the document body.\n *\n * Passing in a falsey value will clear the default target and reset back to\n * using a created element at the end of document body.\n */\nexport function setDefaultTarget(selector?: string) {\n  _defaultHostSelector = selector;\n}\n\n/**\n * Get the default target selector when determining a host\n */\nexport function getDefaultTarget(): string | undefined {\n  return _defaultHostSelector;\n}\n"]}