{"version":3,"file":"MarqueeSelection.types.js","sourceRoot":"../src/","sources":["components/MarqueeSelection/MarqueeSelection.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { ISelection } from '../../utilities/selection/interfaces';\r\nimport { ITheme, IStyle } from '../../Styling';\r\nimport { IRefObject, IStyleFunction } from '../../Utilities';\r\n\r\nexport interface IMarqueeSelection {}\r\n\r\nexport interface IMarqueeSelectionProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * Optional callback to access the IMarqueeSelection interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IMarqueeSelection>;\r\n\r\n  /**\r\n   * The selection object to interact with when updating selection changes.\r\n   */\r\n  selection: ISelection;\r\n\r\n  /**\r\n   * Optional props to mix into the root DIV element.\r\n   */\r\n  rootProps?: React.HTMLAttributes<HTMLDivElement>;\r\n\r\n  /**\r\n   * Optional callback that is called, when the mouse down event occurs, in order to determine\r\n   * if we should start a marquee selection. If true is returned, we will cancel the mousedown\r\n   * event to prevent upstream mousedown handlers from executing.\r\n   */\r\n  onShouldStartSelection?: (ev: MouseEvent) => boolean;\r\n\r\n  /**\r\n   * Optional flag to control the enabled state of marquee selection. This allows you to render\r\n   * it and have events all ready to go, but conditionally disable it. That way transitioning\r\n   * between enabled/disabled generate no difference in the DOM.\r\n   * @defaultvalue true\r\n   */\r\n  isEnabled?: boolean;\r\n\r\n  /**\r\n   * Optional flag to restrict the drag rect to the root element, instead of allowing the drag\r\n   * rect to start outside of the root element boundaries.\r\n   * @defaultvalue false\r\n   */\r\n  isDraggingConstrainedToRoot?: boolean;\r\n\r\n  /**\r\n   * Additional CSS class(es) to apply to the MarqueeSelection.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Theme (provided through customization.)\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>;\r\n}\r\n\r\nexport interface IMarqueeSelectionStyleProps {\r\n  theme: ITheme;\r\n  className?: string;\r\n}\r\n\r\nexport interface IMarqueeSelectionStyles {\r\n  root?: IStyle;\r\n  dragMask?: IStyle;\r\n  box?: IStyle;\r\n  boxFill?: IStyle;\r\n}\r\n"]}