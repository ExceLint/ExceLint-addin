{"version":3,"file":"Text.view.js","sourceRoot":"../src/","sources":["components/Text/Text.view.tsx"],"names":[],"mappings":";;;IAMa,QAAA,QAAQ,GAA2B,UAAA,KAAK;QACnD,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC9C,OAAO,IAAI,CAAC;SACb;QAEO,IAAA,mBAAK,EAAE,2BAAS,EAAE,aAAqB,EAArB,sCAAqB,EAAE,uBAAO,EAAE,qBAAM,EAAE,+EAAO,CAAW;QAEpF,IAAM,KAAK,GAAG,qBAAQ,CAAyB,KAAK,EAAE;YACpD,IAAI,EAAE,QAAQ;SACf,CAAC,CAAC;QAEH,OAAO,uBAAC,KAAK,CAAC,IAAI,uBAAK,0BAAc,CAAC,IAAI,EAAE,iCAAqB,CAAC,EAAI,CAAC;IACzE,CAAC,CAAC","sourcesContent":["/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, getSlots } from '../../Foundation';\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { ITextComponent, ITextProps, ITextSlots } from './Text.types';\n\nexport const TextView: ITextComponent['view'] = props => {\n  if (React.Children.count(props.children) === 0) {\n    return null;\n  }\n\n  const { block, className, as: RootType = 'span', variant, nowrap, ...rest } = props;\n\n  const Slots = getSlots<ITextProps, ITextSlots>(props, {\n    root: RootType,\n  });\n\n  return <Slots.root {...getNativeProps(rest, htmlElementProperties)} />;\n};\n"]}