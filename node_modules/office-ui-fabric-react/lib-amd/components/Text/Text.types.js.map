{"version":3,"file":"Text.types.js","sourceRoot":"../src/","sources":["components/Text/Text.types.tsx"],"names":[],"mappings":"","sourcesContent":["import { IComponentStyles, IHTMLSlot, ISlotProp, IComponent, IStyleableComponentProps } from '../../Foundation';\r\nimport { IFontStyles } from '../../Styling';\r\n\r\nexport type ITextComponent = IComponent<ITextProps, ITextTokens, ITextStyles>;\r\n\r\n// These types are redundant with ITextComponent but are needed until TS function return widening issue is resolved:\r\n// https://github.com/Microsoft/TypeScript/issues/241\r\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\r\nexport type ITextTokenReturnType = ReturnType<Extract<ITextComponent['tokens'], Function>>;\r\nexport type ITextStylesReturnType = ReturnType<Extract<ITextComponent['styles'], Function>>;\r\n\r\nexport type ITextSlot = ISlotProp<ITextProps, React.ReactNode>;\r\n\r\nexport interface ITextSlots {\r\n  root?: IHTMLSlot;\r\n}\r\n\r\n// Inputs to the component\r\nexport interface ITextProps\r\n  extends ITextSlots,\r\n    IStyleableComponentProps<ITextProps, ITextTokens, ITextStyles>,\r\n    React.HTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Optionally render the component as another component type or primitive.\r\n   */\r\n  as?: React.ReactType<React.HTMLAttributes<HTMLElement>>;\r\n\r\n  /**\r\n   * Optional font type for Text.\r\n   */\r\n  variant?: keyof IFontStyles;\r\n\r\n  /**\r\n   * Whether the text is displayed as a block element.\r\n   *\r\n   * Note that in order for ellipsis on overflow to work properly,\r\n   * `block` and `nowrap` should be set to true.\r\n   */\r\n  block?: boolean;\r\n\r\n  /**\r\n   * Whether the text is not wrapped.\r\n   *\r\n   * Note that in order for ellipsis on overflow to work properly,\r\n   * `block` and `nowrap` should be set to true.\r\n   */\r\n  nowrap?: boolean;\r\n}\r\n\r\nexport interface ITextTokens {}\r\n\r\nexport type ITextStyles = IComponentStyles<ITextSlots>;\r\n"]}