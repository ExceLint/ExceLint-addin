{"version":3,"file":"BasePicker.styles.js","sourceRoot":"../src/","sources":["components/pickers/BasePicker.styles.ts"],"names":[],"mappings":";;;IAGA,IAAM,gBAAgB,GAAG;QACvB,IAAI,EAAE,eAAe;QACrB,IAAI,EAAE,oBAAoB;QAC1B,YAAY,EAAE,4BAA4B;QAC1C,KAAK,EAAE,qBAAqB;KAC7B,CAAC;IAEF,mBAA0B,KAA4B;QAC5C,IAAA,2BAAS,EAAE,mBAAK,EAAE,2BAAS,EAAE,qCAAc,EAAE,yBAAQ,CAAW;QAExE,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;SACtF;QACO,IAAA,qCAAc,CAAW;QACzB,IAAA,wCAAW,EAAE,sDAAkB,EAAE,wDAAmB,CAAoB;QAEhF,IAAM,UAAU,GAAG,6BAAmB,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QAEhE,sHAAsH;QACtH,mIAAmI;QACnI,6EAA6E;QAC7E,qHAAqH;QACrH,IAAM,oBAAoB,GAAG,2BAA2B,CAAC;QAEzD,OAAO;YACL,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC;YAClC,IAAI,EAAE;gBACJ,UAAU,CAAC,IAAI;gBACf;oBACE,OAAO,EAAE,MAAM;oBACf,QAAQ,EAAE,UAAU;oBACpB,QAAQ,EAAE,MAAM;oBAChB,UAAU,EAAE,QAAQ;oBACpB,SAAS,EAAE,YAAY;oBACvB,QAAQ,EAAE,GAAG;oBACb,SAAS,EAAE,EAAE;oBACb,MAAM,EAAE,eAAa,WAAa;iBACnC;gBACD,CAAC,SAAS;oBACR,CAAC,QAAQ,IAAI;oBACX,SAAS,EAAE;wBACT,QAAQ,EAAE;4BACR,WAAW,EAAE,kBAAkB;yBAChC;qBACF;iBACF;gBACH,SAAS;oBACP,CAAC,QAAQ,IAAI;oBACX,WAAW,EAAE,mBAAmB;iBACjC;gBACH,QAAQ,IAAI;oBACV,WAAW,EAAE,aAAa;oBAC1B,SAAS;4BACP,QAAQ,EAAE;gCACR,OAAO,EAAE,IAAI;gCACb,QAAQ,EAAE,UAAU;gCACpB,GAAG,EAAE,CAAC;gCACN,KAAK,EAAE,CAAC;gCACR,MAAM,EAAE,CAAC;gCACT,IAAI,EAAE,CAAC;gCACP,UAAU,EAAE,oBAAoB;6BACjC;;wBACD,GAAC,8BAAoB,IAAG;4BACtB,WAAW,EAAE,UAAU;4BACvB,SAAS,EAAE;gCACT,QAAQ,EAAE;oCACR,UAAU,EAAE,MAAM;iCACnB;6BACF;yBACF;2BACF;iBACF;aACF;YACD,YAAY,EAAE;gBACZ,UAAU,CAAC,YAAY;gBACvB;oBACE,OAAO,EAAE,MAAM;oBACf,QAAQ,EAAE,MAAM;oBAChB,QAAQ,EAAE,MAAM;iBACjB;aACF;YACD,KAAK,EAAE;gBACL,UAAU,CAAC,KAAK;gBAChB;oBACE,MAAM,EAAE,EAAE;oBACV,MAAM,EAAE,MAAM;oBACd,QAAQ,EAAE,CAAC;oBACX,OAAO,EAAE,MAAM;oBACf,OAAO,EAAE,SAAS;oBAClB,SAAS,EAAE,UAAU;iBACtB;gBACD,cAAc;aACf;YACD,gBAAgB,EAAE,4BAAkB;SACrC,CAAC;;IACJ,CAAC;IAxFD,8BAwFC","sourcesContent":["import { getGlobalClassNames, hiddenContentStyle, HighContrastSelector } from '../../Styling';\r\nimport { IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\r\n\r\nconst GlobalClassNames = {\r\n  root: 'ms-BasePicker',\r\n  text: 'ms-BasePicker-text',\r\n  itemsWrapper: 'ms-BasePicker-itemsWrapper',\r\n  input: 'ms-BasePicker-input'\r\n};\r\n\r\nexport function getStyles(props: IBasePickerStyleProps): IBasePickerStyles {\r\n  const { className, theme, isFocused, inputClassName, disabled } = props;\r\n\r\n  if (!theme) {\r\n    throw new Error('theme is undefined or null in base BasePicker getStyles function.');\r\n  }\r\n  const { semanticColors } = theme;\r\n  const { inputBorder, inputBorderHovered, inputFocusBorderAlt } = semanticColors;\r\n\r\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\r\n\r\n  // The following lines are to create a semi-transparent color overlay for the disabled state with designer's approval.\r\n  // @todo: investigate the performance cost of the calculation below and apply if negligible. Replacing with a static color for now.\r\n  // const rgbColor: IRGB | undefined = cssColor(palette.neutralQuaternaryAlt);\r\n  // const disabledOverlayColor = rgbColor ? `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0.29)` : 'transparent';\r\n  const disabledOverlayColor = 'rgba(218, 218, 218, 0.29)';\r\n\r\n  return {\r\n    root: [classNames.root, className],\r\n    text: [\r\n      classNames.text,\r\n      {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n        boxSizing: 'border-box',\r\n        minWidth: 180,\r\n        minHeight: 30,\r\n        border: `1px solid ${inputBorder}`\r\n      },\r\n      !isFocused &&\r\n        !disabled && {\r\n          selectors: {\r\n            ':hover': {\r\n              borderColor: inputBorderHovered\r\n            }\r\n          }\r\n        },\r\n      isFocused &&\r\n        !disabled && {\r\n          borderColor: inputFocusBorderAlt\r\n        },\r\n      disabled && {\r\n        borderColor: 'transparent',\r\n        selectors: {\r\n          ':after': {\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            background: disabledOverlayColor\r\n          },\r\n          [HighContrastSelector]: {\r\n            borderColor: 'GrayText',\r\n            selectors: {\r\n              ':after': {\r\n                background: 'none'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    ],\r\n    itemsWrapper: [\r\n      classNames.itemsWrapper,\r\n      {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        maxWidth: '100%'\r\n      }\r\n    ],\r\n    input: [\r\n      classNames.input,\r\n      {\r\n        height: 30,\r\n        border: 'none',\r\n        flexGrow: 1,\r\n        outline: 'none',\r\n        padding: '0 6px 0',\r\n        alignSelf: 'flex-end'\r\n      },\r\n      inputClassName\r\n    ],\r\n    screenReaderText: hiddenContentStyle\r\n  };\r\n}\r\n"]}