{"version":3,"file":"SuggestionsItem.types.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/SuggestionsItem.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle, ITheme } from '../../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../../Utilities';\r\nimport { ISuggestionModel } from './Suggestions.types';\r\n\r\n/** SuggestionItem component. */\r\nexport interface ISuggestionsItem {}\r\n\r\n/**\r\n * Suggestion item props. Refers to the each individual suggested items rendered within Suggestions callout.\r\n * Type T is the type of the item that is displayed.\r\n */\r\nexport interface ISuggestionItemProps<T> {\r\n  /**\r\n   * Optional callback to access the ISuggestionItem interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<ISuggestionsItem>;\r\n\r\n  /** Individual suggestion object containing its properties. */\r\n  suggestionModel: ISuggestionModel<T>;\r\n\r\n  /** Optional renderer to override the default one for each type of picker. */\r\n  RenderSuggestion: (item: T, suggestionItemProps?: ISuggestionItemProps<T>) => JSX.Element;\r\n\r\n  /** Callback for when the user clicks on the suggestion. */\r\n  onClick: (ev: React.MouseEvent<HTMLButtonElement>) => void;\r\n\r\n  /** Callback for when the item is removed from the array of suggested items. */\r\n  onRemoveItem: (ev: React.MouseEvent<HTMLButtonElement>) => void;\r\n\r\n  /** Optional className for the root element of the suggestion item. */\r\n  className?: string;\r\n\r\n  /** Unique id of the suggested item. */\r\n  id?: string;\r\n\r\n  /** Whether the remove button should be rendered or not. */\r\n  showRemoveButton?: boolean;\r\n\r\n  /** An override for the 'selected' property of the SuggestionModel. */\r\n  isSelectedOverride?: boolean;\r\n\r\n  /**\r\n   * The ARIA label for the button to remove the suggestion from the list.\r\n   */\r\n  removeButtonAriaLabel?: string;\r\n\r\n  /** Call to provide customized styling that will layer on top of the variant rules. */\r\n  styles?: IStyleFunctionOrObject<ISuggestionsItemStyleProps, ISuggestionsItemStyles>;\r\n\r\n  /** Theme provided by High-Order Component. */\r\n  theme?: ITheme;\r\n}\r\n\r\n/** The props needed to construct SuggestionItem styles. */\r\nexport type ISuggestionsItemStyleProps = Required<Pick<ISuggestionItemProps<any>, 'theme'>> &\r\n  Pick<ISuggestionItemProps<any>, 'className'> & {\r\n    /** Whether the suggestion item is selected or not. */\r\n    suggested?: boolean;\r\n  };\r\n\r\n/** Represents the stylable areas of the SuggestionItem. */\r\nexport interface ISuggestionsItemStyles {\r\n  /** Root element of the suggested item. */\r\n  root: IStyle;\r\n\r\n  /** Refers to the CommandButton holding the content of the suggested item. */\r\n  itemButton: IStyle;\r\n\r\n  /** Refers to the remove button in case it's rendered. */\r\n  closeButton: IStyle;\r\n}\r\n"]}