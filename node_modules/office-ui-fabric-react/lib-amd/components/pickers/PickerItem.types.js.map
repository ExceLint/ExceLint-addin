{"version":3,"file":"PickerItem.types.js","sourceRoot":"../src/","sources":["components/pickers/PickerItem.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IRefObject } from '../../Utilities';\r\n\r\n/** PickerItem component. */\r\nexport interface IPickerItem {}\r\n\r\n/** PickerItem props common for any type of items. */\r\nexport interface IPickerItemProps<T> extends React.AllHTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Optional callback to access the IPickerItem interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IPickerItem>;\r\n\r\n  /** The item of Type T (Persona, Tag, or any other custom item provided). */\r\n  item: T;\r\n\r\n  /** Index number of the item in the array of picked items. */\r\n  index: number;\r\n\r\n  /** Wether the picked item is selected or not. */\r\n  selected?: boolean;\r\n\r\n  /** Callback issued when the item is removed from the array of picked items. */\r\n  onRemoveItem?: () => void;\r\n\r\n  /**\r\n   * Internal Use only, gives a callback to the renderer to call when an item has changed.\r\n   * This allows the base picker to keep track of changes in the items.\r\n   */\r\n  onItemChange?: (item: T, index: number) => void;\r\n\r\n  /** Unique key for each picked item. */\r\n  key?: string | number;\r\n\r\n  /** Aria-label for the picked item remove button. */\r\n  removeButtonAriaLabel?: string;\r\n}\r\n"]}