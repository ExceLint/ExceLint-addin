{"version":3,"file":"BasePicker.types.js","sourceRoot":"../src/","sources":["components/pickers/BasePicker.types.ts"],"names":[],"mappings":";;;IAwNA,4CAA4C;IAC5C,IAAY,eASX;IATD,WAAY,eAAe;QACzB,2BAA2B;QAC3B,uDAAK,CAAA;QAEL,wEAAwE;QACxE,2DAAO,CAAA;QAEP,6BAA6B;QAC7B,2DAAO,CAAA;IACT,CAAC,EATW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAS1B","sourcesContent":["import * as React from 'react';\r\nimport { IPickerItemProps } from './PickerItem.types';\r\nimport { IPersonaProps } from '../Persona/Persona.types';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { ISuggestionModel, ISuggestionsProps } from './Suggestions/Suggestions.types';\r\nimport { BaseAutoFill } from './AutoFill/BaseAutoFill';\r\nimport { ICalloutProps } from '../../Callout';\r\nimport { ITheme, IStyle } from '../../Styling';\r\n\r\n/** BasePicker component. */\r\nexport interface IBasePicker<T> {\r\n  /** Gets the current value of the input. */\r\n  items: T[] | undefined;\r\n\r\n  /** Sets focus to the focus zone. */\r\n  focus: () => void;\r\n\r\n  /** Set focus to the input */\r\n  focusInput: () => void;\r\n}\r\n\r\n// Type T is the type of the item that is displayed\r\n// and searched for by the picker. For example, if the picker is\r\n// displaying persona's then type T could either be of Persona or IPersona props\r\nexport interface IBasePickerProps<T> extends React.Props<any> {\r\n  /**\r\n   * Optional callback to access the IBasePicker interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IBasePicker<T>>;\r\n\r\n  /**\r\n   * Function that specifies how the selected item will appear.\r\n   */\r\n  onRenderItem?: (props: IPickerItemProps<T>) => JSX.Element;\r\n\r\n  /**\r\n   * Function that specifies how an individual suggestion item will appear.\r\n   */\r\n  onRenderSuggestionsItem?: (props: T, itemProps: any) => JSX.Element;\r\n\r\n  /**\r\n   * A callback for what should happen when a person types text into the input.\r\n   * Returns the already selected items so the resolver can filter them out.\r\n   * If used in conjunction with resolveDelay this will ony kick off after the delay throttle.\r\n   */\r\n  onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\r\n\r\n  /**\r\n   * The delay time in ms before resolving suggestions, which is kicked off when input has been changed.\r\n   * e.g. If a second input change happens within the resolveDelay time, the timer will start over.\r\n   * Only until after the timer completes will onResolveSuggestions be called.\r\n   */\r\n  resolveDelay?: number;\r\n\r\n  /**\r\n   * A callback for what should happen when a user clicks the input.\r\n   */\r\n  onEmptyInputFocus?: (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\r\n\r\n  /**\r\n   * Initial items that have already been selected and should appear in the people picker.\r\n   */\r\n  defaultSelectedItems?: T[];\r\n\r\n  /**\r\n   * A callback for when the selected list of items changes.\r\n   */\r\n  onChange?: (items?: T[]) => void;\r\n\r\n  /**\r\n   * A callback for when the user put focus on the picker\r\n   */\r\n  onFocus?: React.FocusEventHandler<HTMLInputElement | BaseAutoFill>;\r\n\r\n  /**\r\n   * A callback for when the user moves the focus away from the picker\r\n   */\r\n  onBlur?: React.FocusEventHandler<HTMLInputElement | BaseAutoFill>;\r\n\r\n  /**\r\n   * A callback to get text from an item. Used to autofill text in the pickers.\r\n   */\r\n  getTextFromItem?: (item: T, currentValue?: string) => string;\r\n\r\n  /**\r\n   * A callback that gets the rest of the results when a user clicks get more results.\r\n   */\r\n  onGetMoreResults?: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;\r\n\r\n  /**\r\n   * ClassName for the picker.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * The properties that will get passed to the Suggestions component.\r\n   */\r\n  pickerSuggestionsProps?: IBasePickerSuggestionsProps;\r\n\r\n  /**\r\n   * The properties that will get passed to the Callout component.\r\n   */\r\n  pickerCalloutProps?: ICalloutProps;\r\n\r\n  /**\r\n   * AutoFill input native props\r\n   * @defaultvalue undefined\r\n   */\r\n  inputProps?: IInputProps;\r\n\r\n  /**\r\n   * A callback for when a persona is removed from the suggestion list\r\n   */\r\n  onRemoveSuggestion?: (item: IPersonaProps) => void;\r\n\r\n  /**\r\n   * A function used to validate if raw text entered into the well can be added into the selected items list\r\n   */\r\n  onValidateInput?: (input: string) => ValidationState;\r\n\r\n  /**\r\n   * The text to display while searching for more results in a limited suggestions list\r\n   */\r\n  searchingText?: ((props: { input: string }) => string) | string;\r\n\r\n  /**\r\n   * Flag for disabling the picker.\r\n   * @defaultvalue false\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Restrict the amount of selectable items.\r\n   * @defaultvalue undefined\r\n   */\r\n  itemLimit?: number;\r\n\r\n  /**\r\n   * Function that specifies how arbitrary text entered into the well is handled.\r\n   */\r\n  createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T> | T;\r\n\r\n  /**\r\n   * Aria label for the \"X\" button in the selected item component.\r\n   * @defaultvalue ''\r\n   */\r\n  removeButtonAriaLabel?: string;\r\n\r\n  /**\r\n   * A callback to process a selection after the user selects something from the picker. If the callback returns null,\r\n   * the item will not be added to the picker.\r\n   */\r\n  onItemSelected?: (selectedItem?: T) => T | PromiseLike<T> | null;\r\n\r\n  /**\r\n   * The items that the base picker should currently display as selected.\r\n   * If this is provided then the picker will act as a controlled component.\r\n   */\r\n  selectedItems?: T[];\r\n\r\n  /**\r\n   * A callback used to modify the input string.\r\n   */\r\n  onInputChange?: (input: string) => string;\r\n\r\n  /**\r\n   * A callback to override the default behavior of adding the selected suggestion on dismiss.\r\n   */\r\n  onDismiss?: (ev?: any, selectedItem?: T) => void;\r\n\r\n  /**\r\n   * Adds an additional alert for the currently selected suggestion. This prop should be set to true for IE11 and below, as it\r\n   * enables proper screen reader behavior for each suggestion (since aria-activedescendant does not work with IE11).\r\n   * It should not be set for modern browsers (Edge, Chrome).\r\n   * @defaultvalue false\r\n   */\r\n  enableSelectedSuggestionAlert?: boolean;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IBasePickerStyleProps, IBasePickerStyles>;\r\n\r\n  /**\r\n   * Theme provided by styled() function.\r\n   */\r\n  theme?: ITheme;\r\n}\r\n\r\n/**\r\n * Subset of picker options that may be legally passed through a picker to its\r\n * internal Suggestions component.\r\n */\r\nexport interface IBasePickerSuggestionsProps<T = any>\r\n  extends Pick<\r\n    ISuggestionsProps<T>,\r\n    | 'onRenderNoResultFound'\r\n    | 'suggestionsHeaderText'\r\n    | 'mostRecentlyUsedHeaderText'\r\n    | 'noResultsFoundText'\r\n    | 'className'\r\n    | 'suggestionsClassName'\r\n    | 'suggestionsItemClassName'\r\n    | 'searchForMoreText'\r\n    | 'forceResolveText'\r\n    | 'loadingText'\r\n    | 'searchingText'\r\n    | 'resultsFooterFull'\r\n    | 'resultsFooter'\r\n    | 'resultsMaximumNumber'\r\n    | 'showRemoveButtons'\r\n    | 'suggestionsAvailableAlertText'\r\n    | 'suggestionsContainerAriaLabel'\r\n  > {}\r\n\r\n/** Validation state of the user's input. */\r\nexport enum ValidationState {\r\n  /** User input is valid. */\r\n  valid,\r\n\r\n  /** User input could be valid or invalid, its state is not known yet. */\r\n  warning,\r\n\r\n  /** User input is invalid. */\r\n  invalid\r\n}\r\n\r\n/** Pickers' input props interface */\r\nexport interface IInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  /**\r\n   * Screen reader label to apply to an input element.\r\n   */\r\n  'aria-label'?: string;\r\n\r\n  /**\r\n   * The default value to be visible when the autofill first created.\r\n   * This is different than placeholder text because the placeholder text will disappear and re-appear. This\r\n   * text persists until deleted or changed.\r\n   */\r\n  defaultVisibleValue?: string;\r\n}\r\n\r\n/** The props needed to construct styles. */\r\nexport type IBasePickerStyleProps = Pick<IBasePickerProps<any>, 'theme' | 'className' | 'disabled'> & {\r\n  /** Whether text style area is focused */\r\n  isFocused?: boolean;\r\n\r\n  /** Optional pickerInput className */\r\n  inputClassName?: string;\r\n};\r\n\r\n/** Represents the stylable areas of the control. */\r\nexport interface IBasePickerStyles {\r\n  /** Root element of any picker extending from BasePicker (wraps all the elements). */\r\n  root: IStyle;\r\n\r\n  /** Refers to the elements already selected(picked) wrapped by `itemsWrapper` along with the input to type new selection. */\r\n  text: IStyle;\r\n\r\n  /** Refers to the items already selected(picked). */\r\n  itemsWrapper: IStyle;\r\n\r\n  /** Refers to the input were to type new selections(picks). */\r\n  input: IStyle;\r\n\r\n  /** Refers to helper element used for accessibility tools (hidden from view on screen). */\r\n  screenReaderText: IStyle;\r\n}\r\n"]}