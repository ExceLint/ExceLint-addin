{"version":3,"file":"BasePicker.js","sourceRoot":"../src/","sources":["components/pickers/BasePicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, KeyCodes, css, elementContains, getId, classNamesFunction, styled } from '../../Utilities';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Callout, DirectionalHint } from '../../Callout';\r\nimport { Selection, SelectionZone, SelectionMode } from '../../utilities/selection/index';\r\nimport { Suggestions } from './Suggestions/Suggestions';\r\nimport { ISuggestions, ISuggestionsProps, ISuggestionsStyleProps, ISuggestionsStyles } from './Suggestions/Suggestions.types';\r\nimport { getStyles as suggestionsStyles } from './Suggestions/Suggestions.styles';\r\nimport { SuggestionsController } from './Suggestions/SuggestionsController';\r\nimport { IBasePicker, IBasePickerProps, ValidationState, IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\r\nimport { IAutofill, Autofill } from '../Autofill/index';\r\nimport { IPickerItemProps } from './PickerItem.types';\r\nimport { IPersonaProps } from '../Persona/Persona.types';\r\nimport * as stylesImport from './BasePicker.scss';\r\nconst legacyStyles: any = stylesImport;\r\n\r\nexport interface IBasePickerState {\r\n  items?: any;\r\n  suggestedDisplayValue?: string;\r\n  moreSuggestionsAvailable?: boolean;\r\n  isFocused?: boolean;\r\n  isSearching?: boolean;\r\n  isMostRecentlyUsedVisible?: boolean;\r\n  suggestionsVisible?: boolean;\r\n  suggestionsLoading?: boolean;\r\n  isResultsFooterVisible?: boolean;\r\n  selectedIndices?: number[];\r\n}\r\n\r\n/**\r\n * Aria id's for internal picker components\r\n */\r\nexport type IPickerAriaIds = {\r\n  /**\r\n   * Aria id for selected suggestion alert component\r\n   */\r\n  selectedSuggestionAlert: string;\r\n  /**\r\n   * Aria id for selected items container component\r\n   */\r\n  selectedItems: string;\r\n  /**\r\n   * Aria id for suggestions list component\r\n   */\r\n  suggestionList: string;\r\n};\r\n\r\nconst getClassNames = classNamesFunction<IBasePickerStyleProps, IBasePickerStyles>();\r\n\r\nexport class BasePicker<T, P extends IBasePickerProps<T>> extends BaseComponent<P, IBasePickerState> implements IBasePicker<T> {\r\n  // Refs\r\n  protected root = React.createRef<HTMLDivElement>();\r\n  protected input = React.createRef<IAutofill>();\r\n  protected focusZone = React.createRef<IFocusZone>();\r\n  protected suggestionElement = React.createRef<ISuggestions<T>>();\r\n\r\n  protected selection: Selection;\r\n  protected suggestionStore: SuggestionsController<T>;\r\n  protected SuggestionOfProperType = Suggestions as new (props: ISuggestionsProps<T>) => Suggestions<T>;\r\n  protected currentPromise: PromiseLike<any> | undefined;\r\n  protected _ariaMap: IPickerAriaIds;\r\n  private _id: string;\r\n\r\n  constructor(basePickerProps: P) {\r\n    super(basePickerProps);\r\n\r\n    const items: T[] = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\r\n\r\n    this._id = getId();\r\n    this._ariaMap = {\r\n      selectedItems: `selected-items-${this._id}`,\r\n      selectedSuggestionAlert: `selected-suggestion-alert-${this._id}`,\r\n      suggestionList: `suggestion-list-${this._id}`\r\n    };\r\n    this.suggestionStore = new SuggestionsController<T>();\r\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\r\n    this.selection.setItems(items);\r\n    this.state = {\r\n      items: items,\r\n      suggestedDisplayValue: '',\r\n      isMostRecentlyUsedVisible: false,\r\n      moreSuggestionsAvailable: false,\r\n      isFocused: false,\r\n      isSearching: false,\r\n      selectedIndices: []\r\n    };\r\n  }\r\n\r\n  public get items(): T[] {\r\n    return this.state.items;\r\n  }\r\n\r\n  public componentWillUpdate(newProps: P, newState: IBasePickerState): void {\r\n    if (newState.items && newState.items !== this.state.items) {\r\n      this.selection.setItems(newState.items);\r\n    }\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this.selection.setItems(this.state.items);\r\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: P): void {\r\n    const newItems = newProps.selectedItems;\r\n\r\n    if (newItems) {\r\n      let focusIndex: number;\r\n\r\n      // If there are less new items than old items then something was removed and we\r\n      // should try to keep focus consistent\r\n      if (newItems.length < this.state.items.length) {\r\n        focusIndex = this.state.items.indexOf(this.selection.getSelection()[0]);\r\n      }\r\n\r\n      this.setState(\r\n        {\r\n          items: newProps.selectedItems\r\n        },\r\n        () => {\r\n          // Only update the focus if this component is currently focused to ensure that the basepicker\r\n          // doesn't steal focus from something else.\r\n          if (this.state.isFocused) {\r\n            // Need to reset focus in the same that way that we do if an item is selected by a non-controlled component\r\n            // See _onSelectedItemsUpdated.\r\n            this.resetFocus(focusIndex);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    super.componentWillUnmount();\r\n    if (this.currentPromise) {\r\n      this.currentPromise = undefined;\r\n    }\r\n  }\r\n\r\n  public focus() {\r\n    if (this.focusZone.current) {\r\n      this.focusZone.current.focus();\r\n    }\r\n  }\r\n\r\n  public focusInput() {\r\n    if (this.input.current) {\r\n      this.input.current.focus();\r\n    }\r\n  }\r\n\r\n  public dismissSuggestions = (ev?: any): void => {\r\n    const selectItemFunction = () => {\r\n      if (this.props.onDismiss) {\r\n        this.props.onDismiss(ev, this.suggestionStore.currentSuggestion ? this.suggestionStore.currentSuggestion.item : undefined);\r\n      }\r\n\r\n      if (!ev || (ev && !ev.defaultPrevented)) {\r\n        // Select the first suggestion if one is available when user leaves.\r\n        if (this.canAddItems() && this.suggestionStore.hasSelectedSuggestion() && this.state.suggestedDisplayValue) {\r\n          this.addItemByIndex(0);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (this.currentPromise) {\r\n      this.currentPromise.then(() => selectItemFunction());\r\n    } else {\r\n      selectItemFunction();\r\n    }\r\n    this.setState({ suggestionsVisible: false });\r\n  };\r\n\r\n  public completeSuggestion() {\r\n    if (this.suggestionStore.hasSelectedSuggestion() && this.input.current) {\r\n      this.addItem(this.suggestionStore.currentSuggestion!.item);\r\n      this.updateValue('');\r\n      this.input.current.clear();\r\n    }\r\n  }\r\n\r\n  public refocusSuggestions = (keyCode: KeyCodes): void => {\r\n    this.resetFocus();\r\n    if (this.suggestionStore.suggestions && this.suggestionStore.suggestions.length > 0) {\r\n      if (keyCode === KeyCodes.up) {\r\n        this.suggestionStore.setSelectedSuggestion(this.suggestionStore.suggestions.length - 1);\r\n      } else if (keyCode === KeyCodes.down) {\r\n        this.suggestionStore.setSelectedSuggestion(0);\r\n      }\r\n    }\r\n  };\r\n\r\n  public render(): JSX.Element {\r\n    const { suggestedDisplayValue, isFocused, items } = this.state;\r\n    const { className, inputProps, disabled, theme, styles } = this.props;\r\n\r\n    const selectedSuggestionAlertId = this.props.enableSelectedSuggestionAlert ? this._ariaMap.selectedSuggestionAlert : '';\r\n    const suggestionsAvailable = this.state.suggestionsVisible ? this._ariaMap.suggestionList : '';\r\n\r\n    // TODO\r\n    // Clean this up by leaving only the first part after removing support for SASS.\r\n    // Currently we can not remove the SASS styles from BasePicker class because it\r\n    // might be used by consumers who created custom pickers from extending from\r\n    // this base class and have not used the new 'styles' prop.\r\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\r\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\r\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\r\n    // then we just use the old SASS styles instead.\r\n    const classNames: Partial<IProcessedStyleSet<IBasePickerStyles>> = styles\r\n      ? getClassNames(styles, {\r\n          theme,\r\n          className,\r\n          isFocused,\r\n          disabled,\r\n          inputClassName: inputProps && inputProps.className\r\n        })\r\n      : {\r\n          root: css('ms-BasePicker', className ? className : ''),\r\n          text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\r\n          itemsWrapper: legacyStyles.pickerItems,\r\n          input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\r\n          screenReaderText: legacyStyles.screenReaderOnly\r\n        };\r\n\r\n    return (\r\n      <div ref={this.root} className={classNames.root} onKeyDown={this.onKeyDown} onBlur={this.onBlur}>\r\n        <FocusZone\r\n          componentRef={this.focusZone}\r\n          direction={FocusZoneDirection.bidirectional}\r\n          isInnerZoneKeystroke={this._isFocusZoneInnerKeystroke}\r\n        >\r\n          {this.getSuggestionsAlert(classNames.screenReaderText)}\r\n          <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\r\n            <div className={classNames.text}>\r\n              {items.length > 0 && (\r\n                <span id={this._ariaMap.selectedItems} className={classNames.itemsWrapper} role={'list'}>\r\n                  {this.renderItems()}\r\n                </span>\r\n              )}\r\n              {this.canAddItems() && (\r\n                <Autofill\r\n                  spellCheck={false}\r\n                  {...inputProps as any}\r\n                  className={classNames.input}\r\n                  componentRef={this.input}\r\n                  onFocus={this.onInputFocus}\r\n                  onBlur={this.onInputBlur}\r\n                  onInputValueChange={this.onInputChange}\r\n                  suggestedDisplayValue={suggestedDisplayValue}\r\n                  aria-activedescendant={this.getActiveDescendant()}\r\n                  aria-expanded={!!this.state.suggestionsVisible}\r\n                  aria-haspopup=\"true\"\r\n                  aria-describedby={this._ariaMap.selectedItems}\r\n                  autoCapitalize=\"off\"\r\n                  autoComplete=\"off\"\r\n                  role={'combobox'}\r\n                  disabled={disabled}\r\n                  aria-controls={`${suggestionsAvailable} ${selectedSuggestionAlertId}` || undefined}\r\n                  aria-owns={suggestionsAvailable || undefined}\r\n                  aria-autocomplete={'both'}\r\n                  onInputChange={this.props.onInputChange}\r\n                />\r\n              )}\r\n            </div>\r\n          </SelectionZone>\r\n        </FocusZone>\r\n        {this.renderSuggestions()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  protected canAddItems(): boolean {\r\n    const { items } = this.state;\r\n    const { itemLimit } = this.props;\r\n    return itemLimit === undefined || items.length < itemLimit;\r\n  }\r\n\r\n  protected renderSuggestions(): JSX.Element | null {\r\n    const TypedSuggestions = this.SuggestionOfProperType;\r\n\r\n    // TODO:\r\n    // Move this styled component in a separate file and make it available to the public API.\r\n    // This should be done after rewriting pickers to use a composition pattern instead of inheritance.\r\n    const StyledTypedSuggestions = styled<ISuggestionsProps<T>, ISuggestionsStyleProps, ISuggestionsStyles>(\r\n      TypedSuggestions,\r\n      suggestionsStyles,\r\n      undefined,\r\n      { scope: 'Suggestions' }\r\n    );\r\n\r\n    return this.state.suggestionsVisible && this.input ? (\r\n      <Callout\r\n        isBeakVisible={false}\r\n        gapSpace={5}\r\n        target={this.input.current ? this.input.current.inputElement : undefined}\r\n        onDismiss={this.dismissSuggestions}\r\n        directionalHint={DirectionalHint.bottomLeftEdge}\r\n        directionalHintForRTL={DirectionalHint.bottomRightEdge}\r\n        {...this.props.pickerCalloutProps}\r\n      >\r\n        <StyledTypedSuggestions\r\n          onRenderSuggestion={this.props.onRenderSuggestionsItem}\r\n          onSuggestionClick={this.onSuggestionClick}\r\n          onSuggestionRemove={this.onSuggestionRemove}\r\n          suggestions={this.suggestionStore.getSuggestions()}\r\n          componentRef={this.suggestionElement}\r\n          onGetMoreResults={this.onGetMoreResults}\r\n          moreSuggestionsAvailable={this.state.moreSuggestionsAvailable}\r\n          isLoading={this.state.suggestionsLoading}\r\n          isSearching={this.state.isSearching}\r\n          isMostRecentlyUsedVisible={this.state.isMostRecentlyUsedVisible}\r\n          isResultsFooterVisible={this.state.isResultsFooterVisible}\r\n          refocusSuggestions={this.refocusSuggestions}\r\n          removeSuggestionAriaLabel={this.props.removeButtonAriaLabel}\r\n          suggestionsListId={this._ariaMap.suggestionList}\r\n          {...this.props.pickerSuggestionsProps}\r\n        />\r\n      </Callout>\r\n    ) : null;\r\n  }\r\n\r\n  protected renderItems(): JSX.Element[] {\r\n    const { disabled, removeButtonAriaLabel } = this.props;\r\n    const onRenderItem = this.props.onRenderItem as (props: IPickerItemProps<T>) => JSX.Element;\r\n\r\n    const { items, selectedIndices } = this.state;\r\n    return items.map((item: any, index: number) =>\r\n      onRenderItem({\r\n        item,\r\n        index,\r\n        key: item.key ? item.key : index,\r\n        selected: selectedIndices!.indexOf(index) !== -1,\r\n        onRemoveItem: () => this.removeItem(item, true),\r\n        disabled: disabled,\r\n        onItemChange: this.onItemChange,\r\n        removeButtonAriaLabel: removeButtonAriaLabel\r\n      })\r\n    );\r\n  }\r\n\r\n  protected resetFocus(index?: number) {\r\n    const { items } = this.state;\r\n\r\n    if (items.length && index! >= 0) {\r\n      const newEl: HTMLElement | null =\r\n        this.root.current &&\r\n        (this.root.current.querySelectorAll('[data-selection-index]')[Math.min(index!, items.length - 1)] as HTMLElement | null);\r\n      if (newEl && this.focusZone.current) {\r\n        this.focusZone.current.focusElement(newEl);\r\n      }\r\n    } else if (!this.canAddItems()) {\r\n      this.resetFocus(items.length - 1);\r\n    } else {\r\n      if (this.input.current) {\r\n        this.input.current.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  protected onSuggestionSelect() {\r\n    if (this.suggestionStore.currentSuggestion) {\r\n      const currentValue: string = this.input.current ? this.input.current.value : '';\r\n      const itemValue: string = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, currentValue);\r\n      this.setState({ suggestedDisplayValue: itemValue });\r\n    }\r\n  }\r\n\r\n  protected onSelectionChange() {\r\n    this.setState({\r\n      selectedIndices: this.selection.getSelectedIndices()\r\n    });\r\n  }\r\n\r\n  protected updateSuggestions(suggestions: any[]) {\r\n    this.suggestionStore.updateSuggestions(suggestions, 0);\r\n    this.forceUpdate();\r\n  }\r\n\r\n  protected onEmptyInputFocus() {\r\n    const onEmptyInputFocus = this.props.onEmptyInputFocus as (selectedItems?: T[]) => T[] | PromiseLike<T[]>;\r\n    const suggestions: T[] | PromiseLike<T[]> = onEmptyInputFocus(this.state.items);\r\n    this.updateSuggestionsList(suggestions);\r\n  }\r\n\r\n  protected updateValue(updatedValue: string) {\r\n    this._onResolveSuggestions(updatedValue);\r\n  }\r\n\r\n  protected updateSuggestionsList(suggestions: T[] | PromiseLike<T[]>, updatedValue?: string) {\r\n    const suggestionsArray: T[] = suggestions as T[];\r\n    const suggestionsPromiseLike: PromiseLike<T[]> = suggestions as PromiseLike<T[]>;\r\n\r\n    // Check to see if the returned value is an array, if it is then just pass it into the next function .\r\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike. If it is then resolve it asynchronously.\r\n    if (Array.isArray(suggestionsArray)) {\r\n      this._updateAndResolveValue(updatedValue, suggestionsArray);\r\n    } else if (suggestionsPromiseLike && suggestionsPromiseLike.then) {\r\n      this.setState({\r\n        suggestionsLoading: true\r\n      });\r\n\r\n      // Clear suggestions\r\n      this.suggestionStore.updateSuggestions([]);\r\n\r\n      if (updatedValue !== undefined) {\r\n        this.setState({\r\n          suggestionsVisible: this.input.current\r\n            ? this.input.current.value !== '' && this.input.current.inputElement === document.activeElement\r\n            : false\r\n        });\r\n      } else {\r\n        this.setState({\r\n          suggestionsVisible: this.input.current ? this.input.current.inputElement === document.activeElement : false\r\n        });\r\n      }\r\n\r\n      // Ensure that the promise will only use the callback if it was the most recent one.\r\n      const promise: PromiseLike<T[]> = (this.currentPromise = suggestionsPromiseLike);\r\n      promise.then((newSuggestions: T[]) => {\r\n        if (promise === this.currentPromise) {\r\n          this._updateAndResolveValue(updatedValue, newSuggestions);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  protected resolveNewValue(updatedValue: string, suggestions: T[]) {\r\n    this.updateSuggestions(suggestions);\r\n    let itemValue: string | undefined = undefined;\r\n\r\n    if (this.suggestionStore.currentSuggestion) {\r\n      itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, updatedValue);\r\n    }\r\n\r\n    // Only set suggestionloading to false after there has been time for the new suggestions to flow\r\n    // to the suggestions list. This is to ensure that the suggestions are available before aria-activedescendant\r\n    // is set so that screen readers will read out the first selected option.\r\n    this.setState(\r\n      {\r\n        suggestedDisplayValue: itemValue,\r\n        suggestionsVisible: this.input.current\r\n          ? this.input.current.value !== '' && this.input.current.inputElement === document.activeElement\r\n          : false\r\n      },\r\n      () => this.setState({ suggestionsLoading: false })\r\n    );\r\n  }\r\n\r\n  protected onChange(items?: T[]) {\r\n    if (this.props.onChange) {\r\n      (this.props.onChange as any)(items);\r\n    }\r\n  }\r\n\r\n  protected onInputChange = (value: string): void => {\r\n    this.updateValue(value);\r\n    this.setState({\r\n      moreSuggestionsAvailable: true,\r\n      isMostRecentlyUsedVisible: false\r\n    });\r\n  };\r\n\r\n  protected onSuggestionClick = (ev: React.MouseEvent<HTMLElement>, item: any, index: number): void => {\r\n    this.addItemByIndex(index);\r\n    this.setState({ suggestionsVisible: false });\r\n  };\r\n\r\n  protected onSuggestionRemove = (ev: React.MouseEvent<HTMLElement>, item: IPersonaProps, index: number): void => {\r\n    if (this.props.onRemoveSuggestion) {\r\n      (this.props.onRemoveSuggestion as any)(item);\r\n    }\r\n    this.suggestionStore.removeSuggestion(index);\r\n  };\r\n\r\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\r\n    // Only trigger all of the focus if this component isn't already focused.\r\n    // For example when an item is selected or removed from the selected list it should be treated\r\n    // as though the input is still focused.\r\n    if (!this.state.isFocused) {\r\n      this.setState({ isFocused: true });\r\n      this.selection.setAllSelected(false);\r\n      if (this.input.current && this.input.current.value === '' && this.props.onEmptyInputFocus) {\r\n        this.onEmptyInputFocus();\r\n        this.setState({\r\n          isMostRecentlyUsedVisible: true,\r\n          moreSuggestionsAvailable: false,\r\n          suggestionsVisible: true\r\n        });\r\n      } else if (this.input.current && this.input.current.value) {\r\n        this.setState({\r\n          isMostRecentlyUsedVisible: false,\r\n          suggestionsVisible: true\r\n        });\r\n      }\r\n      if (this.props.inputProps && this.props.inputProps.onFocus) {\r\n        this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\r\n      }\r\n    }\r\n  };\r\n\r\n  protected onInputBlur = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\r\n    if (this.props.inputProps && this.props.inputProps.onBlur) {\r\n      this.props.inputProps.onBlur(ev as React.FocusEvent<HTMLInputElement>);\r\n    }\r\n  };\r\n\r\n  protected onBlur = (ev: React.FocusEvent<HTMLElement | Autofill>): void => {\r\n    if (this.state.isFocused) {\r\n      // Only blur the entire component if an unrelated element gets focus. Otherwise treat it as though it still has focus.\r\n      // Do nothing if the blur is coming from something\r\n      // inside the comboBox root or the comboBox menu since\r\n      // it we are not really bluring from the whole comboBox\r\n      let relatedTarget: EventTarget | null = ev.relatedTarget;\r\n\r\n      if (ev.relatedTarget === null) {\r\n        // In IE11, due to lack of support, event.relatedTarget is always\r\n        // null making every onBlur call to be \"outside\" of the ComboBox\r\n        // even when it's not. Using document.activeElement is another way\r\n        // for us to be able to get what the relatedTarget without relying\r\n        // on the event\r\n        relatedTarget = document.activeElement;\r\n      }\r\n      if (relatedTarget && !elementContains(this.root.current!, relatedTarget as HTMLElement)) {\r\n        this.setState({ isFocused: false });\r\n        if (this.props.onBlur) {\r\n          this.props.onBlur(ev as React.FocusEvent<HTMLInputElement>);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  protected onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\r\n    const keyCode = ev.which;\r\n    switch (keyCode) {\r\n      case KeyCodes.escape:\r\n        if (this.state.suggestionsVisible) {\r\n          this.setState({ suggestionsVisible: false });\r\n          ev.preventDefault();\r\n          ev.stopPropagation();\r\n        }\r\n        break;\r\n\r\n      case KeyCodes.tab:\r\n      case KeyCodes.enter:\r\n        if (this.suggestionElement.current && this.suggestionElement.current.hasSuggestedActionSelected()) {\r\n          this.suggestionElement.current.executeSelectedAction();\r\n        } else if (!ev.shiftKey && this.suggestionStore.hasSelectedSuggestion() && this.state.suggestionsVisible) {\r\n          this.completeSuggestion();\r\n          ev.preventDefault();\r\n          ev.stopPropagation();\r\n        } else {\r\n          this._onValidateInput();\r\n        }\r\n\r\n        break;\r\n\r\n      case KeyCodes.backspace:\r\n        if (!this.props.disabled) {\r\n          this.onBackspace(ev);\r\n        }\r\n        ev.stopPropagation();\r\n        break;\r\n\r\n      case KeyCodes.del:\r\n        if (!this.props.disabled) {\r\n          if (\r\n            this.input.current &&\r\n            ev.target === this.input.current.inputElement &&\r\n            this.state.suggestionsVisible &&\r\n            this.suggestionStore.currentIndex !== -1\r\n          ) {\r\n            if (this.props.onRemoveSuggestion) {\r\n              (this.props.onRemoveSuggestion as any)(this.suggestionStore.currentSuggestion!.item);\r\n            }\r\n            this.suggestionStore.removeSuggestion(this.suggestionStore.currentIndex);\r\n            this.forceUpdate();\r\n          } else {\r\n            this.onBackspace(ev);\r\n          }\r\n        }\r\n        ev.stopPropagation();\r\n        break;\r\n\r\n      case KeyCodes.up:\r\n        if (this.input.current && ev.target === this.input.current.inputElement && this.state.suggestionsVisible) {\r\n          if (\r\n            this.suggestionElement.current &&\r\n            this.suggestionElement.current.tryHandleKeyDown(keyCode, this.suggestionStore.currentIndex)\r\n          ) {\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n          } else {\r\n            if (\r\n              this.suggestionElement.current &&\r\n              this.suggestionElement.current.hasSuggestedAction() &&\r\n              this.suggestionStore.currentIndex === 0\r\n            ) {\r\n              ev.preventDefault();\r\n              ev.stopPropagation();\r\n              this.suggestionElement.current.focusAboveSuggestions();\r\n              this.suggestionStore.deselectAllSuggestions();\r\n              this.forceUpdate();\r\n            } else {\r\n              if (this.suggestionStore.previousSuggestion()) {\r\n                ev.preventDefault();\r\n                ev.stopPropagation();\r\n                this.onSuggestionSelect();\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n\r\n      case KeyCodes.down:\r\n        if (this.input.current && ev.target === this.input.current.inputElement && this.state.suggestionsVisible) {\r\n          if (\r\n            this.suggestionElement.current &&\r\n            this.suggestionElement.current.tryHandleKeyDown(keyCode, this.suggestionStore.currentIndex)\r\n          ) {\r\n            ev.preventDefault();\r\n            ev.stopPropagation();\r\n          } else {\r\n            if (\r\n              this.suggestionElement.current &&\r\n              this.suggestionElement.current.hasSuggestedAction() &&\r\n              this.suggestionStore.currentIndex + 1 === this.suggestionStore.suggestions.length\r\n            ) {\r\n              ev.preventDefault();\r\n              ev.stopPropagation();\r\n              this.suggestionElement.current.focusBelowSuggestions();\r\n              this.suggestionStore.deselectAllSuggestions();\r\n              this.forceUpdate();\r\n            } else {\r\n              if (this.suggestionStore.nextSuggestion()) {\r\n                ev.preventDefault();\r\n                ev.stopPropagation();\r\n                this.onSuggestionSelect();\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  protected onItemChange = (changedItem: T, index: number): void => {\r\n    const { items } = this.state;\r\n\r\n    if (index >= 0) {\r\n      const newItems: T[] = items;\r\n      newItems[index] = changedItem;\r\n\r\n      this._updateSelectedItems(newItems);\r\n    }\r\n  };\r\n\r\n  protected onGetMoreResults = (): void => {\r\n    this.setState(\r\n      {\r\n        isSearching: true\r\n      },\r\n      () => {\r\n        if (this.props.onGetMoreResults && this.input.current) {\r\n          const suggestions: T[] | PromiseLike<T[]> = (this.props.onGetMoreResults as any)(this.input.current.value, this.state.items);\r\n          const suggestionsArray: T[] = suggestions as T[];\r\n          const suggestionsPromiseLike: PromiseLike<T[]> = suggestions as PromiseLike<T[]>;\r\n\r\n          if (Array.isArray(suggestionsArray)) {\r\n            this.updateSuggestions(suggestionsArray);\r\n            this.setState({ isSearching: false });\r\n          } else if (suggestionsPromiseLike.then) {\r\n            suggestionsPromiseLike.then((newSuggestions: T[]) => {\r\n              this.updateSuggestions(newSuggestions);\r\n              this.setState({ isSearching: false });\r\n            });\r\n          }\r\n        } else {\r\n          this.setState({ isSearching: false });\r\n        }\r\n\r\n        if (this.input.current) {\r\n          this.input.current.focus();\r\n        }\r\n\r\n        this.setState({\r\n          moreSuggestionsAvailable: false,\r\n          isResultsFooterVisible: true\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  protected addItemByIndex = (index: number): void => {\r\n    this.addItem(this.suggestionStore.getSuggestionAtIndex(index).item);\r\n    if (this.input.current) {\r\n      this.input.current.clear();\r\n    }\r\n    this.updateValue('');\r\n  };\r\n\r\n  protected addItem = (item: T): void => {\r\n    const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected ? (this.props.onItemSelected as any)(item) : item;\r\n\r\n    if (processedItem === null) {\r\n      return;\r\n    }\r\n\r\n    const processedItemObject: T = processedItem as T;\r\n    const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\r\n\r\n    if (processedItemPromiseLike && processedItemPromiseLike.then) {\r\n      processedItemPromiseLike.then((resolvedProcessedItem: T) => {\r\n        const newItems: T[] = this.state.items.concat([resolvedProcessedItem]);\r\n        this._updateSelectedItems(newItems);\r\n      });\r\n    } else {\r\n      const newItems: T[] = this.state.items.concat([processedItemObject]);\r\n      this._updateSelectedItems(newItems);\r\n    }\r\n    this.setState({ suggestedDisplayValue: '' });\r\n  };\r\n\r\n  protected removeItem = (item: IPickerItemProps<T>, focusNextItem?: boolean): void => {\r\n    const { items } = this.state;\r\n    const index: number = items.indexOf(item);\r\n\r\n    if (index >= 0) {\r\n      const newItems: T[] = items.slice(0, index).concat(items.slice(index + 1));\r\n      this._updateSelectedItems(newItems, focusNextItem ? index : undefined);\r\n    }\r\n  };\r\n\r\n  protected removeItems = (itemsToRemove: any[]): void => {\r\n    const { items } = this.state;\r\n    const newItems: T[] = items.filter((item: any) => itemsToRemove.indexOf(item) === -1);\r\n    const firstItemToRemove = itemsToRemove[0];\r\n    const index: number = items.indexOf(firstItemToRemove);\r\n\r\n    this._updateSelectedItems(newItems, index);\r\n  };\r\n\r\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\r\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\r\n  protected onBackspace(ev: React.KeyboardEvent<HTMLElement>) {\r\n    if (\r\n      (this.state.items.length && !this.input.current) ||\r\n      (this.input.current && (!this.input.current.isValueSelected && this.input.current.cursorLocation === 0))\r\n    ) {\r\n      if (this.selection.getSelectedCount() > 0) {\r\n        this.removeItems(this.selection.getSelection());\r\n      } else {\r\n        this.removeItem(this.state.items[this.state.items.length - 1]);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected _isFocusZoneInnerKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\r\n    // If suggestions are shown const up/down keys control them, otherwise allow them through to control the focusZone.\r\n    if (this.state.suggestionsVisible) {\r\n      switch (ev.which) {\r\n        case KeyCodes.up:\r\n        case KeyCodes.down:\r\n          return true;\r\n      }\r\n    }\r\n\r\n    if (ev.which === KeyCodes.enter) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  protected getActiveDescendant() {\r\n    const currentIndex = this.suggestionStore.currentIndex;\r\n    return currentIndex > -1 && !this.state.suggestionsLoading ? 'sug-' + currentIndex : undefined;\r\n  }\r\n\r\n  protected getSuggestionsAlert(suggestionAlertClassName: string = legacyStyles.screenReaderOnly) {\r\n    const currentIndex = this.suggestionStore.currentIndex;\r\n    if (this.props.enableSelectedSuggestionAlert) {\r\n      const selectedSuggestion =\r\n        currentIndex > -1 ? this.suggestionStore.getSuggestionAtIndex(this.suggestionStore.currentIndex) : undefined;\r\n      const selectedSuggestionAlertText = selectedSuggestion ? selectedSuggestion.ariaLabel : undefined;\r\n      return (\r\n        <div className={suggestionAlertClassName} role=\"alert\" id={this._ariaMap.selectedSuggestionAlert} aria-live=\"assertive\">\r\n          {selectedSuggestionAlertText}{' '}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   * Takes in the current updated value and either resolves it with the new suggestions\r\n   * or if updated value is undefined then it clears out currently suggested items\r\n   */\r\n  private _updateAndResolveValue(updatedValue: string | undefined, newSuggestions: T[]) {\r\n    if (updatedValue !== undefined) {\r\n      this.resolveNewValue(updatedValue, newSuggestions);\r\n    } else {\r\n      this.suggestionStore.updateSuggestions(newSuggestions, -1);\r\n      if (this.state.suggestionsLoading) {\r\n        this.setState({\r\n          suggestionsLoading: false\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Controls what happens whenever there is an action that impacts the selected items.\r\n   * If selectedItems is provided as a property then this will act as a controlled component and it will not update it's own state.\r\n   */\r\n  private _updateSelectedItems(items: T[], focusIndex?: number): void {\r\n    if (this.props.selectedItems) {\r\n      // If the component is a controlled component then the controlling component will need to add or remove the items.\r\n      this.onChange(items);\r\n    } else {\r\n      this.setState({ items: items }, () => {\r\n        this._onSelectedItemsUpdated(items, focusIndex);\r\n      });\r\n    }\r\n  }\r\n\r\n  private _onSelectedItemsUpdated(items?: T[], focusIndex?: number): void {\r\n    this.resetFocus(focusIndex);\r\n    this.onChange(items);\r\n  }\r\n\r\n  private _onResolveSuggestions(updatedValue: string): void {\r\n    const suggestions: T[] | PromiseLike<T[]> | null = this.props.onResolveSuggestions(updatedValue, this.state.items);\r\n\r\n    if (suggestions !== null) {\r\n      this.updateSuggestionsList(suggestions, updatedValue);\r\n    }\r\n  }\r\n\r\n  private _onValidateInput(): void {\r\n    if (\r\n      this.props.onValidateInput &&\r\n      this.input.current &&\r\n      (this.props.onValidateInput as any)(this.input.current.value) !== ValidationState.invalid &&\r\n      this.props.createGenericItem\r\n    ) {\r\n      const itemToConvert = this.props.createGenericItem(this.input.current.value, this.props.onValidateInput(this.input.current.value));\r\n      this.suggestionStore.createGenericSuggestion(itemToConvert);\r\n      this.completeSuggestion();\r\n    }\r\n  }\r\n\r\n  private _getTextFromItem(item: T, currentValue?: string): string {\r\n    if (this.props.getTextFromItem) {\r\n      return (this.props.getTextFromItem as any)(item, currentValue);\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n}\r\n\r\nexport class BasePickerListBelow<T, P extends IBasePickerProps<T>> extends BasePicker<T, P> {\r\n  public render(): JSX.Element {\r\n    const { suggestedDisplayValue, isFocused } = this.state;\r\n    const { className, inputProps, disabled, theme, styles } = this.props;\r\n\r\n    const selectedSuggestionAlertId: string | undefined = this.props.enableSelectedSuggestionAlert\r\n      ? this._ariaMap.selectedSuggestionAlert\r\n      : '';\r\n    const suggestionsAvailable: string | undefined = this.state.suggestionsVisible ? this._ariaMap.suggestionList : '';\r\n\r\n    // TODO\r\n    // Clean this up by leaving only the first part after removing support for SASS.\r\n    // Currently we can not remove the SASS styles from BasePicker class because it\r\n    // might be used by consumers who created custom pickers from extending from\r\n    // this base class and have not used the new 'styles' prop.\r\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\r\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\r\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\r\n    // then we just use the old SASS styles instead.\r\n    const classNames: Partial<IProcessedStyleSet<IBasePickerStyles>> = styles\r\n      ? getClassNames(styles, {\r\n          theme,\r\n          className,\r\n          isFocused,\r\n          inputClassName: inputProps && inputProps.className\r\n        })\r\n      : {\r\n          root: css('ms-BasePicker', className ? className : ''),\r\n          text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\r\n          input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\r\n          screenReaderText: legacyStyles.screenReaderOnly\r\n        };\r\n\r\n    return (\r\n      <div ref={this.root} onBlur={this.onBlur}>\r\n        <div className={classNames.root} onKeyDown={this.onKeyDown}>\r\n          {this.getSuggestionsAlert(classNames.screenReaderText)}\r\n          <div className={classNames.text}>\r\n            <Autofill\r\n              {...inputProps as any}\r\n              className={classNames.input}\r\n              componentRef={this.input}\r\n              onFocus={this.onInputFocus}\r\n              onBlur={this.onInputBlur}\r\n              onInputValueChange={this.onInputChange}\r\n              suggestedDisplayValue={suggestedDisplayValue}\r\n              aria-activedescendant={this.getActiveDescendant()}\r\n              aria-expanded={!!this.state.suggestionsVisible}\r\n              aria-haspopup=\"true\"\r\n              autoCapitalize=\"off\"\r\n              autoComplete=\"off\"\r\n              role=\"combobox\"\r\n              disabled={disabled}\r\n              aria-controls={`${suggestionsAvailable} ${selectedSuggestionAlertId}` || undefined}\r\n              aria-owns={suggestionsAvailable || undefined}\r\n              onInputChange={this.props.onInputChange}\r\n            />\r\n          </div>\r\n        </div>\r\n        {this.renderSuggestions()}\r\n        <SelectionZone selection={this.selection} selectionMode={SelectionMode.single}>\r\n          <FocusZone\r\n            componentRef={this.focusZone}\r\n            className=\"ms-BasePicker-selectedItems\" // just a className hook without any styles applied to it.\r\n            isCircularNavigation={true}\r\n            direction={FocusZoneDirection.bidirectional}\r\n            isInnerZoneKeystroke={this._isFocusZoneInnerKeystroke}\r\n            id={this._ariaMap.selectedItems}\r\n          >\r\n            {this.renderItems()}\r\n          </FocusZone>\r\n        </SelectionZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  protected onBackspace(ev: React.KeyboardEvent<HTMLElement>) {\r\n    // override the existing backspace method to not do anything because the list items appear below.\r\n  }\r\n}\r\n"]}