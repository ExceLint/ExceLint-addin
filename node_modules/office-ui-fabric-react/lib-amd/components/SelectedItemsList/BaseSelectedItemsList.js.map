{"version":3,"file":"BaseSelectedItemsList.js","sourceRoot":"../src/","sources":["components/SelectedItemsList/BaseSelectedItemsList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent } from '../../Utilities';\r\nimport { Selection } from '../../Selection';\r\n\r\nimport { IBaseSelectedItemsList, IBaseSelectedItemsListProps, ISelectedItemProps } from './BaseSelectedItemsList.types';\r\n\r\nexport interface IBaseSelectedItemsListState {\r\n  // tslint:disable-next-line:no-any\r\n  items?: any;\r\n}\r\n\r\nexport class BaseSelectedItemsList<T, P extends IBaseSelectedItemsListProps<T>> extends BaseComponent<P, IBaseSelectedItemsListState>\r\n  implements IBaseSelectedItemsList<T> {\r\n  protected root: HTMLElement;\r\n  protected selection: Selection;\r\n\r\n  constructor(basePickerProps: P) {\r\n    super(basePickerProps);\r\n\r\n    const items: T[] = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\r\n    this.state = {\r\n      items: items\r\n    };\r\n\r\n    // Create a new selection if one is not specified\r\n    this.selection = this.props.selection\r\n      ? (this.props.selection as Selection)\r\n      : new Selection({ onSelectionChanged: this.onSelectionChanged });\r\n  }\r\n\r\n  public get items(): T[] {\r\n    return this.state.items;\r\n  }\r\n\r\n  public addItems = (items: T[]): void => {\r\n    // tslint:disable-next-line:no-any\r\n    const processedItems: T[] | PromiseLike<T[]> = this.props.onItemSelected ? (this.props.onItemSelected as any)(items) : items;\r\n\r\n    const processedItemObjects: T[] = processedItems as T[];\r\n    const processedItemPromiseLikes: PromiseLike<T[]> = processedItems as PromiseLike<T[]>;\r\n\r\n    if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\r\n      processedItemPromiseLikes.then((resolvedProcessedItems: T[]) => {\r\n        const newItems: T[] = this.state.items.concat(resolvedProcessedItems);\r\n        this.updateItems(newItems);\r\n      });\r\n    } else {\r\n      const newItems: T[] = this.state.items.concat(processedItemObjects);\r\n      this.updateItems(newItems);\r\n    }\r\n  };\r\n\r\n  public removeItemAt = (index: number): void => {\r\n    const { items } = this.state;\r\n\r\n    if (this._canRemoveItem(items[index])) {\r\n      if (index > -1) {\r\n        if (this.props.onItemsDeleted) {\r\n          (this.props.onItemsDeleted as (item: T[]) => void)([items[index]]);\r\n        }\r\n\r\n        const newItems = items.slice(0, index).concat(items.slice(index + 1));\r\n        this.updateItems(newItems);\r\n      }\r\n    }\r\n  };\r\n\r\n  public removeItem = (item: ISelectedItemProps<T>): void => {\r\n    const { items } = this.state;\r\n    const index: number = items.indexOf(item);\r\n\r\n    this.removeItemAt(index);\r\n  };\r\n\r\n  // tslint:disable-next-line:no-any\r\n  public removeItems = (itemsToRemove: any[]): void => {\r\n    const { items } = this.state;\r\n    const itemsCanRemove = itemsToRemove.filter((item: any) => this._canRemoveItem(item));\r\n    // tslint:disable-next-line:no-any\r\n    const newItems: T[] = items.filter((item: any) => itemsCanRemove.indexOf(item) === -1);\r\n    const firstItemToRemove = itemsCanRemove[0];\r\n    const index: number = items.indexOf(firstItemToRemove);\r\n\r\n    if (this.props.onItemsDeleted) {\r\n      (this.props.onItemsDeleted as (item: T[]) => void)(itemsCanRemove);\r\n    }\r\n\r\n    this.updateItems(newItems, index);\r\n  };\r\n\r\n  public removeSelectedItems(): void {\r\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\r\n      this.removeItems(this.selection.getSelection());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Controls what happens whenever there is an action that impacts the selected items.\r\n   * If selectedItems is provided as a property then this will act as a controlled component and it will not update it's own state.\r\n   */\r\n  public updateItems(items: T[], focusIndex?: number): void {\r\n    if (this.props.selectedItems) {\r\n      // If the component is a controlled component then the controlling component will need to pass the new props\r\n      this.onChange(items);\r\n    } else {\r\n      this.setState({ items: items }, () => {\r\n        this._onSelectedItemsUpdated(items, focusIndex);\r\n      });\r\n    }\r\n  }\r\n\r\n  public onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\r\n    if (this.props.onCopyItems && this.selection.getSelectedCount() > 0) {\r\n      const selectedItems: T[] = this.selection.getSelection() as T[];\r\n      this.copyItems(selectedItems);\r\n    }\r\n  };\r\n\r\n  public hasSelectedItems(): boolean {\r\n    return this.selection.getSelectedCount() > 0;\r\n  }\r\n\r\n  public unselectAll(): void {\r\n    this.selection.setAllSelected(false);\r\n  }\r\n\r\n  public highlightedItems(): T[] {\r\n    return this.selection.getSelection() as T[];\r\n  }\r\n\r\n  public componentWillUpdate(newProps: P, newState: IBaseSelectedItemsListState): void {\r\n    if (newState.items && newState.items !== this.state.items) {\r\n      this.selection.setItems(newState.items);\r\n    }\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this.selection.setItems(this.state.items);\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: P): void {\r\n    const newItems = newProps.selectedItems;\r\n\r\n    if (newItems) {\r\n      this.setState({ items: newProps.selectedItems });\r\n    }\r\n\r\n    if (newProps.selection) {\r\n      this.selection = newProps.selection;\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  public render(): any {\r\n    return this.renderItems();\r\n  }\r\n\r\n  protected renderItems = (): JSX.Element[] => {\r\n    const { removeButtonAriaLabel } = this.props;\r\n    const onRenderItem = this.props.onRenderItem as (props: ISelectedItemProps<T>) => JSX.Element;\r\n\r\n    const { items } = this.state;\r\n    // tslint:disable-next-line:no-any\r\n    return items.map((item: any, index: number) =>\r\n      onRenderItem({\r\n        item,\r\n        index,\r\n        key: item.key ? item.key : index,\r\n        selected: this.selection.isIndexSelected(index),\r\n        onRemoveItem: () => this.removeItem(item),\r\n        onItemChange: this.onItemChange,\r\n        removeButtonAriaLabel: removeButtonAriaLabel,\r\n        onCopyItem: (itemToCopy: T) => this.copyItems([itemToCopy])\r\n      })\r\n    );\r\n  };\r\n\r\n  protected onSelectionChanged = (): void => {\r\n    this.forceUpdate();\r\n  };\r\n\r\n  protected onChange(items?: T[]): void {\r\n    if (this.props.onChange) {\r\n      (this.props.onChange as (items?: T[]) => void)(items);\r\n    }\r\n  }\r\n\r\n  protected onItemChange = (changedItem: T, index: number): void => {\r\n    const { items } = this.state;\r\n\r\n    if (index >= 0) {\r\n      const newItems: T[] = items;\r\n      newItems[index] = changedItem;\r\n\r\n      this.updateItems(newItems);\r\n    }\r\n  };\r\n\r\n  protected copyItems(items: T[]): void {\r\n    if (this.props.onCopyItems) {\r\n      // tslint:disable-next-line:no-any\r\n      const copyText = (this.props.onCopyItems as any)(items);\r\n\r\n      const copyInput = document.createElement('input') as HTMLInputElement;\r\n      document.body.appendChild(copyInput);\r\n\r\n      try {\r\n        // Try to copy the text directly to the clipboard\r\n        copyInput.value = copyText;\r\n        copyInput.select();\r\n        if (!document.execCommand('copy')) {\r\n          // The command failed. Fallback to the method below.\r\n          throw new Error();\r\n        }\r\n      } catch (err) {\r\n        // no op\r\n      } finally {\r\n        document.body.removeChild(copyInput);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onSelectedItemsUpdated(items?: T[], focusIndex?: number): void {\r\n    this.onChange(items);\r\n  }\r\n\r\n  private _canRemoveItem(item: T): boolean {\r\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\r\n  }\r\n}\r\n"]}