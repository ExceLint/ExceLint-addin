{"version":3,"file":"ResizeGroup.types.js","sourceRoot":"../src/","sources":["components/ResizeGroup/ResizeGroup.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { ResizeGroupBase } from './ResizeGroup.base';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\n\r\nexport interface IResizeGroup {\r\n  /**\r\n   * Remeasures the available space.\r\n   */\r\n  remeasure(): void;\r\n}\r\n\r\nexport interface IResizeGroupProps extends React.HTMLAttributes<ResizeGroupBase | HTMLElement> {\r\n  /**\r\n   * Optional callback to access the IResizeGroup interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IResizeGroup>;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules\r\n   * @deprecated Removed to reduce bundle size.  Please use `className` and add css rules to `className` instead.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IResizeGroupStyleProps, IResizeGroupStyles>;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Additional css class to apply to the Component\r\n   * @defaultvalue undefined\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Initial data to be passed to the onRenderData function. When there is no onGrowData provided, this data should represent what should\r\n   * be passed to the render function when the parent container of the ResizeGroup is at it's maximum supported width. A cacheKey property\r\n   * may optionally be included as part of the data. Two data objects with the same cacheKey will be assumed to take up the\r\n   * same width and will prevent measurements. The type of cacheKey is a string.\r\n   */\r\n  data: any;\r\n\r\n  /**\r\n   * Function to render the data. Called when rendering the contents to the screen and when\r\n   * rendering in a hidden div to measure the size of the contents.\r\n   */\r\n  onRenderData: (data: any) => JSX.Element;\r\n\r\n  /**\r\n   * Function to be performed on the data in order to reduce its width and make it fit into the given space.\r\n   * If there are no more scaling steps to apply, it should return undefined to prevent\r\n   * an infinite render loop.\r\n   */\r\n  onReduceData: (prevData: any) => any;\r\n\r\n  /**\r\n   * Function to be performed on the data in order to increase its width. It is called in scenarios where the\r\n   * container has more room than the previous render and we may be able to fit more content. If there are no more\r\n   * scaling operations to perform on teh data, it should return undefined to prevent an infinite render loop.\r\n   */\r\n  onGrowData?: (prevData: any) => any;\r\n\r\n  /**\r\n   * Function to be called every time data is rendered. It provides the data that was actually rendered.\r\n   * A use case would be adding telemetry when a particular control is shown in an overflow well or\r\n   * dropped as a result of onReduceData or to count the number of renders that an implementation of\r\n   * onReduceData triggers.\r\n   */\r\n  dataDidRender?: (renderedData: any) => void;\r\n}\r\n\r\nexport interface IResizeGroupStyleProps {\r\n  /**\r\n   * Accept theme prop.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Accept custom classNames\r\n   */\r\n  className?: string;\r\n}\r\n\r\nexport interface IResizeGroupStyles {\r\n  /**\r\n   * Style for the root element.\r\n   */\r\n  root: IStyle;\r\n}\r\n"]}