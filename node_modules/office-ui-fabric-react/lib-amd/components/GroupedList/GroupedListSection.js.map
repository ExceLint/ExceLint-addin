{"version":3,"file":"GroupedListSection.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupedListSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\r\nimport { IGroupHeaderProps } from './GroupHeader.types';\r\nimport { IGroupFooterProps } from './GroupFooter.types';\r\nimport { IGroupShowAllProps } from './GroupShowAll.types';\r\n\r\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../utilities/dragdrop/index';\r\n\r\nimport { BaseComponent, IRenderFunction, IDisposable, IClassNames } from '../../Utilities';\r\n\r\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/index';\r\n\r\nimport { GroupHeader } from './GroupHeader';\r\nimport { GroupShowAll } from './GroupShowAll';\r\nimport { GroupFooter } from './GroupFooter';\r\n\r\nimport { List } from '../../List';\r\nimport { IDragDropOptions } from './../../utilities/dragdrop/interfaces';\r\nimport { assign, css, getId } from '../../Utilities';\r\nimport { IViewport } from '../../utilities/decorators/withViewport';\r\nimport { IListProps } from '../List/index';\r\n\r\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\r\n  /** GroupedList resolved class names */\r\n  groupedListClassNames?: IClassNames<IGroupedListStyles>;\r\n\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef?: () => void;\r\n\r\n  /** Whether to render in compact mode */\r\n  compact?: boolean;\r\n\r\n  /** Map of callback functions related to drag and drop functionality. */\r\n  dragDropEvents?: IDragDropEvents;\r\n\r\n  /** helper to manage drag/drop across item rows and groups */\r\n  dragDropHelper?: IDragDropHelper;\r\n\r\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\r\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\r\n\r\n  /** Information to pass in to the group footer. */\r\n  footerProps?: IGroupFooterProps;\r\n\r\n  /** Grouping item limit. */\r\n  getGroupItemLimit?: (group: IGroup) => number;\r\n\r\n  /** Optional grouping instructions. */\r\n  groupIndex?: number;\r\n\r\n  /** Optional group nesting level. */\r\n  groupNestingDepth?: number;\r\n\r\n  /** Optional grouping instructions. */\r\n  group?: IGroup;\r\n\r\n  /** Optional override properties to render groups. */\r\n  groupProps?: IGroupRenderProps;\r\n\r\n  /** Information to pass in to the group header. */\r\n  headerProps?: IGroupHeaderProps;\r\n\r\n  /** List of items to render. */\r\n  items: any[];\r\n\r\n  /** Optional list props to pass to list renderer.  */\r\n  listProps?: IListProps;\r\n\r\n  /** Rendering callback to render the group items. */\r\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\r\n\r\n  /** Optional selection model to track selection state.  */\r\n  selection?: ISelection;\r\n\r\n  /** Controls how/if the details list manages selection. */\r\n  selectionMode?: SelectionMode;\r\n\r\n  /** Information to pass in to the group Show All footer. */\r\n  showAllProps?: IGroupShowAllProps;\r\n\r\n  /** Optional Viewport, provided by the parent component. */\r\n  viewport?: IViewport;\r\n\r\n  /** Override for rendering the group header. */\r\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\r\n\r\n  /** Override for rendering the group Show All link. */\r\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\r\n\r\n  /** Override for rendering the group footer. */\r\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\r\n\r\n  /**\r\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\r\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\r\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists.\r\n   * The default implementation will virtualize when this callback is not provided.\r\n   */\r\n  onShouldVirtualize?: (props: IListProps) => boolean;\r\n\r\n  /** Stores parent group's children. */\r\n  groups?: IGroup[];\r\n}\r\n\r\nexport interface IGroupedListSectionState {\r\n  isDropping?: boolean;\r\n  isSelected?: boolean;\r\n}\r\n\r\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\r\n\r\nexport class GroupedListSection extends BaseComponent<IGroupedListSectionProps, IGroupedListSectionState> {\r\n  private _root = React.createRef<HTMLDivElement>();\r\n  private _list = React.createRef<List>();\r\n  private _id: string;\r\n\r\n  private _dragDropSubscription: IDisposable;\r\n\r\n  constructor(props: IGroupedListSectionProps) {\r\n    super(props);\r\n\r\n    const { selection, group } = props;\r\n\r\n    this._id = getId('GroupedListSection');\r\n\r\n    this.state = {\r\n      isDropping: false,\r\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false\r\n    };\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    const { dragDropHelper, selection } = this.props;\r\n\r\n    if (dragDropHelper && this._root.current) {\r\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\r\n    }\r\n\r\n    if (selection) {\r\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    if (this._dragDropSubscription) {\r\n      this._dragDropSubscription.dispose();\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\r\n    if (\r\n      this.props.group !== previousProps.group ||\r\n      this.props.groupIndex !== previousProps.groupIndex ||\r\n      this.props.dragDropHelper !== previousProps.dragDropHelper\r\n    ) {\r\n      if (this._dragDropSubscription) {\r\n        this._dragDropSubscription.dispose();\r\n        delete this._dragDropSubscription;\r\n      }\r\n\r\n      if (this.props.dragDropHelper && this._root.current) {\r\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\r\n      }\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      getGroupItemLimit,\r\n      group,\r\n      groupIndex,\r\n      headerProps,\r\n      showAllProps,\r\n      footerProps,\r\n      viewport,\r\n      selectionMode,\r\n      onRenderGroupHeader = this._onRenderGroupHeader,\r\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\r\n      onRenderGroupFooter = this._onRenderGroupFooter,\r\n      onShouldVirtualize,\r\n      groupedListClassNames,\r\n      groups,\r\n      compact\r\n    } = this.props;\r\n    const { isSelected } = this.state;\r\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\r\n    const isShowAllVisible =\r\n      group && !group.children && !group.isCollapsed && !group.isShowingAll && (group.count > renderCount || group.hasMoreData);\r\n    const hasNestedGroups = group && group.children && group.children.length > 0;\r\n\r\n    const dividerProps: IGroupDividerProps = {\r\n      group,\r\n      groupIndex,\r\n      groupLevel: group ? group.level : 0,\r\n      isSelected,\r\n      viewport,\r\n      selectionMode,\r\n      groups,\r\n      compact\r\n    };\r\n\r\n    const ariaControlsProps: IGroupHeaderProps = {\r\n      groupedListId: this._id\r\n    };\r\n\r\n    const groupHeaderProps: IGroupHeaderProps = assign({}, headerProps, dividerProps, ariaControlsProps);\r\n    const groupShowAllProps: IGroupShowAllProps = assign({}, showAllProps, dividerProps);\r\n    const groupFooterProps: IGroupFooterProps = assign({}, footerProps, dividerProps);\r\n\r\n    return (\r\n      <div\r\n        ref={this._root}\r\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\r\n        role=\"presentation\"\r\n      >\r\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\r\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\r\n          <List\r\n            role=\"presentation\"\r\n            ref={this._list}\r\n            items={group!.children}\r\n            onRenderCell={this._renderSubGroup}\r\n            getItemCountForPage={this._returnOne}\r\n            onShouldVirtualize={onShouldVirtualize}\r\n            id={this._id}\r\n          />\r\n        ) : (\r\n          this._onRenderGroup(renderCount)\r\n        )}\r\n        {group && group.isCollapsed ? null : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\r\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public forceUpdate() {\r\n    super.forceUpdate();\r\n    this.forceListUpdate();\r\n  }\r\n\r\n  public forceListUpdate() {\r\n    const { group } = this.props;\r\n\r\n    if (this._list.current) {\r\n      this._list.current.forceUpdate();\r\n\r\n      if (group && group.children && group.children.length > 0) {\r\n        const subGroupCount = group.children.length;\r\n\r\n        for (let i = 0; i < subGroupCount; i++) {\r\n          const subGroup = this._list.current.refs['subGroup_' + String(i)] as GroupedListSection;\r\n\r\n          if (subGroup) {\r\n            subGroup.forceListUpdate();\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      const subGroup = this.refs['subGroup_' + String(0)] as GroupedListSection;\r\n\r\n      if (subGroup) {\r\n        subGroup.forceListUpdate();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\r\n    return <GroupHeader {...props} />;\r\n  };\r\n\r\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\r\n    return <GroupShowAll {...props} />;\r\n  };\r\n\r\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\r\n    return <GroupFooter {...props} />;\r\n  };\r\n\r\n  private _onSelectionChange(): void {\r\n    const { group, selection } = this.props;\r\n    const isSelected = selection!.isRangeSelected(group!.startIndex, group!.count);\r\n\r\n    if (isSelected !== this.state.isSelected) {\r\n      this.setState({ isSelected });\r\n    }\r\n  }\r\n\r\n  private _onRenderGroupCell(\r\n    onRenderCell: any,\r\n    groupNestingDepth: number | undefined\r\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\r\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\r\n      return onRenderCell(groupNestingDepth, item, itemIndex);\r\n    };\r\n  }\r\n\r\n  private _onRenderGroup(renderCount: number): JSX.Element {\r\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize } = this.props;\r\n    const count = group ? group.count : items.length;\r\n    const startIndex = group ? group.startIndex : 0;\r\n\r\n    return (\r\n      <List\r\n        role=\"grid\"\r\n        items={items}\r\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth)}\r\n        ref={this._list}\r\n        renderCount={Math.min(count, renderCount)}\r\n        startIndex={startIndex}\r\n        onShouldVirtualize={onShouldVirtualize}\r\n        id={this._id}\r\n        {...listProps}\r\n      />\r\n    );\r\n  }\r\n\r\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\r\n    const {\r\n      dragDropEvents,\r\n      dragDropHelper,\r\n      eventsToRegister,\r\n      getGroupItemLimit,\r\n      groupNestingDepth,\r\n      groupProps,\r\n      items,\r\n      headerProps,\r\n      showAllProps,\r\n      footerProps,\r\n      listProps,\r\n      onRenderCell,\r\n      selection,\r\n      selectionMode,\r\n      viewport,\r\n      onRenderGroupHeader,\r\n      onRenderGroupShowAll,\r\n      onRenderGroupFooter,\r\n      onShouldVirtualize,\r\n      group,\r\n      compact\r\n    } = this.props;\r\n\r\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\r\n      <GroupedListSection\r\n        ref={'subGroup_' + subGroupIndex}\r\n        key={this._getGroupKey(subGroup, subGroupIndex)}\r\n        dragDropEvents={dragDropEvents}\r\n        dragDropHelper={dragDropHelper}\r\n        eventsToRegister={eventsToRegister}\r\n        footerProps={footerProps}\r\n        getGroupItemLimit={getGroupItemLimit}\r\n        group={subGroup}\r\n        groupIndex={subGroupIndex}\r\n        groupNestingDepth={groupNestingDepth}\r\n        groupProps={groupProps}\r\n        headerProps={headerProps}\r\n        items={items}\r\n        listProps={listProps}\r\n        onRenderCell={onRenderCell}\r\n        selection={selection}\r\n        selectionMode={selectionMode}\r\n        showAllProps={showAllProps}\r\n        viewport={viewport}\r\n        onRenderGroupHeader={onRenderGroupHeader}\r\n        onRenderGroupShowAll={onRenderGroupShowAll}\r\n        onRenderGroupFooter={onRenderGroupFooter}\r\n        onShouldVirtualize={onShouldVirtualize}\r\n        groups={group!.children}\r\n        compact={compact}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  private _returnOne(): number {\r\n    return 1;\r\n  }\r\n\r\n  private _getGroupKey(group: IGroup, index: number): string {\r\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\r\n  }\r\n\r\n  /**\r\n   * collect all the data we need to enable drag/drop for a group\r\n   */\r\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\r\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\r\n    const options = {\r\n      eventMap: eventsToRegister,\r\n      selectionIndex: -1,\r\n      context: { data: group, index: groupIndex, isGroup: true },\r\n      canDrag: () => false, // cannot drag groups\r\n      canDrop: dragDropEvents!.canDrop,\r\n      updateDropState: this._updateDroppingState\r\n    };\r\n    return options as IDragDropOptions;\r\n  };\r\n\r\n  /**\r\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\r\n   *\r\n   * @param newValue - new isDropping state value\r\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\r\n   */\r\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\r\n    const { isDropping } = this.state;\r\n    const { dragDropEvents } = this.props;\r\n\r\n    if (!isDropping) {\r\n      if (dragDropEvents && dragDropEvents.onDragLeave) {\r\n        dragDropEvents.onDragLeave!(event, undefined);\r\n      }\r\n    } else {\r\n      if (dragDropEvents && dragDropEvents.onDragEnter) {\r\n        dragDropEvents.onDragEnter(event, undefined);\r\n      }\r\n    }\r\n\r\n    if (isDropping !== newIsDropping) {\r\n      this.setState({ isDropping: newIsDropping });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * get the correct css class to reflect the dropping state for a given group\r\n   *\r\n   * If the group is the current drop target, return the default dropping class name\r\n   * Otherwise, return '';\r\n   *\r\n   */\r\n  private _getDroppingClassName(): string {\r\n    let { isDropping } = this.state;\r\n    const { group, groupedListClassNames } = this.props;\r\n\r\n    isDropping = !!(group && isDropping);\r\n\r\n    return css(isDropping && DEFAULT_DROPPING_CSS_CLASS, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);\r\n  }\r\n}\r\n"]}