{"version":3,"file":"ComboBox.js","sourceRoot":"../src/","sources":["components/ComboBox/ComboBox.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Autofill, IAutofill } from '../Autofill/index';\nimport {\n  initializeComponentRef,\n  css,\n  customizable,\n  divProperties,\n  findElementRecursive,\n  findIndex,\n  focusAsync,\n  getId,\n  getNativeProps,\n  isIOS,\n  isMac,\n  KeyCodes,\n  shallowCompare,\n  mergeAriaAttributeValues,\n  warnMutuallyExclusive,\n  Async,\n  EventGroup,\n} from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Checkbox } from '../../Checkbox';\nimport { CommandButton, IButtonStyles, IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { getCaretDownButtonStyles, getOptionStyles, getStyles } from './ComboBox.styles';\nimport { getClassNames, getComboBoxOptionClassNames } from './ComboBox.classNames';\nimport {\n  IComboBoxOption,\n  IComboBoxOptionStyles,\n  IComboBoxProps,\n  IOnRenderComboBoxLabelProps,\n  IComboBoxClassNames,\n} from './ComboBox.types';\nimport { KeytipData } from '../../KeytipData';\nimport { Label } from '../../Label';\nimport { SelectableOptionMenuItemType, getAllSelectedOptions } from '../../utilities/selectableOption/index';\nimport { BaseButton, Button } from '../Button/index';\nimport { ICalloutProps } from '../../Callout';\n\nexport interface IComboBoxState {\n  /** The open state */\n  isOpen?: boolean;\n\n  /** The currently selected indices */\n  selectedIndices?: number[];\n\n  /** The focused state of the comboBox */\n  focusState?: 'none' | 'focused' | 'focusing';\n\n  /** This value is used for the autocomplete hint value */\n  suggestedDisplayValue?: string;\n\n  /** The options currently available for the callout */\n  currentOptions: IComboBoxOption[];\n\n  /**\n   * When taking input, this will store the index that the options input matches\n   * (-1 if no input or match)\n   */\n  currentPendingValueValidIndex: number;\n\n  /**\n   * Stores the hovered over value in the dropdown\n   * (used for styling the options without updating the input)\n   */\n  currentPendingValueValidIndexOnHover: number;\n\n  /** When taking input, this will store the actual text that is being entered */\n  currentPendingValue?: string;\n}\n\nenum SearchDirection {\n  backward = -1,\n  none = 0,\n  forward = 1,\n}\n\nenum HoverStatus {\n  /** Used when the user was hovering and has since moused out of the menu items */\n  clearAll = -2,\n  /** Default \"normal\" state, when no hover has happened or a hover is in progress */\n  default = -1,\n}\n\nconst ScrollIdleDelay = 250; /* ms */\nconst TouchIdleDelay = 500; /* ms */\n\n/**\n * This is used to clear any pending autocomplete text (used when autocomplete is true and\n * allowFreeform is false)\n */\nconst ReadOnlyPendingAutoCompleteTimeout = 1000; /* ms */\n\ninterface IComboBoxOptionWrapperProps extends IComboBoxOption {\n  /** True if the option is currently selected */\n  isSelected: boolean;\n\n  /** True if the option is currently checked (multi-select) */\n  isChecked: boolean;\n\n  /**\n   * A function that returns the children of the OptionWrapper. We pass this in as a function to ensure that\n   * children methods don't get called unnecessarily if the component doesn't need to be updated. This leads\n   * to a significant performance increase in ComboBoxes with many options and/or complex onRenderOption functions\n   */\n  render: () => JSX.Element;\n}\n\n/**\n * Internal class that is used to wrap all ComboBox options.\n * This is used to customize when we want to rerender components,\n * so we don't rerender every option every time render is executed.\n */\nclass ComboBoxOptionWrapper extends React.Component<IComboBoxOptionWrapperProps, {}> {\n  public render(): React.ReactNode {\n    return this.props.render();\n  }\n\n  public shouldComponentUpdate(newProps: IComboBoxOptionWrapperProps): boolean {\n    // The render function will always be different, so we ignore that prop\n    return !shallowCompare({ ...this.props, render: undefined }, { ...newProps, render: undefined });\n  }\n}\n\nconst COMPONENT_NAME = 'ComboBox';\n\n@customizable('ComboBox', ['theme', 'styles'], true)\nexport class ComboBox extends React.Component<IComboBoxProps, IComboBoxState> {\n  public static defaultProps: IComboBoxProps = {\n    options: [],\n    allowFreeform: false,\n    autoComplete: 'on',\n    buttonIconProps: { iconName: 'ChevronDown' },\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n\n  /** The input aspect of the comboBox */\n  private _autofill = React.createRef<IAutofill>();\n\n  /** The wrapping div of the input and button */\n  private _comboBoxWrapper = React.createRef<HTMLDivElement>();\n\n  /** The callout element */\n  private _comboBoxMenu = React.createRef<HTMLDivElement>();\n\n  /** The menu item element that is currently selected */\n  private _selectedElement = React.createRef<HTMLSpanElement>();\n\n  /** The base id for the ComboBox */\n  private _id: string;\n\n  /**\n   * After a character is inserted when autocomplete is true and allowFreeform is false,\n   * remember the task that will clear the pending string of characters.\n   */\n  private _lastReadOnlyAutoCompleteChangeTimeoutId: number | undefined;\n\n  /** Promise used when resolving the comboBox options */\n  private _currentPromise: PromiseLike<IComboBoxOption[]>;\n\n  /** The current visible value sent to the auto fill on render */\n  private _currentVisibleValue: string | undefined;\n  private _classNames: IComboBoxClassNames;\n  private _isScrollIdle: boolean;\n  private _hasPendingValue: boolean;\n  private _scrollIdleTimeoutId: number | undefined;\n  private _processingTouch: boolean;\n  private _lastTouchTimeoutId: number | undefined;\n  /** True if the most recent keydown event was for alt (option) or meta (command). */\n  private _lastKeyDownWasAltOrMeta: boolean | undefined;\n\n  /**\n   * Determines if we should be setting focus back to the input when the menu closes.\n   * The general rule of thumb is if the menu was launched via the keyboard focus should go back\n   * to the input, if it was dropped via the mouse focus should not be forced back to the input.\n   */\n  private _focusInputAfterClose: boolean;\n\n  /** Flag for when we get the first mouseMove */\n  private _gotMouseMove: boolean;\n\n  private _processingClearPendingInfo: boolean;\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  constructor(props: IComboBoxProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      defaultSelectedKey: 'selectedKey',\n      text: 'defaultSelectedKey',\n      selectedKey: 'value',\n      dropdownWidth: 'useComboBoxAsMenuWidth',\n    });\n\n    this._id = props.id || getId('ComboBox');\n    const selectedKeys: string[] | number[] = this._buildDefaultSelectedKeys(\n      props.defaultSelectedKey,\n      props.selectedKey,\n    );\n\n    this._isScrollIdle = true;\n    this._processingTouch = false;\n    this._gotMouseMove = false;\n    this._processingClearPendingInfo = false;\n\n    const initialSelectedIndices: number[] = this._getSelectedIndices(props.options, selectedKeys);\n\n    this.state = {\n      isOpen: false,\n      selectedIndices: initialSelectedIndices,\n      focusState: 'none',\n      suggestedDisplayValue: undefined,\n      currentOptions: this.props.options,\n      currentPendingValueValidIndex: -1,\n      currentPendingValue: undefined,\n      currentPendingValueValidIndexOnHover: HoverStatus.default,\n    };\n  }\n\n  /**\n   * All selected options\n   */\n  public get selectedOptions(): IComboBoxOption[] {\n    const { currentOptions, selectedIndices } = this.state;\n\n    return getAllSelectedOptions(currentOptions, selectedIndices!);\n  }\n\n  public componentDidMount(): void {\n    if (this._comboBoxWrapper.current && !this.props.disabled) {\n      // hook up resolving the options if needed on focus\n      this._events.on(this._comboBoxWrapper.current, 'focus', this._onResolveOptions, true);\n      if ('onpointerdown' in this._comboBoxWrapper.current) {\n        // For ComboBoxes, touching anywhere in the combo box should drop the dropdown, including the input element.\n        // This gives more hit target space for touch environments. We're setting the onpointerdown here, because React\n        // does not support Pointer events yet.\n        this._events.on(this._comboBoxWrapper.current, 'pointerdown', this._onPointerDown, true);\n      }\n    }\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: IComboBoxProps): void {\n    // Update the selectedIndex and currentOptions state if\n    // the selectedKey, value, or options have changed\n    if (\n      newProps.selectedKey !== this.props.selectedKey ||\n      newProps.text !== this.props.text ||\n      newProps.options !== this.props.options\n    ) {\n      const selectedKeys: string[] | number[] = this._buildSelectedKeys(newProps.selectedKey);\n      const indices: number[] = this._getSelectedIndices(newProps.options, selectedKeys);\n\n      this.setState({\n        selectedIndices: indices,\n        currentOptions: newProps.options,\n      });\n      if (newProps.selectedKey === null) {\n        this.setState({\n          suggestedDisplayValue: undefined,\n        });\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IComboBoxProps, prevState: IComboBoxState) {\n    const { allowFreeform, text, onMenuOpen, onMenuDismissed } = this.props;\n    const { isOpen, selectedIndices, currentPendingValueValidIndex } = this.state;\n\n    // If we are newly open or are open and the pending valid index changed,\n    // make sure the currently selected/pending option is scrolled into view\n    if (isOpen && (!prevState.isOpen || prevState.currentPendingValueValidIndex !== currentPendingValueValidIndex)) {\n      // Need this timeout so that the selectedElement ref is correctly updated\n      this._async.setTimeout(() => this._scrollIntoView(), 0);\n    }\n\n    // if an action is taken that put focus in the ComboBox\n    // and If we are open or we are just closed, shouldFocusAfterClose is set,\n    // but we are not the activeElement set focus on the input\n    if (\n      this._hasFocus() &&\n      (isOpen ||\n        (prevState.isOpen &&\n          !isOpen &&\n          this._focusInputAfterClose &&\n          this._autofill.current &&\n          document.activeElement !== this._autofill.current.inputElement))\n    ) {\n      this.focus(undefined /*shouldOpenOnFocus*/, true /*useFocusAsync*/);\n    }\n\n    // If we should focusAfterClose AND\n    //   just opened/closed the menu OR\n    //   are focused AND\n    //     updated the selectedIndex with the menu closed OR\n    //     are not allowing freeform OR\n    //     the value changed\n    // we need to set selection\n    if (\n      this._focusInputAfterClose &&\n      ((prevState.isOpen && !isOpen) ||\n        (this._hasFocus() &&\n          ((!isOpen &&\n            !this.props.multiSelect &&\n            prevState.selectedIndices &&\n            selectedIndices &&\n            prevState.selectedIndices[0] !== selectedIndices[0]) ||\n            !allowFreeform ||\n            text !== prevProps.text)))\n    ) {\n      this._onFocus();\n    }\n\n    this._notifyPendingValueChanged(prevState);\n\n    if (isOpen && !prevState.isOpen && onMenuOpen) {\n      onMenuOpen();\n    }\n\n    if (!isOpen && prevState.isOpen && onMenuDismissed) {\n      onMenuDismissed();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  // Primary Render\n  public render(): JSX.Element {\n    const id = this._id;\n    const errorMessageId = id + '-error';\n    const {\n      className,\n      disabled,\n      required,\n      errorMessage,\n      onRenderContainer = this._onRenderContainer,\n      onRenderLabel = this._onRenderLabel,\n      onRenderList = this._onRenderList,\n      onRenderItem = this._onRenderItem,\n      onRenderOption = this._onRenderOptionContent,\n      allowFreeform,\n      styles: customStyles,\n      theme,\n      keytipProps,\n      persistMenu,\n      multiSelect,\n    } = this.props;\n    const { isOpen, suggestedDisplayValue } = this.state;\n    this._currentVisibleValue = this._getVisibleValue();\n\n    // Single select is already accessible since the whole text is selected\n    // when focus enters the input. Since multiselect appears to clear the input\n    // it needs special accessible text\n    const multiselectAccessibleText = multiSelect\n      ? this._getMultiselectDisplayString(this.state.selectedIndices, this.state.currentOptions, suggestedDisplayValue)\n      : undefined;\n\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, [\n      'onChange',\n      'value',\n    ]);\n\n    const hasErrorMessage = errorMessage && errorMessage.length > 0 ? true : false;\n\n    this._classNames = this.props.getClassNames\n      ? this.props.getClassNames(\n          theme!,\n          !!isOpen,\n          !!disabled,\n          !!required,\n          !!this._hasFocus(),\n          !!allowFreeform,\n          !!hasErrorMessage,\n          className,\n        )\n      : getClassNames(\n          getStyles(theme!, customStyles),\n          className!,\n          !!isOpen,\n          !!disabled,\n          !!required,\n          !!this._hasFocus(),\n          !!allowFreeform,\n          !!hasErrorMessage,\n        );\n\n    const comboBoxWrapper = keytipProps ? (\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\n        {(keytipAttributes: any): JSX.Element =>\n          this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId, keytipAttributes)\n        }\n      </KeytipData>\n    ) : (\n      this._renderComboBoxWrapper(multiselectAccessibleText, errorMessageId)\n    );\n\n    return (\n      <div {...divProps} ref={this._root} className={this._classNames.container}>\n        {onRenderLabel({ props: this.props, multiselectAccessibleText }, this._onRenderLabel)}\n        {comboBoxWrapper}\n        {(persistMenu || isOpen) &&\n          onRenderContainer(\n            {\n              ...this.props,\n              onRenderList,\n              onRenderItem,\n              onRenderOption,\n              options: this.state.currentOptions.map((item, index) => ({ ...item, index: index })),\n              onDismiss: this._onDismiss,\n            },\n            this._onRenderContainer,\n          )}\n        <div\n          role=\"region\"\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n          id={errorMessageId}\n          className={hasErrorMessage ? this._classNames.errorMessage : ''}\n        >\n          {errorMessage !== undefined ? errorMessage : ''}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * {@inheritdoc}\n   */\n  public focus = (shouldOpenOnFocus?: boolean, useFocusAsync?: boolean): void => {\n    if (this._autofill.current) {\n      if (useFocusAsync) {\n        focusAsync(this._autofill.current);\n      } else {\n        this._autofill.current.focus();\n      }\n\n      if (shouldOpenOnFocus) {\n        this.setState({\n          isOpen: true,\n        });\n      }\n    }\n\n    // Programatically setting focus means that there is nothing else that needs to be done\n    // Focus is now contained\n    if (!this._hasFocus()) {\n      this.setState({ focusState: 'focused' });\n    }\n  };\n\n  /**\n   * Close menu callout if it is open\n   */\n  public dismissMenu = (): void => {\n    const { isOpen } = this.state;\n    isOpen && this.setState({ isOpen: false });\n  };\n\n  /**\n   * componentWillReceiveProps handler for the auto fill component\n   * Checks/updates the iput value to set, if needed\n   * @param defaultVisibleValue - the defaultVisibleValue that got passed\n   *  in to the auto fill's componentWillReceiveProps\n   * @returns - the updated value to set, if needed\n   */\n  private _onUpdateValueInAutofillWillReceiveProps = (): string | null => {\n    const comboBox = this._autofill.current;\n\n    if (!comboBox) {\n      return null;\n    }\n\n    if (comboBox.value === null || comboBox.value === undefined) {\n      return null;\n    }\n\n    const visibleValue = this._normalizeToString(this._currentVisibleValue);\n    if (comboBox.value !== visibleValue) {\n      // If visibleValue is empty, ensure that the empty string is used\n      return visibleValue || '';\n    }\n\n    return comboBox.value;\n  };\n\n  private _renderComboBoxWrapper = (\n    multiselectAccessibleText: string | undefined,\n    errorMessageId: string,\n    keytipAttributes: any = {},\n  ): JSX.Element => {\n    const {\n      label,\n      disabled,\n      ariaLabel,\n      ariaDescribedBy,\n      required,\n      errorMessage,\n      buttonIconProps,\n      isButtonAriaHidden = true,\n      title,\n      placeholder: placeholderProp,\n      tabIndex,\n      autofill,\n      iconButtonProps,\n    } = this.props;\n\n    const { isOpen, suggestedDisplayValue } = this.state;\n\n    // If the combobox has focus, is multiselect, and has a display string, then use that placeholder\n    // so that the selected items don't appear to vanish. This is not ideal but it's the only reasonable way\n    // to correct the behavior where the input is cleared so the user can type. If a full refactor is done, then this\n    // should be removed and the multiselect combobox should behave like a picker.\n    const placeholder =\n      this._hasFocus() && this.props.multiSelect && multiselectAccessibleText\n        ? multiselectAccessibleText\n        : placeholderProp;\n\n    return (\n      <div\n        data-ktp-target={keytipAttributes['data-ktp-target']}\n        ref={this._comboBoxWrapper}\n        id={this._id + 'wrapper'}\n        className={this._classNames.root}\n      >\n        <Autofill\n          data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n          data-is-interactable={!disabled}\n          componentRef={this._autofill}\n          id={this._id + '-input'}\n          className={this._classNames.input}\n          type=\"text\"\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onKeyDown={this._onInputKeyDown}\n          onKeyUp={this._onInputKeyUp}\n          onClick={this._onAutofillClick}\n          onTouchStart={this._onTouchStart}\n          onInputValueChange={this._onInputChange}\n          aria-expanded={isOpen}\n          aria-autocomplete={this._getAriaAutoCompleteValue()}\n          role=\"combobox\"\n          readOnly={disabled}\n          aria-labelledby={label && this._id + '-label'}\n          aria-label={ariaLabel && !label ? ariaLabel : undefined}\n          aria-describedby={\n            errorMessage !== undefined\n              ? mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'], errorMessageId)\n              : mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])\n          }\n          aria-activedescendant={this._getAriaActiveDescendantValue()}\n          aria-required={required}\n          aria-disabled={disabled}\n          aria-owns={isOpen ? this._id + '-list' : undefined}\n          spellCheck={false}\n          defaultVisibleValue={this._currentVisibleValue}\n          suggestedDisplayValue={suggestedDisplayValue}\n          updateValueInWillReceiveProps={this._onUpdateValueInAutofillWillReceiveProps}\n          shouldSelectFullInputValueInComponentDidUpdate={\n            this._onShouldSelectFullInputValueInAutofillComponentDidUpdate\n          }\n          title={title}\n          preventValueSelection={!this._hasFocus()}\n          placeholder={placeholder}\n          tabIndex={tabIndex}\n          {...autofill}\n        />\n        <IconButton\n          className={'ms-ComboBox-CaretDown-button'}\n          styles={this._getCaretButtonStyles()}\n          role=\"presentation\"\n          aria-hidden={isButtonAriaHidden}\n          data-is-focusable={false}\n          tabIndex={-1}\n          onClick={this._onComboBoxClick}\n          onBlur={this._onBlur}\n          iconProps={buttonIconProps}\n          disabled={disabled}\n          checked={isOpen}\n          {...iconButtonProps}\n        />\n      </div>\n    );\n  };\n\n  /**\n   * componentDidUpdate handler for the auto fill component\n   *\n   * @param defaultVisibleValue - the current defaultVisibleValue in the auto fill's componentDidUpdate\n   * @param suggestedDisplayValue - the current suggestedDisplayValue in the auto fill's componentDidUpdate\n   * @returns - should the full value of the input be selected?\n   * True if the defaultVisibleValue equals the suggestedDisplayValue, false otherwise\n   */\n  private _onShouldSelectFullInputValueInAutofillComponentDidUpdate = (): boolean => {\n    return this._currentVisibleValue === this.state.suggestedDisplayValue;\n  };\n\n  /**\n   * Get the correct value to pass to the input\n   * to show to the user based off of the current props and state\n   * @returns the value to pass to the input\n   */\n  private _getVisibleValue = (): string | undefined => {\n    const { text, allowFreeform, autoComplete } = this.props;\n    const {\n      selectedIndices,\n      currentPendingValueValidIndex,\n      currentOptions,\n      currentPendingValue,\n      suggestedDisplayValue,\n      isOpen,\n    } = this.state;\n\n    const currentPendingIndexValid = this._indexWithinBounds(currentOptions, currentPendingValueValidIndex);\n\n    // If the user passed is a value prop, use that\n    // unless we are open and have a valid current pending index\n    if (\n      !(isOpen && currentPendingIndexValid) &&\n      text &&\n      (currentPendingValue === null || currentPendingValue === undefined)\n    ) {\n      return text;\n    }\n\n    if (this.props.multiSelect) {\n      // Multi-select\n      if (this._hasFocus()) {\n        let index = -1;\n        if (autoComplete === 'on' && currentPendingIndexValid) {\n          index = currentPendingValueValidIndex;\n        }\n        return this._getPendingString(currentPendingValue, currentOptions, index);\n      } else {\n        return this._getMultiselectDisplayString(selectedIndices, currentOptions, suggestedDisplayValue);\n      }\n    } else {\n      // Single-select\n      let index: number = this._getFirstSelectedIndex();\n      if (allowFreeform) {\n        // If we are allowing freeform and autocomplete is also true\n        // and we've got a pending value that matches an option, remember\n        // the matched option's index\n        if (autoComplete === 'on' && currentPendingIndexValid) {\n          index = currentPendingValueValidIndex;\n        }\n\n        // Since we are allowing freeform, if there is currently a pending value, use that\n        // otherwise use the index determined above (falling back to '' if we did not get a valid index)\n        return this._getPendingString(currentPendingValue, currentOptions, index);\n      } else {\n        // If we are not allowing freeform and have a\n        // valid index that matches the pending value,\n        // we know we will need some version of the pending value\n        if (currentPendingIndexValid && autoComplete === 'on') {\n          // If autoComplete is on, return the\n          // raw pending value, otherwise remember\n          // the matched option's index\n          index = currentPendingValueValidIndex;\n          return this._normalizeToString(currentPendingValue);\n        } else if (!this.state.isOpen && currentPendingValue) {\n          return this._indexWithinBounds(currentOptions, index)\n            ? currentPendingValue\n            : this._normalizeToString(suggestedDisplayValue);\n        } else {\n          return this._indexWithinBounds(currentOptions, index)\n            ? currentOptions[index].text\n            : this._normalizeToString(suggestedDisplayValue);\n        }\n      }\n    }\n  };\n\n  private _getPendingString(\n    currentPendingValue: string | null | undefined,\n    currentOptions: IComboBoxOption[],\n    index: number,\n  ) {\n    return currentPendingValue !== null && currentPendingValue !== undefined\n      ? currentPendingValue\n      : this._indexWithinBounds(currentOptions, index)\n      ? currentOptions[index].text\n      : '';\n  }\n\n  /**\n   * Returns a string that concatenates all of the selected values\n   * for multiselect combobox.\n   */\n  private _getMultiselectDisplayString(\n    selectedIndices: number[] | undefined,\n    currentOptions: IComboBoxOption[],\n    suggestedDisplayValue: string | undefined,\n  ) {\n    const displayValues = [];\n    for (let idx = 0; selectedIndices && idx < selectedIndices.length; idx++) {\n      const index: number = selectedIndices[idx];\n      displayValues.push(\n        this._indexWithinBounds(currentOptions, index)\n          ? currentOptions[index].text\n          : this._normalizeToString(suggestedDisplayValue),\n      );\n    }\n    const { multiSelectDelimiter = ', ' } = this.props;\n    return displayValues.join(multiSelectDelimiter);\n  }\n\n  /**\n   * Is the index within the bounds of the array?\n   * @param options - options to check if the index is valid for\n   * @param index - the index to check\n   * @returns - true if the index is valid for the given options, false otherwise\n   */\n  private _indexWithinBounds(options: IComboBoxOption[] | undefined, index: number): boolean {\n    if (!options) {\n      return false;\n    }\n    return index >= 0 && index < options.length;\n  }\n\n  /**\n   * Handler for typing changes on the input\n   * @param updatedValue - the newly changed value\n   */\n  private _onInputChange = (updatedValue: string): void => {\n    if (this.props.disabled) {\n      this._handleInputWhenDisabled(null /* event */);\n      return;\n    }\n\n    this.props.allowFreeform\n      ? this._processInputChangeWithFreeform(updatedValue)\n      : this._processInputChangeWithoutFreeform(updatedValue);\n  };\n\n  /**\n   * Process the new input's new value when the comboBox\n   * allows freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  private _processInputChangeWithFreeform(updatedValue: string): void {\n    const { currentOptions } = this.state;\n    let newCurrentPendingValueValidIndex = -1;\n\n    // if the new value is empty, see if we have an exact match\n    // and then set the pending info\n    if (updatedValue === '') {\n      const items = currentOptions\n        .map((item, index) => {\n          return { ...item, index };\n        })\n        .filter(\n          option =>\n            option.itemType !== SelectableOptionMenuItemType.Header &&\n            option.itemType !== SelectableOptionMenuItemType.Divider,\n        )\n        .filter(option => this._getPreviewText(option) === updatedValue);\n\n      // if we found a match remember the index\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n\n      this._setPendingInfo(updatedValue, newCurrentPendingValueValidIndex, updatedValue);\n      return;\n    }\n\n    // Remember the original value and then,\n    // make the value lowercase for comparison\n    const originalUpdatedValue: string = updatedValue;\n    updatedValue = updatedValue.toLocaleLowerCase();\n\n    let newSuggestedDisplayValue = '';\n\n    // If autoComplete is on, attempt to find a match from the available options\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n      const items = currentOptions\n        .map((item, index) => {\n          return { ...item, index };\n        })\n        .filter(\n          option =>\n            option.itemType !== SelectableOptionMenuItemType.Header &&\n            option.itemType !== SelectableOptionMenuItemType.Divider,\n        )\n        .filter(\n          option =>\n            this._getPreviewText(option)\n              .toLocaleLowerCase()\n              .indexOf(updatedValue) === 0,\n        );\n      if (items.length > 0) {\n        // use ariaLabel as the value when the option is set\n        const text: string = this._getPreviewText(items[0]);\n\n        // If the user typed out the complete option text, we don't need any suggested display text anymore\n        newSuggestedDisplayValue = text.toLocaleLowerCase() !== updatedValue ? text : '';\n\n        // remember the index of the match we found\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    } else {\n      // If autoComplete is off, attempt to find a match only when the value is exactly equal to the text of an option\n      const items = currentOptions\n        .map((item, index) => {\n          return { ...item, index };\n        })\n        .filter(\n          option =>\n            option.itemType !== SelectableOptionMenuItemType.Header &&\n            option.itemType !== SelectableOptionMenuItemType.Divider,\n        )\n        .filter(option => this._getPreviewText(option).toLocaleLowerCase() === updatedValue);\n\n      // if we found a match remember the index\n      if (items.length === 1) {\n        newCurrentPendingValueValidIndex = items[0].index;\n      }\n    }\n\n    // Set the updated state\n    this._setPendingInfo(originalUpdatedValue, newCurrentPendingValueValidIndex, newSuggestedDisplayValue);\n  }\n\n  /**\n   * Process the new input's new value when the comboBox\n   * does not allow freeform entry\n   * @param updatedValue - the input's newly changed value\n   */\n  private _processInputChangeWithoutFreeform(updatedValue: string): void {\n    const { currentPendingValue, currentPendingValueValidIndex, currentOptions } = this.state;\n\n    if (this.props.autoComplete === 'on') {\n      // If autoComplete is on while allow freeform is off,\n      // we will remember the keypresses and build up a string to attempt to match\n      // as long as characters are typed within a the timeout span of each other,\n      // otherwise we will clear the string and start building a new one on the next keypress.\n      // Also, only do this processing if we have a non-empty value\n      if (updatedValue !== '') {\n        // If we have a pending autocomplete clearing task,\n        // we know that the user is typing with keypresses happening\n        // within the timeout of each other so remove the clearing task\n        // and continue building the pending value with the udpated value\n        if (this._lastReadOnlyAutoCompleteChangeTimeoutId !== undefined) {\n          this._async.clearTimeout(this._lastReadOnlyAutoCompleteChangeTimeoutId);\n          this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n          updatedValue = this._normalizeToString(currentPendingValue) + updatedValue;\n        }\n\n        const originalUpdatedValue: string = updatedValue;\n        updatedValue = updatedValue.toLocaleLowerCase();\n\n        // If autoComplete is on, attempt to find a match where the text of an option starts with the updated value\n        const items = currentOptions\n          .map((item, i) => {\n            return { ...item, index: i };\n          })\n          .filter(\n            option =>\n              option.itemType !== SelectableOptionMenuItemType.Header &&\n              option.itemType !== SelectableOptionMenuItemType.Divider,\n          )\n          .filter(option => option.text.toLocaleLowerCase().indexOf(updatedValue) === 0);\n\n        // If we found a match, udpdate the state\n        if (items.length > 0) {\n          this._setPendingInfo(originalUpdatedValue, items[0].index, this._getPreviewText(items[0]));\n        }\n\n        // Schedule a timeout to clear the pending value after the timeout span\n        this._lastReadOnlyAutoCompleteChangeTimeoutId = this._async.setTimeout(() => {\n          this._lastReadOnlyAutoCompleteChangeTimeoutId = undefined;\n        }, ReadOnlyPendingAutoCompleteTimeout);\n        return;\n      }\n    }\n\n    // If we get here, either autoComplete is on or we did not find a match with autoComplete on.\n    // Remember we are not allowing freeform, so at this point, if we have a pending valid value index\n    // use that; otherwise use the selectedIndex\n    const index = currentPendingValueValidIndex >= 0 ? currentPendingValueValidIndex : this._getFirstSelectedIndex();\n\n    // Since we are not allowing freeform, we need to\n    // set both the pending and suggested values/index\n    // to allow us to select all content in the input to\n    // give the illusion that we are readonly (e.g. freeform off)\n    this._setPendingInfoFromIndex(index);\n  }\n\n  private _getFirstSelectedIndex(): number {\n    return this.state.selectedIndices && this.state.selectedIndices.length > 0 ? this.state.selectedIndices[0] : -1;\n  }\n\n  /**\n   * Walk along the options starting at the index, stepping by the delta (positive or negative)\n   * looking for the next valid selectable index (e.g. skipping headings and dividers)\n   * @param index - the index to get the next selectable index from\n   * @param delta - optional delta to step by when finding the next index, defaults to 0\n   * @returns - the next valid selectable index. If the new index is outside of the bounds,\n   * it will snap to the edge of the options array. If delta == 0 and the given index is not selectable\n   */\n  private _getNextSelectableIndex(index: number, searchDirection: SearchDirection): number {\n    const { currentOptions } = this.state;\n\n    let newIndex = index + searchDirection;\n\n    newIndex = Math.max(0, Math.min(currentOptions.length - 1, newIndex));\n\n    if (!this._indexWithinBounds(currentOptions, newIndex)) {\n      return -1;\n    }\n\n    const option: IComboBoxOption = currentOptions[newIndex];\n\n    if (\n      option.itemType === SelectableOptionMenuItemType.Header ||\n      option.itemType === SelectableOptionMenuItemType.Divider ||\n      option.hidden === true\n    ) {\n      // Should we continue looking for an index to select?\n      if (\n        searchDirection !== SearchDirection.none &&\n        ((newIndex > 0 && searchDirection < SearchDirection.none) ||\n          (newIndex >= 0 && newIndex < currentOptions.length && searchDirection > SearchDirection.none))\n      ) {\n        newIndex = this._getNextSelectableIndex(newIndex, searchDirection);\n      } else {\n        // If we cannot perform a useful search just return the index we were given\n        return index;\n      }\n    }\n\n    // We have the next valid selectable index, return it\n    return newIndex;\n  }\n\n  /**\n   * Set the selected index. Note, this is\n   * the \"real\" selected index, not the pending selected index\n   * @param index - the index to set (or the index to set from if a search direction is provided)\n   * @param searchDirection - the direction to search along the options from the given index\n   */\n  private _setSelectedIndex(\n    index: number,\n    submitPendingValueEvent: React.SyntheticEvent<any>,\n    searchDirection: SearchDirection = SearchDirection.none,\n  ): void {\n    const { onChange, onPendingValueChanged } = this.props;\n    const { currentOptions } = this.state;\n    const { selectedIndices: initialIndices } = this.state;\n\n    // Clone selectedIndices so we don't mutate state\n    let selectedIndices = initialIndices ? initialIndices.slice() : [];\n\n    // Find the next selectable index, if searchDirection is none\n    // we will get our starting index back\n    index = this._getNextSelectableIndex(index, searchDirection);\n\n    if (!this._indexWithinBounds(currentOptions, index)) {\n      return;\n    }\n\n    // Are we at a new index? If so, update the state, otherwise\n    // there is nothing to do\n    if (\n      this.props.multiSelect ||\n      selectedIndices.length < 1 ||\n      (selectedIndices.length === 1 && selectedIndices[0] !== index)\n    ) {\n      const option: IComboBoxOption = { ...currentOptions[index] };\n      // if option doesn't existing, or option is disabled, we noop\n      if (!option || option.disabled) {\n        return;\n      }\n      if (this.props.multiSelect) {\n        // Setting the initial state of option.selected in Multi-select combobox by checking the\n        // selectedIndices array and overriding the undefined issue\n        option.selected = option.selected !== undefined ? !option.selected : selectedIndices.indexOf(index) < 0;\n        if (option.selected && selectedIndices.indexOf(index) < 0) {\n          selectedIndices.push(index);\n        } else if (!option.selected && selectedIndices.indexOf(index) >= 0) {\n          selectedIndices = selectedIndices.filter((value: number) => value !== index);\n        }\n      } else {\n        selectedIndices[0] = index;\n      }\n\n      submitPendingValueEvent.persist();\n\n      // Only setstate if combobox is uncontrolled.\n      if (this.props.selectedKey || this.props.selectedKey === null) {\n        // If ComboBox value is changed, revert preview first\n        if (this._hasPendingValue && onPendingValueChanged) {\n          onPendingValueChanged();\n          this._hasPendingValue = false;\n        }\n        if (onChange) {\n          onChange(submitPendingValueEvent, option, index, undefined);\n        }\n      } else {\n        // Update current options\n        const changedOptions = currentOptions.slice();\n        changedOptions[index] = option;\n\n        // Call onChange after state is updated\n        this.setState(\n          {\n            selectedIndices: selectedIndices,\n            currentOptions: changedOptions,\n          },\n          () => {\n            // If ComboBox value is changed, revert preview first\n            if (this._hasPendingValue && onPendingValueChanged) {\n              onPendingValueChanged();\n              this._hasPendingValue = false;\n            }\n\n            if (onChange) {\n              onChange(submitPendingValueEvent, option, index, undefined);\n            }\n          },\n        );\n      }\n    }\n    if (this.props.multiSelect && this.state.isOpen) {\n      return;\n    }\n    // clear all of the pending info\n    this._clearPendingInfo();\n  }\n\n  /**\n   * Focus (and select) the content of the input\n   * and set the focused state\n   */\n  private _onFocus = (): void => {\n    if (this._autofill.current && this._autofill.current.inputElement) {\n      this._autofill.current.inputElement.select();\n    }\n\n    if (!this._hasFocus()) {\n      this.setState({ focusState: 'focusing' });\n    }\n  };\n\n  /**\n   * Callback issued when the options should be resolved, if they have been updated or\n   * if they need to be passed in the first time. This only does work if an onResolveOptions\n   * callback was passed in\n   */\n  private _onResolveOptions = (): void => {\n    if (this.props.onResolveOptions) {\n      // get the options\n      const newOptions = this.props.onResolveOptions([...this.state.currentOptions]);\n\n      // Check to see if the returned value is an array, if it is update the state\n      // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n      // If it is then resolve it asynchronously.\n      if (Array.isArray(newOptions)) {\n        this.setState({\n          currentOptions: newOptions,\n        });\n      } else if (newOptions && newOptions.then) {\n        // Ensure that the promise will only use the callback if it was the most recent one\n        // and update the state when the promise returns\n        const promise: PromiseLike<IComboBoxOption[]> = (this._currentPromise = newOptions);\n        promise.then((newOptionsFromPromise: IComboBoxOption[]) => {\n          if (promise === this._currentPromise) {\n            this.setState({\n              currentOptions: newOptionsFromPromise,\n            });\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * OnBlur handler. Set the focused state to false\n   * and submit any pending value\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  private _onBlur = (event: React.FocusEvent<HTMLElement | Autofill | BaseButton | Button>): void => {\n    // Do nothing if the blur is coming from something\n    // inside the comboBox root or the comboBox menu since\n    // it we are not really bluring from the whole comboBox\n    let relatedTarget = event.relatedTarget;\n    if (event.relatedTarget === null) {\n      // In IE11, due to lack of support, event.relatedTarget is always\n      // null making every onBlur call to be \"outside\" of the ComboBox\n      // even when it's not. Using document.activeElement is another way\n      // for us to be able to get what the relatedTarget without relying\n      // on the event\n      relatedTarget = document.activeElement as Element;\n    }\n    if (\n      relatedTarget &&\n      // when event coming from withing the comboBox title\n      ((this._root.current && this._root.current.contains(relatedTarget as HTMLElement)) ||\n        // when event coming from within the comboBox list menu\n        (this._comboBoxMenu.current &&\n          (this._comboBoxMenu.current.contains(relatedTarget as HTMLElement) ||\n            // when event coming from the callout containing the comboBox list menu (ex: when scrollBar of the\n            // Callout is clicked) checks if the relatedTarget is a parent of _comboBoxMenu\n            findElementRecursive(this._comboBoxMenu.current, element => element === relatedTarget))))\n    ) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (this._hasFocus()) {\n      this.setState({ focusState: 'none' });\n      if (!this.props.multiSelect || this.props.allowFreeform) {\n        this._submitPendingValue(event);\n      }\n    }\n  };\n\n  /**\n   * Submit a pending value if there is one\n   */\n  private _submitPendingValue(submitPendingValueEvent: any): void {\n    const { onChange, allowFreeform, autoComplete } = this.props;\n    const {\n      currentPendingValue,\n      currentPendingValueValidIndex,\n      currentOptions,\n      currentPendingValueValidIndexOnHover,\n    } = this.state;\n    let { selectedIndices } = this.state;\n\n    // Do not submit any pending value if we\n    // have already initiated clearing the pending info\n    if (this._processingClearPendingInfo) {\n      return;\n    }\n\n    // If we allow freeform we need to handle that\n    if (allowFreeform) {\n      // if currentPendingValue is null or undefined the user did not submit anything\n      // (not even empty because we would have stored that as the pending value)\n      if (currentPendingValue === null || currentPendingValue === undefined) {\n        // if a user did not type anything they may just hovered over an item\n        if (currentPendingValueValidIndexOnHover >= 0) {\n          this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n          this._clearPendingInfo();\n        }\n\n        return;\n      }\n\n      // Check to see if the user typed an exact match\n      if (this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)) {\n        const pendingOptionText: string = this._getPreviewText(\n          currentOptions[currentPendingValueValidIndex],\n        ).toLocaleLowerCase();\n\n        // By exact match, that means: our pending value is the same as the pending option text OR\n        // the pending option starts with the pending value and we have an \"autoComplete\" selection\n        // where the total length is equal to pending option length OR\n        // the live value in the underlying input matches the pending option; update the state\n        if (\n          currentPendingValue.toLocaleLowerCase() === pendingOptionText ||\n          (autoComplete &&\n            pendingOptionText.indexOf(currentPendingValue.toLocaleLowerCase()) === 0 &&\n            this._autofill.current &&\n            this._autofill.current.isValueSelected &&\n            currentPendingValue.length +\n              (this._autofill.current.selectionEnd! - this._autofill.current.selectionStart!) ===\n              pendingOptionText.length) ||\n          (this._autofill.current &&\n            this._autofill.current.inputElement &&\n            this._autofill.current.inputElement.value.toLocaleLowerCase() === pendingOptionText)\n        ) {\n          this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n          if (this.props.multiSelect && this.state.isOpen) {\n            return;\n          }\n          this._clearPendingInfo();\n          return;\n        }\n      }\n\n      if (onChange) {\n        if (onChange) {\n          // trigger onChange to clear value\n          onChange(submitPendingValueEvent, undefined, undefined, currentPendingValue);\n        }\n      } else {\n        // If we are not controlled, create a new selected option\n        const newOption: IComboBoxOption = {\n          key: currentPendingValue || getId(),\n          text: this._normalizeToString(currentPendingValue),\n        };\n        // If it's multiselect, set selected state to true\n        if (this.props.multiSelect) {\n          newOption.selected = true;\n        }\n        const newOptions: IComboBoxOption[] = currentOptions.concat([newOption]);\n        if (selectedIndices) {\n          if (!this.props.multiSelect) {\n            selectedIndices = [];\n          }\n          selectedIndices.push(newOptions.length - 1);\n        }\n        this.setState({\n          currentOptions: newOptions,\n          selectedIndices: selectedIndices,\n        });\n      }\n    } else if (currentPendingValueValidIndex >= 0) {\n      // Since we are not allowing freeform, we must have a matching\n      // to be able to update state\n      this._setSelectedIndex(currentPendingValueValidIndex, submitPendingValueEvent);\n    } else if (currentPendingValueValidIndexOnHover >= 0) {\n      // If all else failed and we were hovering over an item, select it\n      this._setSelectedIndex(currentPendingValueValidIndexOnHover, submitPendingValueEvent);\n    }\n\n    // Finally, clear the pending info\n    this._clearPendingInfo();\n  }\n\n  // Render Callout container and pass in list\n  private _onRenderContainer = (props: IComboBoxProps): JSX.Element => {\n    const {\n      onRenderList,\n      calloutProps,\n      dropdownWidth,\n      dropdownMaxWidth,\n      onRenderUpperContent = this._onRenderUpperContent,\n      onRenderLowerContent = this._onRenderLowerContent,\n      useComboBoxAsMenuWidth,\n      persistMenu,\n      shouldRestoreFocus = true,\n    } = props;\n\n    const { isOpen } = this.state;\n\n    const comboBoxMenuWidth =\n      useComboBoxAsMenuWidth && this._comboBoxWrapper.current\n        ? this._comboBoxWrapper.current.clientWidth + 2\n        : undefined;\n\n    return (\n      <Callout\n        isBeakVisible={false}\n        gapSpace={0}\n        doNotLayer={false}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        directionalHintFixed={false}\n        {...calloutProps}\n        onLayerMounted={this._onLayerMounted}\n        className={css(this._classNames.callout, calloutProps ? calloutProps.className : undefined)}\n        target={this._comboBoxWrapper.current}\n        onDismiss={this._onDismiss}\n        onMouseDown={this._onCalloutMouseDown}\n        onScroll={this._onScroll}\n        setInitialFocus={false}\n        calloutWidth={\n          useComboBoxAsMenuWidth && this._comboBoxWrapper.current\n            ? comboBoxMenuWidth && comboBoxMenuWidth\n            : dropdownWidth\n        }\n        calloutMaxWidth={dropdownMaxWidth ? dropdownMaxWidth : comboBoxMenuWidth}\n        hidden={persistMenu ? !isOpen : undefined}\n        shouldRestoreFocus={shouldRestoreFocus}\n      >\n        {onRenderUpperContent(this.props, this._onRenderUpperContent)}\n        <div className={this._classNames.optionsContainerWrapper} ref={this._comboBoxMenu}>\n          {(onRenderList as any)({ ...props }, this._onRenderList)}\n        </div>\n        {onRenderLowerContent(this.props, this._onRenderLowerContent)}\n      </Callout>\n    );\n  };\n\n  private _onCalloutLayerMounted() {\n    // In persistMenu mode _onLayerMounted is only called once for the lifetime\n    // of the component. Any functionality required for callout \"on mount\" can\n    // go here so that we can also call it again during callout dismissal to reset\n    // object state.\n    this._gotMouseMove = false;\n  }\n\n  private _onLayerMounted = () => {\n    this._onCalloutLayerMounted();\n\n    if (this.props.calloutProps && this.props.calloutProps.onLayerMounted) {\n      this.props.calloutProps.onLayerMounted();\n    }\n  };\n\n  private _onRenderLabel = (onRenderLabelProps: IOnRenderComboBoxLabelProps): JSX.Element | null => {\n    const { label, disabled, required } = onRenderLabelProps.props;\n\n    if (label) {\n      return (\n        <Label id={this._id + '-label'} disabled={disabled} required={required} className={this._classNames.label}>\n          {label}\n          {onRenderLabelProps.multiselectAccessibleText && (\n            <span className={this._classNames.screenReaderText}>{onRenderLabelProps.multiselectAccessibleText}</span>\n          )}\n        </Label>\n      );\n    }\n\n    return null;\n  };\n\n  // Render List of items\n  private _onRenderList = (props: IComboBoxProps): JSX.Element => {\n    const { onRenderItem, options } = props;\n\n    const id = this._id;\n    return (\n      <div\n        id={id + '-list'}\n        className={this._classNames.optionsContainer}\n        aria-labelledby={id + '-label'}\n        role=\"listbox\"\n      >\n        {options.map(item => (onRenderItem as any)(item, this._onRenderItem))}\n      </div>\n    );\n  };\n\n  // Render items\n  private _onRenderItem = (item: IComboBoxOption): JSX.Element | null => {\n    switch (item.itemType) {\n      case SelectableOptionMenuItemType.Divider:\n        return this._renderSeparator(item);\n      case SelectableOptionMenuItemType.Header:\n        return this._renderHeader(item);\n      default:\n        return this._renderOption(item);\n    }\n  };\n\n  // Default _onRenderLowerContent function returns nothing\n  private _onRenderLowerContent = (): null => {\n    return null;\n  };\n\n  // Default _onRenderUpperContent function returns nothing\n  private _onRenderUpperContent = (): null => {\n    return null;\n  };\n\n  // Render separator\n  private _renderSeparator(item: IComboBoxOption): JSX.Element | null {\n    const { index, key } = item;\n\n    if (index && index > 0) {\n      return <div role=\"separator\" key={key} className={this._classNames.divider} />;\n    }\n    return null;\n  }\n\n  private _renderHeader(item: IComboBoxOption): JSX.Element {\n    const { onRenderOption = this._onRenderOptionContent } = this.props;\n\n    return (\n      <div key={item.key} className={this._classNames.header}>\n        {onRenderOption(item, this._onRenderOptionContent)}\n      </div>\n    );\n  }\n\n  private _renderOption = (item: IComboBoxOption): JSX.Element => {\n    const { onRenderOption = this._onRenderOptionContent } = this.props;\n    const id = this._id;\n    const isSelected: boolean = this._isOptionSelected(item.index);\n    const isChecked: boolean = this._isOptionChecked(item.index);\n    const optionStyles = this._getCurrentOptionStyles(item);\n    const optionClassNames = getComboBoxOptionClassNames(this._getCurrentOptionStyles(item));\n    const title = this._getPreviewText(item);\n\n    const onRenderCheckboxLabel = () => onRenderOption(item, this._onRenderOptionContent);\n\n    const getOptionComponent = () => {\n      return !this.props.multiSelect ? (\n        <CommandButton\n          id={id + '-list' + item.index}\n          key={item.key}\n          data-index={item.index}\n          styles={optionStyles}\n          checked={isSelected}\n          className={'ms-ComboBox-option'}\n          onClick={this._onItemClick(item)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseEnter={this._onOptionMouseEnter.bind(this, item.index)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onMouseMove={this._onOptionMouseMove.bind(this, item.index)}\n          onMouseLeave={this._onOptionMouseLeave}\n          role=\"option\"\n          aria-selected={isSelected ? 'true' : 'false'}\n          ariaLabel={this._getPreviewText(item)}\n          disabled={item.disabled}\n          title={title}\n        >\n          {\n            <span className={optionClassNames.optionTextWrapper} ref={isSelected ? this._selectedElement : undefined}>\n              {onRenderOption(item, this._onRenderOptionContent)}\n            </span>\n          }\n        </CommandButton>\n      ) : (\n        <Checkbox\n          id={id + '-list' + item.index}\n          ariaLabel={this._getPreviewText(item)}\n          key={item.key}\n          data-index={item.index}\n          styles={optionStyles}\n          className={'ms-ComboBox-option'}\n          data-is-focusable={true}\n          onChange={this._onItemClick(item)}\n          label={item.text}\n          role=\"option\"\n          checked={isChecked}\n          title={title}\n          disabled={item.disabled}\n          // eslint-disable-next-line react/jsx-no-bind\n          onRenderLabel={onRenderCheckboxLabel}\n          inputProps={{\n            'aria-selected': isSelected ? 'true' : 'false',\n          }}\n        />\n      );\n    };\n\n    return (\n      <ComboBoxOptionWrapper\n        key={item.key}\n        index={item.index}\n        disabled={item.disabled}\n        isSelected={isSelected}\n        isChecked={isChecked}\n        text={item.text}\n        // eslint-disable-next-line react/jsx-no-bind\n        render={getOptionComponent}\n        data={item.data}\n      />\n    );\n  };\n\n  /**\n   * If we are coming from a mouseOut:\n   * there is no visible selected option.\n   *\n   * Else if We are hovering over an item:\n   * that gets the selected look.\n   *\n   * Else:\n   * Use the current valid pending index if it exists OR\n   * we do not have a valid index and we currently have a pending input value,\n   * otherwise use the selected index\n   * */\n  private _isOptionSelected(index: number | undefined): boolean {\n    const { currentPendingValueValidIndexOnHover } = this.state;\n\n    // If the hover state is set to clearAll, don't show a selected index.\n    // Note, this happens when the user moused out of the menu items\n    if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n      return false;\n    }\n\n    return this._getPendingSelectedIndex(true /* includePendingValue */) === index ? true : false;\n  }\n\n  private _isOptionChecked(index: number | undefined): boolean {\n    if (this.props.multiSelect && index !== undefined && this.state.selectedIndices) {\n      let idxOfSelectedIndex = -1;\n\n      idxOfSelectedIndex = this.state.selectedIndices.indexOf(index);\n      return idxOfSelectedIndex >= 0;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the pending selected index taking into account hover, valueValidIndex, and selectedIndex\n   * @param includeCurrentPendingValue - Should we include the currentPendingValue when\n   * finding the index\n   */\n  private _getPendingSelectedIndex(includeCurrentPendingValue: boolean): number {\n    const { currentPendingValueValidIndexOnHover, currentPendingValueValidIndex, currentPendingValue } = this.state;\n\n    return currentPendingValueValidIndexOnHover >= 0\n      ? currentPendingValueValidIndexOnHover\n      : currentPendingValueValidIndex >= 0 ||\n        (includeCurrentPendingValue && currentPendingValue !== null && currentPendingValue !== undefined)\n      ? currentPendingValueValidIndex\n      : this.props.multiSelect\n      ? 0\n      : this._getFirstSelectedIndex();\n  }\n\n  /**\n   * Mouse clicks to headers, dividers and scrollbar should not make input lose focus\n   */\n  private _onCalloutMouseDown: ICalloutProps['onMouseDown'] = ev => {\n    ev.preventDefault();\n  };\n\n  /**\n   * Scroll handler for the callout to make sure the mouse events\n   * for updating focus are not interacting during scroll\n   */\n  private _onScroll = () => {\n    if (!this._isScrollIdle && this._scrollIdleTimeoutId !== undefined) {\n      this._async.clearTimeout(this._scrollIdleTimeoutId);\n      this._scrollIdleTimeoutId = undefined;\n    } else {\n      this._isScrollIdle = false;\n    }\n\n    this._scrollIdleTimeoutId = this._async.setTimeout(() => {\n      this._isScrollIdle = true;\n    }, ScrollIdleDelay);\n  };\n\n  /**\n   * Scroll the selected element into view\n   */\n  private _scrollIntoView(): void {\n    const { onScrollToItem, scrollSelectedToTop } = this.props;\n\n    const { currentPendingValueValidIndex, currentPendingValue } = this.state;\n\n    if (onScrollToItem) {\n      // Use the custom scroll handler\n      onScrollToItem(\n        currentPendingValueValidIndex >= 0 || currentPendingValue !== ''\n          ? currentPendingValueValidIndex\n          : this._getFirstSelectedIndex(),\n      );\n    } else if (this._selectedElement.current && this._selectedElement.current.offsetParent) {\n      // We are using refs, scroll the ref into view\n      if (scrollSelectedToTop) {\n        this._selectedElement.current.offsetParent.scrollIntoView(true);\n      } else {\n        let alignToTop = true;\n\n        if (this._comboBoxMenu.current && this._comboBoxMenu.current.offsetParent) {\n          const scrollableParentRect = this._comboBoxMenu.current.offsetParent.getBoundingClientRect();\n          const selectedElementRect = this._selectedElement.current.offsetParent.getBoundingClientRect();\n\n          // If we are completely in view then we do not need to scroll\n          if (\n            scrollableParentRect.top <= selectedElementRect.top &&\n            scrollableParentRect.top + scrollableParentRect.height >=\n              selectedElementRect.top + selectedElementRect.height\n          ) {\n            return;\n          }\n\n          // If we are lower than the scrollable parent viewport then we should align to the bottom\n          if (\n            scrollableParentRect.top + scrollableParentRect.height <=\n            selectedElementRect.top + selectedElementRect.height\n          ) {\n            alignToTop = false;\n          }\n        }\n\n        this._selectedElement.current.offsetParent.scrollIntoView(alignToTop);\n      }\n    }\n  }\n\n  private _onRenderOptionContent = (item: IComboBoxOption): JSX.Element => {\n    const optionClassNames = getComboBoxOptionClassNames(this._getCurrentOptionStyles(item));\n    return <span className={optionClassNames.optionText}>{item.text}</span>;\n  };\n\n  /**\n   * Click handler for the menu items\n   * to select the item and also close the menu\n   * @param index - the index of the item that was clicked\n   */\n  private _onItemClick(item: IComboBoxOption): (ev: any) => void {\n    const { onItemClick } = this.props;\n    const { index } = item;\n\n    return (ev: any): void => {\n      // only close the callout when it's in single-select mode\n      if (!this.props.multiSelect) {\n        // ensure that focus returns to the input, not the button\n        this._autofill.current && this._autofill.current.focus();\n        this.setState({\n          isOpen: false,\n        });\n      }\n\n      // Continue processing the click only after\n      // performing menu close / control focus(inner working)\n      onItemClick && onItemClick(ev, item, index);\n      this._setSelectedIndex(index as number, ev);\n    };\n  }\n\n  /**\n   * Handles dismissing (cancelling) the menu\n   */\n  private _onDismiss = (): void => {\n    const { onMenuDismiss } = this.props;\n    if (onMenuDismiss) {\n      onMenuDismiss();\n    }\n\n    // In persistMode we need to simulate callout layer mount\n    // since that only happens once. We do it on dismiss since\n    // it works either way.\n    if (this.props.persistMenu) {\n      this._onCalloutLayerMounted();\n    }\n\n    // close the menu\n    this._setOpenStateAndFocusOnClose(false /* isOpen */, false /* focusInputAfterClose */);\n\n    // reset the selected index\n    // to the last value state\n    this._resetSelectedIndex();\n  };\n\n  /**\n   * Get the indices of the options that are marked as selected\n   * @param options - the comboBox options\n   * @param selectedKeys - the known selected keys to find\n   * @returns - an array of the indices of the selected options, empty array if nothing is selected\n   */\n  private _getSelectedIndices(\n    options: IComboBoxOption[] | undefined,\n    selectedKeys: (string | number | undefined)[],\n  ): number[] {\n    if (!options || !selectedKeys) {\n      return [];\n    }\n\n    const selectedIndices: { [key: number]: boolean } = {};\n    options.forEach((option: IComboBoxOption, index: number) => {\n      if (option.selected) {\n        selectedIndices[index] = true;\n      }\n    });\n\n    for (const selectedKey of selectedKeys) {\n      const index = findIndex(options, option => option.key === selectedKey);\n      if (index > -1) {\n        selectedIndices[index] = true;\n      }\n    }\n\n    return Object.keys(selectedIndices)\n      .map(Number)\n      .sort();\n  }\n\n  /**\n   * Reset the selected index by clearing the\n   * input (of any pending text), clearing the pending state,\n   * and setting the suggested display value to the last\n   * selected state text\n   */\n  private _resetSelectedIndex(): void {\n    const { currentOptions } = this.state;\n    this._clearPendingInfo();\n\n    const selectedIndex: number = this._getFirstSelectedIndex();\n    if (selectedIndex > 0 && selectedIndex < currentOptions.length) {\n      this.setState({\n        suggestedDisplayValue: currentOptions[selectedIndex].text,\n      });\n    } else if (this.props.text) {\n      // If we had a value initially, restore it\n      this.setState({\n        suggestedDisplayValue: this.props.text,\n      });\n    }\n  }\n\n  /**\n   * Clears the pending info state\n   */\n  private _clearPendingInfo(): void {\n    this._processingClearPendingInfo = true;\n\n    this.setState(\n      {\n        currentPendingValue: undefined,\n        currentPendingValueValidIndex: -1,\n        suggestedDisplayValue: undefined,\n        currentPendingValueValidIndexOnHover: HoverStatus.default,\n      },\n      this._onAfterClearPendingInfo,\n    );\n  }\n\n  private _onAfterClearPendingInfo = () => {\n    this._processingClearPendingInfo = false;\n  };\n\n  /**\n   * Set the pending info\n   * @param currentPendingValue - new pending value to set\n   * @param currentPendingValueValidIndex - new pending value index to set\n   * @param suggestedDisplayValue - new suggest display value to set\n   */\n  private _setPendingInfo(\n    currentPendingValue?: string,\n    currentPendingValueValidIndex: number = -1,\n    suggestedDisplayValue?: string,\n  ): void {\n    if (this._processingClearPendingInfo) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValue: this._normalizeToString(currentPendingValue),\n      currentPendingValueValidIndex: currentPendingValueValidIndex,\n      suggestedDisplayValue: suggestedDisplayValue,\n      currentPendingValueValidIndexOnHover: HoverStatus.default,\n    });\n  }\n\n  /**\n   * Set the pending info from the given index\n   * @param index - the index to set the pending info from\n   */\n  private _setPendingInfoFromIndex(index: number): void {\n    const { currentOptions } = this.state;\n\n    if (index >= 0 && index < currentOptions.length) {\n      const option = currentOptions[index];\n      this._setPendingInfo(this._getPreviewText(option), index, this._getPreviewText(option));\n    } else {\n      this._clearPendingInfo();\n    }\n  }\n\n  /**\n   * Sets the pending info for the comboBox\n   * @param index - the index to search from\n   * @param searchDirection - the direction to search\n   */\n  private _setPendingInfoFromIndexAndDirection(index: number, searchDirection: SearchDirection): void {\n    const { currentOptions } = this.state;\n\n    // update index to allow content to wrap\n    if (searchDirection === SearchDirection.forward && index >= currentOptions.length - 1) {\n      index = -1;\n    } else if (searchDirection === SearchDirection.backward && index <= 0) {\n      index = currentOptions.length;\n    }\n\n    // get the next \"valid\" index\n    const indexUpdate = this._getNextSelectableIndex(index, searchDirection);\n\n    // if the two indicies are equal we didn't move and\n    // we should attempt to get  get the first/last \"valid\" index to use\n    // (Note, this takes care of the potential cases where the first/last\n    // item is not focusable), otherwise use the updated index\n    if (index === indexUpdate) {\n      if (searchDirection === SearchDirection.forward) {\n        index = this._getNextSelectableIndex(-1, searchDirection);\n      } else if (searchDirection === SearchDirection.backward) {\n        index = this._getNextSelectableIndex(currentOptions.length, searchDirection);\n      }\n    } else {\n      index = indexUpdate;\n    }\n\n    if (this._indexWithinBounds(currentOptions, index)) {\n      this._setPendingInfoFromIndex(index);\n    }\n  }\n\n  private _notifyPendingValueChanged(prevState: IComboBoxState): void {\n    const { onPendingValueChanged } = this.props;\n\n    if (!onPendingValueChanged) {\n      return;\n    }\n\n    const {\n      currentPendingValue,\n      currentOptions,\n      currentPendingValueValidIndex,\n      currentPendingValueValidIndexOnHover,\n    } = this.state;\n\n    let newPendingIndex: number | undefined = undefined;\n    let newPendingValue: string | undefined = undefined;\n\n    if (\n      currentPendingValueValidIndexOnHover !== prevState.currentPendingValueValidIndexOnHover &&\n      this._indexWithinBounds(currentOptions, currentPendingValueValidIndexOnHover)\n    ) {\n      // Set new pending index if hover index was changed\n      newPendingIndex = currentPendingValueValidIndexOnHover;\n    } else if (\n      currentPendingValueValidIndex !== prevState.currentPendingValueValidIndex &&\n      this._indexWithinBounds(currentOptions, currentPendingValueValidIndex)\n    ) {\n      // Set new pending index if currentPendingValueValidIndex was changed\n      newPendingIndex = currentPendingValueValidIndex;\n    } else if (currentPendingValue !== prevState.currentPendingValue) {\n      // Set pendingValue in the case it was changed and no index was changed\n      newPendingValue = currentPendingValue;\n    }\n\n    // Notify when there is a new pending index/value. Also, if there is a pending value, it needs to send undefined.\n    if (newPendingIndex !== undefined || newPendingValue !== undefined || this._hasPendingValue) {\n      onPendingValueChanged(\n        newPendingIndex !== undefined ? currentOptions[newPendingIndex] : undefined,\n        newPendingIndex,\n        newPendingValue,\n      );\n      this._hasPendingValue = newPendingIndex !== undefined || newPendingValue !== undefined;\n    }\n  }\n\n  /**\n   * Sets the isOpen state and updates focusInputAfterClose\n   */\n  private _setOpenStateAndFocusOnClose(isOpen: boolean, focusInputAfterClose: boolean): void {\n    this._focusInputAfterClose = focusInputAfterClose;\n    this.setState({\n      isOpen: isOpen,\n    });\n  }\n\n  /**\n   * Handle keydown on the input\n   * @param ev - The keyboard event that was fired\n   */\n  private _onInputKeyDown = (ev: React.KeyboardEvent<HTMLElement | Autofill>): void => {\n    const { disabled, allowFreeform, autoComplete } = this.props;\n    const { isOpen, currentOptions, currentPendingValueValidIndexOnHover } = this.state;\n\n    // Take note if we are processing an alt (option) or meta (command) keydown.\n    // See comment in _onInputKeyUp for reasoning.\n    this._lastKeyDownWasAltOrMeta = this._isAltOrMeta(ev);\n\n    if (disabled) {\n      this._handleInputWhenDisabled(ev);\n      return;\n    }\n\n    let index = this._getPendingSelectedIndex(false /* includeCurrentPendingValue */);\n\n    switch (ev.which) {\n      case KeyCodes.enter:\n        if (this._autofill.current && this._autofill.current.inputElement) {\n          this._autofill.current.inputElement.select();\n        }\n\n        this._submitPendingValue(ev);\n        if (this.props.multiSelect && isOpen) {\n          this.setState({\n            currentPendingValueValidIndex: index,\n          });\n        } else {\n          // On enter submit the pending value\n          if (\n            isOpen ||\n            ((!allowFreeform ||\n              this.state.currentPendingValue === undefined ||\n              this.state.currentPendingValue === null ||\n              this.state.currentPendingValue.length <= 0) &&\n              this.state.currentPendingValueValidIndex < 0)\n          ) {\n            // if we are open or\n            // if we are not allowing freeform or\n            // our we have no pending value\n            // and no valid pending index\n            // flip the open state\n            this.setState({\n              isOpen: !isOpen,\n            });\n          }\n        }\n        break;\n\n      case KeyCodes.tab:\n        // On enter submit the pending value\n        if (!this.props.multiSelect) {\n          this._submitPendingValue(ev);\n        }\n\n        // If we are not allowing freeform\n        // or the comboBox is open, flip the open state\n        if (isOpen) {\n          this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);\n        }\n\n        // Allow TAB to propigate\n        return;\n\n      case KeyCodes.escape:\n        // reset the selected index\n        this._resetSelectedIndex();\n\n        // Close the menu if opened\n        if (isOpen) {\n          this.setState({\n            isOpen: false,\n          });\n        } else {\n          return;\n        }\n        break;\n\n      case KeyCodes.up:\n        // if we are in clearAll state (e.g. the user as hovering\n        // and has since mousedOut of the menu items),\n        // go to the last index\n        if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n          index = this.state.currentOptions.length;\n        }\n\n        if (ev.altKey || ev.metaKey) {\n          // Close the menu if it is open and break so\n          // that the event get stopPropagation and prevent default.\n          // Otherwise, we need to let the event continue to propagate\n          if (isOpen) {\n            this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);\n            break;\n          }\n\n          return;\n        }\n\n        // Go to the previous option\n        this._setPendingInfoFromIndexAndDirection(index, SearchDirection.backward);\n        break;\n\n      case KeyCodes.down:\n        // Expand the comboBox on ALT + DownArrow\n        if (ev.altKey || ev.metaKey) {\n          this._setOpenStateAndFocusOnClose(true /* isOpen */, true /* focusInputAfterClose */);\n        } else {\n          // if we are in clearAll state (e.g. the user as hovering\n          // and has since mousedOut of the menu items),\n          // go to the first index\n          if (currentPendingValueValidIndexOnHover === HoverStatus.clearAll) {\n            index = -1;\n          }\n\n          // Got to the next option\n          this._setPendingInfoFromIndexAndDirection(index, SearchDirection.forward);\n        }\n        break;\n\n      case KeyCodes.home:\n      case KeyCodes.end:\n        if (allowFreeform) {\n          return;\n        }\n\n        // Set the initial values to respond to HOME\n        // which goes to the first selectable option\n        index = -1;\n        let directionToSearch = SearchDirection.forward;\n\n        // If end, update the values to respond to END\n        // which goes to the last selectable option\n        if (ev.which === KeyCodes.end) {\n          index = currentOptions.length;\n          directionToSearch = SearchDirection.backward;\n        }\n\n        this._setPendingInfoFromIndexAndDirection(index, directionToSearch);\n        break;\n\n      /* eslint-disable no-fallthrough */\n      case KeyCodes.space:\n        // event handled in _onComboBoxKeyUp\n        if (!allowFreeform && autoComplete === 'off') {\n          break;\n        }\n\n      default:\n        /* eslint-enable no-fallthrough */\n        // are we processing a function key? if so bail out\n        if (ev.which >= 112 /* F1 */ && ev.which <= 123 /* F12 */) {\n          return;\n        }\n\n        // If we get here and we got either and ALT key\n        // or meta key, let the event propagate\n        if (ev.keyCode === KeyCodes.alt || ev.key === 'Meta' /* && isOpen */) {\n          return;\n        }\n\n        // If we are not allowing freeform and\n        // allowing autoComplete, handle the input here\n        // since we have marked the input as readonly\n        if (!allowFreeform && autoComplete === 'on') {\n          this._onInputChange(ev.key);\n          break;\n        }\n\n        // allow the key to propagate by default\n        return;\n    }\n\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  /**\n   * Returns true if the key for the event is alt (Mac option) or meta (Mac command).\n   */\n  private _isAltOrMeta(ev: React.KeyboardEvent<HTMLElement | Autofill>): boolean {\n    return ev.which === KeyCodes.alt || ev.key === 'Meta';\n  }\n\n  /**\n   * Handle keyup on the input\n   * @param ev - the keyboard event that was fired\n   */\n  private _onInputKeyUp = (ev: React.KeyboardEvent<HTMLElement | Autofill>): void => {\n    const { disabled, allowFreeform, autoComplete } = this.props;\n    const isOpen = this.state.isOpen;\n\n    // We close the menu on key up only if ALL of the following are true:\n    // - Most recent key down was alt or meta (command)\n    // - The alt/meta key down was NOT followed by some other key (such as down/up arrow to\n    //   expand/collapse the menu)\n    // - We're not on a Mac (or iOS)\n    // This is because on Windows, pressing alt moves focus to the application menu bar or similar,\n    // closing any open context menus. There is not a similar behavior on Macs.\n    const keyPressIsAltOrMetaAlone = this._lastKeyDownWasAltOrMeta && this._isAltOrMeta(ev);\n    this._lastKeyDownWasAltOrMeta = false;\n    const shouldHandleKey = keyPressIsAltOrMetaAlone && !(isMac() || isIOS());\n\n    if (disabled) {\n      this._handleInputWhenDisabled(ev);\n      return;\n    }\n\n    switch (ev.which) {\n      case KeyCodes.space:\n        // If we are not allowing freeform and are not autoComplete\n        // make space expand/collapse the comboBox\n        // and allow the event to propagate\n        if (!allowFreeform && autoComplete === 'off') {\n          this._setOpenStateAndFocusOnClose(!isOpen, !!isOpen);\n        }\n        return;\n      default:\n        if (shouldHandleKey && isOpen) {\n          this._setOpenStateAndFocusOnClose(!isOpen, true /* focusInputAfterClose */);\n        } else {\n          if (this.state.focusState === 'focusing' && this.props.openOnKeyboardFocus) {\n            this.setState({ isOpen: true });\n          }\n          if (this.state.focusState !== 'focused') {\n            this.setState({ focusState: 'focused' });\n          }\n        }\n        return;\n    }\n  };\n\n  private _onOptionMouseEnter(index: number): void {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: index,\n    });\n  }\n\n  private _onOptionMouseMove(index: number): void {\n    this._gotMouseMove = true;\n\n    if (!this._isScrollIdle || this.state.currentPendingValueValidIndexOnHover === index) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: index,\n    });\n  }\n\n  private _onOptionMouseLeave = () => {\n    if (this._shouldIgnoreMouseEvent()) {\n      return;\n    }\n\n    // Ignore the event in persistMenu mode if the callout has\n    // closed. This is to avoid clearing the visuals on item click.\n    if (this.props.persistMenu && !this.state.isOpen) {\n      return;\n    }\n\n    this.setState({\n      currentPendingValueValidIndexOnHover: HoverStatus.clearAll,\n    });\n  };\n\n  private _shouldIgnoreMouseEvent(): boolean {\n    return !this._isScrollIdle || !this._gotMouseMove;\n  }\n\n  /**\n   * Handle dismissing the menu and\n   * eating the required key event when disabled\n   * @param ev - the keyboard event that was fired\n   */\n  private _handleInputWhenDisabled(ev: React.KeyboardEvent<HTMLElement | Autofill> | null): void {\n    // If we are disabled, close the menu (if needed)\n    // and eat all keystokes other than TAB or ESC\n    if (this.props.disabled) {\n      if (this.state.isOpen) {\n        this.setState({ isOpen: false });\n      }\n\n      // When disabled stop propagation and prevent default\n      // of the event unless we have a tab, escape, or function key\n      if (\n        ev !== null &&\n        ev.which !== KeyCodes.tab &&\n        ev.which !== KeyCodes.escape &&\n        (ev.which < 112 /* F1 */ || ev.which > 123) /* F12 */\n      ) {\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Click handler for the button of the comboBox\n   * and the input when not allowing freeform. This\n   * toggles the expand/collapse state of the comboBox (if enbled)\n   */\n  private _onComboBoxClick = (): void => {\n    const { disabled } = this.props;\n    const { isOpen } = this.state;\n\n    if (!disabled) {\n      this._setOpenStateAndFocusOnClose(!isOpen, false /* focusInputAfterClose */);\n      this.setState({ focusState: 'focused' });\n    }\n  };\n\n  /**\n   * Click handler for the autofill.\n   */\n  private _onAutofillClick = (): void => {\n    const { disabled, allowFreeform } = this.props;\n\n    if (allowFreeform && !disabled) {\n      this.focus(this.state.isOpen || this._processingTouch);\n    } else {\n      this._onComboBoxClick();\n    }\n  };\n\n  private _onTouchStart: () => void = () => {\n    if (this._comboBoxWrapper.current && !('onpointerdown' in this._comboBoxWrapper)) {\n      this._handleTouchAndPointerEvent();\n    }\n  };\n\n  private _onPointerDown = (ev: PointerEvent): void => {\n    if (ev.pointerType === 'touch') {\n      this._handleTouchAndPointerEvent();\n\n      ev.preventDefault();\n      ev.stopImmediatePropagation();\n    }\n  };\n\n  private _handleTouchAndPointerEvent() {\n    // If we already have an existing timeeout from a previous touch and pointer event\n    // cancel that timeout so we can set a nwe one.\n    if (this._lastTouchTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTouchTimeoutId);\n      this._lastTouchTimeoutId = undefined;\n    }\n    this._processingTouch = true;\n\n    this._lastTouchTimeoutId = this._async.setTimeout(() => {\n      this._processingTouch = false;\n      this._lastTouchTimeoutId = undefined;\n    }, TouchIdleDelay);\n  }\n\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n  private _getCaretButtonStyles(): IButtonStyles {\n    const { caretDownButtonStyles: customCaretDownButtonStyles } = this.props;\n    return getCaretDownButtonStyles(this.props.theme!, customCaretDownButtonStyles);\n  }\n\n  /**\n   * Get the styles for the current option.\n   * @param item - Item props for the current option\n   */\n  private _getCurrentOptionStyles(item: IComboBoxOption): Partial<IComboBoxOptionStyles> {\n    const { comboBoxOptionStyles: customStylesForAllOptions } = this.props;\n    const { styles: customStylesForCurrentOption } = item;\n\n    return getOptionStyles(\n      this.props.theme!,\n      customStylesForAllOptions,\n      customStylesForCurrentOption,\n      this._isPendingOption(item),\n      item.hidden,\n    );\n  }\n\n  /**\n   * Get the aria-activedescendant value for the comboxbox.\n   * @returns the id of the current focused combo item, otherwise the id of the currently selected element,\n   * null otherwise\n   */\n  private _getAriaActiveDescendantValue(): string | undefined {\n    let descendantText =\n      this.state.isOpen && this.state.selectedIndices && this.state.selectedIndices.length > 0\n        ? this._id + '-list' + this.state.selectedIndices[0]\n        : undefined;\n    if (this.state.isOpen && this._hasFocus() && this.state.currentPendingValueValidIndex !== -1) {\n      descendantText = this._id + '-list' + this.state.currentPendingValueValidIndex;\n    }\n    return descendantText;\n  }\n\n  /**\n   * Get the aria autocomplete value for the Combobox\n   * @returns 'inline' if auto-complete automatically dynamic, 'both' if we have a list of possible values to pick from\n   * and can dynamically populate input, and 'none' if auto-complete is not enabled as we can't give user inputs.\n   */\n  private _getAriaAutoCompleteValue(): 'none' | 'inline' | 'list' | 'both' | undefined {\n    const autoComplete = !this.props.disabled && this.props.autoComplete === 'on';\n    return autoComplete ? (this.props.allowFreeform ? 'inline' : 'both') : 'none';\n  }\n\n  private _isPendingOption(item: IComboBoxOption): boolean {\n    return item && item.index === this.state.currentPendingValueValidIndex;\n  }\n\n  /**\n   * Given default selected key(s) and selected key(s), return the selected keys(s).\n   * When default selected key(s) are available, they take precedence and return them instead of selected key(s).\n   *\n   * @returns No matter what specific types the input parameters are, always return an array of\n   *  either strings or numbers instead of premitive type.  This normlization makes caller's logic easier.\n   */\n  private _buildDefaultSelectedKeys(\n    defaultSelectedKey: string | number | string[] | number[] | null | undefined,\n    selectedKey: string | number | string[] | number[] | null | undefined,\n  ): string[] | number[] {\n    const selectedKeys: string[] | number[] = this._buildSelectedKeys(defaultSelectedKey);\n    if (selectedKeys.length) {\n      return selectedKeys;\n    }\n    return this._buildSelectedKeys(selectedKey);\n  }\n\n  private _buildSelectedKeys(\n    selectedKey: string | number | string[] | number[] | null | undefined,\n  ): string[] | number[] {\n    if (selectedKey === undefined) {\n      return [];\n    }\n\n    // need to cast here so typescript does not complain\n    return (selectedKey instanceof Array ? selectedKey : [selectedKey]) as string[] | number[];\n  }\n\n  // For scenarios where the option's text prop contains embedded styles, we use the option's\n  // ariaLabel value as the text in the input and for autocomplete matching. We know to use this\n  // when the useAriaLabelAsText prop is set to true\n  private _getPreviewText(item: IComboBoxOption): string {\n    return item.useAriaLabelAsText && item.ariaLabel ? item.ariaLabel : item.text;\n  }\n\n  private _normalizeToString(value?: string): string {\n    return value || '';\n  }\n\n  /**\n   * Returns true if the component has some kind of focus. If it's either focusing or if it's focused\n   */\n  private _hasFocus() {\n    return this.state.focusState !== 'none';\n  }\n}\n"]}