{"version":3,"file":"ComboBox.Controlled.Example.js","sourceRoot":"../src/","sources":["components/ComboBox/examples/ComboBox.Controlled.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["// @codepen\r\nimport * as React from 'react';\r\nimport { ComboBox, IComboBoxOption, IComboBox, SelectableOptionMenuItemType, Fabric, mergeStyles } from 'office-ui-fabric-react/lib/index';\r\n\r\nconst INITIAL_OPTIONS: IComboBoxOption[] = [\r\n  { key: 'Header1', text: 'First heading', itemType: SelectableOptionMenuItemType.Header },\r\n  { key: 'A', text: 'Option A' },\r\n  { key: 'B', text: 'Option B' },\r\n  { key: 'C', text: 'Option C' },\r\n  { key: 'D', text: 'Option D' },\r\n  { key: 'divider', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n  { key: 'Header2', text: 'Second heading', itemType: SelectableOptionMenuItemType.Header },\r\n  { key: 'E', text: 'Option E' },\r\n  { key: 'F', text: 'Option F', disabled: true },\r\n  { key: 'G', text: 'Option G' },\r\n  { key: 'H', text: 'Option H' },\r\n  { key: 'I', text: 'Option I' },\r\n  { key: 'J', text: 'Option J' }\r\n];\r\n\r\nconst wrapperClassName = mergeStyles({\r\n  selectors: {\r\n    '& > *': { marginBottom: '20px' },\r\n    '& .ms-ComboBox': { maxWidth: '300px' }\r\n  }\r\n});\r\n\r\nexport interface IComboBoxControlledExampleState {\r\n  /** Current options for the single-select example */\r\n  options: IComboBoxOption[];\r\n  /** Current selected option for the single-select example */\r\n  selectedOptionKey?: string | number;\r\n  /**\r\n   * Initial display value for the single-select example.\r\n   * This will be cleared after the options are resolved for the first time.\r\n   */\r\n  initialDisplayValue?: string;\r\n\r\n  /** Current options for the multi-select example */\r\n  optionsMulti: IComboBoxOption[];\r\n  /** Current selected options for the multi-select example */\r\n  selectedOptionKeys?: string[];\r\n  /**\r\n   * Initial display value for the multi-select example.\r\n   * This will be cleared after the options are resolved for the first time.\r\n   */\r\n  initialDisplayValueMulti?: string;\r\n}\r\n\r\n// tslint:disable:jsx-no-lambda\r\nexport class ComboBoxControlledExample extends React.Component<{}, IComboBoxControlledExampleState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      // The options will be resolved (and updated in state) the first time each example is focused\r\n      options: [],\r\n      optionsMulti: [],\r\n      // This is the text of the option which will be initially selected after the options are resolved\r\n      initialDisplayValue: 'Option C',\r\n      initialDisplayValueMulti: 'Option C'\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const state = this.state;\r\n\r\n    return (\r\n      <Fabric className={wrapperClassName}>\r\n        <ComboBox\r\n          selectedKey={state.selectedOptionKey}\r\n          label=\"Controlled single-select ComboBox (allowFreeform: T)\"\r\n          allowFreeform={true}\r\n          autoComplete=\"on\"\r\n          options={state.options}\r\n          onChange={this._onChange}\r\n          onResolveOptions={this._getOptions}\r\n          text={state.initialDisplayValue}\r\n        />\r\n\r\n        <ComboBox\r\n          multiSelect\r\n          selectedKey={state.selectedOptionKeys}\r\n          label=\"Controlled multi-select ComboBox (allowFreeform: T)\"\r\n          allowFreeform={true}\r\n          autoComplete=\"on\"\r\n          options={state.optionsMulti}\r\n          onChange={this._onChangeMulti}\r\n          onResolveOptions={this._getOptionsMulti}\r\n          text={state.initialDisplayValueMulti}\r\n        />\r\n      </Fabric>\r\n    );\r\n  }\r\n\r\n  private _getOptions = (currentOptions: IComboBoxOption[]): IComboBoxOption[] => {\r\n    if (this.state.options.length > 0) {\r\n      return this.state.options;\r\n    }\r\n\r\n    const options = [...INITIAL_OPTIONS];\r\n\r\n    this.setState({\r\n      options: options,\r\n      selectedOptionKey: 'C',\r\n      initialDisplayValue: undefined\r\n    });\r\n\r\n    return options;\r\n  };\r\n\r\n  private _getOptionsMulti = (currentOptions: IComboBoxOption[]): IComboBoxOption[] => {\r\n    if (this.state.optionsMulti.length > 0) {\r\n      return this.state.optionsMulti;\r\n    }\r\n\r\n    const options = [...INITIAL_OPTIONS];\r\n\r\n    this.setState({\r\n      optionsMulti: options,\r\n      selectedOptionKeys: ['C'],\r\n      initialDisplayValueMulti: undefined\r\n    });\r\n\r\n    return options;\r\n  };\r\n\r\n  private _onChange = (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string): void => {\r\n    console.log('_onChanged() is called: option = ' + JSON.stringify(option));\r\n    if (option) {\r\n      // User chose an existing option\r\n      this.setState({\r\n        selectedOptionKey: option.key\r\n      });\r\n    } else if (value !== undefined) {\r\n      // User typed a new option\r\n      const newOption: IComboBoxOption = { key: value, text: value };\r\n\r\n      this.setState({\r\n        options: [...this.state.options, newOption],\r\n        selectedOptionKey: newOption.key\r\n      });\r\n    }\r\n  };\r\n\r\n  private _onChangeMulti = (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {\r\n    console.log('_onChangeMulti() is called: option = ' + JSON.stringify(option));\r\n    const currentSelectedKeys = this.state.selectedOptionKeys || [];\r\n    if (option) {\r\n      // User selected/de-selected an existing option\r\n      this.setState({\r\n        selectedOptionKeys: this._updateSelectedOptionKeys(currentSelectedKeys, option)\r\n      });\r\n    } else if (value !== undefined) {\r\n      // User typed a freeform option\r\n      const newOption: IComboBoxOption = { key: value, text: value };\r\n      const updatedSelectedKeys: string[] = [...currentSelectedKeys, newOption.key as string];\r\n      this.setState({\r\n        optionsMulti: [...this.state.optionsMulti, newOption],\r\n        selectedOptionKeys: updatedSelectedKeys\r\n      });\r\n    }\r\n  };\r\n\r\n  private _updateSelectedOptionKeys = (selectedKeys: string[], option: IComboBoxOption): string[] => {\r\n    selectedKeys = [...selectedKeys]; // modify a copy\r\n    const index = selectedKeys.indexOf(option.key as string);\r\n    if (option.selected && index < 0) {\r\n      selectedKeys.push(option.key as string);\r\n    } else {\r\n      selectedKeys.splice(index, 1);\r\n    }\r\n    return selectedKeys;\r\n  };\r\n}\r\n"]}