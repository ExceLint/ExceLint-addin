{"version":3,"file":"ComboBox.types.js","sourceRoot":"../src/","sources":["components/ComboBox/ComboBox.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IIconProps } from '../../Icon';\r\nimport { ISelectableOption } from '../../utilities/selectableOption/SelectableOption.types';\r\nimport { ISelectableDroppableTextProps } from '../../utilities/selectableOption/SelectableDroppableText.types';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IButtonStyles } from '../../Button';\r\nimport { IRefObject, IRenderFunction } from '../../Utilities';\r\nimport { IKeytipProps } from '../../Keytip';\r\nimport { IAutofillProps } from '../pickers/AutoFill/BaseAutoFill.types';\r\nimport { IButtonProps } from '../Button/Button.types';\r\n\r\n/**\r\n * {@docCategory ComboBox}\r\n */\r\nexport interface IComboBox {\r\n  /**\r\n   * All selected options\r\n   */\r\n  readonly selectedOptions: IComboBoxOption[];\r\n\r\n  /**\r\n   * If there is a menu open this will dismiss the menu\r\n   */\r\n  dismissMenu: () => void;\r\n\r\n  /**\r\n   * Sets focus to the input in the comboBox\r\n   * @param shouldOpenOnFocus - Determines if we should open the ComboBox menu when the input gets focus\r\n   * @param useFocusAsync - Determines if we should focus the input asynchronously\r\n   * @returns True if focus could be set, false if no operation was taken.\r\n   */\r\n  focus(shouldOpenOnFocus?: boolean, useFocusAsync?: boolean): boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory ComboBox}\r\n */\r\nexport interface IComboBoxOption extends ISelectableOption {\r\n  /**\r\n   * Specific styles for each comboBox option. If you intend to give\r\n   * common styles to all comboBox option please use\r\n   * the prop comboBoxOptionStyles\r\n   */\r\n  styles?: Partial<IComboBoxOptionStyles>;\r\n\r\n  /**\r\n   * In scenarios where embedded data is used at the text prop, we will use the ariaLabel prop\r\n   * to set the aria-label and preview text. Default to false\r\n   * @defaultvalue false;\r\n   */\r\n  useAriaLabelAsText?: boolean;\r\n}\r\n\r\n/**\r\n * {@docCategory ComboBox}\r\n */\r\nexport interface IComboBoxProps extends ISelectableDroppableTextProps<IComboBox, IComboBox> {\r\n  /**\r\n   * Optional callback to access the IComboBox interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IComboBox>;\r\n\r\n  /**\r\n   * Collection of options for this ComboBox\r\n   */\r\n  options: IComboBoxOption[];\r\n\r\n  /**\r\n   * Callback issued when a ComboBox item is clicked.\r\n   */\r\n  onItemClick?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number) => void;\r\n\r\n  /**\r\n   * Callback issued when either:\r\n   * 1) the selected option changes\r\n   * 2) a manually edited value is submitted. In this case there may not be a matched option if allowFreeform\r\n   *    is also true (and hence only value would be true, the other parameter would be null in this case)\r\n   */\r\n  onChange?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => void;\r\n\r\n  /**\r\n   * Callback issued when the user changes the pending value in ComboBox.\r\n   * This will be called any time the component is updated and there is a current\r\n   * pending value. Option, index, and value will all be undefined if no change\r\n   * has taken place and the previously entered pending value is still valid.\r\n   */\r\n  onPendingValueChanged?: (option?: IComboBoxOption, index?: number, value?: string) => void;\r\n\r\n  /**\r\n   * Function that gets invoked when the ComboBox menu is launched\r\n   */\r\n  onMenuOpen?: () => void;\r\n\r\n  /**\r\n   * Function that gets invoked when the ComboBox menu is dismissed\r\n   */\r\n  onMenuDismissed?: () => void;\r\n\r\n  /**\r\n   * Function that gets invoked before the menu gets dismissed\r\n   */\r\n  onMenuDismiss?: () => void;\r\n\r\n  /**\r\n   * Callback issued when the options should be resolved, if they have been updated or\r\n   * if they need to be passed in the first time\r\n   */\r\n  onResolveOptions?: (options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>;\r\n\r\n  /**\r\n   * Callback issued when the ComboBox requests the list to scroll to a specific element\r\n   */\r\n  onScrollToItem?: (itemIndex: number) => void;\r\n\r\n  /**\r\n   * Whether the ComboBox is free form, meaning that the user input is not bound to provided options. Defaults to false.\r\n   */\r\n  allowFreeform?: boolean;\r\n\r\n  /**\r\n   * Whether the ComboBox auto completes. As the user is inputing text, it will be suggested potential matches from\r\n   * the list of options. If the combo box is expanded, this will also scroll to the suggested option, and give it a\r\n   * selected style.\r\n   *\r\n   * @defaultvalue \"on\"\r\n   */\r\n  autoComplete?: 'on' | 'off';\r\n\r\n  /**\r\n   * Value to show in the input, does not have to map to a combobox option\r\n   */\r\n  text?: string;\r\n\r\n  /**\r\n   * When multiple items are selected, this will be used to separate values in the combobox input.\r\n   *\r\n   * @defaultvalue \", \"\r\n   */\r\n  multiSelectDelimiter?: string;\r\n\r\n  /**\r\n   * The IconProps to use for the button aspect of the combobox\r\n   */\r\n  buttonIconProps?: IIconProps;\r\n\r\n  /**\r\n   * The AutofillProps to be passed into the Autofill component inside combobox\r\n   */\r\n  autofill?: IAutofillProps;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Custom styles for this component\r\n   */\r\n  styles?: Partial<IComboBoxStyles>;\r\n\r\n  /**\r\n   * Custom function for providing the classNames for the ComboBox. Can be used to provide\r\n   * all styles for the component instead of applying them on top of the default styles.\r\n   */\r\n  getClassNames?: (\r\n    theme: ITheme,\r\n    isOpen: boolean,\r\n    disabled: boolean,\r\n    required: boolean,\r\n    focused: boolean,\r\n    allowFreeForm: boolean,\r\n    hasErrorMessage: boolean,\r\n    className?: string,\r\n  ) => IComboBoxClassNames;\r\n\r\n  /**\r\n   * Styles for the caret down button.\r\n   */\r\n  caretDownButtonStyles?: Partial<IButtonStyles>;\r\n\r\n  /**\r\n   * Default styles that should be applied to ComboBox options,\r\n   * in case an option does not come with user-defined custom styles\r\n   */\r\n  comboBoxOptionStyles?: Partial<IComboBoxOptionStyles>;\r\n\r\n  /**\r\n   * When options are scrollable the selected option is positioned at the top of the callout when it is opened\r\n   * (unless it has reached the end of the scrollbar).\r\n   * @defaultvalue false;\r\n   */\r\n  scrollSelectedToTop?: boolean;\r\n\r\n  /**\r\n   * Add additional content above the callout list.\r\n   */\r\n  onRenderUpperContent?: IRenderFunction<IComboBoxProps>;\r\n\r\n  /**\r\n   * Add additional content below the callout list.\r\n   */\r\n  onRenderLowerContent?: IRenderFunction<IComboBoxProps>;\r\n\r\n  /**\r\n   * Custom width for dropdown (unless useComboBoxAsMenuWidth is undefined or false)\r\n   */\r\n  dropdownWidth?: number;\r\n\r\n  /**\r\n   * Whether to use the ComboBoxes width as the menu's width\r\n   */\r\n  useComboBoxAsMenuWidth?: boolean;\r\n\r\n  /**\r\n   * Custom max width for dropdown\r\n   */\r\n  dropdownMaxWidth?: number;\r\n\r\n  /**\r\n   * Sets the 'aria-hidden' attribute on the ComboBox's button element instructing screen readers how to handle\r\n   * the element. This element is hidden by default because all functionality is handled by the input element and\r\n   * the arrow button is only meant to be decorative.\r\n   * @defaultvalue true\r\n   */\r\n  isButtonAriaHidden?: boolean;\r\n\r\n  /**\r\n   * Optional prop to add a string id that can be referenced inside the aria-describedby attribute\r\n   */\r\n  ariaDescribedBy?: string;\r\n\r\n  /**\r\n   * Optional keytip for this combo box\r\n   */\r\n  keytipProps?: IKeytipProps;\r\n\r\n  /**\r\n   * Menu will not be created or destroyed when opened or closed, instead it\r\n   * will be hidden. This will improve perf of the menu opening but could potentially\r\n   * impact overall perf by having more elements in the dom. Should only be used\r\n   * when perf is important.\r\n   * Note: This may increase the amount of time it takes for the comboBox itself to mount.\r\n   */\r\n  persistMenu?: boolean;\r\n\r\n  /**\r\n   * When specified, determines whether the callout (the menu which drops down) should\r\n   * restore the focus after being dismissed or not.  If false, then the menu will not try\r\n   * to set focus to whichever element had focus before the menu was opened.\r\n   * @defaultvalue true;\r\n   */\r\n  shouldRestoreFocus?: boolean;\r\n\r\n  /**\r\n   * Optional iconButton props on combo box\r\n   */\r\n  iconButtonProps?: IButtonProps;\r\n\r\n  /**\r\n   * Custom render function for the label text.\r\n   */\r\n  onRenderLabel?: IRenderFunction<IOnRenderComboBoxLabelProps>;\r\n}\r\n\r\n/**\r\n * {@docCategory ComboBox}\r\n */\r\nexport interface IOnRenderComboBoxLabelProps {\r\n  /**\r\n   * Props to render the combobox.\r\n   */\r\n  props: IComboBoxProps;\r\n\r\n  /**\r\n   * Accessible text for label when combobox is multiselected.\r\n   */\r\n  multiselectAccessibleText?: string;\r\n}\r\n\r\n/**\r\n * {@docCategory ComboBox}\r\n */\r\nexport interface IComboBoxStyles {\r\n  /**\r\n   * Style for the container which has the ComboBox and the label\r\n   */\r\n  container: IStyle;\r\n\r\n  /**\r\n   * Style for the label element of the ComboBox.\r\n   */\r\n  label: IStyle;\r\n\r\n  /**\r\n   * Style for the label element of the ComboBox in the disabled state.\r\n   */\r\n  labelDisabled: IStyle;\r\n\r\n  /**\r\n   * Base styles for the root element of all ComboBoxes.\r\n   */\r\n  root: IStyle;\r\n\r\n  /**\r\n   * Styles for the root element for variant of ComboBox with an errorMessage in the props.\r\n   */\r\n  rootError: IStyle;\r\n\r\n  /**\r\n   * Styles for variant of ComboBox where allowFreeForm is false in the props.\r\n   */\r\n  rootDisallowFreeForm: IStyle;\r\n\r\n  /**\r\n   * Styles for when the ComboBox is hovered. These styles are applied for all comboBoxes except when\r\n   * the comboBox is disabled.\r\n   */\r\n  rootHovered: IStyle;\r\n\r\n  /**\r\n   * Styles for when the ComboBox is active. These styles are applied for all comboBoxes except when\r\n   * the comboBox is disabled.\r\n   */\r\n  rootPressed: IStyle;\r\n\r\n  /**\r\n   * Styles for when the ComboBox is focused. These styles are applied for all comboBoxes except when\r\n   * the comboBox is disabled.\r\n   */\r\n  rootFocused: IStyle;\r\n\r\n  /**\r\n   * Styles for when the comboBox is disabled. These styles override all the other styles.\r\n   * NOTE : Hover (or) Focused (or) active styles are not applied for disabled comboBoxes.\r\n   */\r\n  rootDisabled: IStyle;\r\n\r\n  /**\r\n   * Base styles for the input element - which contains the currently selected\r\n   * option.\r\n   */\r\n  input: IStyle;\r\n\r\n  /**\r\n   * Style override for the input element when comboBox is disabled.\r\n   */\r\n  inputDisabled: IStyle;\r\n\r\n  /**\r\n   * Styles for the error Message text of the comboBox.\r\n   */\r\n  errorMessage: IStyle;\r\n\r\n  /**\r\n   * Styles for the callout.\r\n   */\r\n  callout: IStyle;\r\n\r\n  /**\r\n   * Styles for the optionsContainerWrapper.\r\n   */\r\n  optionsContainerWrapper: IStyle;\r\n\r\n  /**\r\n   * Styles for the container of all the Combobox options\r\n   * Includes the headers and dividers.\r\n   */\r\n  optionsContainer: IStyle;\r\n\r\n  /**\r\n   * Styles for a header in the options.\r\n   */\r\n  header: IStyle;\r\n\r\n  /**\r\n   * Styles for a divider in the options.\r\n   */\r\n  divider: IStyle;\r\n\r\n  /**\r\n   * Styles for hidden screen reader text.\r\n   */\r\n  screenReaderText: IStyle;\r\n}\r\n\r\n/**\r\n * {@docCategory ComboBox}\r\n */\r\nexport interface IComboBoxOptionStyles extends IButtonStyles {\r\n  /**\r\n   * Styles for the text inside the comboBox option.\r\n   * This should be used instead of the description\r\n   * inside IButtonStyles because we custom render the text\r\n   * in the comboBox options.\r\n   */\r\n  optionText: IStyle;\r\n\r\n  /**\r\n   * Styles for the comboBox option text's wrapper.\r\n   */\r\n  optionTextWrapper: IStyle;\r\n}\r\n\r\n/**\r\n * {@docCategory ComboBox}\r\n */\r\nexport interface IComboBoxClassNames {\r\n  container: string;\r\n  label: string;\r\n  root: string;\r\n  input: string;\r\n  errorMessage: string;\r\n  callout: string;\r\n  optionsContainer: string;\r\n  header: string;\r\n  divider: string;\r\n  optionsContainerWrapper: string;\r\n  screenReaderText: string;\r\n}\r\n\r\n/**\r\n * {@docCategory ComboBox}\r\n */\r\nexport interface IComboBoxOptionClassNames {\r\n  optionText: string;\r\n  root: string;\r\n  optionTextWrapper: string;\r\n}\r\n"]}