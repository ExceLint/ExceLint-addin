{"version":3,"file":"SearchBox.types.js","sourceRoot":"../src/","sources":["components/SearchBox/SearchBox.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { ITheme, IStyle } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { IButtonProps } from '../../Button';\r\nimport { IIconProps } from '../../Icon';\r\n\r\nexport interface ISearchBox {\r\n  /**\r\n   * Sets focus inside the search input box.\r\n   */\r\n  focus(): void;\r\n\r\n  /**\r\n   * Returns whether or not the SearchBox has focus\r\n   */\r\n  hasFocus(): boolean;\r\n}\r\n\r\nexport interface ISearchBoxProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  /**\r\n   * Optional callback to access the ISearchBox interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<ISearchBox>;\r\n\r\n  /**\r\n   * Placeholder for the search box.\r\n   */\r\n  placeholder?: string;\r\n\r\n  /**\r\n   * Deprecated. Use `placeholder` instead.\r\n   * @deprecated Use `placeholder` instead.\r\n   */\r\n  labelText?: string;\r\n\r\n  /**\r\n   * Callback function for when the typed input for the SearchBox has changed.\r\n   */\r\n  onChange?: (newValue: any) => void;\r\n\r\n  /**\r\n   * Callback executed when the user presses enter in the search box.\r\n   */\r\n  onSearch?: (newValue: any) => void;\r\n\r\n  /**\r\n   * Callback executed when the user clears the search box by either clicking 'X' or hitting escape.\r\n   */\r\n  onClear?: (ev?: any) => void;\r\n\r\n  /**\r\n   * Callback executed when the user presses escape in the search box.\r\n   */\r\n  onEscape?: (ev?: any) => void;\r\n\r\n  /**\r\n   * Deprecated at v0.52.2, use `onChange` instead.\r\n   * @deprecated Use `onChange` instead.\r\n   */\r\n  onChanged?: (newValue: any) => void;\r\n\r\n  /**\r\n   * The value of the text in the SearchBox.\r\n   */\r\n  value?: string;\r\n\r\n  /**\r\n   * The default value of the text in the SearchBox, in the case of an uncontrolled component.\r\n   * This prop is being deprecated since so far, uncontrolled behavior has not been implemented.\r\n   * @deprecated Not implemented.\r\n   */\r\n  defaultValue?: string;\r\n\r\n  /**\r\n   * CSS class to apply to the SearchBox.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * The aria label of the SearchBox for the benefit of screen readers.\r\n   * @defaultvalue placeholder\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * The props for the clear button.\r\n   */\r\n  clearButtonProps?: IButtonProps;\r\n\r\n  /**\r\n   * The props for the icon.\r\n   */\r\n  iconProps?: Pick<IIconProps, Exclude<keyof IIconProps, 'className'>>;\r\n\r\n  /**\r\n   * Whether or not the SearchBox is underlined.\r\n   * @defaultvalue false\r\n   */\r\n  underlined?: boolean;\r\n\r\n  /**\r\n   * Theme (provided through customization).\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<ISearchBoxStyleProps, ISearchBoxStyles>;\r\n\r\n  /**\r\n   * Whether or not to animate the SearchBox icon on focus.\r\n   * @defaultvalue false\r\n   */\r\n  disableAnimation?: boolean;\r\n}\r\n\r\nexport interface ISearchBoxStyleProps {\r\n  theme: ITheme;\r\n  className?: string;\r\n  disabled?: boolean;\r\n  hasFocus?: boolean;\r\n  underlined?: boolean;\r\n  hasInput?: boolean;\r\n  disableAnimation?: boolean;\r\n}\r\n\r\nexport interface ISearchBoxStyles {\r\n  root?: IStyle;\r\n  iconContainer?: IStyle;\r\n  icon?: IStyle;\r\n  field?: IStyle;\r\n  clearButton?: IStyle;\r\n}\r\n"]}