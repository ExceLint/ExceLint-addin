{"version":3,"file":"Keytip.js","sourceRoot":"../src/","sources":["components/Keytip/Keytip.tsx"],"names":[],"mappings":";;;IASA;;OAEG;IACH;QAA4B,kCAA+B;QAA3D;;QA6CA,CAAC;QA5CQ,uBAAM,GAAb;YACQ,IAAA,eAA0D,EAAxD,8BAAY,EAAE,kBAAM,EAAE,4CAAmB,CAAgB;YAC3D,IAAA,sCAAY,CAAgB;YAElC,IAAI,YAAoB,CAAC;YACzB,gDAAgD;YAChD,IAAI,mBAAmB,EAAE;gBACvB,YAAY,GAAG,oCAAsB,CAAC,4BAAc,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC;aAC1F;iBAAM;gBACL,YAAY,GAAG,oCAAsB,CAAC,YAAY,CAAC,CAAC;aACrD;YAED,IAAI,MAAM,EAAE;gBACV,gEAAgE;gBAChE,yBAAyB;gBACzB,YAAY,wBACP,YAAY,IACf,WAAW,EAAE,IAAI,EACjB,eAAe,EAAE,gCAAe,CAAC,WAAW,GAC7C,CAAC;aACH;YAED,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,eAAe,KAAK,SAAS,EAAE;gBAC/D,mDAAmD;gBACnD,YAAY,wBACP,YAAY,IACf,eAAe,EAAE,gCAAe,CAAC,YAAY,GAC9C,CAAC;aACH;YAED,OAAO,CACL,oBAAC,iBAAO,uBACF,YAAY,IAChB,aAAa,EAAE,KAAK,EACpB,UAAU,EAAE,IAAI,EAChB,cAAc,EAAE,CAAC,EACjB,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,sCAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gCAAgB,EAClE,sBAAsB,EAAE,IAAI,EAC5B,MAAM,EAAE,YAAY;gBAEpB,oBAAC,6BAAa,uBAAK,IAAI,CAAC,KAAK,EAAI,CACzB,CACX,CAAC;QACJ,CAAC;QACH,aAAC;IAAD,CAAC,AA7CD,CAA4B,yBAAa,GA6CxC;IA7CY,wBAAM","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent } from '../../Utilities';\r\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\r\nimport { Callout } from '../../Callout';\r\nimport { DirectionalHint } from '../../ContextualMenu';\r\nimport { IKeytip, IKeytipProps } from './Keytip.types';\r\nimport { KeytipContent } from './KeytipContent';\r\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\r\n\r\n/**\r\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\r\n */\r\nexport class Keytip extends BaseComponent<IKeytipProps, {}> implements IKeytip {\r\n  public render(): JSX.Element {\r\n    const { keySequences, offset, overflowSetSequence } = this.props;\r\n    let { calloutProps } = this.props;\r\n\r\n    let keytipTarget: string;\r\n    // Take into consideration the overflow sequence\r\n    if (overflowSetSequence) {\r\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\r\n    } else {\r\n      keytipTarget = ktpTargetFromSequences(keySequences);\r\n    }\r\n\r\n    if (offset) {\r\n      // Set callout to top-left corner, will be further positioned in\r\n      // getCalloutOffsetStyles\r\n      calloutProps = {\r\n        ...calloutProps,\r\n        coverTarget: true,\r\n        directionalHint: DirectionalHint.topLeftEdge\r\n      };\r\n    }\r\n\r\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\r\n      // Default callout directional hint to BottomCenter\r\n      calloutProps = {\r\n        ...calloutProps,\r\n        directionalHint: DirectionalHint.bottomCenter\r\n      };\r\n    }\r\n\r\n    return (\r\n      <Callout\r\n        {...calloutProps}\r\n        isBeakVisible={false}\r\n        doNotLayer={true}\r\n        minPagePadding={0}\r\n        styles={offset ? getCalloutOffsetStyles(offset) : getCalloutStyles}\r\n        preventDismissOnScroll={true}\r\n        target={keytipTarget}\r\n      >\r\n        <KeytipContent {...this.props} />\r\n      </Callout>\r\n    );\r\n  }\r\n}\r\n"]}