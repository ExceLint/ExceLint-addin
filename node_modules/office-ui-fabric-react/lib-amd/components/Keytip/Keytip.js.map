{"version":3,"file":"Keytip.js","sourceRoot":"../src/","sources":["components/Keytip/Keytip.tsx"],"names":[],"mappings":";;;IAQA;;OAEG;IACH;QAA4B,kCAAiC;QAA7D;;QA6CA,CAAC;QA5CQ,uBAAM,GAAb;YACQ,IAAA,eAA0D,EAAxD,8BAAY,EAAE,kBAAM,EAAE,4CAAkC,CAAC;YAC3D,IAAA,sCAAY,CAAgB;YAElC,IAAI,YAAoB,CAAC;YACzB,gDAAgD;YAChD,IAAI,mBAAmB,EAAE;gBACvB,YAAY,GAAG,oCAAsB,CAAC,4BAAc,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC;aAC1F;iBAAM;gBACL,YAAY,GAAG,oCAAsB,CAAC,YAAY,CAAC,CAAC;aACrD;YAED,IAAI,MAAM,EAAE;gBACV,gEAAgE;gBAChE,yBAAyB;gBACzB,YAAY,yCACP,YAAY,KACf,WAAW,EAAE,IAAI,EACjB,eAAe,EAAE,gCAAe,CAAC,WAAW,GAC7C,CAAC;aACH;YAED,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,eAAe,KAAK,SAAS,EAAE;gBAC/D,mDAAmD;gBACnD,YAAY,yCACP,YAAY,KACf,eAAe,EAAE,gCAAe,CAAC,YAAY,GAC9C,CAAC;aACH;YAED,OAAO,CACL,oBAAC,iBAAO,uBACF,YAAY,IAChB,aAAa,EAAE,KAAK,EACpB,UAAU,EAAE,IAAI,EAChB,cAAc,EAAE,CAAC,EACjB,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,sCAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gCAAgB,EAClE,sBAAsB,EAAE,IAAI,EAC5B,MAAM,EAAE,YAAY;gBAEpB,oBAAC,6BAAa,uBAAK,IAAI,CAAC,KAAK,EAAI,CACzB,CACX,CAAC;QACJ,CAAC;QACH,aAAC;IAAD,CAAC,AA7CD,CAA4B,KAAK,CAAC,SAAS,GA6C1C;IA7CY,wBAAM","sourcesContent":["import * as React from 'react';\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../ContextualMenu';\nimport { IKeytipProps } from './Keytip.types';\nimport { KeytipContent } from './KeytipContent';\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\n\n/**\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\n */\nexport class Keytip extends React.Component<IKeytipProps, {}> {\n  public render(): JSX.Element {\n    const { keySequences, offset, overflowSetSequence } = this.props;\n    let { calloutProps } = this.props;\n\n    let keytipTarget: string;\n    // Take into consideration the overflow sequence\n    if (overflowSetSequence) {\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\n    } else {\n      keytipTarget = ktpTargetFromSequences(keySequences);\n    }\n\n    if (offset) {\n      // Set callout to top-left corner, will be further positioned in\n      // getCalloutOffsetStyles\n      calloutProps = {\n        ...calloutProps,\n        coverTarget: true,\n        directionalHint: DirectionalHint.topLeftEdge,\n      };\n    }\n\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\n      // Default callout directional hint to BottomCenter\n      calloutProps = {\n        ...calloutProps,\n        directionalHint: DirectionalHint.bottomCenter,\n      };\n    }\n\n    return (\n      <Callout\n        {...calloutProps}\n        isBeakVisible={false}\n        doNotLayer={true}\n        minPagePadding={0}\n        styles={offset ? getCalloutOffsetStyles(offset) : getCalloutStyles}\n        preventDismissOnScroll={true}\n        target={keytipTarget}\n      >\n        <KeytipContent {...this.props} />\n      </Callout>\n    );\n  }\n}\n"]}