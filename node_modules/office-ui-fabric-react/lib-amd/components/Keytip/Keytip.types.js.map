{"version":3,"file":"Keytip.types.js","sourceRoot":"../src/","sources":["components/Keytip/Keytip.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ICalloutProps } from '../../Callout';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject, IPoint } from '../../Utilities';\r\n\r\nexport interface IKeytip {}\r\n\r\nexport interface IKeytipProps {\r\n  /**\r\n   * Optional callback to access the Keytip component. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IKeytip>;\r\n\r\n  /**\r\n   * Content to put inside the keytip\r\n   */\r\n  content: string;\r\n\r\n  /**\r\n   * Theme for the component\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * T/F if the corresponding control for this keytip is disabled\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * T/F if the keytip is visible\r\n   */\r\n  visible?: boolean;\r\n\r\n  /**\r\n   * Function to call when this keytip is activated.\r\n   * 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'.\r\n   * 'target' is the DOM element marked with 'data-ktp-target'.\r\n   */\r\n  onExecute?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\r\n\r\n  /**\r\n   * Function to call when the keytip is the currentKeytip and a return sequence is pressed.\r\n   * 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'.\r\n   * 'target' is the DOM element marked with 'data-ktp-target'.\r\n   */\r\n  onReturn?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;\r\n\r\n  /**\r\n   * Array of KeySequences which is the full key sequence to trigger this keytip\r\n   * Should not include initial 'start' key sequence\r\n   */\r\n  keySequences: string[];\r\n\r\n  /**\r\n   * Full KeySequence of the overflow set button, will be set automatically if this keytip is inside an overflow\r\n   */\r\n  overflowSetSequence?: string[];\r\n\r\n  /**\r\n   * ICalloutProps to pass to the callout element\r\n   */\r\n  calloutProps?: ICalloutProps;\r\n\r\n  /**\r\n   * Optional styles for the component.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IKeytipStyleProps, IKeytipStyles>;\r\n\r\n  /**\r\n   * Offset x and y for the keytip, added from the top-left corner\r\n   * By default the keytip will be anchored to the bottom-center of the element\r\n   */\r\n  offset?: IPoint;\r\n\r\n  /**\r\n   * Whether or not this keytip will have children keytips that are dynamically created (DOM is generated on keytip activation)\r\n   * Common cases are a Pivot or Modal\r\n   */\r\n  hasDynamicChildren?: boolean;\r\n\r\n  /**\r\n   * Whether or not this keytip belongs to a component that has a menu\r\n   * Keytip mode will stay on when a menu is opened, even if the items in that menu have no keytips\r\n   */\r\n  hasMenu?: boolean;\r\n}\r\n\r\n/**\r\n * Props to style Keytip component\r\n */\r\nexport interface IKeytipStyleProps {\r\n  /**\r\n   * The theme for the keytip.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Whether the keytip is disabled or not.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * T/F if the keytip is visible\r\n   */\r\n  visible?: boolean;\r\n}\r\n\r\nexport interface IKeytipStyles {\r\n  /**\r\n   * Style for the div container surrounding the keytip content.\r\n   */\r\n  container: IStyle;\r\n\r\n  /**\r\n   * Style for the keytip content element.\r\n   */\r\n  root: IStyle;\r\n}\r\n"]}