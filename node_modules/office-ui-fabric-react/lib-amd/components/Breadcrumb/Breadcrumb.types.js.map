{"version":3,"file":"Breadcrumb.types.js","sourceRoot":"../src/","sources":["components/Breadcrumb/Breadcrumb.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IBreadCrumbData } from './Breadcrumb.base';\r\nimport { IIconProps } from '../../Icon';\r\nimport { IRefObject, IRenderFunction, IComponentAs, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { ITheme, IStyle } from '../../Styling';\r\n\r\nexport interface IBreadcrumb {\r\n  /**\r\n   * Sets focus to the first breadcrumb link.\r\n   */\r\n  focus(): void;\r\n}\r\n\r\nexport interface IBreadcrumbProps extends React.HTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Optional callback to access the IBreadcrumb interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IBreadcrumb>;\r\n\r\n  /**\r\n   * Collection of breadcrumbs to render\r\n   */\r\n  items: IBreadcrumbItem[];\r\n\r\n  /**\r\n   * Optional root classname for the root breadcrumb element.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Render a custom divider in place of the default chevron `>`\r\n   */\r\n  dividerAs?: IComponentAs<IDividerAsProps>;\r\n\r\n  /**\r\n   * The maximum number of breadcrumbs to display before coalescing.\r\n   * If not specified, all breadcrumbs will be rendered.\r\n   */\r\n  maxDisplayedItems?: number;\r\n\r\n  /** Method to call when trying to render an item. */\r\n\r\n  onRenderItem?: IRenderFunction<IBreadcrumbItem>;\r\n\r\n  /**\r\n   * Method to call when reducing the length of the breadcrumb.\r\n   * Return undefined to never reduce breadcrumb length\r\n   */\r\n  onReduceData?: (data: IBreadCrumbData) => IBreadCrumbData | undefined;\r\n\r\n  /**\r\n   * Aria label to place on the navigation landmark for breadcrumb\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Optional name to use for aria label on overflow button.\r\n   */\r\n  overflowAriaLabel?: string;\r\n\r\n  /**\r\n   * Optional index where overflow items will be collapsed. Defaults to 0.\r\n   */\r\n  overflowIndex?: number;\r\n\r\n  styles?: IStyleFunctionOrObject<IBreadcrumbStyleProps, IBreadcrumbStyles>;\r\n  theme?: ITheme;\r\n}\r\n\r\nexport interface IBreadcrumbItem {\r\n  /**\r\n   * Text to display to the user for the breadcrumb\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * Arbitrary unique string associated with the breadcrumb\r\n   */\r\n  key: string;\r\n\r\n  /**\r\n   * Callback issued when the breadcrumb is selected.\r\n   */\r\n  onClick?: (ev?: React.MouseEvent<HTMLElement>, item?: IBreadcrumbItem) => void;\r\n\r\n  /**\r\n   * Url to navigate to when this breadcrumb is clicked.\r\n   */\r\n  href?: string;\r\n\r\n  /**\r\n   * If this breadcrumb item is the item the user is currently on, if set to true, aria-current=\"page\" will be applied to this\r\n   * breadcrumb link\r\n   */\r\n  isCurrentItem?: boolean;\r\n}\r\n\r\nexport interface IDividerAsProps extends IIconProps {\r\n  /**\r\n   * Optional breadcrumb item corresponds to left of the divider to be passed for custom rendering.\r\n   * For overflowed items, it will be last item in the list\r\n   */\r\n  item?: IBreadcrumbItem;\r\n}\r\n\r\nexport interface IBreadcrumbStyleProps {\r\n  className?: string;\r\n  theme: ITheme;\r\n}\r\nexport interface IBreadcrumbStyles {\r\n  root: IStyle;\r\n  list: IStyle;\r\n  listItem: IStyle;\r\n  chevron: IStyle;\r\n  overflow: IStyle;\r\n  overflowButton: IStyle;\r\n  itemLink: IStyle;\r\n  item: IStyle;\r\n}\r\n"]}