{"version":3,"file":"ShimmeredDetailsList.base.js","sourceRoot":"../src/","sources":["components/DetailsList/ShimmeredDetailsList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n\r\nimport { BaseComponent, css, classNamesFunction } from '../../Utilities';\r\nimport { SelectionMode } from '../../utilities/selection/interfaces';\r\nimport { DetailsList } from './DetailsList';\r\nimport { IDetailsRowProps } from './DetailsRow';\r\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType, IShimmerElement } from '../../Shimmer';\r\nimport { IShimmeredDetailsListProps, IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles } from './ShimmeredDetailsList.types';\r\nimport { CheckboxVisibility } from './DetailsList.types';\r\n\r\nimport { IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\r\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS, getStyles as getRowStyles } from './DetailsRow.styles';\r\n\r\nconst getRowClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\r\n\r\nconst getClassNames = classNamesFunction<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>();\r\n\r\nconst SHIMMER_INITIAL_ITEMS = 10;\r\nconst DEFAULT_SHIMMER_HEIGHT = 7;\r\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\r\n\r\nexport class ShimmeredDetailsListBase extends BaseComponent<IShimmeredDetailsListProps, {}> {\r\n  private _shimmerItems: null[];\r\n\r\n  constructor(props: IShimmeredDetailsListProps) {\r\n    super(props);\r\n\r\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { items, listProps, styles, theme, shimmerLines, onRenderCustomPlaceholder, enableShimmer, ...detailsListProps } = this.props;\r\n\r\n    // Adds to the optional listProp classname a fading out overlay classname only when shimmer enabled.\r\n    const classNames = getClassNames(styles, {\r\n      theme: theme!,\r\n      className: listProps && listProps.className,\r\n      enableShimmer\r\n    });\r\n\r\n    const newListProps = { ...listProps, className: classNames.root };\r\n\r\n    return (\r\n      <DetailsList\r\n        {...detailsListProps}\r\n        enableShimmer={enableShimmer}\r\n        items={enableShimmer ? this._shimmerItems : items}\r\n        onRenderMissingItem={this._onRenderShimmerPlaceholder}\r\n        listProps={newListProps}\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\r\n    const { onRenderCustomPlaceholder, compact } = this.props;\r\n    const { selectionMode, checkboxVisibility } = rowProps;\r\n\r\n    const theme = this.props.theme!;\r\n\r\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\r\n\r\n    const rowStyleProps = {\r\n      ...rowProps,\r\n      theme: theme\r\n    };\r\n\r\n    const rowClassNames = getRowClassNames(getRowStyles(rowStyleProps), {\r\n      theme: theme\r\n    });\r\n\r\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\r\n      ? onRenderCustomPlaceholder()\r\n      : this._renderDefaultShimmerPlaceholder(rowProps);\r\n\r\n    return (\r\n      <div className={css(showCheckbox && rowClassNames.shimmerLeftBorder, !compact && rowClassNames.shimmerBottomBorder)}>\r\n        <Shimmer customElementsGroup={placeholderElements} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\r\n    const { columns, compact, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = rowProps;\r\n    const shimmerElementsRow: JSX.Element[] = [];\r\n    const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\r\n    const gapHeight: number = compact ? compactRowHeight : rowHeight;\r\n\r\n    columns.map((column, columnIdx) => {\r\n      const shimmerElements: IShimmerElement[] = [];\r\n      const groupWidth: number =\r\n        cellStyleProps.cellLeftPadding +\r\n        cellStyleProps.cellRightPadding +\r\n        column.calculatedWidth! +\r\n        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\r\n\r\n      shimmerElements.push({\r\n        type: ShimmerElementType.gap,\r\n        width: cellStyleProps.cellLeftPadding,\r\n        height: gapHeight\r\n      });\r\n\r\n      if (column.isIconOnly) {\r\n        shimmerElements.push({\r\n          type: ShimmerElementType.line,\r\n          width: column.calculatedWidth!,\r\n          height: column.calculatedWidth!\r\n        });\r\n        shimmerElements.push({\r\n          type: ShimmerElementType.gap,\r\n          width: cellStyleProps.cellRightPadding,\r\n          height: gapHeight\r\n        });\r\n      } else {\r\n        shimmerElements.push({\r\n          type: ShimmerElementType.line,\r\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\r\n          height: DEFAULT_SHIMMER_HEIGHT\r\n        });\r\n        shimmerElements.push({\r\n          type: ShimmerElementType.gap,\r\n          width:\r\n            cellStyleProps.cellRightPadding +\r\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\r\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\r\n          height: gapHeight\r\n        });\r\n      }\r\n      shimmerElementsRow.push(<ShimmerElementsGroup key={columnIdx} width={`${groupWidth}px`} shimmerElements={shimmerElements} />);\r\n    });\r\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave until the column resizing logic is done.\r\n    shimmerElementsRow.push(\r\n      <ShimmerElementsGroup\r\n        key={'endGap'}\r\n        width={'100%'}\r\n        shimmerElements={[{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }]}\r\n      />\r\n    );\r\n    return <div style={{ display: 'flex' }}>{shimmerElementsRow}</div>;\r\n  };\r\n}\r\n"]}