{"version":3,"file":"SpinButton.classNames.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.classNames.ts"],"names":[],"mappings":";;;IAgBa,QAAA,aAAa,GAAG,2BAAe,CAC1C,UACE,MAAyB,EACzB,QAAiB,EACjB,SAAkB,EAClB,qBAA4C,EAC5C,aAAwC,EACxC,SAAyC;QADzC,8BAAA,EAAA,gBAA0B,sBAAQ,CAAC,KAAK;QACxC,0BAAA,EAAA,qBAAyC;QAEzC,OAAO;YACL,IAAI,EAAE,qBAAW,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC;YACzC,YAAY,EAAE,qBAAW,CAAC,MAAM,CAAC,YAAY,EAAE,gCAAgC,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YACvG,IAAI,EAAE,qBAAW,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,IAAI,MAAM,CAAC,YAAY,CAAC;YAC/D,KAAK,EAAE,qBAAW,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,IAAI,MAAM,CAAC,aAAa,CAAC;YAClE,iBAAiB,EAAE,qBAAW,CAC5B,MAAM,CAAC,iBAAiB,EACxB,+BAA+B,CAAC,aAAa,EAAE,MAAM,CAAC,EACtD,CAAC,QAAQ,IAAI;gBACX;oBACE,SAAS,EAAE;wBACT,QAAQ,EAAE,MAAM,CAAC,wBAAwB;qBAC1C;iBACF;gBACD,SAAS,IAAI;oBACX,wDAAwD;oBACxD,iDAAiD;oBACjD,SAAS,EAAE;wBACT,IAAI,EAAE,MAAM,CAAC,wBAAwB;qBACtC;iBACF;aACF,EACD,QAAQ,IAAI,MAAM,CAAC,yBAAyB,CAC7C;YACD,KAAK,EAAE,qBAAW,CAChB,qBAAqB,EACrB,MAAM,CAAC,KAAK,EACZ,CAAC,QAAQ,IAAI;gBACX,SAAS,EAAE;oBACT,aAAa,EAAE,MAAM,CAAC,iBAAiB;iBACxC;aACF,EACD,QAAQ,IAAI,MAAM,CAAC,aAAa,CACjC;YACD,QAAQ,EAAE,qBAAW,CAAC,MAAM,CAAC,qBAAqB,EAAE,QAAQ,IAAI,MAAM,CAAC,6BAA6B,CAAC;SACtG,CAAC;IACJ,CAAC,CACF,CAAC;IAEF;;OAEG;IACH,0CAA0C,aAAuB,EAAE,MAAyB;QAC1F,QAAQ,aAAa,EAAE;YACrB,KAAK,sBAAQ,CAAC,KAAK;gBACjB,OAAO,MAAM,CAAC,iBAAiB,CAAC;YAClC,KAAK,sBAAQ,CAAC,GAAG;gBACf,OAAO,MAAM,CAAC,eAAe,CAAC;YAChC,KAAK,sBAAQ,CAAC,GAAG;gBACf,OAAO,MAAM,CAAC,eAAe,CAAC;YAChC,KAAK,sBAAQ,CAAC,MAAM;gBAClB,OAAO,MAAM,CAAC,kBAAkB,CAAC;SACpC;IACH,CAAC;IAED;;OAEG;IACH,yCAAyC,aAAuB,EAAE,MAAyB;QACzF,QAAQ,aAAa,EAAE;YACrB,KAAK,sBAAQ,CAAC,GAAG,CAAC;YAClB,KAAK,sBAAQ,CAAC,MAAM;gBAClB,OAAO,MAAM,CAAC,0BAA0B,CAAC;YAC3C;gBACE,OAAO,EAAE,CAAC;SACb;IACH,CAAC","sourcesContent":["import { memoizeFunction } from '../../Utilities';\r\nimport { mergeStyles, IStyle } from '../../Styling';\r\nimport { ISpinButtonStyles } from './SpinButton.types';\r\nimport { KeyboardSpinDirection } from './SpinButton';\r\nimport { Position } from '../../utilities/positioning';\r\n\r\nexport interface ISpinButtonClassNames {\r\n  root: string;\r\n  labelWrapper: string;\r\n  icon: string;\r\n  label: string;\r\n  spinButtonWrapper: string;\r\n  input: string;\r\n  arrowBox: string;\r\n}\r\n\r\nexport const getClassNames = memoizeFunction(\r\n  (\r\n    styles: ISpinButtonStyles,\r\n    disabled: boolean,\r\n    isFocused: boolean,\r\n    keyboardSpinDirection: KeyboardSpinDirection,\r\n    labelPosition: Position = Position.start,\r\n    className: string | undefined = undefined\r\n  ): ISpinButtonClassNames => {\r\n    return {\r\n      root: mergeStyles(styles.root, className),\r\n      labelWrapper: mergeStyles(styles.labelWrapper, _getStyleForLabelBasedOnPosition(labelPosition, styles)),\r\n      icon: mergeStyles(styles.icon, disabled && styles.iconDisabled),\r\n      label: mergeStyles(styles.label, disabled && styles.labelDisabled),\r\n      spinButtonWrapper: mergeStyles(\r\n        styles.spinButtonWrapper,\r\n        _getStyleForRootBasedOnPosition(labelPosition, styles),\r\n        !disabled && [\r\n          {\r\n            selectors: {\r\n              ':hover': styles.spinButtonWrapperHovered\r\n            }\r\n          },\r\n          isFocused && {\r\n            // This is to increase the specifity of the focus styles\r\n            // and make it equal to that of the hover styles.\r\n            selectors: {\r\n              '&&': styles.spinButtonWrapperFocused\r\n            }\r\n          }\r\n        ],\r\n        disabled && styles.spinButtonWrapperDisabled\r\n      ),\r\n      input: mergeStyles(\r\n        'ms-spinButton-input',\r\n        styles.input,\r\n        !disabled && {\r\n          selectors: {\r\n            '::selection': styles.inputTextSelected\r\n          }\r\n        },\r\n        disabled && styles.inputDisabled\r\n      ),\r\n      arrowBox: mergeStyles(styles.arrowButtonsContainer, disabled && styles.arrowButtonsContainerDisabled)\r\n    };\r\n  }\r\n);\r\n\r\n/**\r\n * Returns the Style corresponding to the label position\r\n */\r\nfunction _getStyleForLabelBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\r\n  switch (labelPosition) {\r\n    case Position.start:\r\n      return styles.labelWrapperStart;\r\n    case Position.end:\r\n      return styles.labelWrapperEnd;\r\n    case Position.top:\r\n      return styles.labelWrapperTop;\r\n    case Position.bottom:\r\n      return styles.labelWrapperBottom;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the Style corresponding to the label position\r\n */\r\nfunction _getStyleForRootBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\r\n  switch (labelPosition) {\r\n    case Position.top:\r\n    case Position.bottom:\r\n      return styles.spinButtonWrapperTopBottom;\r\n    default:\r\n      return {};\r\n  }\r\n}\r\n"]}