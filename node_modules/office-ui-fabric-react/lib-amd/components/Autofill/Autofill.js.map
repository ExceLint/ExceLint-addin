{"version":3,"file":"Autofill.js","sourceRoot":"../src/","sources":["components/Autofill/Autofill.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IAutofillProps, IAutofill } from './Autofill.types';\r\nimport { BaseComponent, KeyCodes, getNativeProps, inputProperties } from '../../Utilities';\r\n\r\nexport interface IAutofillState {\r\n  displayValue?: string;\r\n}\r\n\r\nconst SELECTION_FORWARD = 'forward';\r\nconst SELECTION_BACKWARD = 'backward';\r\n\r\nexport class Autofill extends BaseComponent<IAutofillProps, IAutofillState> implements IAutofill {\r\n  public static defaultProps = {\r\n    enableAutofillOnKeyPress: [KeyCodes.down, KeyCodes.up] as KeyCodes[]\r\n  };\r\n\r\n  private _inputElement = React.createRef<HTMLInputElement>();\r\n  private _autoFillEnabled = true;\r\n  private _value: string;\r\n\r\n  constructor(props: IAutofillProps) {\r\n    super(props);\r\n    this._value = props.defaultVisibleValue || '';\r\n    this.state = {\r\n      displayValue: props.defaultVisibleValue || ''\r\n    };\r\n  }\r\n\r\n  public get cursorLocation(): number | null {\r\n    if (this._inputElement.current) {\r\n      const inputElement = this._inputElement.current;\r\n      if (inputElement.selectionDirection !== SELECTION_FORWARD) {\r\n        return inputElement.selectionEnd;\r\n      } else {\r\n        return inputElement.selectionStart;\r\n      }\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  public get isValueSelected(): boolean {\r\n    return Boolean(this.inputElement && this.inputElement.selectionStart !== this.inputElement.selectionEnd);\r\n  }\r\n\r\n  public get value(): string {\r\n    return this._value;\r\n  }\r\n\r\n  public get selectionStart(): number | null {\r\n    return this._inputElement.current ? this._inputElement.current.selectionStart : -1;\r\n  }\r\n\r\n  public get selectionEnd(): number | null {\r\n    return this._inputElement.current ? this._inputElement.current.selectionEnd : -1;\r\n  }\r\n\r\n  public get inputElement(): HTMLInputElement | null {\r\n    return this._inputElement.current;\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: IAutofillProps): void {\r\n    let newValue;\r\n\r\n    if (this.props.updateValueInWillReceiveProps) {\r\n      newValue = this.props.updateValueInWillReceiveProps();\r\n    }\r\n\r\n    newValue = this._getDisplayValue(newValue ? newValue : this._value, nextProps.suggestedDisplayValue);\r\n\r\n    if (typeof newValue === 'string') {\r\n      this.setState({ displayValue: newValue });\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    const value = this._value;\r\n    const { suggestedDisplayValue, shouldSelectFullInputValueInComponentDidUpdate, preventValueSelection } = this.props;\r\n    let differenceIndex = 0;\r\n\r\n    if (preventValueSelection) {\r\n      return;\r\n    }\r\n\r\n    if (this._autoFillEnabled && value && suggestedDisplayValue && this._doesTextStartWith(suggestedDisplayValue, value)) {\r\n      let shouldSelectFullRange = false;\r\n\r\n      if (shouldSelectFullInputValueInComponentDidUpdate) {\r\n        shouldSelectFullRange = shouldSelectFullInputValueInComponentDidUpdate();\r\n      }\r\n\r\n      if (shouldSelectFullRange && this._inputElement.current) {\r\n        this._inputElement.current.setSelectionRange(0, suggestedDisplayValue.length, SELECTION_BACKWARD);\r\n      } else {\r\n        while (\r\n          differenceIndex < value.length &&\r\n          value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()\r\n        ) {\r\n          differenceIndex++;\r\n        }\r\n        if (differenceIndex > 0 && this._inputElement.current) {\r\n          this._inputElement.current.setSelectionRange(differenceIndex, suggestedDisplayValue.length, SELECTION_BACKWARD);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { displayValue } = this.state;\r\n\r\n    const nativeProps = getNativeProps(this.props, inputProperties);\r\n    return (\r\n      <input\r\n        {...nativeProps}\r\n        ref={this._inputElement}\r\n        value={displayValue}\r\n        autoCapitalize={'off'}\r\n        autoComplete={'off'}\r\n        onCompositionStart={this._onCompositionStart}\r\n        onCompositionEnd={this._onCompositionEnd}\r\n        onChange={this._onChanged}\r\n        onInput={this._onInputChanged}\r\n        onKeyDown={this._onKeyDown}\r\n        onClick={this.props.onClick ? this.props.onClick : this._onClick}\r\n        data-lpignore={true}\r\n      />\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    this._inputElement.current && this._inputElement.current.focus();\r\n  }\r\n\r\n  public clear() {\r\n    this._autoFillEnabled = true;\r\n    this._updateValue('');\r\n    this._inputElement.current && this._inputElement.current.setSelectionRange(0, 0);\r\n  }\r\n\r\n  // Composition events are used when the character/text requires several keystrokes to be completed.\r\n  // Some examples of this are mobile text input and langauges like Japanese or Arabic.\r\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\r\n  private _onCompositionStart = (ev: React.CompositionEvent<HTMLInputElement>) => {\r\n    this._autoFillEnabled = false;\r\n  };\r\n\r\n  // Composition events are used when the character/text requires several keystrokes to be completed.\r\n  // Some examples of this are mobile text input and langauges like Japanese or Arabic.\r\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\r\n  private _onCompositionEnd = (ev: React.CompositionEvent<HTMLInputElement>) => {\r\n    const inputValue = this._getCurrentInputValue();\r\n    this._tryEnableAutofill(inputValue, this.value, false, true);\r\n    // Korean characters typing issue has been addressed in React 16.5\r\n    // TODO: revert back below lines when we upgrade to React 16.5\r\n    // Find out at https://github.com/facebook/react/pull/12563/commits/06524c6c542c571705c0fd7df61ac48f3d5ce244\r\n    const isKorean = (ev.nativeEvent as any).locale === 'ko';\r\n    // Due to timing, this needs to be async, otherwise no text will be selected.\r\n    this._async.setTimeout(() => {\r\n      const updatedInputValue = isKorean ? this.value : inputValue;\r\n      this._updateValue(updatedInputValue);\r\n    }, 0);\r\n  };\r\n\r\n  private _onClick = () => {\r\n    if (this._value && this._value !== '' && this._autoFillEnabled) {\r\n      this._autoFillEnabled = false;\r\n    }\r\n  };\r\n\r\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (this.props.onKeyDown) {\r\n      this.props.onKeyDown(ev);\r\n    }\r\n\r\n    // If the event is actively being composed, then don't alert autofill.\r\n    // Right now typing does not have isComposing, once that has been fixed any should be removed.\r\n    if (!(ev.nativeEvent as any).isComposing) {\r\n      switch (ev.which) {\r\n        case KeyCodes.backspace:\r\n          this._autoFillEnabled = false;\r\n          break;\r\n        case KeyCodes.left:\r\n        case KeyCodes.right:\r\n          if (this._autoFillEnabled) {\r\n            this._value = this.state.displayValue!;\r\n            this._autoFillEnabled = false;\r\n          }\r\n          break;\r\n        default:\r\n          if (!this._autoFillEnabled) {\r\n            if (this.props.enableAutofillOnKeyPress!.indexOf(ev.which) !== -1) {\r\n              this._autoFillEnabled = true;\r\n            }\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  private _onInputChanged = (ev: React.FormEvent<HTMLElement>) => {\r\n    const value: string = this._getCurrentInputValue(ev);\r\n\r\n    // Right now typing does not have isComposing, once that has been fixed any should be removed.\r\n    this._tryEnableAutofill(value, this._value, (ev.nativeEvent as any).isComposing);\r\n    this._updateValue(value);\r\n  };\r\n\r\n  private _onChanged = (): void => {\r\n    // Swallow this event, we don't care about it\r\n    // We must provide it because React PropTypes marks it as required, but onInput serves the correct purpose\r\n    return;\r\n  };\r\n\r\n  private _getCurrentInputValue(ev?: React.FormEvent<HTMLElement>): string {\r\n    if (ev && ev.target && (ev.target as any).value) {\r\n      return (ev.target as any).value;\r\n    } else if (this.inputElement && this.inputElement.value) {\r\n      return this.inputElement.value;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to enable autofill. Whether or not autofill is enabled depends on the input value,\r\n   * whether or not any text is selected, and only if the new input value is longer than the old input value.\r\n   * Autofill should never be set to true if the value is composing. Once compositionEnd is called, then\r\n   * it should be completed.\r\n   * See https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent for more information on composition.\r\n   * @param newValue\r\n   * @param oldValue\r\n   * @param isComposing if true then the text is actively being composed and it has not completed.\r\n   * @param isComposed if the text is a composed text value.\r\n   */\r\n  private _tryEnableAutofill(newValue: string, oldValue: string, isComposing?: boolean, isComposed?: boolean): void {\r\n    if (\r\n      !isComposing &&\r\n      newValue &&\r\n      this._inputElement.current &&\r\n      this._inputElement.current.selectionStart === newValue.length &&\r\n      !this._autoFillEnabled &&\r\n      (newValue.length > oldValue.length || isComposed)\r\n    ) {\r\n      this._autoFillEnabled = true;\r\n    }\r\n  }\r\n\r\n  private _notifyInputChange(newValue: string): void {\r\n    if (this.props.onInputValueChange) {\r\n      this.props.onInputValueChange(newValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the current input value as well as getting a new display value.\r\n   * @param newValue The new value from the input\r\n   */\r\n  private _updateValue = (newValue: string) => {\r\n    // Only proceed if the value is nonempty and is different from the old value\r\n    // This is to work around the fact that, in IE 11, inputs with a placeholder fire an onInput event on focus\r\n    if (!newValue && newValue === this._value) {\r\n      return;\r\n    }\r\n    this._value = this.props.onInputChange ? this.props.onInputChange(newValue) : newValue;\r\n    this.setState(\r\n      {\r\n        displayValue: this._getDisplayValue(this._value, this.props.suggestedDisplayValue)\r\n      },\r\n      () => this._notifyInputChange(this._value)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Returns a string that should be used as the display value.\r\n   * It evaluates this based on whether or not the suggested value starts with the input value\r\n   * and whether or not autofill is enabled.\r\n   * @param inputValue the value that the input currently has.\r\n   * @param suggestedDisplayValue the possible full value\r\n   */\r\n  private _getDisplayValue(inputValue: string, suggestedDisplayValue?: string): string {\r\n    let displayValue = inputValue;\r\n    if (suggestedDisplayValue && inputValue && this._doesTextStartWith(suggestedDisplayValue, displayValue) && this._autoFillEnabled) {\r\n      displayValue = suggestedDisplayValue;\r\n    }\r\n    return displayValue;\r\n  }\r\n\r\n  private _doesTextStartWith(text: string, startWith: string): boolean {\r\n    if (!text || !startWith) {\r\n      return false;\r\n    }\r\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\r\n  }\r\n}\r\n\r\n/**\r\n *  @deprecated do not use.\r\n */\r\nexport class BaseAutoFill extends Autofill {}\r\n"]}