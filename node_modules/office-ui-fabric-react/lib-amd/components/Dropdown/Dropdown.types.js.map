{"version":3,"file":"Dropdown.types.js","sourceRoot":"../src/","sources":["components/Dropdown/Dropdown.types.ts"],"names":[],"mappings":";;;IAcS,yBATA,mCAAc,CASA;IAFd,wDAAA,4BAA4B,CAAwB","sourcesContent":["import * as React from 'react';\r\nimport { IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { ISelectableOption } from '../../utilities/selectableOption/SelectableOption.types';\r\nimport { ISelectableDroppableTextProps } from '../../utilities/selectableOption/SelectableDroppableText.types';\r\nimport { ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\r\nimport { IKeytipProps } from '../../Keytip';\r\nimport { RectangleEdge } from '../../utilities/positioning';\r\nimport { ICheckboxStyleProps, ICheckboxStyles } from '../Checkbox/Checkbox.types';\r\nimport { ILabelStyleProps, ILabelStyles } from '../Label/Label.types';\r\nimport { IPanelStyleProps, IPanelStyles } from '../Panel/Panel.types';\r\n\r\nexport { SelectableOptionMenuItemType as DropdownMenuItemType } from '../../utilities/selectableOption/SelectableOption.types';\r\n\r\nexport { ResponsiveMode }; // Exported because the type is an optional prop and not exported otherwise.\r\n\r\n/**\r\n * {@docCategory Dropdown}\r\n */\r\nexport interface IDropdown {\r\n  /**\r\n   * All selected options\r\n   */\r\n  readonly selectedOptions: IDropdownOption[];\r\n\r\n  focus: (shouldOpenOnFocus?: boolean) => void;\r\n}\r\n\r\n/**\r\n * {@docCategory Dropdown}\r\n */\r\nexport interface IDropdownProps extends ISelectableDroppableTextProps<IDropdown, HTMLDivElement> {\r\n  /**\r\n   * Input placeholder text. Displayed until an option is selected.\r\n   * @deprecated Use `placeholder`\r\n   */\r\n  placeHolder?: string;\r\n\r\n  /**\r\n   * Options for the dropdown. If using `defaultSelectedKey` or `defaultSelectedKeys`, options must be\r\n   * pure for correct behavior.\r\n   */\r\n  options: IDropdownOption[];\r\n\r\n  /**\r\n   * Callback for when the selected option changes.\r\n   */\r\n  onChange?: (event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number) => void;\r\n\r\n  /**\r\n   * @deprecated Use `onChange` instead.\r\n   */\r\n  onChanged?: (option: IDropdownOption, index?: number) => void;\r\n\r\n  /**\r\n   * Custom renderer for the label.\r\n   */\r\n  onRenderLabel?: IRenderFunction<IDropdownProps>;\r\n\r\n  /**\r\n   * Custom renderer for placeholder text\r\n   */\r\n  onRenderPlaceholder?: IRenderFunction<IDropdownProps>;\r\n\r\n  /**\r\n   * Custom renderer for placeholder text\r\n   * @deprecated Use `onRenderPlaceholder`\r\n   */\r\n  onRenderPlaceHolder?: IRenderFunction<IDropdownProps>;\r\n\r\n  /**\r\n   * Custom renderer for selected option displayed in input\r\n   */\r\n  onRenderTitle?: IRenderFunction<IDropdownOption[]>;\r\n\r\n  /**\r\n   * Custom renderer for chevron icon\r\n   */\r\n  onRenderCaretDown?: IRenderFunction<IDropdownProps>;\r\n\r\n  /**\r\n   * Custom width for dropdown. If value is 0, width of the input field is used.\r\n   * @defaultvalue 0\r\n   */\r\n  dropdownWidth?: number;\r\n\r\n  /**\r\n   * By default, the dropdown will render the standard way for screen sizes `large` and above, or\r\n   * in a panel on `small` and `medium` screens. Manually set this prop to override this behavior.\r\n   */\r\n  responsiveMode?: ResponsiveMode;\r\n\r\n  /**\r\n   * Keys that will be initially used to set selected items. This prop is only used when `multiSelect`\r\n   * is true (use `defaultSelectedKey` for single select). Mutually exclusive with `selectedKeys`.\r\n   */\r\n  defaultSelectedKeys?: string[] | number[];\r\n\r\n  /**\r\n   * Keys of the selected items, only used when `multiSelect` is true (use `selectedKey` for single\r\n   * select). If you provide this, you must maintain selection state by observing onChange events\r\n   * and passing a new prop value in when changed. Passing null will clear the selection.\r\n   * Mutually exclusive with `defaultSelectedKeys`.\r\n   */\r\n  selectedKeys?: string[] | number[] | null;\r\n\r\n  /**\r\n   * When multiple items are selected, this will be used to separate values in the dropdown input.\r\n   *\r\n   * @defaultvalue \", \"\r\n   */\r\n  multiSelectDelimiter?: string;\r\n\r\n  /**\r\n   * If true, `onChange` will still be called when an already-selected item is clicked again in\r\n   * single select mode. (Normally it would not be called in this case.)\r\n   */\r\n  notifyOnReselect?: boolean;\r\n\r\n  /**\r\n   * Deprecated at v0.52.0, use `disabled` instead.\r\n   * @deprecated Use `disabled` instead.\r\n   */\r\n  isDisabled?: boolean;\r\n\r\n  /**\r\n   * Optional keytip for this dropdown\r\n   */\r\n  keytipProps?: IKeytipProps;\r\n\r\n  /**\r\n   * Theme provided by higher order component.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IDropdownStyleProps, IDropdownStyles>;\r\n}\r\n\r\n/**\r\n * {@docCategory Dropdown}\r\n */\r\nexport interface IDropdownOption extends ISelectableOption {\r\n  /**\r\n   * Deprecated at v.65.1, use `selected` instead.\r\n   * @deprecated Use `selected` instead.\r\n   */\r\n  isSelected?: boolean;\r\n}\r\n\r\n/**\r\n * The props needed to construct styles.\r\n * This represents the simplified set of immutable things which control the class names.\r\n * {@docCategory Dropdown}\r\n */\r\nexport type IDropdownStyleProps = Pick<IDropdownProps, 'theme' | 'className' | 'disabled' | 'required'> & {\r\n  /**\r\n   * Whether the dropdown is in an error state.\r\n   */\r\n  hasError: boolean;\r\n\r\n  /**\r\n   * Specifies if the dropdown has label content.\r\n   */\r\n  hasLabel: boolean;\r\n\r\n  /**\r\n   * Whether the dropdown is in an opened state.\r\n   */\r\n  isOpen: boolean;\r\n\r\n  /**\r\n   * Whether the dropdown is currently rendering placeholder text instead of a selected option.\r\n   */\r\n  isRenderingPlaceholder: boolean;\r\n\r\n  /**\r\n   * Custom className for the panel that displays in small viewports, hosting the Dropdown options.\r\n   * This is primarily provided for backwards compatibility.\r\n   */\r\n  panelClassName?: string;\r\n\r\n  /**\r\n   * Custom className for the callout that displays in larger viewports, hosting the Dropdown options.\r\n   * This is primarily provided for backwards compatibility.\r\n   */\r\n  calloutClassName?: string;\r\n\r\n  /**\r\n   * Which edge the dropdown callout was positioned on relative to the title.\r\n   */\r\n  calloutRenderEdge?: RectangleEdge;\r\n};\r\n\r\n/**\r\n * Represents the stylable areas of the control.\r\n * {@docCategory Dropdown}\r\n */\r\nexport interface IDropdownStyles {\r\n  /** Root element of the Dropdown (includes Label and the actual Dropdown). */\r\n  root: IStyle;\r\n\r\n  /** Refers to the label associated with the dropdown. This is enclosed by the root. */\r\n  label: IStyle;\r\n\r\n  /** Refers to the actual Dropdown element. */\r\n  dropdown: IStyle;\r\n\r\n  /** Refers to the primary title of the Dropdown (rendering the selected options/placeholder/etc.). */\r\n  title: IStyle;\r\n\r\n  /** Refers to the wrapping container around the downward pointing caret users click on to expand the Dropdown. */\r\n  caretDownWrapper: IStyle;\r\n\r\n  /** Refers to the downward pointing caret icon users click on to expand the Dropdown. */\r\n  caretDown: IStyle;\r\n\r\n  /** Refers to the error message being rendered under the Dropdown (if any). */\r\n  errorMessage: IStyle;\r\n\r\n  /** Refers to the element that wraps `dropdownItems`. */\r\n  dropdownItemsWrapper: IStyle;\r\n\r\n  /** Refers to the FocusZone wrapping the individual dropdown items. */\r\n  dropdownItems: IStyle;\r\n\r\n  /** Refers to the individual dropdown item. */\r\n  dropdownItem: IStyle;\r\n\r\n  /** Style for a dropdown item when it is being selected. */\r\n  dropdownItemSelected: IStyle;\r\n\r\n  /** Style for a dropdown item when it is disabled. */\r\n  dropdownItemDisabled: IStyle;\r\n\r\n  /** Style for a dropdown item when it is both selected and disabled. */\r\n  dropdownItemSelectedAndDisabled: IStyle;\r\n\r\n  /** Style for a dropdown item when it is hidden */\r\n  dropdownItemHidden: IStyle;\r\n\r\n  /**\r\n   * Refers to the text element that renders the actual dropdown item/option text. This would be wrapped by the element\r\n   * referred to by `dropdownItem`.\r\n   */\r\n  dropdownOptionText: IStyle;\r\n\r\n  /** Refers to the dropdown separator. */\r\n  dropdownDivider: IStyle;\r\n\r\n  /** Refers to the individual dropdown items that are being rendered as a header. */\r\n  dropdownItemHeader: IStyle;\r\n\r\n  /**\r\n   * Refers to the panel that hosts the Dropdown options in small viewports.\r\n   * @deprecated Use `subComponentStyles.panel` instead.\r\n   */\r\n  panel: IStyle;\r\n\r\n  /** Refers to the callout that hosts Dropdown options in larger viewports. */\r\n  callout: IStyle;\r\n\r\n  /** Subcomponent styles. */\r\n  subComponentStyles: IDropdownSubComponentStyles;\r\n}\r\n\r\n/**\r\n * {@docCategory Dropdown}\r\n */\r\nexport interface IDropdownSubComponentStyles {\r\n  /** Refers to the panel that hosts the Dropdown options in small viewports. */\r\n  panel: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;\r\n\r\n  /** Refers to the primary label for the Dropdown. */\r\n  label: IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>;\r\n\r\n  /** Refers to the individual dropdown item when the multiSelect prop is true. */\r\n  multiSelectItem: IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles>;\r\n}\r\n"]}