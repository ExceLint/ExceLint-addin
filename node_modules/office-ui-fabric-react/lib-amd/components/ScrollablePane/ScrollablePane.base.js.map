{"version":3,"file":"ScrollablePane.base.js","sourceRoot":"../src/","sources":["components/ScrollablePane/ScrollablePane.base.tsx"],"names":[],"mappings":";;;IA0BA,IAAM,aAAa,GAAG,8BAAkB,EAAoD,CAAC;IAE7F;QAAwC,8CAAyD;QAc/F,4BAAY,KAA2B;YAAvC,YACE,kBAAM,KAAK,CAAC,SAYb;YAtBO,WAAK,GAAG,KAAK,CAAC,SAAS,EAAkB,CAAC;YAC1C,qBAAe,GAAG,KAAK,CAAC,SAAS,EAAkB,CAAC;YACpD,qBAAe,GAAG,KAAK,CAAC,SAAS,EAAkB,CAAC;YACpD,uBAAiB,GAAG,KAAK,CAAC,SAAS,EAAkB,CAAC;YA6LvD,eAAS,GAAG,UAAC,OAAiB;gBACnC,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACjC,CAAC,CAAC;YAEK,iBAAW,GAAG,UAAC,OAAiB;gBACrC,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACpC,CAAC,CAAC;YAEK,eAAS,GAAG,UAAC,MAAc;gBAChC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAE3B,kEAAkE;gBAClE,IAAI,KAAI,CAAC,gBAAgB,EAAE;oBACzB,MAAM,CAAC,kBAAkB,CAAC,KAAI,CAAC,gBAAgB,CAAC,CAAC;oBACjD,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;iBACzB;gBACD,KAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,CAAC,CAAC;YAEK,kBAAY,GAAG,UAAC,MAAc;gBACnC,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC9B,KAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;gBACzC,KAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,CAAC,CAAC;YAEK,gBAAU,GAAG,UAAC,MAAc,EAAE,SAAmB;gBACtD,IAAI,KAAI,CAAC,WAAW,IAAI,KAAI,CAAC,WAAW,EAAE;oBACxC,IAAI,SAAS,EAAE;wBACb,KAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;qBAC1C;oBACD,IAAI,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,gBAAgB,EAAE;wBAClD,KAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,KAAI,CAAC,WAAW,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;qBAC/E;oBAED,IAAI,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,mBAAmB,EAAE;wBACxD,KAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,KAAI,CAAC,WAAW,EAAE,MAAM,CAAC,mBAAmB,CAAC,CAAC;qBAClF;iBACF;YACH,CAAC,CAAC;YAEK,4BAAsB,GAAG;gBAC9B,IAAM,WAAW,GAAG,KAAI,CAAC,SAAS,CAAC;gBAEnC,IAAI,eAAe,GAAG,CAAC,CAAC;gBACxB,IAAI,kBAAkB,GAAG,CAAC,CAAC;gBAE3B,WAAW,CAAC,OAAO,CAAC,UAAC,MAAc;oBAC3B,IAAA,iBAA8C,EAA5C,4BAAW,EAAE,kCAAc,CAAkB;oBACrD,IAAI,MAAM,CAAC,gBAAgB,EAAE;wBAC3B,IAAI,WAAW,EAAE;4BACf,eAAe,IAAI,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC;yBACzD;wBACD,IAAI,cAAc,EAAE;4BAClB,kBAAkB,IAAI,MAAM,CAAC,gBAAgB,CAAC,YAAY,CAAC;yBAC5D;wBACD,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;qBACjC;gBACH,CAAC,CAAC,CAAC;gBAEH,KAAI,CAAC,QAAQ,CAAC;oBACZ,eAAe,EAAE,eAAe;oBAChC,kBAAkB,EAAE,kBAAkB;iBACvC,CAAC,CAAC;YACL,CAAC,CAAC;YAEK,uBAAiB,GAAG;gBACzB,IAAI,KAAI,CAAC,gBAAgB,EAAE;oBACzB,KAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,MAAM;wBAC9B,oFAAoF;wBACpF,MAAM,CAAC,KAAI,CAAC,gBAAgB,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC;oBAClD,CAAC,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC;YAEK,uBAAiB,GAAG;gBACzB,IAAI,KAAI,CAAC,gBAAgB,EAAE;oBACzB,OAAO,KAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;iBACxC;gBAED,OAAO,CAAC,CAAC;YACX,CAAC,CAAC;YAEK,sBAAgB,GAAG,UAAC,MAAc;gBACvC,IAAI,MAAM,IAAI,KAAI,CAAC,gBAAgB,EAAE;oBACnC,MAAM,CAAC,UAAU,CAAC,KAAI,CAAC,gBAAgB,CAAC,CAAC;iBAC1C;YACH,CAAC,CAAC;YAoBM,2BAAqB,GAAG,UAAC,MAAc,EAAE,eAA+B,EAAE,kBAAkC;gBAClH,4GAA4G;gBAC5G,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,EAAE;oBACpC,eAAe,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;iBACjD;qBAAM;oBACL,+EAA+E;oBAC/E,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;wBACjD,IAAM,wBAAsB,GAAc,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;wBAElF,IAAM,YAAU,GAAa,EAAE,CAAC;wBAChC,yFAAyF;wBACzF,8DAA8D;wBAC9D,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,UAAU;4BAC/B,IAAI,eAAe,KAAK,KAAI,CAAC,WAAW,IAAI,MAAM,CAAC,YAAY,EAAE;gCAC/D,YAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;6BAC7B;iCAAM,IAAI,MAAM,CAAC,eAAe,EAAE;gCACjC,YAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;6BAC7B;wBACH,CAAC,CAAC,CAAC;wBAEH,IAAM,gBAAgB,GAAG,YAAU;6BAChC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;4BACT,OAAO,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC,eAAe,CAAC;wBAC/C,CAAC,CAAC;6BACD,MAAM,CAAC,UAAA,IAAI;4BACV,IAAM,aAAa,GAAG,eAAe,KAAK,KAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;4BAC9G,IAAI,aAAa,EAAE;gCACjB,OAAO,wBAAsB,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;6BAC3D;wBACH,CAAC,CAAC,CAAC;wBAEL,qGAAqG;wBACrG,IAAI,0BAA0B,GAAuB,SAAS,CAAC;wBAC/D,KAAK,IAAM,CAAC,IAAI,gBAAgB,EAAE;4BAChC,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,eAAe,IAAI,MAAM,CAAC,eAAe,EAAE;gCACjE,0BAA0B,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;gCACjD,MAAM;6BACP;yBACF;wBAED,sHAAsH;wBACtH,IAAI,eAAe,GAA0B,IAAI,CAAC;wBAClD,IAAI,0BAA0B,EAAE;4BAC9B,eAAe;gCACb,eAAe,KAAK,KAAI,CAAC,WAAW;oCAClC,CAAC,CAAC,0BAA0B,CAAC,gBAAgB;oCAC7C,CAAC,CAAC,0BAA0B,CAAC,mBAAmB,CAAC;yBACtD;wBACD,eAAe,CAAC,YAAY,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;qBACnE;iBACF;YACH,CAAC,CAAC;YAEM,iCAA2B,GAAG,UAAC,MAAc;gBACnD,IAAI,KAAI,CAAC,WAAW,IAAI,MAAM,CAAC,gBAAgB,IAAI,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;oBACrG,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;iBACvD;gBACD,IAAI,KAAI,CAAC,WAAW,IAAI,MAAM,CAAC,mBAAmB,IAAI,KAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE;oBAC3G,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;iBAC1D;YACH,CAAC,CAAC;YAEM,qBAAe,GAAG;gBACxB,IAAM,cAAc,GAAG,KAAI,CAAC,kBAAkB,EAAE,CAAC;gBACjD,IAAM,eAAe,GAAG,KAAI,CAAC,mBAAmB,EAAE,CAAC;gBAEnD,KAAI,CAAC,QAAQ,CAAC;oBACZ,cAAc,gBAAA;oBACd,eAAe,iBAAA;iBAChB,CAAC,CAAC;gBAEH,KAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,CAAC,CAAC;YAEM,8BAAwB,GAAG,UAAC,MAAc,EAAE,KAAc;gBAChE,0BACE,MAAM,EAAE,MAAM,IACX,CAAC,kBAAM,EAAE;oBACV,CAAC,CAAC;wBACE,KAAK,EAAE,GAAG;wBACV,IAAI,EAAE,CAAG,KAAI,CAAC,KAAK,CAAC,cAAc,IAAI,KAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,QAAI;qBACzE;oBACH,CAAC,CAAC;wBACE,IAAI,EAAE,GAAG;wBACT,KAAK,EAAE,CAAG,KAAI,CAAC,KAAK,CAAC,cAAc,IAAI,KAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,QAAI;qBAC1E,CAAC,EACH,CAAC,KAAK;oBACP,CAAC,CAAC;wBACE,GAAG,EAAE,GAAG;qBACT;oBACH,CAAC,CAAC;wBACE,MAAM,EAAE,CAAG,KAAI,CAAC,KAAK,CAAC,eAAe,IAAI,KAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,QAAI;qBAC7E,CAAC,EACN;YACJ,CAAC,CAAC;YAYM,eAAS,GAAG;gBACV,IAAA,yCAAgB,CAAU;gBAElC,IAAI,gBAAgB,EAAE;oBACpB,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,MAAc;wBACpC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;oBACtC,CAAC,CAAC,CAAC;iBACJ;gBAED,KAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,CAAC,CAAC;YAnZA,KAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAY,CAAC;YACxC,KAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAU,CAAC;YAEnC,KAAI,CAAC,KAAK,GAAG;gBACX,eAAe,EAAE,CAAC;gBAClB,kBAAkB,EAAE,CAAC;gBACrB,cAAc,EAAE,SAAS;gBACzB,eAAe,EAAE,SAAS;aAC3B,CAAC;YAEF,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;;QAC3E,CAAC;QAED,sBAAW,oCAAI;iBAAf;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAC5B,CAAC;;;WAAA;QAED,sBAAW,2CAAW;iBAAtB;gBACE,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACtC,CAAC;;;WAAA;QAED,sBAAW,2CAAW;iBAAtB;gBACE,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACtC,CAAC;;;WAAA;QAED,sBAAW,gDAAgB;iBAA3B;gBACE,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACxC,CAAC;;;WAAA;QAEM,4CAAe,GAAtB;YACE,OAAO;gBACL,cAAc,EAAE;oBACd,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,YAAY,EAAE,IAAI,CAAC,YAAY;oBAC/B,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;oBACnD,UAAU,EAAE,IAAI,CAAC,UAAU;oBAC3B,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;oBACzC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;iBACxC;aACF,CAAC;QACJ,CAAC;QAEM,8CAAiB,GAAxB;YAAA,iBAiEC;YAhES,IAAA,wDAAqB,CAAgB;YAC7C,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YACjE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YACxD,IAAI,IAAI,CAAC,gBAAgB,IAAI,qBAAqB,EAAE;gBAClD,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,qBAAqB,CAAC;aACzD;YAED,4FAA4F;YAC5F,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAClC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,MAAM;gBAC3B,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAEzB,IAAI,kBAAkB,IAAI,MAAM,EAAE;gBAChC,IAAI,CAAC,iBAAiB,GAAG,IAAI,gBAAgB,CAAC,UAAA,QAAQ;oBACpD,0EAA0E;oBAC1E,iCAAiC,cAA8B;wBAC7D,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;4BAC1D,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;yBAC7G;wBACD,OAAO,KAAK,CAAC;oBACf,CAAC;oBAED,yHAAyH;oBACzH,IAAM,eAAe,GAAG,KAAI,CAAC,mBAAmB,EAAE,CAAC;oBACnD,uHAAuH;oBACvH,IAAI,eAAe,KAAK,KAAI,CAAC,KAAK,CAAC,eAAe,EAAE;wBAClD,KAAI,CAAC,QAAQ,CAAC;4BACZ,eAAe,EAAE,eAAe;yBACjC,CAAC,CAAC;qBACJ;oBAED,gFAAgF;oBAChF,KAAI,CAAC,iBAAiB,EAAE,CAAC;oBAEzB,uFAAuF;oBACvF,IAAI,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,EAAE;wBACrD,KAAI,CAAC,sBAAsB,EAAE,CAAC;qBAC/B;yBAAM;wBACL,2FAA2F;wBAC3F,IAAM,YAAU,GAAa,EAAE,CAAC;wBAChC,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,MAAM;4BAC3B,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;gCAC3D,YAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;6BACzB;wBACH,CAAC,CAAC,CAAC;wBACH,IAAI,YAAU,CAAC,MAAM,EAAE;4BACrB,YAAU,CAAC,OAAO,CAAC,UAAA,MAAM;gCACvB,MAAM,CAAC,WAAW,EAAE,CAAC;4BACvB,CAAC,CAAC,CAAC;yBACJ;qBACF;gBACH,CAAC,CAAC,CAAC;gBAEH,IAAI,IAAI,CAAC,IAAI,EAAE;oBACb,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE;wBACxC,SAAS,EAAE,IAAI;wBACf,UAAU,EAAE,IAAI;wBAChB,OAAO,EAAE,IAAI;wBACb,aAAa,EAAE,IAAI;qBACpB,CAAC,CAAC;iBACJ;aACF;QACH,CAAC;QAEM,iDAAoB,GAA3B;YACE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACxC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAEzB,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1B,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;aACrC;QACH,CAAC;QAED,qGAAqG;QAC9F,kDAAqB,GAA5B,UAA6B,SAA+B,EAAE,SAA+B;YAC3F,OAAO,CACL,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ;gBAC1C,IAAI,CAAC,KAAK,CAAC,qBAAqB,KAAK,SAAS,CAAC,qBAAqB;gBACpE,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,CAAC,SAAS;gBAC5C,IAAI,CAAC,KAAK,CAAC,eAAe,KAAK,SAAS,CAAC,eAAe;gBACxD,IAAI,CAAC,KAAK,CAAC,kBAAkB,KAAK,SAAS,CAAC,kBAAkB;gBAC9D,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,SAAS,CAAC,cAAc;gBACtD,IAAI,CAAC,KAAK,CAAC,eAAe,KAAK,SAAS,CAAC,eAAe,CACzD,CAAC;QACJ,CAAC;QAEM,+CAAkB,GAAzB,UAA0B,SAA+B,EAAE,SAA+B;YACxF,IAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC;YAC/D,IAAI,IAAI,CAAC,gBAAgB,IAAI,OAAO,qBAAqB,KAAK,QAAQ,IAAI,SAAS,CAAC,qBAAqB,KAAK,qBAAqB,EAAE;gBACnI,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,qBAAqB,CAAC;aACzD;YAED,qEAAqE;YACrE,IAAI,SAAS,CAAC,eAAe,KAAK,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,SAAS,CAAC,kBAAkB,KAAK,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE;gBAC9H,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC1B;YAED,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAClD,CAAC;QAEM,mCAAM,GAAb;YACQ,IAAA,eAAyC,EAAvC,wBAAS,EAAE,gBAAK,EAAE,kBAAM,CAAgB;YAC1C,IAAA,eAAoD,EAAlD,oCAAe,EAAE,0CAAkB,CAAgB;YAC3D,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;gBACxC,KAAK,EAAE,KAAM;gBACb,SAAS,WAAA;gBACT,mBAAmB,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB;aACpD,CAAC,CAAC;YAEH,OAAO,CACL,gDAAS,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,CAAC,IAAE,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI;gBAC7F,6BAAK,GAAG,EAAE,IAAI,CAAC,iBAAiB,EAAE,SAAS,EAAE,UAAU,CAAC,gBAAgB,wBAAsB,IAAI,IAC/F,IAAI,CAAC,KAAK,CAAC,QAAQ,CAChB;gBACN,6BAAK,GAAG,EAAE,IAAI,CAAC,eAAe,EAAE,SAAS,EAAE,UAAU,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,wBAAwB,CAAC,eAAe,EAAE,IAAI,CAAC,GAAI;gBAClI,6BAAK,SAAS,EAAE,UAAU,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,wBAAwB,CAAC,kBAAkB,EAAE,KAAK,CAAC;oBACrG,6BAAK,GAAG,EAAE,IAAI,CAAC,eAAe,EAAE,SAAS,EAAE,UAAU,CAAC,gBAAgB,GAAI,CACtE,CACF,CACP,CAAC;QACJ,CAAC;QAEM,uDAA0B,GAAjC;YAAA,iBAMC;YALC,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBACzB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,MAAM;oBAC3B,MAAM,CAAC,kBAAkB,CAAC,KAAI,CAAC,gBAAkC,CAAC,CAAC;gBACrE,CAAC,CAAC,CAAC;aACJ;QACH,CAAC;QAEM,8CAAiB,GAAxB;YACE,IAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC;QA0FO,+CAAkB,GAA1B,UAA2B,MAAc;YACvC,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,EAAE;gBAC5F,oEAAoE;gBACpE,IAAI,MAAM,CAAC,KAAK,CAAC,WAAW,IAAI,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE;oBAC3D,IAAI,MAAM,CAAC,KAAK,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,MAAM,CAAC,gBAAgB,EAAE;wBAC9G,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;qBAC3C;oBAED,IAAI,MAAM,CAAC,KAAK,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,MAAM,CAAC,mBAAmB,EAAE;wBACpH,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;qBAC9C;iBACF;qBAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;oBACnE,0EAA0E;oBAC1E,MAAM,CAAC,WAAW,EAAE,CAAC;iBACtB;aACF;QACH,CAAC;QAkGO,+CAAkB,GAA1B;YACU,IAAA,wCAAgB,CAAU;YAClC,OAAO,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;QACpG,CAAC;QAEO,gDAAmB,GAA3B;YACU,IAAA,wCAAgB,CAAU;YAClC,OAAO,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,YAAY,GAAG,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC;QACtG,CAAC;QAtZa,oCAAiB,GAAgD;YAC7E,cAAc,EAAE,SAAS,CAAC,MAAM;SACjC,CAAC;QAiaJ,yBAAC;KAAA,AApaD,CAAwC,yBAAa,GAoapD;IApaY,gDAAkB","sourcesContent":["import * as React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { BaseComponent, classNamesFunction, divProperties, getNativeProps, getRTL } from '../../Utilities';\r\nimport { IScrollablePane, IScrollablePaneProps, IScrollablePaneStyles, IScrollablePaneStyleProps } from './ScrollablePane.types';\r\nimport { Sticky } from '../../Sticky';\r\n\r\nexport interface IScrollablePaneContext {\r\n  scrollablePane?: {\r\n    subscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\r\n    unsubscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\r\n    addSticky: (sticky: Sticky) => void;\r\n    removeSticky: (sticky: Sticky) => void;\r\n    updateStickyRefHeights: () => void;\r\n    sortSticky: (sticky: Sticky, sortAgain?: boolean) => void;\r\n    notifySubscribers: (sort?: boolean) => void;\r\n    syncScrollSticky: (sticky: Sticky) => void;\r\n  };\r\n}\r\n\r\nexport interface IScrollablePaneState {\r\n  stickyTopHeight: number;\r\n  stickyBottomHeight: number;\r\n  scrollbarWidth: number | undefined;\r\n  scrollbarHeight: number | undefined;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<IScrollablePaneStyleProps, IScrollablePaneStyles>();\r\n\r\nexport class ScrollablePaneBase extends BaseComponent<IScrollablePaneProps, IScrollablePaneState> implements IScrollablePane {\r\n  public static childContextTypes: React.ValidationMap<IScrollablePaneContext> = {\r\n    scrollablePane: PropTypes.object\r\n  };\r\n\r\n  private _root = React.createRef<HTMLDivElement>();\r\n  private _stickyAboveRef = React.createRef<HTMLDivElement>();\r\n  private _stickyBelowRef = React.createRef<HTMLDivElement>();\r\n  private _contentContainer = React.createRef<HTMLDivElement>();\r\n  private _subscribers: Set<Function>;\r\n  private _stickies: Set<Sticky>;\r\n  private _mutationObserver: MutationObserver;\r\n  private _notifyThrottled: () => void;\r\n\r\n  constructor(props: IScrollablePaneProps) {\r\n    super(props);\r\n    this._subscribers = new Set<Function>();\r\n    this._stickies = new Set<Sticky>();\r\n\r\n    this.state = {\r\n      stickyTopHeight: 0,\r\n      stickyBottomHeight: 0,\r\n      scrollbarWidth: undefined,\r\n      scrollbarHeight: undefined\r\n    };\r\n\r\n    this._notifyThrottled = this._async.throttle(this.notifySubscribers, 50);\r\n  }\r\n\r\n  public get root(): HTMLDivElement | null {\r\n    return this._root.current;\r\n  }\r\n\r\n  public get stickyAbove(): HTMLDivElement | null {\r\n    return this._stickyAboveRef.current;\r\n  }\r\n\r\n  public get stickyBelow(): HTMLDivElement | null {\r\n    return this._stickyBelowRef.current;\r\n  }\r\n\r\n  public get contentContainer(): HTMLDivElement | null {\r\n    return this._contentContainer.current;\r\n  }\r\n\r\n  public getChildContext(): IScrollablePaneContext {\r\n    return {\r\n      scrollablePane: {\r\n        subscribe: this.subscribe,\r\n        unsubscribe: this.unsubscribe,\r\n        addSticky: this.addSticky,\r\n        removeSticky: this.removeSticky,\r\n        updateStickyRefHeights: this.updateStickyRefHeights,\r\n        sortSticky: this.sortSticky,\r\n        notifySubscribers: this.notifySubscribers,\r\n        syncScrollSticky: this.syncScrollSticky\r\n      }\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    const { initialScrollPosition } = this.props;\r\n    this._events.on(this.contentContainer, 'scroll', this._onScroll);\r\n    this._events.on(window, 'resize', this._onWindowResize);\r\n    if (this.contentContainer && initialScrollPosition) {\r\n      this.contentContainer.scrollTop = initialScrollPosition;\r\n    }\r\n\r\n    // Set sticky distances from top property, then sort in correct order and notify subscribers\r\n    this.setStickiesDistanceFromTop();\r\n    this._stickies.forEach(sticky => {\r\n      this.sortSticky(sticky);\r\n    });\r\n    this.notifySubscribers();\r\n\r\n    if ('MutationObserver' in window) {\r\n      this._mutationObserver = new MutationObserver(mutation => {\r\n        // Function to check if mutation is occuring in stickyAbove or stickyBelow\r\n        function checkIfMutationIsSticky(mutationRecord: MutationRecord): boolean {\r\n          if (this.stickyAbove !== null && this.stickyBelow !== null) {\r\n            return this.stickyAbove.contains(mutationRecord.target) || this.stickyBelow.contains(mutationRecord.target);\r\n          }\r\n          return false;\r\n        }\r\n\r\n        // Compute the scrollbar height which might have changed due to change in width of the content which might cause overflow\r\n        const scrollbarHeight = this._getScrollbarHeight();\r\n        // check if the scroll bar height has changed and update the state so that it's postioned correctly below sticky footer\r\n        if (scrollbarHeight !== this.state.scrollbarHeight) {\r\n          this.setState({\r\n            scrollbarHeight: scrollbarHeight\r\n          });\r\n        }\r\n\r\n        // Notify subscribers again to re-check whether Sticky should be Sticky'd or not\r\n        this.notifySubscribers();\r\n\r\n        // If mutation occurs in sticky header or footer, then update sticky top/bottom heights\r\n        if (mutation.some(checkIfMutationIsSticky.bind(this))) {\r\n          this.updateStickyRefHeights();\r\n        } else {\r\n          // If mutation occurs in scrollable region, then find Sticky it belongs to and force update\r\n          const stickyList: Sticky[] = [];\r\n          this._stickies.forEach(sticky => {\r\n            if (sticky.root && sticky.root.contains(mutation[0].target)) {\r\n              stickyList.push(sticky);\r\n            }\r\n          });\r\n          if (stickyList.length) {\r\n            stickyList.forEach(sticky => {\r\n              sticky.forceUpdate();\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      if (this.root) {\r\n        this._mutationObserver.observe(this.root, {\r\n          childList: true,\r\n          attributes: true,\r\n          subtree: true,\r\n          characterData: true\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this._events.off(this.contentContainer);\r\n    this._events.off(window);\r\n\r\n    if (this._mutationObserver) {\r\n      this._mutationObserver.disconnect();\r\n    }\r\n  }\r\n\r\n  // Only updates if props/state change, just to prevent excessive setState with updateStickyRefHeights\r\n  public shouldComponentUpdate(nextProps: IScrollablePaneProps, nextState: IScrollablePaneState): boolean {\r\n    return (\r\n      this.props.children !== nextProps.children ||\r\n      this.props.initialScrollPosition !== nextProps.initialScrollPosition ||\r\n      this.props.className !== nextProps.className ||\r\n      this.state.stickyTopHeight !== nextState.stickyTopHeight ||\r\n      this.state.stickyBottomHeight !== nextState.stickyBottomHeight ||\r\n      this.state.scrollbarWidth !== nextState.scrollbarWidth ||\r\n      this.state.scrollbarHeight !== nextState.scrollbarHeight\r\n    );\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IScrollablePaneProps, prevState: IScrollablePaneState) {\r\n    const initialScrollPosition = this.props.initialScrollPosition;\r\n    if (this.contentContainer && typeof initialScrollPosition === 'number' && prevProps.initialScrollPosition !== initialScrollPosition) {\r\n      this.contentContainer.scrollTop = initialScrollPosition;\r\n    }\r\n\r\n    // Update subscribers when stickyTopHeight/stickyBottomHeight changes\r\n    if (prevState.stickyTopHeight !== this.state.stickyTopHeight || prevState.stickyBottomHeight !== this.state.stickyBottomHeight) {\r\n      this.notifySubscribers();\r\n    }\r\n\r\n    this._async.setTimeout(this._onWindowResize, 0);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { className, theme, styles } = this.props;\r\n    const { stickyTopHeight, stickyBottomHeight } = this.state;\r\n    const classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className,\r\n      scrollbarVisibility: this.props.scrollbarVisibility\r\n    });\r\n\r\n    return (\r\n      <div {...getNativeProps(this.props, divProperties)} ref={this._root} className={classNames.root}>\r\n        <div ref={this._contentContainer} className={classNames.contentContainer} data-is-scrollable={true}>\r\n          {this.props.children}\r\n        </div>\r\n        <div ref={this._stickyAboveRef} className={classNames.stickyAbove} style={this._getStickyContainerStyle(stickyTopHeight, true)} />\r\n        <div className={classNames.stickyBelow} style={this._getStickyContainerStyle(stickyBottomHeight, false)}>\r\n          <div ref={this._stickyBelowRef} className={classNames.stickyBelowItems} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public setStickiesDistanceFromTop(): void {\r\n    if (this.contentContainer) {\r\n      this._stickies.forEach(sticky => {\r\n        sticky.setDistanceFromTop(this.contentContainer as HTMLDivElement);\r\n      });\r\n    }\r\n  }\r\n\r\n  public forceLayoutUpdate() {\r\n    this._onWindowResize();\r\n  }\r\n\r\n  public subscribe = (handler: Function): void => {\r\n    this._subscribers.add(handler);\r\n  };\r\n\r\n  public unsubscribe = (handler: Function): void => {\r\n    this._subscribers.delete(handler);\r\n  };\r\n\r\n  public addSticky = (sticky: Sticky): void => {\r\n    this._stickies.add(sticky);\r\n\r\n    // If ScrollablePane is mounted, then sort sticky in correct place\r\n    if (this.contentContainer) {\r\n      sticky.setDistanceFromTop(this.contentContainer);\r\n      this.sortSticky(sticky);\r\n    }\r\n    this.notifySubscribers();\r\n  };\r\n\r\n  public removeSticky = (sticky: Sticky): void => {\r\n    this._stickies.delete(sticky);\r\n    this._removeStickyFromContainers(sticky);\r\n    this.notifySubscribers();\r\n  };\r\n\r\n  public sortSticky = (sticky: Sticky, sortAgain?: boolean): void => {\r\n    if (this.stickyAbove && this.stickyBelow) {\r\n      if (sortAgain) {\r\n        this._removeStickyFromContainers(sticky);\r\n      }\r\n      if (sticky.canStickyTop && sticky.stickyContentTop) {\r\n        this._addToStickyContainer(sticky, this.stickyAbove, sticky.stickyContentTop);\r\n      }\r\n\r\n      if (sticky.canStickyBottom && sticky.stickyContentBottom) {\r\n        this._addToStickyContainer(sticky, this.stickyBelow, sticky.stickyContentBottom);\r\n      }\r\n    }\r\n  };\r\n\r\n  public updateStickyRefHeights = (): void => {\r\n    const stickyItems = this._stickies;\r\n\r\n    let stickyTopHeight = 0;\r\n    let stickyBottomHeight = 0;\r\n\r\n    stickyItems.forEach((sticky: Sticky) => {\r\n      const { isStickyTop, isStickyBottom } = sticky.state;\r\n      if (sticky.nonStickyContent) {\r\n        if (isStickyTop) {\r\n          stickyTopHeight += sticky.nonStickyContent.offsetHeight;\r\n        }\r\n        if (isStickyBottom) {\r\n          stickyBottomHeight += sticky.nonStickyContent.offsetHeight;\r\n        }\r\n        this._checkStickyStatus(sticky);\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      stickyTopHeight: stickyTopHeight,\r\n      stickyBottomHeight: stickyBottomHeight\r\n    });\r\n  };\r\n\r\n  public notifySubscribers = (): void => {\r\n    if (this.contentContainer) {\r\n      this._subscribers.forEach(handle => {\r\n        // this.stickyBelow is passed in for calculating distance to determine Sticky status\r\n        handle(this.contentContainer, this.stickyBelow);\r\n      });\r\n    }\r\n  };\r\n\r\n  public getScrollPosition = (): number => {\r\n    if (this.contentContainer) {\r\n      return this.contentContainer.scrollTop;\r\n    }\r\n\r\n    return 0;\r\n  };\r\n\r\n  public syncScrollSticky = (sticky: Sticky): void => {\r\n    if (sticky && this.contentContainer) {\r\n      sticky.syncScroll(this.contentContainer);\r\n    }\r\n  };\r\n\r\n  private _checkStickyStatus(sticky: Sticky): void {\r\n    if (this.stickyAbove && this.stickyBelow && this.contentContainer && sticky.nonStickyContent) {\r\n      // If sticky is sticky, then append content to appropriate container\r\n      if (sticky.state.isStickyTop || sticky.state.isStickyBottom) {\r\n        if (sticky.state.isStickyTop && !this.stickyAbove.contains(sticky.nonStickyContent) && sticky.stickyContentTop) {\r\n          sticky.addSticky(sticky.stickyContentTop);\r\n        }\r\n\r\n        if (sticky.state.isStickyBottom && !this.stickyBelow.contains(sticky.nonStickyContent) && sticky.stickyContentBottom) {\r\n          sticky.addSticky(sticky.stickyContentBottom);\r\n        }\r\n      } else if (!this.contentContainer.contains(sticky.nonStickyContent)) {\r\n        // Reset sticky if it's not sticky and not in the contentContainer element\r\n        sticky.resetSticky();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _addToStickyContainer = (sticky: Sticky, stickyContainer: HTMLDivElement, stickyContentToAdd: HTMLDivElement): void => {\r\n    // If there's no children, append child to list, otherwise, sort though array and append at correct position\r\n    if (!stickyContainer.children.length) {\r\n      stickyContainer.appendChild(stickyContentToAdd);\r\n    } else {\r\n      // If stickyContentToAdd isn't a child element of target container, then append\r\n      if (!stickyContainer.contains(stickyContentToAdd)) {\r\n        const stickyChildrenElements: Element[] = [].slice.call(stickyContainer.children);\r\n\r\n        const stickyList: Sticky[] = [];\r\n        // Get stickies.  Filter by canStickyTop/Bottom, then sort by distance from top, and then\r\n        // filter by elements that are in the stickyContainer already.\r\n        this._stickies.forEach(stickyItem => {\r\n          if (stickyContainer === this.stickyAbove && sticky.canStickyTop) {\r\n            stickyList.push(stickyItem);\r\n          } else if (sticky.canStickyBottom) {\r\n            stickyList.push(stickyItem);\r\n          }\r\n        });\r\n\r\n        const stickyListSorted = stickyList\r\n          .sort((a, b) => {\r\n            return a.distanceFromTop - b.distanceFromTop;\r\n          })\r\n          .filter(item => {\r\n            const stickyContent = stickyContainer === this.stickyAbove ? item.stickyContentTop : item.stickyContentBottom;\r\n            if (stickyContent) {\r\n              return stickyChildrenElements.indexOf(stickyContent) > -1;\r\n            }\r\n          });\r\n\r\n        // Get first element that has a distance from top that is further than our sticky that is being added\r\n        let targetStickyToAppendBefore: Sticky | undefined = undefined;\r\n        for (const i in stickyListSorted) {\r\n          if (stickyListSorted[i].distanceFromTop >= sticky.distanceFromTop) {\r\n            targetStickyToAppendBefore = stickyListSorted[i];\r\n            break;\r\n          }\r\n        }\r\n\r\n        // If target element to append before is known, then grab respective stickyContentTop/Bottom element and insert before\r\n        let targetContainer: HTMLDivElement | null = null;\r\n        if (targetStickyToAppendBefore) {\r\n          targetContainer =\r\n            stickyContainer === this.stickyAbove\r\n              ? targetStickyToAppendBefore.stickyContentTop\r\n              : targetStickyToAppendBefore.stickyContentBottom;\r\n        }\r\n        stickyContainer.insertBefore(stickyContentToAdd, targetContainer);\r\n      }\r\n    }\r\n  };\r\n\r\n  private _removeStickyFromContainers = (sticky: Sticky): void => {\r\n    if (this.stickyAbove && sticky.stickyContentTop && this.stickyAbove.contains(sticky.stickyContentTop)) {\r\n      this.stickyAbove.removeChild(sticky.stickyContentTop);\r\n    }\r\n    if (this.stickyBelow && sticky.stickyContentBottom && this.stickyBelow.contains(sticky.stickyContentBottom)) {\r\n      this.stickyBelow.removeChild(sticky.stickyContentBottom);\r\n    }\r\n  };\r\n\r\n  private _onWindowResize = (): void => {\r\n    const scrollbarWidth = this._getScrollbarWidth();\r\n    const scrollbarHeight = this._getScrollbarHeight();\r\n\r\n    this.setState({\r\n      scrollbarWidth,\r\n      scrollbarHeight\r\n    });\r\n\r\n    this.notifySubscribers();\r\n  };\r\n\r\n  private _getStickyContainerStyle = (height: number, isTop: boolean): React.CSSProperties => {\r\n    return {\r\n      height: height,\r\n      ...(getRTL()\r\n        ? {\r\n            right: '0',\r\n            left: `${this.state.scrollbarWidth || this._getScrollbarWidth() || 0}px`\r\n          }\r\n        : {\r\n            left: '0',\r\n            right: `${this.state.scrollbarWidth || this._getScrollbarWidth() || 0}px`\r\n          }),\r\n      ...(isTop\r\n        ? {\r\n            top: '0'\r\n          }\r\n        : {\r\n            bottom: `${this.state.scrollbarHeight || this._getScrollbarHeight() || 0}px`\r\n          })\r\n    };\r\n  };\r\n\r\n  private _getScrollbarWidth(): number | undefined {\r\n    const { contentContainer } = this;\r\n    return contentContainer ? contentContainer.offsetWidth - contentContainer.clientWidth : undefined;\r\n  }\r\n\r\n  private _getScrollbarHeight(): number | undefined {\r\n    const { contentContainer } = this;\r\n    return contentContainer ? contentContainer.offsetHeight - contentContainer.clientHeight : undefined;\r\n  }\r\n\r\n  private _onScroll = () => {\r\n    const { contentContainer } = this;\r\n\r\n    if (contentContainer) {\r\n      this._stickies.forEach((sticky: Sticky) => {\r\n        sticky.syncScroll(contentContainer);\r\n      });\r\n    }\r\n\r\n    this._notifyThrottled();\r\n  };\r\n}\r\n"]}