{"version":3,"file":"ColorPickerGridCell.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  IColorCellProps,\r\n  IColorPickerGridCellProps,\r\n  IColorPickerGridCellStyleProps,\r\n  IColorPickerGridCellStyles\r\n} from './ColorPickerGridCell.types';\r\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\r\nimport { GridCell } from '../../utilities/grid/GridCell';\r\nimport { IGridCellProps } from '../../utilities/grid/GridCell.types';\r\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\r\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\r\nimport { mergeStyleSets, ITheme } from '../../Styling';\r\nimport { classNamesFunction } from '../../Utilities';\r\n\r\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\r\n\r\nclass ColorCell extends GridCell<IColorCellProps, IGridCellProps<IColorCellProps>> {}\r\n\r\nexport class ColorPickerGridCellBase extends React.Component<IColorPickerGridCellProps, {}> {\r\n  public static defaultProps = {\r\n    circle: true,\r\n    disabled: false,\r\n    selected: false\r\n  } as IColorPickerGridCellProps;\r\n\r\n  private _classNames: { [key in keyof IColorPickerGridCellStyles]: string };\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      item,\r\n      id,\r\n      selected,\r\n      disabled,\r\n      styles,\r\n      theme,\r\n      circle,\r\n      color,\r\n      onClick,\r\n      onHover,\r\n      onFocus,\r\n      onMouseEnter,\r\n      onMouseMove,\r\n      onMouseLeave,\r\n      onWheel,\r\n      onKeyDown,\r\n      height,\r\n      width,\r\n      borderWidth\r\n    } = this.props;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      disabled,\r\n      selected,\r\n      circle,\r\n      isWhite: this._isWhiteCell(color),\r\n      height,\r\n      width,\r\n      borderWidth\r\n    });\r\n\r\n    return (\r\n      <ColorCell\r\n        item={item}\r\n        id={`${id}-${item.id}-${item.index}`}\r\n        key={item.id}\r\n        disabled={disabled}\r\n        role={'gridcell'}\r\n        onRenderItem={this._onRenderColorOption}\r\n        selected={selected}\r\n        onClick={onClick}\r\n        onHover={onHover}\r\n        onFocus={onFocus}\r\n        label={item.label}\r\n        className={this._classNames.colorCell}\r\n        getClassNames={this._getClassNames}\r\n        index={item.index}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseMove={onMouseMove}\r\n        onMouseLeave={onMouseLeave}\r\n        onWheel={onWheel}\r\n        onKeyDown={onKeyDown}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render the core of a color cell\r\n   * @returns - Element representing the core of the item\r\n   */\r\n  private _onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\r\n    // Build an SVG for the cell with the given shape and color properties\r\n    return (\r\n      <svg className={this._classNames.svg} viewBox=\"0 0 20 20\" fill={getColorFromString(colorOption.color as string)!.str}>\r\n        {this.props.circle ? <circle cx=\"50%\" cy=\"50%\" r=\"50%\" /> : <rect width=\"100%\" height=\"100%\" />}\r\n      </svg>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Validate if the cell's color is white or not to apply whiteCell style\r\n   * @param inputColor - The color of the current cell\r\n   * @returns - Whether the cell's color is white or not.\r\n   */\r\n  private _isWhiteCell(inputColor: string | undefined): boolean {\r\n    const color = getColorFromString(inputColor!);\r\n    return color!.hex === 'ffffff';\r\n  }\r\n\r\n  /**\r\n   * Method to override the getClassNames func in a button.\r\n   */\r\n  private _getClassNames = (\r\n    theme: ITheme,\r\n    className: string,\r\n    variantClassName: string,\r\n    iconClassName: string | undefined,\r\n    menuIconClassName: string | undefined,\r\n    disabled: boolean,\r\n    checked: boolean,\r\n    expanded: boolean,\r\n    isSplit: boolean | undefined\r\n  ): IButtonClassNames => {\r\n    const styles = getActionButtonStyles(theme);\r\n    return mergeStyleSets(this._classNames as {}, {\r\n      root: [\r\n        'ms-Button',\r\n        styles.root,\r\n        variantClassName,\r\n        className,\r\n        checked && ['is-checked', styles.rootChecked],\r\n        disabled && ['is-disabled', styles.rootDisabled],\r\n        !disabled &&\r\n          !checked && {\r\n            selectors: {\r\n              ':hover': styles.rootHovered,\r\n              ':focus': styles.rootFocused,\r\n              ':active': styles.rootPressed\r\n            }\r\n          },\r\n        disabled && checked && [styles.rootCheckedDisabled],\r\n        !disabled &&\r\n          checked && {\r\n            selectors: {\r\n              ':hover': styles.rootCheckedHovered,\r\n              ':active': styles.rootCheckedPressed\r\n            }\r\n          }\r\n      ],\r\n      flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\r\n    });\r\n  };\r\n}\r\n"]}