{"version":3,"file":"Checkbox.Other.Example.js","sourceRoot":"../src/","sources":["components/Checkbox/examples/Checkbox.Other.Example.tsx"],"names":[],"mappings":";;;IAOA;QAAoD,0DAA+C;QAAnG;YAAA,qEAyEC;YAxEQ,WAAK,GAA+B;gBACzC,SAAS,EAAE,KAAK;aACjB,CAAC;YAuDM,uBAAiB,GAAG,UAAC,EAAgC,EAAE,SAAkB;gBAC/E,OAAO,CAAC,GAAG,CAAC,oCAAkC,SAAS,MAAG,CAAC,CAAC;YAC9D,CAAC,CAAC;YAEM,iCAA2B,GAAG,UAAC,EAAgC,EAAE,OAAgB;gBACvF,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,OAAQ,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC;YAEM,0BAAoB,GAAG,UAAC,KAAqB;gBACnD,OAAO,CACL;;oBACY,2BAAG,IAAI,EAAC,2BAA2B,WAAS;uCACjD,CACR,CAAC;YACJ,CAAC,CAAC;;QACJ,CAAC;QApEQ,+CAAM,GAAb;YACU,IAAA,gCAAS,CAAgB;YAEjC,IAAM,cAAc,GAAG;gBACrB,OAAO;oBACL,IAAI,EAAE;wBACJ,SAAS,EAAE,MAAM;qBAClB;iBACF,CAAC;YACJ,CAAC,CAAC;YAEF,OAAO,CACL;gBACE,oBAAC,mBAAQ,IACP,KAAK,EAAC,uBAAuB,EAC7B,QAAQ,EAAE,IAAI,CAAC,iBAAiB,EAChC,UAAU,EAAE;wBACV,OAAO,EAAE;4BACP,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;wBAClD,CAAC;wBACD,MAAM,EAAE;4BACN,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;wBACjD,CAAC;qBACF,EACD,MAAM,EAAE,cAAc,GACtB;gBAEF,oBAAC,mBAAQ,IACP,KAAK,EAAC,gDAAgD,EACtD,cAAc,EAAE,IAAI,EACpB,QAAQ,EAAE,IAAI,CAAC,iBAAiB,EAChC,MAAM,EAAE,cAAc,GACtB;gBAEF,oBAAC,mBAAQ,IAAC,KAAK,EAAC,gCAAgC,EAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,cAAc,GAAI;gBAE3F,oBAAC,mBAAQ,IACP,KAAK,EAAC,yDAAyD,EAC/D,QAAQ,EAAE,IAAI,EACd,cAAc,EAAE,IAAI,EACpB,QAAQ,EAAE,IAAI,CAAC,iBAAiB,EAChC,MAAM,EAAE,cAAc,GACtB;gBAEF,oBAAC,mBAAQ,IAAC,KAAK,EAAC,qBAAqB,EAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,2BAA2B,EAAE,MAAM,EAAE,cAAc,GAAI;gBAEhI,oBAAC,mBAAQ,IAAC,KAAK,EAAC,2CAA2C,EAAC,OAAO,EAAC,KAAK,EAAC,MAAM,EAAE,cAAc,GAAI;gBAEpG,oBAAC,mBAAQ,IAAC,KAAK,EAAC,kBAAkB,EAAC,MAAM,EAAE,cAAc,EAAE,aAAa,EAAE,IAAI,CAAC,oBAAoB,GAAI,CACnG,CACP,CAAC;QACJ,CAAC;QAiBH,qCAAC;IAAD,CAAC,AAzED,CAAoD,KAAK,CAAC,SAAS,GAyElE;IAzEY,wEAA8B","sourcesContent":["import * as React from 'react';\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\n\r\nexport interface ICheckboxBasicExampleState {\r\n  isChecked: boolean;\r\n}\r\n\r\nexport class CheckboxImplementationExamples extends React.Component<{}, ICheckboxBasicExampleState> {\r\n  public state: ICheckboxBasicExampleState = {\r\n    isChecked: false\r\n  };\r\n\r\n  public render(): JSX.Element {\r\n    const { isChecked } = this.state;\r\n\r\n    const checkboxStyles = () => {\r\n      return {\r\n        root: {\r\n          marginTop: '10px'\r\n        }\r\n      };\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Checkbox\r\n          label=\"Uncontrolled checkbox\"\r\n          onChange={this._onCheckboxChange}\r\n          inputProps={{\r\n            onFocus: () => {\r\n              console.log('Uncontrolled checkbox is focused');\r\n            },\r\n            onBlur: () => {\r\n              console.log('Uncontrolled checkbox is blured');\r\n            }\r\n          }}\r\n          styles={checkboxStyles}\r\n        />\r\n\r\n        <Checkbox\r\n          label=\"Uncontrolled checkbox with defaultChecked true\"\r\n          defaultChecked={true}\r\n          onChange={this._onCheckboxChange}\r\n          styles={checkboxStyles}\r\n        />\r\n\r\n        <Checkbox label=\"Disabled uncontrolled checkbox\" disabled={true} styles={checkboxStyles} />\r\n\r\n        <Checkbox\r\n          label=\"Disabled uncontrolled checkbox with defaultChecked true\"\r\n          disabled={true}\r\n          defaultChecked={true}\r\n          onChange={this._onCheckboxChange}\r\n          styles={checkboxStyles}\r\n        />\r\n\r\n        <Checkbox label=\"Controlled checkbox\" checked={isChecked} onChange={this._onControlledCheckboxChange} styles={checkboxStyles} />\r\n\r\n        <Checkbox label='Checkbox rendered with boxSide \"end\" test' boxSide=\"end\" styles={checkboxStyles} />\r\n\r\n        <Checkbox label=\"Persona Checkbox\" styles={checkboxStyles} onRenderLabel={this._renderLabelWithLink} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onCheckboxChange = (ev: React.FormEvent<HTMLElement>, isChecked: boolean) => {\r\n    console.log(`The option has been changed to ${isChecked}.`);\r\n  };\r\n\r\n  private _onControlledCheckboxChange = (ev: React.FormEvent<HTMLElement>, checked: boolean): void => {\r\n    this.setState({ isChecked: checked! });\r\n  };\r\n\r\n  private _renderLabelWithLink = (props: ICheckboxProps) => {\r\n    return (\r\n      <span>\r\n        This is a <a href=\"https://www.microsoft.com\">link</a> inside a label.\r\n      </span>\r\n    );\r\n  };\r\n}\r\n"]}