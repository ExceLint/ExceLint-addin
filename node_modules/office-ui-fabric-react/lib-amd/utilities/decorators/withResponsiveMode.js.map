{"version":3,"file":"withResponsiveMode.js","sourceRoot":"../src/","sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\n\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  small = 0,\n  medium = 1,\n  large = 2,\n  xLarge = 3,\n  xxLarge = 4,\n  xxxLarge = 5,\n  unknown = 999,\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a default responsive mode.\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n */\nexport function initializeResponsiveMode(element?: HTMLElement): void {\n  if (typeof window !== 'undefined') {\n    const currentWindow = (element && getWindow(element)) || window;\n\n    getResponsiveMode(currentWindow);\n  }\n}\n\nexport function getInitialResponsiveMode() {\n  return _defaultMode || _lastMode || ResponsiveMode.large;\n}\n\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    public static contextType = WindowContext;\n    public context: React.ContextType<typeof WindowContext>;\n\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n      this._events = new EventGroup(this);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: getInitialResponsiveMode(),\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent\n          ref={this._updateComposedComponentRef}\n          responsiveMode={responsiveMode}\n          {...(this.props as any)}\n        />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = getResponsiveMode(this.context.window);\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode,\n        });\n      }\n    };\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n\nexport function getResponsiveMode(currentWindow: Window | undefined): ResponsiveMode {\n  let responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (currentWindow.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error(\n        'Content was rendered in a server environment without providing a default responsive mode. ' +\n          'Call setResponsiveMode to define what the responsive mode is.',\n      );\n    }\n  }\n\n  return responsiveMode;\n}\n"]}