{"version":3,"file":"BaseDecorator.js","sourceRoot":"../src/","sources":["utilities/decorators/BaseDecorator.ts"],"names":[],"mappings":";;;IAGA;QAAmD,yCAA6B;QAQ9E,uBAAY,KAAa;YAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;YAVD,mCAAmC;YACzB,iCAA2B,GAAG,IAAI,CAAC;YAQ3C,KAAI,CAAC,2BAA2B,GAAG,KAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;QACjF,CAAC;QAED;;;;;WAKG;QACO,mDAA2B,GAArC,UAAsC,yBAA0D;YAC9F,IAAI,CAAC,0BAA0B,GAAG,yBAAyB,CAAC;YAC5D,IAAI,yBAAyB,EAAE;gBAC7B,IAAI,CAAC,QAAQ,GAAG,wBAAY,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;aAC/D;iBAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACxB,0BAAc,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aACrC;QACH,CAAC;QACH,oBAAC;IAAD,CAAC,AA3BD,CAAmD,yBAAa,GA2B/D;IA3BY,sCAAa","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, hoistMethods, unhoistMethods } from '../../Utilities';\r\n\r\nexport class BaseDecorator<TProps, TState> extends BaseComponent<TProps, TState> {\r\n  // tslint:disable-next-line:typedef\r\n  protected _skipComponentRefResolution = true;\r\n\r\n  protected _composedComponentInstance: React.Component<TProps, TState>;\r\n\r\n  private _hoisted: string[];\r\n\r\n  constructor(props: TProps) {\r\n    super(props);\r\n    this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Updates the ref to the component composed by the decorator, which will also take care of hoisting\r\n   * (and unhoisting as appropriate) methods from said component.\r\n   *\r\n   * Pass this method as the argument to the 'ref' property of the composed component.\r\n   */\r\n  protected _updateComposedComponentRef(composedComponentInstance: React.Component<TProps, TState>): void {\r\n    this._composedComponentInstance = composedComponentInstance;\r\n    if (composedComponentInstance) {\r\n      this._hoisted = hoistMethods(this, composedComponentInstance);\r\n    } else if (this._hoisted) {\r\n      unhoistMethods(this, this._hoisted);\r\n    }\r\n  }\r\n}\r\n"]}