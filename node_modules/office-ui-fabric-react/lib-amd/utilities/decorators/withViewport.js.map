{"version":3,"file":"withViewport.js","sourceRoot":"../src/","sources":["utilities/decorators/withViewport.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseDecorator } from './BaseDecorator';\r\nimport { findScrollableParent, getRect, getWindow } from '../../Utilities';\r\n\r\nexport interface IViewport {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IWithViewportState {\r\n  viewport?: IViewport;\r\n}\r\n\r\nexport interface IWithViewportProps {\r\n  skipViewportMeasures?: boolean;\r\n}\r\n\r\nconst RESIZE_DELAY = 500;\r\nconst MAX_RESIZE_ATTEMPTS = 3;\r\n\r\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\r\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>\r\n): any {\r\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\r\n    private _root = React.createRef<HTMLDivElement>();\r\n    private _resizeAttempts: number;\r\n    private _viewportResizeObserver: any;\r\n\r\n    constructor(props: TProps) {\r\n      super(props);\r\n      this._resizeAttempts = 0;\r\n\r\n      this.state = {\r\n        viewport: {\r\n          width: 0,\r\n          height: 0\r\n        }\r\n      };\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n      const { skipViewportMeasures } = this.props as IWithViewportProps;\r\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\r\n        leading: false\r\n      });\r\n\r\n      const window = getWindow();\r\n      const viewportElement = this._root.current;\r\n\r\n      // ResizeObserver seems always fire even window is not resized. This is\r\n      // particularly bad when skipViewportMeasures is set when optimizing fixed layout lists.\r\n      // It will measure and update and re-render the entire list after list is fully rendered.\r\n      // So fallback to listen to resize event when skipViewportMeasures is set.\r\n      if (!skipViewportMeasures && window && (window as any).ResizeObserver) {\r\n        this._viewportResizeObserver = new (window as any).ResizeObserver(this._onAsyncResize);\r\n        this._viewportResizeObserver.observe(viewportElement);\r\n      } else {\r\n        this._events.on(window, 'resize', this._onAsyncResize);\r\n      }\r\n\r\n      if (!skipViewportMeasures) {\r\n        this._updateViewport();\r\n      }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n      this._events.dispose();\r\n\r\n      if (this._viewportResizeObserver) {\r\n        this._viewportResizeObserver.disconnect();\r\n      }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n      const { viewport } = this.state;\r\n      const { skipViewportMeasures } = this.props as IWithViewportProps;\r\n      const isViewportVisible = skipViewportMeasures || (viewport!.width > 0 && viewport!.height > 0);\r\n\r\n      return (\r\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\r\n          {isViewportVisible && <ComposedComponent ref={this._updateComposedComponentRef} viewport={viewport} {...this.props as any} />}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    public forceUpdate(): void {\r\n      this._updateViewport(true);\r\n    }\r\n\r\n    private _onAsyncResize(): void {\r\n      this._updateViewport();\r\n    }\r\n\r\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\r\n    private _updateViewport = (withForceUpdate?: boolean) => {\r\n      const { viewport } = this.state;\r\n      const viewportElement = this._root.current;\r\n      const scrollElement = findScrollableParent(viewportElement);\r\n      const scrollRect = getRect(scrollElement);\r\n      const clientRect = getRect(viewportElement);\r\n      const updateComponent = () => {\r\n        if (withForceUpdate && this._composedComponentInstance) {\r\n          this._composedComponentInstance.forceUpdate();\r\n        }\r\n      };\r\n\r\n      const isSizeChanged = (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\r\n\r\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\r\n        this._resizeAttempts++;\r\n        this.setState(\r\n          {\r\n            viewport: {\r\n              width: clientRect.width,\r\n              height: scrollRect.height\r\n            }\r\n          },\r\n          () => {\r\n            this._updateViewport(withForceUpdate);\r\n          }\r\n        );\r\n      } else {\r\n        this._resizeAttempts = 0;\r\n        updateComponent();\r\n      }\r\n    };\r\n  };\r\n}\r\n"]}