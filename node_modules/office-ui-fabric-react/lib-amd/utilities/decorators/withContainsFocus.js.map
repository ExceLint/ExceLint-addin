{"version":3,"file":"withContainsFocus.js","sourceRoot":"../src/","sources":["utilities/decorators/withContainsFocus.tsx"],"names":[],"mappings":";;;IAGA,2BACE,iBAAoF;QAEpF;YAAgD,sDAAgF;YAI9H,oCAAY,KAAa;gBAAzB,YACE,kBAAM,KAAK,CAAC,SAUb;gBARC,KAAI,CAAC,KAAK,GAAG;oBACX,aAAa,EAAE,KAAK;iBACrB,CAAC;gBAEF,KAAI,CAAC,wBAAwB,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;gBACjF,KAAI,CAAC,2BAA2B,GAAG,KAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;gBAC/E,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;gBACjD,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;YACjD,CAAC;YAEM,yDAAoB,GAA3B;gBACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACxB,CAAC;YAEM,2CAAM,GAAb;gBACU,IAAA,wCAAa,CAAgB;gBAErC,OAAO,CACL,6BAAK,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,WAAW;oBACvD,oBAAC,iBAAiB,qBAAC,GAAG,EAAE,IAAI,CAAC,2BAA2B,EAAE,aAAa,EAAE,aAAa,IAAM,IAAI,CAAC,KAAY,EAAI,CAC7G,CACP,CAAC;YACJ,CAAC;YAEM,gDAAW,GAAlB;gBACE,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,CAAC;YAChD,CAAC;YAEO,iDAAY,GAApB,UAAqB,EAAoC;gBACvD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAClC,CAAC;YAEO,gDAAW,GAAnB,UAAoB,EAAoC;gBACtD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC/B,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAClC,CAAC;YAEO,sDAAiB,GAAzB;gBACE,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,IAAI,CAAC,iBAAiB,EAAE;oBACvD,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;iBAC1D;YACH,CAAC;YACH,iCAAC;QAAD,CAAC,AAlDM,CAAyC,6BAAa,GAkD3D;IACJ,CAAC;IAtDD,8CAsDC","sourcesContent":["import * as React from 'react';\r\nimport { BaseDecorator } from './BaseDecorator';\r\n\r\nexport function withContainsFocus<TProps extends { containsFocus?: boolean }, S>(\r\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, S>\r\n): any {\r\n  return class WithContainsFocusComponent extends BaseDecorator<TProps & { containsFocus?: boolean }, { containsFocus?: boolean }> {\r\n    private _newContainsFocus: boolean;\r\n    private _delayedSetContainsFocus: () => void;\r\n\r\n    constructor(props: TProps) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        containsFocus: false\r\n      };\r\n\r\n      this._delayedSetContainsFocus = this._async.debounce(this._setContainsFocus, 20);\r\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\r\n      this._handleFocus = this._handleFocus.bind(this);\r\n      this._handleBlur = this._handleBlur.bind(this);\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n      this._async.dispose();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n      const { containsFocus } = this.state;\r\n\r\n      return (\r\n        <div onFocus={this._handleFocus} onBlur={this._handleBlur}>\r\n          <ComposedComponent ref={this._updateComposedComponentRef} containsFocus={containsFocus} {...this.props as any} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    public forceUpdate(): void {\r\n      this._composedComponentInstance.forceUpdate();\r\n    }\r\n\r\n    private _handleFocus(ev: React.FocusEvent<HTMLDivElement>): void {\r\n      this._newContainsFocus = true;\r\n      this._delayedSetContainsFocus();\r\n    }\r\n\r\n    private _handleBlur(ev: React.FocusEvent<HTMLDivElement>): void {\r\n      this._newContainsFocus = false;\r\n      this._delayedSetContainsFocus();\r\n    }\r\n\r\n    private _setContainsFocus(): void {\r\n      if (this.state.containsFocus !== this._newContainsFocus) {\r\n        this.setState({ containsFocus: this._newContainsFocus });\r\n      }\r\n    }\r\n  };\r\n}\r\n"]}