{"version":3,"file":"GroupedListUtility.js","sourceRoot":"../src/","sources":["utilities/groupedList/GroupedListUtility.tsx"],"names":[],"mappings":";;;IAEA;;;OAGG;IACU,QAAA,aAAa,GAAG,UAAC,MAA4B;QACxD,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,MAAM,EAAE;YACV,IAAM,eAAe,GAAO,MAAM,QAAC,CAAC;YACpC,IAAI,YAAY,SAAQ,CAAC;YAEzB,OAAO,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpD,EAAE,KAAK,CAAC;gBAER,YAAY,GAAG,eAAe,CAAC,GAAG,EAAY,CAAC;gBAE/C,IAAI,YAAY,IAAI,YAAY,CAAC,QAAQ,EAAE;oBACzC,eAAe,CAAC,IAAI,OAApB,eAAe,EAAS,YAAY,CAAC,QAAQ,EAAE;iBAChD;aACF;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC","sourcesContent":["import { IGroup } from '../../components/GroupedList/GroupedList.types';\r\n\r\n/**\r\n * Takes an array of groups and returns a count of the groups and all descendant groups.\r\n * @param groups - The array of groups to count.\r\n */\r\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\r\n  let total = 0;\r\n\r\n  if (groups) {\r\n    const remainingGroups = [...groups];\r\n    let currentGroup: IGroup;\r\n\r\n    while (remainingGroups && remainingGroups.length > 0) {\r\n      ++total;\r\n\r\n      currentGroup = remainingGroups.pop() as IGroup;\r\n\r\n      if (currentGroup && currentGroup.children) {\r\n        remainingGroups.push(...currentGroup.children);\r\n      }\r\n    }\r\n  }\r\n\r\n  return total;\r\n};\r\n"]}