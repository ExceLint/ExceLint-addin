{"version":3,"file":"positioning.types.js","sourceRoot":"../src/","sources":["utilities/positioning/positioning.types.ts"],"names":[],"mappings":";;;IAIA,IAAY,aAKX;IALD,WAAY,aAAa;QACvB,+CAAO,CAAA;QACP,sDAAW,CAAA;QACX,iDAAQ,CAAA;QACR,oDAAU,CAAA;IACZ,CAAC,EALW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAKxB;IAED,IAAY,QAKX;IALD,WAAY,QAAQ;QAClB,qCAAO,CAAA;QACP,2CAAU,CAAA;QACV,yCAAS,CAAA;QACT,qCAAO,CAAA;IACT,CAAC,EALW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAKnB","sourcesContent":["import { DirectionalHint } from '../../common/DirectionalHint';\r\nimport { IPoint } from './positioning.types';\r\nimport { IRectangle } from '../../Utilities';\r\n\r\nexport enum RectangleEdge {\r\n  top = 1,\r\n  bottom = -1,\r\n  left = 2,\r\n  right = -2\r\n}\r\n\r\nexport enum Position {\r\n  top = 0,\r\n  bottom = 1,\r\n  start = 2,\r\n  end = 3\r\n}\r\nexport interface IPositionProps {\r\n  target?: Element | MouseEvent | IPoint;\r\n  /** how the element should be positioned */\r\n  directionalHint?: DirectionalHint;\r\n  /**\r\n   * How the element should be positioned in RTL layouts.\r\n   * If not specified, a mirror of `directionalHint` will be used instead\r\n   */\r\n  directionalHintForRTL?: DirectionalHint;\r\n  /** The gap between the callout and the target */\r\n  gapSpace?: number;\r\n  /**\r\n   * The bounding rectangle for which  the contextual menu can appear in.\r\n   */\r\n  bounds?: IRectangle;\r\n  /**\r\n   * If true the position returned will have the menu element cover the target.\r\n   * If false then it will position next to the target;\r\n   */\r\n  coverTarget?: boolean;\r\n  /**\r\n   * If true the position will not change edges in an attempt to fit the rectangle within bounds.\r\n   * It will still attempt to align it to whatever bounds are given.\r\n   * @defaultvalue false\r\n   */\r\n  directionalHintFixed?: boolean;\r\n\r\n  /**\r\n   * If true the positioning logic will prefer flipping edges over nudging the rectangle to fit within bounds,\r\n   * thus making sure the the element align perfectly with target.\r\n   */\r\n  alignTargetEdge?: boolean;\r\n}\r\n\r\nexport interface ICalloutPositionProps extends IPositionProps {\r\n  /**\r\n   * The width of the beak.\r\n   */\r\n  beakWidth?: number;\r\n\r\n  /**\r\n   * Whether or not the beak is visible\r\n   */\r\n  isBeakVisible?: boolean;\r\n}\r\n\r\nexport interface IPositionedData {\r\n  /**\r\n   * The new position of the element.\r\n   */\r\n  elementPosition: IPosition;\r\n  /**\r\n   * The finalized target edge that element is aligning to. For instance RectangleEdge.bottom would mean\r\n   * that the bottom edge of the target is being aligned to by the RectangleEdge.top of the element\r\n   * that is being positioned.\r\n   */\r\n  targetEdge: RectangleEdge;\r\n  /**\r\n   * The finalized alignment edge that the element is aligning too. For instance, RectangleEdge.left means\r\n   * that the left edge of the target should be in line with the left edge of the element being positioned.\r\n   */\r\n  alignmentEdge?: RectangleEdge;\r\n}\r\n\r\nexport interface ICalloutPositionedInfo extends IPositionedData {\r\n  beakPosition: ICalloutBeakPositionedInfo;\r\n}\r\n\r\nexport interface ICalloutBeakPositionedInfo extends IPositionedData {\r\n  closestEdge: RectangleEdge;\r\n}\r\n\r\n/**\r\n * Gives the position of some element on the page. Only a pair of vertical and horizontal edges need to be\r\n * given. So top/left or bottom/left is sufficient.\r\n * The number given is the distance in pixels from whatever host was given..\r\n * So bottom: 100 would be 100px up from the bottom of the host while top: 100px from the top.\r\n */\r\nexport interface IPosition {\r\n  top?: number;\r\n  left?: number;\r\n  bottom?: number;\r\n  right?: number;\r\n  [key: string]: number | undefined;\r\n}\r\n\r\nexport interface IPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IPositionDirectionalHintData {\r\n  targetEdge: RectangleEdge;\r\n  alignmentEdge?: RectangleEdge;\r\n  isAuto?: boolean;\r\n  alignTargetEdge?: boolean;\r\n}\r\n\r\nexport interface IRelativePositions {\r\n  calloutPosition: IPosition;\r\n  beakPosition: { position: IPosition | undefined; display: 'block' };\r\n  directionalClassName: string;\r\n  submenuDirection: DirectionalHint;\r\n}\r\n"]}