{"version":3,"file":"SelectionZone.js","sourceRoot":"../src/","sources":["utilities/selection/SelectionZone.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  KeyCodes,\r\n  elementContains,\r\n  findScrollableParent,\r\n  getParent,\r\n  getDocument,\r\n  getWindow,\r\n  isElementTabbable\r\n} from '../../Utilities';\r\nimport { ISelection, SelectionMode, IObjectWithKey } from './interfaces';\r\n\r\n// Selection definitions:\r\n//\r\n// Anchor index: the point from which a range selection starts.\r\n// Focus index: the point from which layout movement originates from.\r\n//\r\n// These two can differ. Tests:\r\n//\r\n// If you start at index 5\r\n// Shift click to index 10\r\n//    The focus is 10, the anchor is 5.\r\n// If you shift click at index 0\r\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\r\n// If you click index 8\r\n//    The anchor and focus are set to 8.\r\n\r\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\r\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\r\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\r\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\r\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\r\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\r\n\r\nexport interface ISelectionZone {\r\n  ignoreNextFocus: () => void;\r\n}\r\n\r\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\r\n  componentRef?: () => void;\r\n  selection: ISelection;\r\n  /**\r\n   * @deprecated No longer in use, focus is now managed by FocusZone\r\n   */\r\n  layout?: {};\r\n  selectionMode?: SelectionMode;\r\n  selectionPreservedOnEmptyClick?: boolean;\r\n  disableAutoSelectOnInputElements?: boolean;\r\n  enterModalOnTouch?: boolean;\r\n  isSelectedOnFocus?: boolean;\r\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\r\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\r\n}\r\n\r\nexport class SelectionZone extends BaseComponent<ISelectionZoneProps, {}> {\r\n  public static defaultProps = {\r\n    isMultiSelectEnabled: true,\r\n    isSelectedOnFocus: true,\r\n    selectionMode: SelectionMode.multiple\r\n  };\r\n\r\n  private _root = React.createRef<HTMLDivElement>();\r\n  private _isCtrlPressed: boolean;\r\n  private _isShiftPressed: boolean;\r\n  private _isMetaPressed: boolean;\r\n  private _isTabPressed: boolean;\r\n  private _shouldHandleFocus: boolean;\r\n  private _shouldHandleFocusTimeoutId: number | undefined;\r\n  private _isTouch: boolean;\r\n  private _isTouchTimeoutId: number | undefined;\r\n\r\n  public componentDidMount(): void {\r\n    const win = getWindow(this._root.current);\r\n\r\n    // Track the latest modifier keys globally.\r\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\r\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\r\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\r\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div\r\n        className=\"ms-SelectionZone\"\r\n        ref={this._root}\r\n        onKeyDown={this._onKeyDown}\r\n        onMouseDown={this._onMouseDown}\r\n        onKeyDownCapture={this._onKeyDownCapture}\r\n        onClick={this._onClick}\r\n        role=\"presentation\"\r\n        onDoubleClick={this._onDoubleClick}\r\n        onContextMenu={this._onContextMenu}\r\n        {...{\r\n          onMouseDownCapture: this._onMouseDownCapture,\r\n          onFocusCapture: this._onFocus\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\r\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\r\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\r\n   * focus event that occurs. This method does that.\r\n   */\r\n  public ignoreNextFocus = (): void => {\r\n    this._handleNextFocus(false);\r\n  };\r\n\r\n  private _onMouseDownCapture = (ev: any): void => {\r\n    if (document.activeElement !== ev.target && !elementContains(document.activeElement as HTMLElement, ev.target)) {\r\n      this.ignoreNextFocus();\r\n      return;\r\n    }\r\n\r\n    if (!elementContains(ev.target, this._root.current)) {\r\n      return;\r\n    }\r\n\r\n    let target = ev.target as HTMLElement;\r\n\r\n    while (target !== this._root.current) {\r\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\r\n        this.ignoreNextFocus();\r\n        break;\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\r\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\r\n   * specially.\r\n   */\r\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const target = ev.target as HTMLElement;\r\n    const { selection } = this.props;\r\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\r\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\r\n      const itemRoot = this._findItemRoot(target);\r\n\r\n      if (!isToggle && itemRoot) {\r\n        const index = this._getItemIndex(itemRoot);\r\n\r\n        if (isToggleModifierPressed) {\r\n          // set anchor only.\r\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\r\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\r\n            selection.setModal(true);\r\n            this._setIsTouch(false);\r\n          }\r\n        } else {\r\n          if (this.props.isSelectedOnFocus) {\r\n            this._onItemSurfaceClick(ev, index);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this._handleNextFocus(false);\r\n  };\r\n\r\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    this._updateModifiers(ev);\r\n\r\n    let target = ev.target as HTMLElement;\r\n    const itemRoot = this._findItemRoot(target);\r\n\r\n    // No-op if selection is disabled\r\n    if (this._isSelectionDisabled(target)) {\r\n      return;\r\n    }\r\n\r\n    while (target !== this._root.current) {\r\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\r\n        break;\r\n      } else if (itemRoot) {\r\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\r\n          break;\r\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\r\n          break;\r\n        } else if (\r\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\r\n          !this._isShiftPressed &&\r\n          !this._isCtrlPressed &&\r\n          !this._isMetaPressed\r\n        ) {\r\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\r\n          break;\r\n        } else if (\r\n          this.props.disableAutoSelectOnInputElements &&\r\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  };\r\n\r\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\r\n    this._setIsTouch(true);\r\n  };\r\n\r\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    this._updateModifiers(ev);\r\n\r\n    let target = ev.target as HTMLElement;\r\n    const itemRoot = this._findItemRoot(target);\r\n\r\n    // No-op if selection is disabled\r\n    if (this._isSelectionDisabled(target)) {\r\n      return;\r\n    }\r\n\r\n    while (target !== this._root.current) {\r\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\r\n        this._onToggleAllClick(ev);\r\n        break;\r\n      } else if (itemRoot) {\r\n        const index = this._getItemIndex(itemRoot);\r\n\r\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\r\n          if (this._isShiftPressed) {\r\n            this._onItemSurfaceClick(ev, index);\r\n          } else {\r\n            this._onToggleClick(ev, index);\r\n          }\r\n          break;\r\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\r\n          this._onInvokeClick(ev, index);\r\n          break;\r\n        } else if (target === itemRoot) {\r\n          this._onItemSurfaceClick(ev, index);\r\n          break;\r\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\r\n          return;\r\n        }\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  };\r\n\r\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const target = ev.target as HTMLElement;\r\n\r\n    const { onItemContextMenu, selection } = this.props;\r\n    if (onItemContextMenu) {\r\n      const itemRoot = this._findItemRoot(target);\r\n\r\n      if (itemRoot) {\r\n        const index = this._getItemIndex(itemRoot);\r\n\r\n        this._onInvokeMouseDown(ev, index);\r\n\r\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\r\n\r\n        // In order to keep back compat, if the value here is undefined, then we should still\r\n        // call preventDefault(). Only in the case where true is explicitly returned should\r\n        // the call be skipped.\r\n        if (!skipPreventDefault) {\r\n          ev.preventDefault();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private _isSelectionDisabled(target: HTMLElement): boolean {\r\n    if (this._getSelectionMode() === SelectionMode.none) {\r\n      return true;\r\n    }\r\n\r\n    while (target !== this._root.current) {\r\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\r\n        return true;\r\n      }\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * In multi selection, if you double click within an item's root (but not within the invoke element or input elements),\r\n   * we should execute the invoke handler.\r\n   */\r\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    let target = ev.target as HTMLElement;\r\n\r\n    if (this._isSelectionDisabled(target)) {\r\n      return;\r\n    }\r\n\r\n    const { onItemInvoked } = this.props;\r\n    const itemRoot = this._findItemRoot(target);\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    if (itemRoot && onItemInvoked && selectionMode !== SelectionMode.none && !this._isInputElement(target)) {\r\n      const index = this._getItemIndex(itemRoot);\r\n\r\n      while (target !== this._root.current) {\r\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) || this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\r\n          break;\r\n        } else if (target === itemRoot) {\r\n          this._onInvokeClick(ev, index);\r\n          break;\r\n        }\r\n\r\n        target = getParent(target) as HTMLElement;\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  };\r\n\r\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\r\n    this._updateModifiers(ev);\r\n\r\n    this._handleNextFocus(true);\r\n  };\r\n\r\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\r\n    this._updateModifiers(ev);\r\n\r\n    let target = ev.target as HTMLElement;\r\n\r\n    if (this._isSelectionDisabled(target)) {\r\n      return;\r\n    }\r\n\r\n    const { selection } = this.props;\r\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\r\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\r\n\r\n    // Ignore key downs from input elements.\r\n    if (this._isInputElement(target)) {\r\n      // A key was pressed while an item in this zone was focused.\r\n      return;\r\n    }\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    // If ctrl-a is pressed, select all (if all are not already selected.)\r\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\r\n      selection.setAllSelected(true);\r\n      ev.stopPropagation();\r\n      ev.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // If escape is pressed, clear selection (if any are selected.)\r\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\r\n      selection.setAllSelected(false);\r\n      ev.stopPropagation();\r\n      ev.preventDefault();\r\n      return;\r\n    }\r\n\r\n    const itemRoot = this._findItemRoot(target);\r\n\r\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\r\n    if (itemRoot) {\r\n      const index = this._getItemIndex(itemRoot);\r\n\r\n      while (target !== this._root.current) {\r\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\r\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\r\n          // so we can no-op for any keydowns in this case.\r\n          break;\r\n        } else if (this._shouldAutoSelect(target)) {\r\n          // If the event went to an element which should trigger auto-select, select it and then let\r\n          // the default behavior kick in.\r\n          this._onInvokeMouseDown(ev, index);\r\n          break;\r\n        } else if (\r\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\r\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\r\n        ) {\r\n          return false;\r\n        } else if (target === itemRoot) {\r\n          if (ev.which === KeyCodes.enter) {\r\n            this._onInvokeClick(ev, index);\r\n            ev.preventDefault();\r\n            return;\r\n          } else if (ev.which === KeyCodes.space) {\r\n            this._onToggleClick(ev, index);\r\n            ev.preventDefault();\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n\r\n        target = getParent(target) as HTMLElement;\r\n      }\r\n    }\r\n  };\r\n\r\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\r\n    const { selection } = this.props;\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    if (selectionMode === SelectionMode.multiple) {\r\n      selection.toggleAllSelected();\r\n      ev.stopPropagation();\r\n      ev.preventDefault();\r\n    }\r\n  }\r\n\r\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\r\n    const { selection } = this.props;\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    selection.setChangeEvents(false);\r\n\r\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\r\n      selection.setModal(true);\r\n      this._setIsTouch(false);\r\n    }\r\n\r\n    if (selectionMode === SelectionMode.multiple) {\r\n      selection.toggleIndexSelected(index);\r\n    } else if (selectionMode === SelectionMode.single) {\r\n      const isSelected = selection.isIndexSelected(index);\r\n      selection.setAllSelected(false);\r\n      selection.setIndexSelected(index, !isSelected, true);\r\n    } else {\r\n      selection.setChangeEvents(true);\r\n      return;\r\n    }\r\n\r\n    selection.setChangeEvents(true);\r\n\r\n    ev.stopPropagation();\r\n\r\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\r\n    // for checkboxes if you use a checkbox for the toggle.\r\n  }\r\n\r\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\r\n    const { selection, onItemInvoked } = this.props;\r\n\r\n    if (onItemInvoked) {\r\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\r\n    const { selection } = this.props;\r\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    if (selectionMode === SelectionMode.multiple) {\r\n      if (this._isShiftPressed && !this._isTabPressed) {\r\n        selection.selectToIndex(index, !isToggleModifierPressed);\r\n      } else if (isToggleModifierPressed) {\r\n        selection.toggleIndexSelected(index);\r\n      } else {\r\n        this._clearAndSelectIndex(index);\r\n      }\r\n    } else if (selectionMode === SelectionMode.single) {\r\n      this._clearAndSelectIndex(index);\r\n    }\r\n  }\r\n\r\n  private _onInvokeMouseDown(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\r\n    const { selection } = this.props;\r\n\r\n    // Only do work if item is not selected.\r\n    if (selection.isIndexSelected(index)) {\r\n      return;\r\n    }\r\n\r\n    this._clearAndSelectIndex(index);\r\n  }\r\n\r\n  /**\r\n   * To avoid high startup cost of traversing the DOM on component mount,\r\n   * defer finding the scrollable parent until a click interaction.\r\n   *\r\n   * The styles will probably already calculated since we're running in a click handler,\r\n   * so this is less likely to cause layout thrashing then doing it in mount.\r\n   */\r\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\r\n    const scrollParent = findScrollableParent(this._root.current);\r\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\r\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\r\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\r\n\r\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\r\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\r\n      this._tryClearOnEmptyClick(ev);\r\n    }\r\n  }\r\n\r\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\r\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\r\n      this.props.selection.setAllSelected(false);\r\n    }\r\n  }\r\n\r\n  private _clearAndSelectIndex(index: number): void {\r\n    const { selection } = this.props;\r\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\r\n\r\n    if (!isAlreadySingleSelected) {\r\n      selection.setChangeEvents(false);\r\n      selection.setAllSelected(false);\r\n      selection.setIndexSelected(index, true, true);\r\n      if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\r\n        selection.setModal(true);\r\n        this._setIsTouch(false);\r\n      }\r\n      selection.setChangeEvents(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * We need to track the modifier key states so that when focus events occur, which do not contain\r\n   * modifier states in the Event object, we know how to behave.\r\n   */\r\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\r\n    this._isShiftPressed = ev.shiftKey;\r\n    this._isCtrlPressed = ev.ctrlKey;\r\n    this._isMetaPressed = ev.metaKey;\r\n\r\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\r\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\r\n  }\r\n\r\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\r\n    const { selection } = this.props;\r\n\r\n    while (target !== this._root.current) {\r\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\r\n      const index = Number(indexValue);\r\n\r\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\r\n        break;\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n\r\n    if (target === this._root.current) {\r\n      return undefined;\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  private _getItemIndex(itemRoot: HTMLElement): number {\r\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\r\n  }\r\n\r\n  private _shouldAutoSelect(element: HTMLElement): boolean {\r\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\r\n  }\r\n\r\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\r\n    let isToggle = false;\r\n\r\n    while (!isToggle && element !== this._root.current) {\r\n      isToggle = element.getAttribute(attributeName) === 'true';\r\n      element = getParent(element) as HTMLElement;\r\n    }\r\n\r\n    return isToggle;\r\n  }\r\n\r\n  private _isInputElement(element: HTMLElement): boolean {\r\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\r\n  }\r\n\r\n  private _isNonHandledClick(element: HTMLElement): boolean {\r\n    const doc = getDocument();\r\n\r\n    if (doc && element) {\r\n      while (element && element !== doc.documentElement) {\r\n        if (isElementTabbable(element)) {\r\n          return false;\r\n        }\r\n\r\n        element = getParent(element) as HTMLElement;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private _handleNextFocus(handleFocus: boolean): void {\r\n    if (this._shouldHandleFocusTimeoutId) {\r\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\r\n      this._shouldHandleFocusTimeoutId = undefined;\r\n    }\r\n\r\n    this._shouldHandleFocus = handleFocus;\r\n\r\n    if (handleFocus) {\r\n      this._async.setTimeout(() => {\r\n        this._shouldHandleFocus = false;\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  private _setIsTouch(isTouch: boolean): void {\r\n    if (this._isTouchTimeoutId) {\r\n      this._async.clearTimeout(this._isTouchTimeoutId);\r\n      this._isTouchTimeoutId = undefined;\r\n    }\r\n\r\n    this._isTouch = true;\r\n\r\n    if (isTouch) {\r\n      this._async.setTimeout(() => {\r\n        this._isTouch = false;\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  private _getSelectionMode(): SelectionMode {\r\n    const { selection } = this.props;\r\n\r\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\r\n\r\n    return selectionMode;\r\n  }\r\n}\r\n"]}