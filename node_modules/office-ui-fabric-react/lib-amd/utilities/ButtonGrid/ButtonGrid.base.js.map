{"version":3,"file":"ButtonGrid.base.js","sourceRoot":"../src/","sources":["utilities/ButtonGrid/ButtonGrid.base.tsx"],"names":[],"mappings":";;;IAYA,IAAM,aAAa,GAAG,8BAAkB,EAA4C,CAAC;IAErF;QAAoC,0CAAqC;QAGvE,wBAAY,KAAuB;YAAnC,YACE,kBAAM,KAAK,CAAC,SAIb;YAFC,kCAAsB,CAAC,KAAI,CAAC,CAAC;YAC7B,KAAI,CAAC,GAAG,GAAG,KAAK,CAAC,EAAE,IAAI,iBAAK,EAAE,CAAC;;QACjC,CAAC;QAEM,+BAAM,GAAb;YAAA,iBAuEC;YAtEC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAEvB,IAAA,mBAAK,EACL,+BAAW,EACX,iCAAY;YAEZ,4CAA4C;YAC5C,uBAAkC;YADlC,4CAA4C;YAC5C,uDAAkC,EAClC,sBAA2B,EAA3B,gDAA2B;YAC3B,2CAA2C;YAE3C,qBAAM,EACN,+DAA2B,CACnB;YAEV,IAAM,SAAS,GAAG,0BAAc,CAC9B,IAAI,CAAC,KAAK,EACV,iCAAqB;YACrB,yEAAyE;YACzE,2BAA2B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAC9C,CAAC;YAEF,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAM,EAAE,CAAC,CAAC;YAExE,oDAAoD;YACpD,IAAM,WAAW,GAAY,oBAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAE1D,IAAM,OAAO,GAAG,CACd,iEACiB,YAAY,kBACb,WAAW,EACzB,EAAE,EAAE,IAAI,CAAC,GAAG,EACZ,IAAI,EAAC,MAAM,IACP,SAAS,IACb,SAAS,EAAE,UAAU,CAAC,IAAI;gBAE1B,mCACG,WAAW,CAAC,GAAG,CAAC,UAAC,IAAW,EAAE,QAAgB;oBAC7C,OAAO,CACL,4BAAI,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,QAAQ,GAAG,MAAM,IACrD,IAAI,CAAC,GAAG,CAAC,UAAC,IAAS,EAAE,SAAiB;wBACrC,OAAO,CACL,4BACE,IAAI,EAAE,cAAc,EACpB,GAAG,EAAE,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,GAAG,OAAO,EACzC,SAAS,EAAE,UAAU,CAAC,SAAS,IAE9B,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAC3B,CACN,CAAC;oBACJ,CAAC,CAAC,CACC,CACN,CAAC;gBACJ,CAAC,CAAC,CACI,CACF,CACT,CAAC;YAEF,wBAAwB;YACxB,OAAO,2BAA2B,CAAC,CAAC,CAAC,CACnC,OAAO,CACR,CAAC,CAAC,CAAC,CACF,oBAAC,qBAAS,IACR,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAC5D,SAAS,EAAE,UAAU,CAAC,gBAAgB,EACtC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,IAExB,OAAO,CACE,CACb,CAAC;QACJ,CAAC;QACH,qBAAC;IAAD,CAAC,AAlFD,CAAoC,KAAK,CAAC,SAAS,GAkFlD;IAlFY,wCAAc;IAoF3B;;OAEG;IACU,QAAA,QAAQ,GAAG,cAAc,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  getId,\n  toMatrix,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { IButtonGrid, IButtonGridProps, IButtonGridStyleProps, IButtonGridStyles } from './ButtonGrid.types';\n\nconst getClassNames = classNamesFunction<IButtonGridStyleProps, IButtonGridStyles>();\n\nexport class ButtonGridBase extends React.Component<IButtonGridProps, {}> implements IButtonGrid {\n  private _id: string;\n\n  constructor(props: IButtonGridProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._id = props.id || getId();\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const {\n      items,\n      columnCount,\n      onRenderItem,\n\n      /* eslint-disable deprecation/deprecation */\n      ariaPosInSet = props.positionInSet,\n      ariaSetSize = props.setSize,\n      /* eslint-enable deprecation/deprecation */\n\n      styles,\n      doNotContainWithinFocusZone,\n    } = props;\n\n    const htmlProps = getNativeProps<React.HTMLAttributes<HTMLTableElement>>(\n      this.props,\n      htmlElementProperties,\n      // avoid applying onBlur on the table if it's being used in the FocusZone\n      doNotContainWithinFocusZone ? [] : ['onBlur'],\n    );\n\n    const classNames = getClassNames(styles!, { theme: this.props.theme! });\n\n    // Array to store the cells in the correct row index\n    const rowsOfItems: any[][] = toMatrix(items, columnCount);\n\n    const content = (\n      <table\n        aria-posinset={ariaPosInSet}\n        aria-setsize={ariaSetSize}\n        id={this._id}\n        role=\"grid\"\n        {...htmlProps}\n        className={classNames.root}\n      >\n        <tbody>\n          {rowsOfItems.map((rows: any[], rowIndex: number) => {\n            return (\n              <tr role={'row'} key={this._id + '-' + rowIndex + '-row'}>\n                {rows.map((cell: any, cellIndex: number) => {\n                  return (\n                    <td\n                      role={'presentation'}\n                      key={this._id + '-' + cellIndex + '-cell'}\n                      className={classNames.tableCell}\n                    >\n                      {onRenderItem(cell, cellIndex)}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n\n    // Create the table/grid\n    return doNotContainWithinFocusZone ? (\n      content\n    ) : (\n      <FocusZone\n        isCircularNavigation={this.props.shouldFocusCircularNavigate}\n        className={classNames.focusedContainer}\n        onBlur={this.props.onBlur}\n      >\n        {content}\n      </FocusZone>\n    );\n  }\n}\n\n/**\n * @deprecated - use ButtonGridBase instead\n */\nexport const GridBase = ButtonGridBase;\n"]}