{"version":3,"file":"ButtonGridCell.js","sourceRoot":"../src/","sources":["utilities/ButtonGrid/ButtonGridCell.tsx"],"names":[],"mappings":";;;IAKA;QAA0E,0CAAsB;QAAhG;YAAA,qEA4FC;YA7CS,cAAQ,GAAG;gBACX,IAAA,gBAA6C,EAA3C,oBAAO,EAAE,sBAAQ,EAAE,cAAwB,CAAC;gBAEpD,IAAI,OAAO,IAAI,CAAC,QAAQ,EAAE;oBACxB,OAAO,CAAC,IAAI,CAAC,CAAC;iBACf;YACH,CAAC,CAAC;YAEM,mBAAa,GAAG,UAAC,EAAuC;gBACxD,IAAA,gBAA2D,EAAzD,oBAAO,EAAE,sBAAQ,EAAE,cAAI,EAAE,8BAAgC,CAAC;gBAElE,IAAM,gBAAgB,GAAG,YAAY,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC;gBAE1D,IAAI,CAAC,gBAAgB,IAAI,OAAO,IAAI,CAAC,QAAQ,EAAE;oBAC7C,OAAO,CAAC,IAAI,CAAC,CAAC;iBACf;YACH,CAAC,CAAC;YAEM,kBAAY,GAAG,UAAC,EAAuC;gBACvD,IAAA,gBAA0D,EAAxD,oBAAO,EAAE,sBAAQ,EAAE,cAAI,EAAE,4BAA+B,CAAC;gBAEjE,IAAM,eAAe,GAAG,WAAW,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;gBAEvD,IAAI,CAAC,eAAe,IAAI,OAAO,IAAI,CAAC,QAAQ,EAAE;oBAC5C,OAAO,CAAC,IAAI,CAAC,CAAC;iBACf;YACH,CAAC,CAAC;YAEM,mBAAa,GAAG,UAAC,EAAuC;gBACxD,IAAA,gBAAqD,EAAnD,oBAAO,EAAE,sBAAQ,EAAE,8BAAgC,CAAC;gBAE5D,IAAM,gBAAgB,GAAG,YAAY,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC;gBAE1D,IAAI,CAAC,gBAAgB,IAAI,OAAO,IAAI,CAAC,QAAQ,EAAE;oBAC7C,OAAO,EAAE,CAAC;iBACX;YACH,CAAC,CAAC;YAEM,cAAQ,GAAG;gBACX,IAAA,gBAA6C,EAA3C,oBAAO,EAAE,sBAAQ,EAAE,cAAwB,CAAC;gBAEpD,IAAI,OAAO,IAAI,CAAC,QAAQ,EAAE;oBACxB,OAAO,CAAC,IAAI,CAAC,CAAC;iBACf;YACH,CAAC,CAAC;;QACJ,CAAC;QAvFQ,+BAAM,GAAb;;YACQ,IAAA,eAaQ,EAZZ,cAAI,EACJ,UAAE,EACF,wBAAS,EACT,cAAI,EACJ,sBAAQ,EACR,sBAAQ,EACR,8BAAY,EACZ,wCAAiB,EACjB,4CAAmB,EACnB,gBAAK,EACL,gBAAK,EACL,gCACY,CAAC;YAEf,OAAO,CACL,oBAAC,sBAAa,IACZ,EAAE,EAAE,EAAE,gBACM,KAAK,uBACE,IAAI,EACvB,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,eAAG,CAAC,SAAS;oBACtB,GAAC,EAAE,GAAG,mBAAmB,IAAG,QAAQ;oBACpC,GAAC,EAAE,GAAG,iBAAiB,IAAG,QAAQ;wBAClC,EACF,OAAO,EAAE,IAAI,CAAC,QAAQ,EACtB,YAAY,EAAE,IAAI,CAAC,aAAa,EAChC,WAAW,EAAE,IAAI,CAAC,YAAY,EAC9B,YAAY,EAAE,IAAI,CAAC,aAAa,EAChC,OAAO,EAAE,IAAI,CAAC,QAAQ,EACtB,IAAI,EAAE,IAAI,mBACK,QAAQ,EACvB,SAAS,EAAE,KAAK,EAChB,KAAK,EAAE,KAAK,EACZ,aAAa,EAAE,aAAa,IAE3B,YAAY,CAAC,IAAI,CAAC,CACL,CACjB,CAAC;QACJ,CAAC;QA5Ca,2BAAY,GAAG;YAC3B,QAAQ,EAAE,KAAK;SAChB,CAAC;QAyFJ,qBAAC;KAAA,AA5FD,CAA0E,KAAK,CAAC,SAAS,GA4FxF;IA5FY,wCAAc;IA8F3B;;OAEG;IACU,QAAA,QAAQ,GAAG,cAAc,CAAC","sourcesContent":["import * as React from 'react';\nimport { css } from '../../Utilities';\nimport { IButtonGridCellProps } from './ButtonGridCell.types';\nimport { CommandButton } from '../../Button';\n\nexport class ButtonGridCell<T, P extends IButtonGridCellProps<T>> extends React.Component<P, {}> {\n  public static defaultProps = {\n    disabled: false,\n  };\n\n  public render(): JSX.Element {\n    const {\n      item,\n      id,\n      className,\n      role,\n      selected,\n      disabled,\n      onRenderItem,\n      cellDisabledStyle,\n      cellIsSelectedStyle,\n      index,\n      label,\n      getClassNames,\n    } = this.props;\n\n    return (\n      <CommandButton\n        id={id}\n        data-index={index}\n        data-is-focusable={true}\n        disabled={disabled}\n        className={css(className, {\n          ['' + cellIsSelectedStyle]: selected,\n          ['' + cellDisabledStyle]: disabled,\n        })}\n        onClick={this._onClick}\n        onMouseEnter={this._onMouseEnter}\n        onMouseMove={this._onMouseMove}\n        onMouseLeave={this._onMouseLeave}\n        onFocus={this._onFocus}\n        role={role}\n        aria-selected={selected}\n        ariaLabel={label}\n        title={label}\n        getClassNames={getClassNames}\n      >\n        {onRenderItem(item)}\n      </CommandButton>\n    );\n  }\n\n  private _onClick = (): void => {\n    const { onClick, disabled, item } = this.props as P;\n\n    if (onClick && !disabled) {\n      onClick(item);\n    }\n  };\n\n  private _onMouseEnter = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, item, onMouseEnter } = this.props as P;\n\n    const didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n\n    if (!didUpdateOnEnter && onHover && !disabled) {\n      onHover(item);\n    }\n  };\n\n  private _onMouseMove = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, item, onMouseMove } = this.props as P;\n\n    const didUpdateOnMove = onMouseMove && onMouseMove(ev);\n\n    if (!didUpdateOnMove && onHover && !disabled) {\n      onHover(item);\n    }\n  };\n\n  private _onMouseLeave = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    const { onHover, disabled, onMouseLeave } = this.props as P;\n\n    const didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n\n    if (!didUpdateOnLeave && onHover && !disabled) {\n      onHover();\n    }\n  };\n\n  private _onFocus = (): void => {\n    const { onFocus, disabled, item } = this.props as P;\n\n    if (onFocus && !disabled) {\n      onFocus(item);\n    }\n  };\n}\n\n/**\n * @deprecated - use ButtonGridCell instead\n */\nexport const GridCell = ButtonGridCell;\n"]}