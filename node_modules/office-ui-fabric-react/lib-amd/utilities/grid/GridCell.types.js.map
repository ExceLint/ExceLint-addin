{"version":3,"file":"GridCell.types.js","sourceRoot":"../src/","sources":["utilities/grid/GridCell.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IButtonClassNames } from '../../components/Button/BaseButton.classNames';\r\nimport { ITheme } from '../../Styling';\r\n\r\nexport interface IGridCellProps<T> {\r\n  /**\r\n   * The option that will be made available to the user\r\n   */\r\n  item: T;\r\n\r\n  /**\r\n   * Arbitrary unique string associated with this option\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Optional, if the this option should be diabled\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Optional, if the cell is currently selected\r\n   */\r\n  selected?: boolean;\r\n\r\n  /**\r\n   * The on click handler\r\n   */\r\n  onClick?: (item: T) => void;\r\n\r\n  /**\r\n   * The render callback to handle rendering the item\r\n   */\r\n  onRenderItem: (item: T) => JSX.Element;\r\n\r\n  /**\r\n   * Optional, the onHover handler\r\n   */\r\n  onHover?: (item?: T) => void;\r\n\r\n  /**\r\n   * Optional, the onFocus handler\r\n   */\r\n  onFocus?: (item: T) => void;\r\n\r\n  /**\r\n   * The accessible role for this option\r\n   */\r\n  role?: string;\r\n\r\n  /**\r\n   * Optional, className(s) to apply\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Optional, the CSS class used for when the cell is disabled\r\n   */\r\n  cellDisabledStyle?: string[];\r\n\r\n  /**\r\n   * Optional, the CSS class used for when the cell is selected\r\n   */\r\n  cellIsSelectedStyle?: string[];\r\n\r\n  /**\r\n   * Index for this option\r\n   */\r\n  index?: number;\r\n\r\n  /**\r\n   * The label for this item.\r\n   * Visible text if this item is a header,\r\n   * tooltip if is this item is normal\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Method to provide the classnames to style a button.\r\n   * The default value for this prop is the getClassnames func\r\n   * defined in BaseButton.classnames.\r\n   */\r\n  getClassNames?: (\r\n    theme: ITheme,\r\n    className: string,\r\n    variantClassName: string,\r\n    iconClassName: string | undefined,\r\n    menuIconClassName: string | undefined,\r\n    disabled: boolean,\r\n    checked: boolean,\r\n    expanded: boolean,\r\n    isSplit: boolean | undefined\r\n  ) => IButtonClassNames;\r\n\r\n  /**\r\n   * Optional, mouseEnter handler.\r\n   * @returns true if the event should be processed, false otherwise\r\n   */\r\n  onMouseEnter?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\r\n\r\n  /**\r\n   * Optional, mouseMove handler\r\n   * @returns true if the event should be processed, false otherwise\r\n   */\r\n  onMouseMove?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\r\n\r\n  /**\r\n   * Optional, mouseLeave handler\r\n   */\r\n  onMouseLeave?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\r\n\r\n  /**\r\n   * Optional, onWheel handler\r\n   */\r\n  onWheel?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\r\n\r\n  /**\r\n   * Optional, onkeydown handler\r\n   */\r\n  onKeyDown?: (ev: React.KeyboardEvent<HTMLButtonElement>) => void;\r\n}\r\n"]}