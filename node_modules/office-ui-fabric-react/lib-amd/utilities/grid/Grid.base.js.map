{"version":3,"file":"Grid.base.js","sourceRoot":"../src/","sources":["utilities/grid/Grid.base.tsx"],"names":[],"mappings":";;;IAKA,IAAM,aAAa,GAAG,8BAAkB,EAAgC,CAAC;IAEzE;QAA8B,oCAA6B;QAGzD,kBAAY,KAAiB;YAA7B,YACE,kBAAM,KAAK,CAAC,SAEb;YADC,KAAI,CAAC,GAAG,GAAG,iBAAK,EAAE,CAAC;;QACrB,CAAC;QAEM,yBAAM,GAAb;YAAA,iBA0CC;YAzCO,IAAA,eAAiF,EAA/E,gBAAK,EAAE,4BAAW,EAAE,8BAAY,EAAE,gCAAa,EAAE,oBAAO,EAAE,kBAAM,CAAgB;YAExF,IAAM,SAAS,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,iCAAqB,EAAE,CAAC,qCAAqC,CAAC,CAAC,CAAC;YAE7G,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAM,EAAE,CAAC,CAAC;YAExE,oDAAoD;YACpD,IAAM,WAAW,GAAY,oBAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAE1D,IAAM,OAAO,GAAG,CACd,kDAAW,SAAS,qBAAiB,aAAa,kBAAgB,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI;gBAC/H,mCACG,WAAW,CAAC,GAAG,CAAC,UAAC,IAAW,EAAE,QAAgB;oBAC7C,OAAO,CACL,4BAAI,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,QAAQ,GAAG,MAAM,IACrD,IAAI,CAAC,GAAG,CAAC,UAAC,IAAS,EAAE,SAAiB;wBACrC,OAAO,CACL,4BAAI,IAAI,EAAE,cAAc,EAAE,GAAG,EAAE,KAAI,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,GAAG,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,SAAS,IACjG,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAC3B,CACN,CAAC;oBACJ,CAAC,CAAC,CACC,CACN,CAAC;gBACJ,CAAC,CAAC,CACI,CACF,CACT,CAAC;YAEF,wBAAwB;YACxB,OAAO,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAC9C,OAAO,CACR,CAAC,CAAC,CAAC,CACF,oBAAC,qBAAS,IACR,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAC5D,SAAS,EAAE,UAAU,CAAC,gBAAgB,EACtC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,IAExB,OAAO,CACE,CACb,CAAC;QACJ,CAAC;QACH,eAAC;IAAD,CAAC,AAnDD,CAA8B,yBAAa,GAmD1C;IAnDY,4BAAQ","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, getId, toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\r\nimport { FocusZone } from '../../FocusZone';\r\nimport { IGrid, IGridProps, IGridStyleProps, IGridStyles } from './Grid.types';\r\n\r\nconst getClassNames = classNamesFunction<IGridStyleProps, IGridStyles>();\r\n\r\nexport class GridBase extends BaseComponent<IGridProps, {}> implements IGrid {\r\n  private _id: string;\r\n\r\n  constructor(props: IGridProps) {\r\n    super(props);\r\n    this._id = getId();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { items, columnCount, onRenderItem, positionInSet, setSize, styles } = this.props;\r\n\r\n    const htmlProps = getNativeProps(this.props, htmlElementProperties, ['onBlur, aria-posinset, aria-setsize']);\r\n\r\n    const classNames = getClassNames(styles!, { theme: this.props.theme! });\r\n\r\n    // Array to store the cells in the correct row index\r\n    const rowsOfItems: any[][] = toMatrix(items, columnCount);\r\n\r\n    const content = (\r\n      <table {...htmlProps} aria-posinset={positionInSet} aria-setsize={setSize} id={this._id} role={'grid'} className={classNames.root}>\r\n        <tbody>\r\n          {rowsOfItems.map((rows: any[], rowIndex: number) => {\r\n            return (\r\n              <tr role={'row'} key={this._id + '-' + rowIndex + '-row'}>\r\n                {rows.map((cell: any, cellIndex: number) => {\r\n                  return (\r\n                    <td role={'presentation'} key={this._id + '-' + cellIndex + '-cell'} className={classNames.tableCell}>\r\n                      {onRenderItem(cell, cellIndex)}\r\n                    </td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    );\r\n\r\n    // Create the table/grid\r\n    return this.props.doNotContainWithinFocusZone ? (\r\n      content\r\n    ) : (\r\n      <FocusZone\r\n        isCircularNavigation={this.props.shouldFocusCircularNavigate}\r\n        className={classNames.focusedContainer}\r\n        onBlur={this.props.onBlur}\r\n      >\r\n        {content}\r\n      </FocusZone>\r\n    );\r\n  }\r\n}\r\n"]}