{"version":3,"file":"contextualMenuUtility.js","sourceRoot":"../src/","sources":["utilities/contextualMenu/contextualMenuUtility.ts"],"names":[],"mappings":";;;IAEA;;;;;;;OAOG;IACH,sBAA6B,IAAyB;QACpD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;SAC3C;QAED,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;YACvC,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;QAED,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;YACrC,OAAO,IAAI,CAAC,OAAO,CAAC;SACrB;QAED,yBAAyB;QACzB,OAAO,IAAI,CAAC;IACd,CAAC;IAfD,oCAeC;IAED,oBAA2B,IAAyB;QAClD,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC;IAFD,gCAEC;IAED,wBAA+B,IAAyB;QACtD,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAFD,wCAEC","sourcesContent":["import { IContextualMenuItem } from '../../index';\r\n\r\n/**\r\n * Determines the effective checked state of a menu item.\r\n *\r\n * @param item {IContextualMenuItem} to get the check state of.\r\n * @returns {true} if the item is checked.\r\n * @returns {false} if the item is unchecked.\r\n * @returns {null} if the item is not checkable.\r\n */\r\nexport function getIsChecked(item: IContextualMenuItem): boolean | null {\r\n  if (item.canCheck) {\r\n    return !!(item.isChecked || item.checked);\r\n  }\r\n\r\n  if (typeof item.isChecked === 'boolean') {\r\n    return item.isChecked;\r\n  }\r\n\r\n  if (typeof item.checked === 'boolean') {\r\n    return item.checked;\r\n  }\r\n\r\n  // Item is not checkable.\r\n  return null;\r\n}\r\n\r\nexport function hasSubmenu(item: IContextualMenuItem): boolean {\r\n  return !!(item.subMenuProps || item.items);\r\n}\r\n\r\nexport function isItemDisabled(item: IContextualMenuItem): boolean {\r\n  return !!(item.isDisabled || item.disabled);\r\n}\r\n"]}