{"version":3,"file":"SelectableDroppableText.types.js","sourceRoot":"../src/","sources":["utilities/selectableOption/SelectableDroppableText.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IRefObject, IRenderFunction } from '../../Utilities';\r\nimport { ICalloutProps } from '../../Callout';\r\nimport { IPanelProps } from '../../Panel';\r\nimport { ISelectableOption } from '../../utilities/selectableOption/SelectableOption.types';\r\n\r\n/**\r\n * - `TComponent` - Component used for reference properties, such as `componentRef`.\r\n * - `TListenerElement` - Listener element associated with HTML event callbacks. Optional. If not provided,\r\n *   `TComponent` is assumed.\r\n * {@docCategory ISelectableDroppableTextProps}\r\n */\r\nexport interface ISelectableDroppableTextProps<TComponent, TListenerElement>\r\n  extends React.HTMLAttributes<TListenerElement> {\r\n  /**\r\n   * Optional callback to access the ISelectableDroppableText interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<TComponent>;\r\n\r\n  /**\r\n   * Descriptive label for the ISelectableDroppableText\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Aria Label for the ISelectableDroppableText for screen reader users.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Id of the ISelectableDroppableText\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * If provided, additional class name to provide on the root element.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * The key(s) that will be initially used to set a selected item.\r\n   *\r\n   * Mutually exclusive with `selectedKey`.\r\n   * For Dropdown in multi-select mode, use `defaultSelectedKeys` instead.\r\n   */\r\n  defaultSelectedKey?: string | number | string[] | number[] | null;\r\n\r\n  /**\r\n   * The key(s) of the selected item. If you provide this, you must maintain selection\r\n   * state by observing onChange events and passing a new value in when changed.\r\n   * Note that passing in `null` will cause selection to be reset.\r\n   *\r\n   * Mutually exclusive with `defaultSelectedKey`.\r\n   * For Dropdown in multi-select mode, use `selectedKeys` instead.\r\n   */\r\n  selectedKey?: string | number | string[] | number[] | null;\r\n\r\n  /**\r\n   * Optional prop that indicates if multi-choice selections are allowed or not.\r\n   * @defaultvalue false\r\n   */\r\n  multiSelect?: boolean;\r\n\r\n  /**\r\n   * Collection of options for this ISelectableDroppableText\r\n   */\r\n  options?: any;\r\n\r\n  /**\r\n   * Optional custom renderer for the ISelectableDroppableText container\r\n   */\r\n  onRenderContainer?: IRenderFunction<ISelectableDroppableTextProps<TComponent, TListenerElement>>;\r\n\r\n  /**\r\n   * Optional custom renderer for the ISelectableDroppableText list\r\n   */\r\n  onRenderList?: IRenderFunction<ISelectableDroppableTextProps<TComponent, TListenerElement>>;\r\n\r\n  /**\r\n   * Optional custom renderer for the ISelectableDroppableText options\r\n   */\r\n  onRenderItem?: IRenderFunction<ISelectableOption>;\r\n\r\n  /**\r\n   * Optional custom renderer for the ISelectableDroppableText option content\r\n   */\r\n  onRenderOption?: IRenderFunction<ISelectableOption>;\r\n\r\n  /**\r\n   * Callback that is issued when the options callout is dismissed\r\n   */\r\n  onDismiss?: () => void;\r\n\r\n  /**\r\n   * Whether or not the ISelectableDroppableText is disabled.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Whether or not the ISelectableDroppableText is required.\r\n   */\r\n  required?: boolean;\r\n\r\n  /**\r\n   * Custom properties for ISelectableDroppableText's Callout used to render options.\r\n   */\r\n  calloutProps?: ICalloutProps;\r\n\r\n  /**\r\n   * Custom properties for ISelectableDroppableText's Panel used to render options on small devices.\r\n   */\r\n  panelProps?: IPanelProps;\r\n\r\n  /**\r\n   * Descriptive label for the ISelectableDroppableText Error Message\r\n   */\r\n  errorMessage?: string;\r\n\r\n  /**\r\n   * Input placeholder text. Displayed until option is selected.\r\n   */\r\n  placeholder?: string;\r\n\r\n  /**\r\n   * Whether or not the ComboBox/Dropdown should expand on keyboard focus.\r\n   * @defaultvalue false\r\n   */\r\n  openOnKeyboardFocus?: boolean;\r\n}\r\n"]}