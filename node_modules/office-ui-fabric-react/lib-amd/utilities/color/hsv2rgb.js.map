{"version":3,"file":"hsv2rgb.js","sourceRoot":"../src/","sources":["utilities/color/hsv2rgb.ts"],"names":[],"mappings":";;;IAGA,6EAA6E;IAC7E,iBAAwB,CAAS,EAAE,CAAS,EAAE,CAAS;QACrD,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QACZ,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QAEZ,IAAI,GAAG,GAAa,EAAE,CAAC;QAEvB,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAChB,IAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;QAClB,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEhB,QAAQ,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;YACtB,KAAK,CAAC;gBACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChB,MAAM;YAER,KAAK,CAAC;gBACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChB,MAAM;YAER,KAAK,CAAC;gBACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChB,MAAM;YAER,KAAK,CAAC;gBACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChB,MAAM;YAER,KAAK,CAAC;gBACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChB,MAAM;YAER,KAAK,CAAC;gBACJ,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChB,MAAM;SACT;QAED,OAAO;YACL,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,sBAAa,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3C,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,sBAAa,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC3C,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,sBAAa,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5C,CAAC;IACJ,CAAC;IA1CD,0BA0CC","sourcesContent":["import { IRGB } from './interfaces';\r\nimport { MAX_COLOR_RGB } from './consts';\r\n\r\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\r\nexport function hsv2rgb(h: number, s: number, v: number): IRGB {\r\n  s = s / 100;\r\n  v = v / 100;\r\n\r\n  let rgb: number[] = [];\r\n\r\n  const c = v * s;\r\n  const hh = h / 60;\r\n  const x = c * (1 - Math.abs((hh % 2) - 1));\r\n  const m = v - c;\r\n\r\n  switch (Math.floor(hh)) {\r\n    case 0:\r\n      rgb = [c, x, 0];\r\n      break;\r\n\r\n    case 1:\r\n      rgb = [x, c, 0];\r\n      break;\r\n\r\n    case 2:\r\n      rgb = [0, c, x];\r\n      break;\r\n\r\n    case 3:\r\n      rgb = [0, x, c];\r\n      break;\r\n\r\n    case 4:\r\n      rgb = [x, 0, c];\r\n      break;\r\n\r\n    case 5:\r\n      rgb = [c, 0, x];\r\n      break;\r\n  }\r\n\r\n  return {\r\n    r: Math.round(MAX_COLOR_RGB * (rgb[0] + m)),\r\n    g: Math.round(MAX_COLOR_RGB * (rgb[1] + m)),\r\n    b: Math.round(MAX_COLOR_RGB * (rgb[2] + m))\r\n  };\r\n}\r\n"]}