{"version":3,"file":"KeytipConfig.js","sourceRoot":"../src/","sources":["utilities/keytips/KeytipConfig.ts"],"names":[],"mappings":";;;IAsCA;;;;;OAKG;IACH,8BAAqC,MAAqB;QACxD,IAAM,SAAS,GAAqB,EAAE,CAAC;QAEvC,KAAqB,UAAc,EAAd,KAAA,MAAM,CAAC,OAAO,EAAd,cAAc,EAAd,IAAc;YAA9B,IAAM,MAAM,SAAA;YACf,eAAe,CAAC,SAAS,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;SACxC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IARD,oDAQC;IAED;;;;;;OAMG;IACH,yBAAgC,SAA2B,EAAE,cAAwB,EAAE,MAAyB;QAC9G,4BAA4B;QAC5B,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;QACxF,IAAM,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEvD,0BAA0B;QAC1B,IAAM,WAAW,wBAAsB,MAAM,CAAC,aAAa,IAAE,YAAY,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,GAAE,CAAC;QACrH,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;QAEnC,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,KAAoB,UAAe,EAAf,KAAA,MAAM,CAAC,QAAQ,EAAf,cAAe,EAAf,IAAe;gBAA9B,IAAM,KAAK,SAAA;gBACd,kCAAkC;gBAClC,eAAe,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;aACnD;SACF;IACH,CAAC;IAfD,0CAeC","sourcesContent":["import { IKeytipProps } from '../../Keytip';\r\n\r\nexport interface IKeytipConfig {\r\n  keytips: IKeytipConfigItem[];\r\n}\r\n\r\nexport interface IKeytipConfigItem {\r\n  /**\r\n   * Key Sequence for this keytip only\r\n   * If sequence is not defined it will be derived from the content string\r\n   */\r\n  sequence?: string;\r\n\r\n  /**\r\n   * Content for the keytip\r\n   */\r\n  content: string;\r\n\r\n  /**\r\n   * Identifier for the keytip, to be used to access in the configMap\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Optional props in IKeytipProps\r\n   */\r\n  optionalProps?: Partial<IKeytipProps>;\r\n\r\n  /**\r\n   * Children keytips of this keytip\r\n   */\r\n  children?: IKeytipConfigItem[];\r\n}\r\n\r\nexport interface IKeytipConfigMap {\r\n  [id: string]: IKeytipProps;\r\n}\r\n\r\n/**\r\n * Builds a map of ID -> IKeytipProps\r\n *\r\n * @param config - IKeytipConfig object\r\n * @returns {IKeytipConfigMap} - Config map\r\n */\r\nexport function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap {\r\n  const configMap: IKeytipConfigMap = {};\r\n\r\n  for (const keytip of config.keytips) {\r\n    constructKeytip(configMap, [], keytip);\r\n  }\r\n\r\n  return configMap;\r\n}\r\n\r\n/**\r\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\r\n *\r\n * @param configMap - IKeytipConfigMap to store the keytip in\r\n * @param parentSequence - string of the parent keytip\r\n * @param keytip - IKeytipConfigItem data\r\n */\r\nexport function constructKeytip(configMap: IKeytipConfigMap, parentSequence: string[], keytip: IKeytipConfigItem): void {\r\n  // Compute full key sequence\r\n  const sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\r\n  const keytipSequence = parentSequence.concat(sequence);\r\n\r\n  // Save props in configMap\r\n  const keytipProps: IKeytipProps = { ...keytip.optionalProps, keySequences: keytipSequence, content: keytip.content };\r\n  configMap[keytip.id] = keytipProps;\r\n\r\n  if (keytip.children) {\r\n    for (const child of keytip.children) {\r\n      // Create keytips for all children\r\n      constructKeytip(configMap, keytipSequence, child);\r\n    }\r\n  }\r\n}\r\n"]}