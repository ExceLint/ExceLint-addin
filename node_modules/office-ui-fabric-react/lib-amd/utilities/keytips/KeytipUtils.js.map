{"version":3,"file":"KeytipUtils.js","sourceRoot":"../src/","sources":["utilities/keytips/KeytipUtils.ts"],"names":[],"mappings":";;;IAGA;;;;;;OAMG;IACH,uBAA8B,YAAsB;QAClD,OAAO,YAAY,CAAC,MAAM,CAAC,UAAC,SAAiB,EAAE,WAAmB;YAChE,OAAO,SAAS,GAAG,+BAAa,GAAG,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,+BAAa,CAAC,CAAC;QAC/E,CAAC,EAAE,4BAAU,CAAC,CAAC;IACjB,CAAC;IAJD,sCAIC;IAED;;;;;;OAMG;IACH,wBAA+B,YAAsB,EAAE,oBAA8B;QACnF,IAAM,mBAAmB,GAAG,oBAAoB,CAAC,MAAM,CAAC;QACxD,IAAM,gBAAgB,GAAO,oBAAoB,SAAE,GAAG,EAAE,CAAC;QACzD,IAAM,eAAe,GAAO,YAAY,QAAC,CAAC;QAC1C,OAAO,6BAAiB,CAAC,eAAe,EAAE,mBAAmB,GAAG,CAAC,EAAE,gBAAiB,CAAC,CAAC;IACxF,CAAC;IALD,wCAKC;IAED;;;;;OAKG;IACH,gCAAuC,YAAsB;QAC3D,OAAO,GAAG,GAAG,gCAAc,GAAG,IAAI,GAAG,aAAa,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;IAC1E,CAAC;IAFD,wDAEC;IAED;;;;;OAKG;IACH,yBAAgC,QAAgB;QAC9C,OAAO,GAAG,GAAG,wCAAsB,GAAG,IAAI,GAAG,QAAQ,GAAG,IAAI,CAAC;IAC/D,CAAC;IAFD,0CAEC;IAED;;;;;OAKG;IACH,4BAAmC,YAAsB;QACvD,IAAM,WAAW,GAAG,GAAG,GAAG,8BAAY,CAAC;QACvC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YACxB,2BAA2B;YAC3B,OAAO,WAAW,CAAC;SACpB;QAED,OAAO,WAAW,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;IACzD,CAAC;IARD,gDAQC","sourcesContent":["import { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\r\nimport { addElementAtIndex } from '../../Utilities';\r\n\r\n/**\r\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\r\n * keySequences should not include the initial keytip 'start' sequence.\r\n *\r\n * @param keySequences - Full path of IKeySequences for one keytip.\r\n * @returns {string} String to use for the keytip ID.\r\n */\r\nexport function sequencesToID(keySequences: string[]): string {\r\n  return keySequences.reduce((prevValue: string, keySequence: string): string => {\r\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\r\n  }, KTP_PREFIX);\r\n}\r\n\r\n/**\r\n * Merges an overflow sequence with a key sequence.\r\n *\r\n * @param keySequences - Full sequence for one keytip.\r\n * @param overflowKeySequences - Full overflow keytip sequence.\r\n * @returns {string[]} Sequence that will be used by the keytip when in the overflow.\r\n */\r\nexport function mergeOverflows(keySequences: string[], overflowKeySequences: string[]): string[] {\r\n  const overflowSequenceLen = overflowKeySequences.length;\r\n  const overflowSequence = [...overflowKeySequences].pop();\r\n  const newKeySequences = [...keySequences];\r\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence!);\r\n}\r\n\r\n/**\r\n * Constructs the data-ktp-target attribute selector from a full key sequence.\r\n *\r\n * @param keySequences - Full string[] for a Keytip.\r\n * @returns {string} String selector to use to query for the keytip target.\r\n */\r\nexport function ktpTargetFromSequences(keySequences: string[]): string {\r\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\r\n}\r\n\r\n/**\r\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\r\n *\r\n * @param keytipId - ID of the Keytip.\r\n * @returns {string} String selector to use to query for the keytip execute target.\r\n */\r\nexport function ktpTargetFromId(keytipId: string): string {\r\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\r\n}\r\n\r\n/**\r\n * Gets the aria-describedby value to put on the component with this keytip.\r\n *\r\n * @param keySequences - KeySequences of the keytip.\r\n * @returns {string} The aria-describedby value to set on the component with this keytip.\r\n */\r\nexport function getAriaDescribedBy(keySequences: string[]): string {\r\n  const describedby = ' ' + KTP_LAYER_ID;\r\n  if (!keySequences.length) {\r\n    // Return just the layer ID\r\n    return describedby;\r\n  }\r\n\r\n  return describedby + ' ' + sequencesToID(keySequences);\r\n}\r\n"]}