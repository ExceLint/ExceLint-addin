{"version":3,"file":"KeytipManager.js","sourceRoot":"../src/","sources":["utilities/keytips/KeytipManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { IKeytipProps } from '../../Keytip';\r\nimport { arraysEqual, replaceElement, findIndex, find, EventGroup, getId } from '../../Utilities';\r\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\r\n\r\nexport interface IUniqueKeytip {\r\n  uniqueID: string;\r\n  keytip: IKeytipProps;\r\n}\r\n\r\n/**\r\n * This class is responsible for handling registering, updating, and unregistering of keytips\r\n */\r\nexport class KeytipManager {\r\n  private static _instance: KeytipManager = new KeytipManager();\r\n\r\n  public keytips: IUniqueKeytip[] = [];\r\n  public persistedKeytips: IUniqueKeytip[] = [];\r\n\r\n  // This is (and should be) updated and kept in sync\r\n  // with the inKeytipMode in KeytipLayer.\r\n  public inKeytipMode = false;\r\n\r\n  // Boolean that gets checked before entering keytip mode by the KeytipLayer\r\n  // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\r\n  public shouldEnterKeytipMode = true;\r\n\r\n  /**\r\n   * Static function to get singleton KeytipManager instance\r\n   *\r\n   * @returns {KeytipManager} Singleton KeytipManager instance\r\n   */\r\n  public static getInstance(): KeytipManager {\r\n    return this._instance;\r\n  }\r\n\r\n  /**\r\n   * Registers a keytip\r\n   *\r\n   * @param keytipProps - Keytip to register\r\n   * @param persisted - T/F if this keytip should be persisted, default is false\r\n   * @returns {string} Unique ID for this keytip\r\n   */\r\n  public register(keytipProps: IKeytipProps, persisted: boolean = false): string {\r\n    let props: IKeytipProps = keytipProps;\r\n    if (!persisted) {\r\n      // Add the overflowSetSequence if necessary\r\n      props = this.addParentOverflow(keytipProps);\r\n    }\r\n    // Create a unique keytip\r\n    const uniqueKeytip: IUniqueKeytip = this._getUniqueKtp(props);\r\n    // Add to array\r\n    persisted ? this.persistedKeytips.push(uniqueKeytip) : this.keytips.push(uniqueKeytip);\r\n\r\n    const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\r\n    EventGroup.raise(this, event, {\r\n      keytip: props,\r\n      uniqueID: uniqueKeytip.uniqueID\r\n    });\r\n\r\n    return uniqueKeytip.uniqueID;\r\n  }\r\n\r\n  /**\r\n   * Update a keytip\r\n   *\r\n   * @param keytipProps - Keytip to update\r\n   * @param uniqueID - Unique ID of this keytip\r\n   */\r\n  public update(keytipProps: IKeytipProps, uniqueID: string): void {\r\n    const newKeytipProps = this.addParentOverflow(keytipProps);\r\n    const uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\r\n    const keytipIndex = findIndex(this.keytips, (ktp: IUniqueKeytip) => {\r\n      return ktp.uniqueID === uniqueID;\r\n    });\r\n    if (keytipIndex >= 0) {\r\n      // Update everything except 'visible'\r\n      uniqueKeytip.keytip.visible = this.keytips[keytipIndex].keytip.visible;\r\n      // Update keytip in this.keytips\r\n      this.keytips = replaceElement(this.keytips, uniqueKeytip, keytipIndex);\r\n      // Raise event\r\n      EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\r\n        keytip: uniqueKeytip.keytip,\r\n        uniqueID: uniqueKeytip.uniqueID\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unregisters a keytip\r\n   *\r\n   * @param keytipToRemove - IKeytipProps of the keytip to remove\r\n   * @param uniqueID - Unique ID of this keytip\r\n   * @param persisted - T/F if this keytip should be persisted, default is false\r\n   */\r\n  public unregister(keytipToRemove: IKeytipProps, uniqueID: string, persisted: boolean = false): void {\r\n    if (persisted) {\r\n      // Remove keytip from this.persistedKeytips\r\n      this.persistedKeytips = this.persistedKeytips.filter((uniqueKtp: IUniqueKeytip) => {\r\n        return uniqueKtp.uniqueID !== uniqueID;\r\n      });\r\n    } else {\r\n      // Remove keytip from this.keytips\r\n      this.keytips = this.keytips.filter((uniqueKtp: IUniqueKeytip) => {\r\n        return uniqueKtp.uniqueID !== uniqueID;\r\n      });\r\n    }\r\n\r\n    const event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\r\n    EventGroup.raise(this, event, {\r\n      keytip: keytipToRemove,\r\n      uniqueID: uniqueID\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Manual call to enter keytip mode\r\n   */\r\n  public enterKeytipMode(): void {\r\n    EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\r\n  }\r\n\r\n  /**\r\n   * Manual call to exit keytip mode\r\n   */\r\n  public exitKeytipMode(): void {\r\n    EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\r\n  }\r\n\r\n  /**\r\n   * Gets all IKeytipProps from this.keytips\r\n   *\r\n   * @returns {IKeytipProps[]} All keytips stored in the manager\r\n   */\r\n  public getKeytips(): IKeytipProps[] {\r\n    return this.keytips.map((uniqueKeytip: IUniqueKeytip) => {\r\n      return uniqueKeytip.keytip;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\r\n   *\r\n   * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\r\n   * @returns {IKeytipProps} - Modified keytip props, if needed to be modified\r\n   */\r\n  public addParentOverflow(keytipProps: IKeytipProps): IKeytipProps {\r\n    const fullSequence = [...keytipProps.keySequences];\r\n    fullSequence.pop();\r\n    if (fullSequence.length !== 0) {\r\n      const parentKeytip = find(this.getKeytips(), (keytip: IKeytipProps) => {\r\n        return arraysEqual(fullSequence, keytip.keySequences);\r\n      });\r\n      if (parentKeytip && parentKeytip.overflowSetSequence) {\r\n        return {\r\n          ...keytipProps,\r\n          overflowSetSequence: parentKeytip.overflowSetSequence\r\n        };\r\n      }\r\n    }\r\n    return keytipProps;\r\n  }\r\n\r\n  /**\r\n   * Public function to bind for overflow items that have a submenu\r\n   *\r\n   * @param overflowButtonSequences\r\n   * @param keytipSequences\r\n   */\r\n  public menuExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\r\n    EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\r\n      overflowButtonSequences,\r\n      keytipSequences\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates an IUniqueKeytip object\r\n   *\r\n   * @param keytipProps - IKeytipProps\r\n   * @param uniqueID - Unique ID, will default to the next unique ID if not passed\r\n   * @returns {IUniqueKeytip} IUniqueKeytip object\r\n   */\r\n  private _getUniqueKtp(keytipProps: IKeytipProps, uniqueID: string = getId()): IUniqueKeytip {\r\n    return { keytip: { ...keytipProps }, uniqueID };\r\n  }\r\n}\r\n"]}