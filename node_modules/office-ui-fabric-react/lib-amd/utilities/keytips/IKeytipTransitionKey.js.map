{"version":3,"file":"IKeytipTransitionKey.js","sourceRoot":"../src/","sources":["utilities/keytips/IKeytipTransitionKey.ts"],"names":[],"mappings":";;;IAEA,IAAY,wBAKX;IALD,WAAY,wBAAwB;QAClC,6DAAQ,oBAAQ,CAAC,KAAK,WAAA,CAAA;QACtB,4DAAO,oBAAQ,CAAC,IAAI,UAAA,CAAA;QACpB,2DAAM,oBAAQ,CAAC,GAAG,SAAA,CAAA;QAClB,4DAAO,oBAAQ,CAAC,UAAU,UAAA,CAAA;IAC5B,CAAC,EALW,wBAAwB,GAAxB,gCAAwB,KAAxB,gCAAwB,QAKnC;IAOD;;;;;;OAMG;IACH,gCAAuC,IAA0B,EAAE,IAA0B;QAC3F,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,EAAE;YACzB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;QAC7B,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;QAE7B,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE;YACtC,2DAA2D;YAC3D,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,IAAI,IAAI,EAAE;YAChB,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;gBAC/B,OAAO,KAAK,CAAC;aACd;YAED,mBAAmB;YACnB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACnB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;oBACvB,OAAO,KAAK,CAAC;iBACd;aACF;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IA7BD,wDA6BC;IAED;;;;;;OAMG;IACH,+BAAsC,IAA4B,EAAE,GAAyB;QAC3F,OAAO,CAAC,CAAC,gBAAI,CAAC,IAAI,EAAE,UAAC,aAAmC;YACtD,OAAO,sBAAsB,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC;IAJD,sDAIC","sourcesContent":["import { find, KeyCodes } from '../../Utilities';\r\n\r\nexport enum KeytipTransitionModifier {\r\n  shift = KeyCodes.shift,\r\n  ctrl = KeyCodes.ctrl,\r\n  alt = KeyCodes.alt,\r\n  meta = KeyCodes.leftWindow\r\n}\r\n\r\nexport interface IKeytipTransitionKey {\r\n  key: string;\r\n  modifierKeys?: KeytipTransitionModifier[];\r\n}\r\n\r\n/**\r\n * Tests for equality between two IKeytipTransitionKeys.\r\n *\r\n * @param key1 - First IKeytipTransitionKey.\r\n * @param key2 - Second IKeytipTransitionKey.\r\n * @returns {boolean} T/F if the transition keys are equal.\r\n */\r\nexport function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean {\r\n  if (key1.key !== key2.key) {\r\n    return false;\r\n  }\r\n\r\n  let mod1 = key1.modifierKeys;\r\n  let mod2 = key2.modifierKeys;\r\n\r\n  if ((!mod1 && mod2) || (mod1 && !mod2)) {\r\n    // Not equal if one modifier is defined and the other isn't\r\n    return false;\r\n  }\r\n\r\n  if (mod1 && mod2) {\r\n    if (mod1.length !== mod2.length) {\r\n      return false;\r\n    }\r\n\r\n    // Sort both arrays\r\n    mod1 = mod1.sort();\r\n    mod2 = mod2.sort();\r\n    for (let i = 0; i < mod1.length; i++) {\r\n      if (mod1[i] !== mod2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Tests if 'key' is present in 'keys'.\r\n *\r\n * @param keys - Array of IKeytipTransitionKey.\r\n * @param key - IKeytipTransitionKey to find in 'keys'.\r\n * @returns {boolean} T/F if 'keys' contains 'key'.\r\n */\r\nexport function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean {\r\n  return !!find(keys, (transitionKey: IKeytipTransitionKey) => {\r\n    return transitionKeysAreEqual(transitionKey, key);\r\n  });\r\n}\r\n"]}