{"version":3,"file":"SelectionZone.js","sourceRoot":"../src/","sources":["utilities/selection/SelectionZone.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  KeyCodes,\r\n  elementContains,\r\n  findScrollableParent,\r\n  getParent,\r\n  getDocument,\r\n  getWindow,\r\n  isElementTabbable\r\n} from '../../Utilities';\r\nimport { ISelection, SelectionMode, IObjectWithKey } from './interfaces';\r\n\r\n// Selection definitions:\r\n//\r\n// Anchor index: the point from which a range selection starts.\r\n// Focus index: the point from which layout movement originates from.\r\n//\r\n// These two can differ. Tests:\r\n//\r\n// If you start at index 5\r\n// Shift click to index 10\r\n//    The focus is 10, the anchor is 5.\r\n// If you shift click at index 0\r\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\r\n// If you click index 8\r\n//    The anchor and focus are set to 8.\r\n\r\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\r\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\r\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\r\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\r\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\r\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\r\n\r\nexport interface ISelectionZone {\r\n  ignoreNextFocus: () => void;\r\n}\r\n\r\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\r\n  componentRef?: () => void;\r\n  selection: ISelection;\r\n  /**\r\n   * @deprecated No longer in use, focus is now managed by FocusZone\r\n   */\r\n  layout?: {};\r\n  selectionMode?: SelectionMode;\r\n  selectionPreservedOnEmptyClick?: boolean;\r\n  disableAutoSelectOnInputElements?: boolean;\r\n  enterModalOnTouch?: boolean;\r\n  isSelectedOnFocus?: boolean;\r\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\r\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\r\n}\r\n\r\nexport class SelectionZone extends BaseComponent<ISelectionZoneProps, {}> {\r\n  public static defaultProps = {\r\n    isMultiSelectEnabled: true,\r\n    isSelectedOnFocus: true,\r\n    selectionMode: SelectionMode.multiple\r\n  };\r\n\r\n  private _root = React.createRef<HTMLDivElement>();\r\n  private _isCtrlPressed: boolean;\r\n  private _isShiftPressed: boolean;\r\n  private _isMetaPressed: boolean;\r\n  private _isTabPressed: boolean;\r\n  private _shouldHandleFocus: boolean;\r\n  private _shouldHandleFocusTimeoutId: number | undefined;\r\n  private _isTouch: boolean;\r\n  private _isTouchTimeoutId: number | undefined;\r\n\r\n  public componentDidMount(): void {\r\n    const win = getWindow(this._root.current);\r\n\r\n    // Track the latest modifier keys globally.\r\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\r\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\r\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\r\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div\r\n        className=\"ms-SelectionZone\"\r\n        ref={this._root}\r\n        onKeyDown={this._onKeyDown}\r\n        onMouseDown={this._onMouseDown}\r\n        onKeyDownCapture={this._onKeyDownCapture}\r\n        onClick={this._onClick}\r\n        role=\"presentation\"\r\n        onDoubleClick={this._onDoubleClick}\r\n        onContextMenu={this._onContextMenu}\r\n        {...{\r\n          onMouseDownCapture: this._onMouseDownCapture,\r\n          onFocusCapture: this._onFocus\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\r\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\r\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\r\n   * focus event that occurs. This method does that.\r\n   */\r\n  public ignoreNextFocus = (): void => {\r\n    this._handleNextFocus(false);\r\n  };\r\n\r\n  private _onMouseDownCapture = (ev: any): void => {\r\n    if (document.activeElement !== ev.target && !elementContains(document.activeElement as HTMLElement, ev.target)) {\r\n      this.ignoreNextFocus();\r\n      return;\r\n    }\r\n\r\n    if (!elementContains(ev.target, this._root.current)) {\r\n      return;\r\n    }\r\n\r\n    let target = ev.target as HTMLElement;\r\n\r\n    while (target !== this._root.current) {\r\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\r\n        this.ignoreNextFocus();\r\n        break;\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\r\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\r\n   * specially.\r\n   */\r\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const target = ev.target as HTMLElement;\r\n    const { selection } = this.props;\r\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\r\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\r\n      const itemRoot = this._findItemRoot(target);\r\n\r\n      if (!isToggle && itemRoot) {\r\n        const index = this._getItemIndex(itemRoot);\r\n\r\n        if (isToggleModifierPressed) {\r\n          // set anchor only.\r\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\r\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\r\n            selection.setModal(true);\r\n            this._setIsTouch(false);\r\n          }\r\n        } else {\r\n          if (this.props.isSelectedOnFocus) {\r\n            this._onItemSurfaceClick(ev, index);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this._handleNextFocus(false);\r\n  };\r\n\r\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    this._updateModifiers(ev);\r\n\r\n    let target = ev.target as HTMLElement;\r\n    const itemRoot = this._findItemRoot(target);\r\n\r\n    // No-op if selection is disabled\r\n    if (this._isSelectionDisabled(target)) {\r\n      return;\r\n    }\r\n\r\n    while (target !== this._root.current) {\r\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\r\n        break;\r\n      } else if (itemRoot) {\r\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\r\n          break;\r\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\r\n          break;\r\n        } else if (\r\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\r\n          !this._isShiftPressed &&\r\n          !this._isCtrlPressed &&\r\n          !this._isMetaPressed\r\n        ) {\r\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\r\n          break;\r\n        } else if (\r\n          this.props.disableAutoSelectOnInputElements &&\r\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  };\r\n\r\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\r\n    this._setIsTouch(true);\r\n  };\r\n\r\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    this._updateModifiers(ev);\r\n\r\n    let target = ev.target as HTMLElement;\r\n    const itemRoot = this._findItemRoot(target);\r\n\r\n    // No-op if selection is disabled\r\n    if (this._isSelectionDisabled(target)) {\r\n      return;\r\n    }\r\n\r\n    while (target !== this._root.current) {\r\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\r\n        this._onToggleAllClick(ev);\r\n        break;\r\n      } else if (itemRoot) {\r\n        const index = this._getItemIndex(itemRoot);\r\n\r\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\r\n          if (this._isShiftPressed) {\r\n            this._onItemSurfaceClick(ev, index);\r\n          } else {\r\n            this._onToggleClick(ev, index);\r\n          }\r\n          break;\r\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\r\n          this._onInvokeClick(ev, index);\r\n          break;\r\n        } else if (target === itemRoot) {\r\n          this._onItemSurfaceClick(ev, index);\r\n          break;\r\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\r\n          return;\r\n        }\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  };\r\n\r\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    const target = ev.target as HTMLElement;\r\n\r\n    const { onItemContextMenu, selection } = this.props;\r\n    if (onItemContextMenu) {\r\n      const itemRoot = this._findItemRoot(target);\r\n\r\n      if (itemRoot) {\r\n        const index = this._getItemIndex(itemRoot);\r\n\r\n        this._onInvokeMouseDown(ev, index);\r\n\r\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\r\n\r\n        // In order to keep back compat, if the value here is undefined, then we should still\r\n        // call preventDefault(). Only in the case where true is explicitly returned should\r\n        // the call be skipped.\r\n        if (!skipPreventDefault) {\r\n          ev.preventDefault();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private _isSelectionDisabled(target: HTMLElement): boolean {\r\n    if (this._getSelectionMode() === SelectionMode.none) {\r\n      return true;\r\n    }\r\n\r\n    while (target !== this._root.current) {\r\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\r\n        return true;\r\n      }\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * In multi selection, if you double click within an item's root (but not within the invoke element or input elements),\r\n   * we should execute the invoke handler.\r\n   */\r\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\r\n    let target = ev.target as HTMLElement;\r\n\r\n    if (this._isSelectionDisabled(target)) {\r\n      return;\r\n    }\r\n\r\n    const { onItemInvoked } = this.props;\r\n    const itemRoot = this._findItemRoot(target);\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    if (itemRoot && onItemInvoked && selectionMode !== SelectionMode.none && !this._isInputElement(target)) {\r\n      const index = this._getItemIndex(itemRoot);\r\n\r\n      while (target !== this._root.current) {\r\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) || this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\r\n          break;\r\n        } else if (target === itemRoot) {\r\n          this._onInvokeClick(ev, index);\r\n          break;\r\n        }\r\n\r\n        target = getParent(target) as HTMLElement;\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n  };\r\n\r\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\r\n    this._updateModifiers(ev);\r\n\r\n    this._handleNextFocus(true);\r\n  };\r\n\r\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\r\n    this._updateModifiers(ev);\r\n\r\n    let target = ev.target as HTMLElement;\r\n\r\n    if (this._isSelectionDisabled(target)) {\r\n      return;\r\n    }\r\n\r\n    const { selection } = this.props;\r\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\r\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\r\n\r\n    // Ignore key downs from input elements.\r\n    if (this._isInputElement(target)) {\r\n      // A key was pressed while an item in this zone was focused.\r\n      return;\r\n    }\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    // If ctrl-a is pressed, select all (if all are not already selected.)\r\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\r\n      selection.setAllSelected(true);\r\n      ev.stopPropagation();\r\n      ev.preventDefault();\r\n      return;\r\n    }\r\n\r\n    // If escape is pressed, clear selection (if any are selected.)\r\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\r\n      selection.setAllSelected(false);\r\n      ev.stopPropagation();\r\n      ev.preventDefault();\r\n      return;\r\n    }\r\n\r\n    const itemRoot = this._findItemRoot(target);\r\n\r\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\r\n    if (itemRoot) {\r\n      const index = this._getItemIndex(itemRoot);\r\n\r\n      while (target !== this._root.current) {\r\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\r\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\r\n          // so we can no-op for any keydowns in this case.\r\n          break;\r\n        } else if (this._shouldAutoSelect(target)) {\r\n          // If the event went to an element which should trigger auto-select, select it and then let\r\n          // the default behavior kick in.\r\n          this._onInvokeMouseDown(ev, index);\r\n          break;\r\n        } else if (\r\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\r\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\r\n        ) {\r\n          return false;\r\n        } else if (target === itemRoot) {\r\n          if (ev.which === KeyCodes.enter) {\r\n            this._onInvokeClick(ev, index);\r\n            ev.preventDefault();\r\n            return;\r\n          } else if (ev.which === KeyCodes.space) {\r\n            this._onToggleClick(ev, index);\r\n            ev.preventDefault();\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n\r\n        target = getParent(target) as HTMLElement;\r\n      }\r\n    }\r\n  };\r\n\r\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\r\n    const { selection } = this.props;\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    if (selectionMode === SelectionMode.multiple) {\r\n      selection.toggleAllSelected();\r\n      ev.stopPropagation();\r\n      ev.preventDefault();\r\n    }\r\n  }\r\n\r\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\r\n    const { selection } = this.props;\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    selection.setChangeEvents(false);\r\n\r\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\r\n      selection.setModal(true);\r\n      this._setIsTouch(false);\r\n    }\r\n\r\n    if (selectionMode === SelectionMode.multiple) {\r\n      selection.toggleIndexSelected(index);\r\n    } else if (selectionMode === SelectionMode.single) {\r\n      const isSelected = selection.isIndexSelected(index);\r\n      selection.setAllSelected(false);\r\n      selection.setIndexSelected(index, !isSelected, true);\r\n    } else {\r\n      selection.setChangeEvents(true);\r\n      return;\r\n    }\r\n\r\n    selection.setChangeEvents(true);\r\n\r\n    ev.stopPropagation();\r\n\r\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\r\n    // for checkboxes if you use a checkbox for the toggle.\r\n  }\r\n\r\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\r\n    const { selection, onItemInvoked } = this.props;\r\n\r\n    if (onItemInvoked) {\r\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\r\n    const { selection } = this.props;\r\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\r\n\r\n    const selectionMode = this._getSelectionMode();\r\n\r\n    if (selectionMode === SelectionMode.multiple) {\r\n      if (this._isShiftPressed && !this._isTabPressed) {\r\n        selection.selectToIndex(index, !isToggleModifierPressed);\r\n      } else if (isToggleModifierPressed) {\r\n        selection.toggleIndexSelected(index);\r\n      } else {\r\n        this._clearAndSelectIndex(index);\r\n      }\r\n    } else if (selectionMode === SelectionMode.single) {\r\n      this._clearAndSelectIndex(index);\r\n    }\r\n  }\r\n\r\n  private _onInvokeMouseDown(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\r\n    const { selection } = this.props;\r\n\r\n    // Only do work if item is not selected.\r\n    if (selection.isIndexSelected(index)) {\r\n      return;\r\n    }\r\n\r\n    this._clearAndSelectIndex(index);\r\n  }\r\n\r\n  /**\r\n   * To avoid high startup cost of traversing the DOM on component mount,\r\n   * defer finding the scrollable parent until a click interaction.\r\n   *\r\n   * The styles will probably already calculated since we're running in a click handler,\r\n   * so this is less likely to cause layout thrashing then doing it in mount.\r\n   */\r\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\r\n    const scrollParent = findScrollableParent(this._root.current);\r\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\r\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\r\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\r\n\r\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\r\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\r\n      this._tryClearOnEmptyClick(ev);\r\n    }\r\n  }\r\n\r\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\r\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\r\n      this.props.selection.setAllSelected(false);\r\n    }\r\n  }\r\n\r\n  private _clearAndSelectIndex(index: number): void {\r\n    const { selection } = this.props;\r\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\r\n\r\n    if (!isAlreadySingleSelected) {\r\n      selection.setChangeEvents(false);\r\n      selection.setAllSelected(false);\r\n      selection.setIndexSelected(index, true, true);\r\n      if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\r\n        selection.setModal(true);\r\n        this._setIsTouch(false);\r\n      }\r\n      selection.setChangeEvents(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * We need to track the modifier key states so that when focus events occur, which do not contain\r\n   * modifier states in the Event object, we know how to behave.\r\n   */\r\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\r\n    this._isShiftPressed = ev.shiftKey;\r\n    this._isCtrlPressed = ev.ctrlKey;\r\n    this._isMetaPressed = ev.metaKey;\r\n\r\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\r\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\r\n  }\r\n\r\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\r\n    const { selection } = this.props;\r\n\r\n    while (target !== this._root.current) {\r\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\r\n      const index = Number(indexValue);\r\n\r\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\r\n        break;\r\n      }\r\n\r\n      target = getParent(target) as HTMLElement;\r\n    }\r\n\r\n    if (target === this._root.current) {\r\n      return undefined;\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  private _getItemIndex(itemRoot: HTMLElement): number {\r\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\r\n  }\r\n\r\n  private _shouldAutoSelect(element: HTMLElement): boolean {\r\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\r\n  }\r\n\r\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\r\n    let isToggle = false;\r\n\r\n    while (!isToggle && element !== this._root.current) {\r\n      isToggle = element.getAttribute(attributeName) === 'true';\r\n      element = getParent(element) as HTMLElement;\r\n    }\r\n\r\n    return isToggle;\r\n  }\r\n\r\n  private _isInputElement(element: HTMLElement): boolean {\r\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\r\n  }\r\n\r\n  private _isNonHandledClick(element: HTMLElement): boolean {\r\n    const doc = getDocument();\r\n\r\n    if (doc && element) {\r\n      while (element && element !== doc.documentElement) {\r\n        if (isElementTabbable(element)) {\r\n          return false;\r\n        }\r\n\r\n        element = getParent(element) as HTMLElement;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private _handleNextFocus(handleFocus: boolean): void {\r\n    if (this._shouldHandleFocusTimeoutId) {\r\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\r\n      this._shouldHandleFocusTimeoutId = undefined;\r\n    }\r\n\r\n    this._shouldHandleFocus = handleFocus;\r\n\r\n    if (handleFocus) {\r\n      this._async.setTimeout(() => {\r\n        this._shouldHandleFocus = false;\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  private _setIsTouch(isTouch: boolean): void {\r\n    if (this._isTouchTimeoutId) {\r\n      this._async.clearTimeout(this._isTouchTimeoutId);\r\n      this._isTouchTimeoutId = undefined;\r\n    }\r\n\r\n    this._isTouch = true;\r\n\r\n    if (isTouch) {\r\n      this._async.setTimeout(() => {\r\n        this._isTouch = false;\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  private _getSelectionMode(): SelectionMode {\r\n    const { selection } = this.props;\r\n\r\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\r\n\r\n    return selectionMode;\r\n  }\r\n}\r\n"]}