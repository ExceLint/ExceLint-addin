{"version":3,"file":"interfaces.js","sourceRoot":"../src/","sources":["utilities/selection/interfaces.ts"],"names":[],"mappings":"AAIA,MAAM,CAAC,IAAM,gBAAgB,GAAG,QAAQ,CAAC;AAEzC,MAAM,CAAN,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,iDAAQ,CAAA;IACR,qDAAU,CAAA;IACV,yDAAY,CAAA;AACd,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB;AAkDD,MAAM,CAAN,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC5B,uEAAc,CAAA;IACd,mEAAY,CAAA;AACd,CAAC,EAHW,kBAAkB,KAAlB,kBAAkB,QAG7B","sourcesContent":["export interface IObjectWithKey {\r\n  key?: string | number;\r\n}\r\n\r\nexport const SELECTION_CHANGE = 'change';\r\n\r\nexport enum SelectionMode {\r\n  none = 0,\r\n  single = 1,\r\n  multiple = 2\r\n}\r\n\r\nexport interface ISelection {\r\n  count: number;\r\n  mode: SelectionMode;\r\n\r\n  canSelectItem: (item: IObjectWithKey, index?: number) => boolean;\r\n\r\n  // Obesrvable methods.\r\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\r\n\r\n  // Initialization methods.\r\n\r\n  setItems(items: IObjectWithKey[], shouldClear: boolean): void;\r\n  getItems(): IObjectWithKey[];\r\n\r\n  // Read selection methods.\r\n\r\n  getSelection(): IObjectWithKey[];\r\n  getSelectedIndices(): number[];\r\n  getSelectedCount(): number;\r\n  isRangeSelected(fromIndex: number, count: number): boolean;\r\n\r\n  isAllSelected(): boolean;\r\n  isKeySelected(key: string): boolean;\r\n  isIndexSelected(index: number): boolean;\r\n\r\n  isModal?(): boolean;\r\n\r\n  // Write selection methods.\r\n\r\n  setAllSelected(isAllSelected: boolean): void;\r\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\r\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\r\n\r\n  setModal?(isModal: boolean): void; // TODO make non-optional on next breaking change\r\n\r\n  // Write range selection methods.\r\n\r\n  selectToKey(key: string, clearSelection?: boolean): void;\r\n  selectToIndex(index: number, clearSelection?: boolean): void;\r\n\r\n  // Toggle helpers.\r\n\r\n  toggleAllSelected(): void;\r\n  toggleKeySelected(key: string): void;\r\n  toggleIndexSelected(index: number): void;\r\n  toggleRangeSelected(fromIndex: number, count: number): void;\r\n}\r\n\r\nexport enum SelectionDirection {\r\n  horizontal = 0,\r\n  vertical = 1\r\n}\r\n"]}