{"version":3,"file":"withResponsiveMode.js","sourceRoot":"../src/","sources":["utilities/decorators/withResponsiveMode.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAM1D,MAAM,CAAN,IAAY,cAOX;AAPD,WAAY,cAAc;IACxB,qDAAS,CAAA;IACT,uDAAU,CAAA;IACV,qDAAS,CAAA;IACT,uDAAU,CAAA;IACV,yDAAW,CAAA;IACX,2DAAY,CAAA;AACd,CAAC,EAPW,cAAc,KAAd,cAAc,QAOzB;AAED,IAAM,yBAAyB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;AAEzE,IAAI,YAAwC,CAAC;AAE7C;;GAEG;AACH,MAAM,4BAA4B,cAA0C;IAC1E,YAAY,GAAG,cAAc,CAAC;AAChC,CAAC;AAED,MAAM,6BACJ,iBAAyF;IAEzF,IAAM,WAAW;QAAoC,8CAA+C;QAClG,4BAAY,KAAa;YAAzB,YACE,kBAAM,KAAK,CAAC,SAMb;YALC,KAAI,CAAC,2BAA2B,GAAG,KAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YAE/E,KAAI,CAAC,KAAK,GAAG;gBACX,cAAc,EAAE,KAAI,CAAC,kBAAkB,EAAE;aAC1C,CAAC;;QACJ,CAAC;QAEM,8CAAiB,GAAxB;YAAA,iBAUC;YATC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE;gBAChC,IAAM,cAAc,GAAG,KAAI,CAAC,kBAAkB,EAAE,CAAC;gBAEjD,IAAI,cAAc,KAAK,KAAI,CAAC,KAAK,CAAC,cAAc,EAAE;oBAChD,KAAI,CAAC,QAAQ,CAAC;wBACZ,cAAc,EAAE,cAAc;qBAC/B,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,iDAAoB,GAA3B;YACE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QAEM,mCAAM,GAAb;YACU,IAAA,0CAAc,CAAgB;YAEtC,OAAO,oBAAC,iBAAiB,qBAAC,GAAG,EAAE,IAAI,CAAC,2BAA2B,EAAE,cAAc,EAAE,cAAc,IAAM,IAAI,CAAC,KAAY,EAAI,CAAC;QAC7H,CAAC;QAEO,+CAAkB,GAA1B;YACE,IAAI,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC;YAC1C,IAAM,GAAG,GAAG,SAAS,EAAE,CAAC;YAExB,IAAI,OAAO,GAAG,KAAK,WAAW,EAAE;gBAC9B,IAAI;oBACF,OAAO,GAAG,CAAC,UAAU,GAAG,yBAAyB,CAAC,cAAc,CAAC,EAAE;wBACjE,cAAc,EAAE,CAAC;qBAClB;iBACF;gBAAC,OAAO,CAAC,EAAE;oBACV,uGAAuG;oBACvG,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC;iBACvC;aACF;iBAAM;gBACL,IAAI,YAAY,KAAK,SAAS,EAAE;oBAC9B,cAAc,GAAG,YAAY,CAAC;iBAC/B;qBAAM;oBACL,MAAM,IAAI,KAAK,CACb,4FAA4F;wBAC1F,+DAA+D,CAClE,CAAC;iBACH;aACF;YAED,OAAO,cAAc,CAAC;QACxB,CAAC;QACH,yBAAC;IAAD,CAAC,AA1DmB,CAAiC,aAAa,EA0DjE,CAAC;IACF,OAAO,YAAY,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;AACtD,CAAC","sourcesContent":["import * as React from 'react';\r\nimport { BaseDecorator } from './BaseDecorator';\r\nimport { getWindow, hoistStatics } from '../../Utilities';\r\n\r\nexport interface IWithResponsiveModeState {\r\n  responsiveMode?: ResponsiveMode;\r\n}\r\n\r\nexport enum ResponsiveMode {\r\n  small = 0,\r\n  medium = 1,\r\n  large = 2,\r\n  xLarge = 3,\r\n  xxLarge = 4,\r\n  xxxLarge = 5\r\n}\r\n\r\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\r\n\r\nlet _defaultMode: ResponsiveMode | undefined;\r\n\r\n/**\r\n * Allows a server rendered scenario to provide a default responsive mode.\r\n */\r\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\r\n  _defaultMode = responsiveMode;\r\n}\r\n\r\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\r\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>\r\n): any {\r\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\r\n    constructor(props: TProps) {\r\n      super(props);\r\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\r\n\r\n      this.state = {\r\n        responsiveMode: this._getResponsiveMode()\r\n      };\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n      this._events.on(window, 'resize', () => {\r\n        const responsiveMode = this._getResponsiveMode();\r\n\r\n        if (responsiveMode !== this.state.responsiveMode) {\r\n          this.setState({\r\n            responsiveMode: responsiveMode\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n      this._events.dispose();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n      const { responsiveMode } = this.state;\r\n\r\n      return <ComposedComponent ref={this._updateComposedComponentRef} responsiveMode={responsiveMode} {...this.props as any} />;\r\n    }\r\n\r\n    private _getResponsiveMode(): ResponsiveMode {\r\n      let responsiveMode = ResponsiveMode.small;\r\n      const win = getWindow();\r\n\r\n      if (typeof win !== 'undefined') {\r\n        try {\r\n          while (win.innerWidth > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\r\n            responsiveMode++;\r\n          }\r\n        } catch (e) {\r\n          // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\r\n          responsiveMode = ResponsiveMode.large;\r\n        }\r\n      } else {\r\n        if (_defaultMode !== undefined) {\r\n          responsiveMode = _defaultMode;\r\n        } else {\r\n          throw new Error(\r\n            'Content was rendered in a server environment without providing a default responsive mode. ' +\r\n              'Call setResponsiveMode to define what the responsive mode is.'\r\n          );\r\n        }\r\n      }\r\n\r\n      return responsiveMode;\r\n    }\r\n  };\r\n  return hoistStatics(ComposedComponent, resultClass);\r\n}\r\n"]}