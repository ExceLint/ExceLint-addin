{"version":3,"file":"rgb2hsv.js","sourceRoot":"../src/","sources":["utilities/color/rgb2hsv.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAEzC,+CAA+C;AAC/C,MAAM,kBAAkB,CAAS,EAAE,CAAS,EAAE,CAAS;IACrD,IAAI,CAAC,GAAG,GAAG,CAAC;IACZ,IAAI,CAAC,CAAC;IACN,IAAI,CAAC,CAAC;IACN,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,IAAM,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC;IAExB,MAAM;IACN,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,CAAC,GAAG,CAAC,CAAC;KACP;SAAM,IAAI,CAAC,KAAK,GAAG,EAAE;QACpB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;KAC3B;SAAM,IAAI,CAAC,KAAK,GAAG,EAAE;QACpB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;KACzB;SAAM,IAAI,CAAC,KAAK,GAAG,EAAE;QACpB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;KACzB;IAED,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAEvB,IAAI,CAAC,GAAG,CAAC,EAAE;QACT,CAAC,IAAI,GAAG,CAAC;KACV;IAED,aAAa;IACb,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IAEpD,QAAQ;IACR,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC;IAE5C,OAAO,EAAE,CAAC,GAAA,EAAE,CAAC,GAAA,EAAE,CAAC,GAAA,EAAE,CAAC;AACrB,CAAC","sourcesContent":["import { IHSV } from './interfaces';\r\nimport { MAX_COLOR_RGB } from './consts';\r\n\r\n/** Converts RGB components to an HSV color. */\r\nexport function rgb2hsv(r: number, g: number, b: number): IHSV {\r\n  let h = NaN;\r\n  let s;\r\n  let v;\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  const delta = max - min;\r\n\r\n  // hue\r\n  if (delta === 0) {\r\n    h = 0;\r\n  } else if (r === max) {\r\n    h = ((g - b) / delta) % 6;\r\n  } else if (g === max) {\r\n    h = (b - r) / delta + 2;\r\n  } else if (b === max) {\r\n    h = (r - g) / delta + 4;\r\n  }\r\n\r\n  h = Math.round(h * 60);\r\n\r\n  if (h < 0) {\r\n    h += 360;\r\n  }\r\n\r\n  // saturation\r\n  s = Math.round((max === 0 ? 0 : delta / max) * 100);\r\n\r\n  // value\r\n  v = Math.round((max / MAX_COLOR_RGB) * 100);\r\n\r\n  return { h, s, v };\r\n}\r\n"]}