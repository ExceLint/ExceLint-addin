{"version":3,"file":"IKeytipTransitionKey.js","sourceRoot":"../src/","sources":["utilities/keytips/IKeytipTransitionKey.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAEjD,MAAM,CAAN,IAAY,wBAKX;AALD,WAAY,wBAAwB;IAClC,6DAAQ,QAAQ,CAAC,KAAK,WAAA,CAAA;IACtB,4DAAO,QAAQ,CAAC,IAAI,UAAA,CAAA;IACpB,2DAAM,QAAQ,CAAC,GAAG,SAAA,CAAA;IAClB,4DAAO,QAAQ,CAAC,UAAU,UAAA,CAAA;AAC5B,CAAC,EALW,wBAAwB,KAAxB,wBAAwB,QAKnC;AAOD;;;;;;GAMG;AACH,MAAM,iCAAiC,IAA0B,EAAE,IAA0B;IAC3F,IAAI,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,EAAE;QACzB,OAAO,KAAK,CAAC;KACd;IAED,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;IAC7B,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;IAE7B,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE;QACtC,2DAA2D;QAC3D,OAAO,KAAK,CAAC;KACd;IAED,IAAI,IAAI,IAAI,IAAI,EAAE;QAChB,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;YAC/B,OAAO,KAAK,CAAC;SACd;QAED,mBAAmB;QACnB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;gBACvB,OAAO,KAAK,CAAC;aACd;SACF;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;;GAMG;AACH,MAAM,gCAAgC,IAA4B,EAAE,GAAyB;IAC3F,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,aAAmC;QACtD,OAAO,sBAAsB,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { find, KeyCodes } from '../../Utilities';\r\n\r\nexport enum KeytipTransitionModifier {\r\n  shift = KeyCodes.shift,\r\n  ctrl = KeyCodes.ctrl,\r\n  alt = KeyCodes.alt,\r\n  meta = KeyCodes.leftWindow\r\n}\r\n\r\nexport interface IKeytipTransitionKey {\r\n  key: string;\r\n  modifierKeys?: KeytipTransitionModifier[];\r\n}\r\n\r\n/**\r\n * Tests for equality between two IKeytipTransitionKeys.\r\n *\r\n * @param key1 - First IKeytipTransitionKey.\r\n * @param key2 - Second IKeytipTransitionKey.\r\n * @returns {boolean} T/F if the transition keys are equal.\r\n */\r\nexport function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean {\r\n  if (key1.key !== key2.key) {\r\n    return false;\r\n  }\r\n\r\n  let mod1 = key1.modifierKeys;\r\n  let mod2 = key2.modifierKeys;\r\n\r\n  if ((!mod1 && mod2) || (mod1 && !mod2)) {\r\n    // Not equal if one modifier is defined and the other isn't\r\n    return false;\r\n  }\r\n\r\n  if (mod1 && mod2) {\r\n    if (mod1.length !== mod2.length) {\r\n      return false;\r\n    }\r\n\r\n    // Sort both arrays\r\n    mod1 = mod1.sort();\r\n    mod2 = mod2.sort();\r\n    for (let i = 0; i < mod1.length; i++) {\r\n      if (mod1[i] !== mod2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Tests if 'key' is present in 'keys'.\r\n *\r\n * @param keys - Array of IKeytipTransitionKey.\r\n * @param key - IKeytipTransitionKey to find in 'keys'.\r\n * @returns {boolean} T/F if 'keys' contains 'key'.\r\n */\r\nexport function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean {\r\n  return !!find(keys, (transitionKey: IKeytipTransitionKey) => {\r\n    return transitionKeysAreEqual(transitionKey, key);\r\n  });\r\n}\r\n"]}