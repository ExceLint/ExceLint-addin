{"version":3,"file":"ButtonGridCell.types.js","sourceRoot":"../src/","sources":["utilities/ButtonGrid/ButtonGridCell.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { IButtonClassNames } from '../../components/Button/BaseButton.classNames';\nimport { ITheme } from '../../Styling';\n\nexport interface IButtonGridCellProps<T> {\n  /**\n   * The option that will be made available to the user\n   */\n  item: T;\n\n  /**\n   * Arbitrary unique string associated with this option\n   */\n  id: string;\n\n  /**\n   * Optional, if the this option should be diabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Optional, if the cell is currently selected\n   */\n  selected?: boolean;\n\n  /**\n   * The on click handler\n   */\n  onClick?: (item: T) => void;\n\n  /**\n   * The render callback to handle rendering the item\n   */\n  onRenderItem: (item: T) => JSX.Element;\n\n  /**\n   * Optional, the onHover handler\n   */\n  onHover?: (item?: T) => void;\n\n  /**\n   * Optional, the onFocus handler\n   */\n  onFocus?: (item: T) => void;\n\n  /**\n   * The accessible role for this option\n   */\n  role?: string;\n\n  /**\n   * Optional, className(s) to apply\n   */\n  className?: string;\n\n  /**\n   * Optional, the CSS class used for when the cell is disabled\n   */\n  cellDisabledStyle?: string[];\n\n  /**\n   * Optional, the CSS class used for when the cell is selected\n   */\n  cellIsSelectedStyle?: string[];\n\n  /**\n   * Index for this option\n   */\n  index?: number;\n\n  /**\n   * The label for this item.\n   * Visible text if this item is a header,\n   * tooltip if is this item is normal\n   */\n  label?: string;\n\n  /**\n   * Method to provide the classnames to style a button.\n   * The default value for this prop is the getClassnames func\n   * defined in BaseButton.classnames.\n   */\n  getClassNames?: (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ) => IButtonClassNames;\n\n  /**\n   * Optional, mouseEnter handler.\n   * @returns true if the event should be processed, false otherwise\n   */\n  onMouseEnter?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\n\n  /**\n   * Optional, mouseMove handler\n   * @returns true if the event should be processed, false otherwise\n   */\n  onMouseMove?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\n\n  /**\n   * Optional, mouseLeave handler\n   */\n  onMouseLeave?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\n\n  /**\n   * Optional, onWheel handler\n   */\n  onWheel?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\n\n  /**\n   * Optional, onkeydown handler\n   */\n  onKeyDown?: (ev: React.KeyboardEvent<HTMLButtonElement>) => void;\n}\n\n/**\n * @deprecated - use IButtonGridCellProps instead\n */\nexport interface IGridCellProps<T> extends IButtonGridCellProps<T> {}\n"]}