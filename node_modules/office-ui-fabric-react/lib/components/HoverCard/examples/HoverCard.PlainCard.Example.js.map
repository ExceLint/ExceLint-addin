{"version":3,"file":"HoverCard.PlainCard.Example.js","sourceRoot":"../src/","sources":["components/HoverCard/examples/HoverCard.PlainCard.Example.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAmB,aAAa,EAAE,MAAM,sCAAsC,CAAC;AACjG,OAAO,EAAE,WAAW,EAAE,YAAY,EAAW,MAAM,wCAAwC,CAAC;AAC5F,OAAO,EAAE,eAAe,EAAgB,MAAM,kDAAkD,CAAC;AACjG,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,kCAAkC,CAAC;AACnE,OAAO,EAAE,MAAM,EAAE,MAAM,mCAAmC,CAAC;AAC3D,OAAO,EAAE,kBAAkB,EAAE,MAAM,kCAAkC,CAAC;AACtE,OAAO,EAAE,WAAW,EAAE,MAAM,oCAAoC,CAAC;AAEjE,IAAM,SAAS,GAAG,WAAW,CAAC;IAC5B,SAAS,EAAE;QACT,SAAS,EAAE;YACT,cAAc,EAAE,WAAW;YAC3B,MAAM,EAAE,SAAS;SAClB;KACF;CACF,CAAC,CAAC;AAEH;IAA+C,qDAAuB;IAAtE;QAAA,qEA2CC;QA1CS,YAAM,GAAmB,eAAe,CAAC,EAAE,CAAC,CAAC;QAC7C,cAAQ,GAAc,KAAI,CAAC,aAAa,EAAE,CAAC;QAa3C,yBAAmB,GAAG,UAAC,IAAkB,EAAE,KAAa,EAAE,MAAe;YAC/E,IAAM,cAAc,GAAoB;gBACtC,iBAAiB,EAAE,KAAI,CAAC,kBAAkB;gBAC1C,UAAU,EAAE,IAAI;aACjB,CAAC;YAEF,IAAI,MAAM,CAAC,GAAG,KAAK,OAAO,EAAE;gBAC1B,OAAO,CACL,oBAAC,SAAS,IAAC,cAAc,EAAE,cAAc,EAAE,kBAAkB,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,KAAK;oBAC5F,6BAAK,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IACpD,IAAI,CAAC,KAAK,CACP,CACI,CACb,CAAC;aACH;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAyB,CAAC,CAAC;QAChD,CAAC,CAAC;QAEM,wBAAkB,GAAG,UAAC,IAAkB;YAC9C,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,IAAG,MAAI,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAE,CAAC,GAAK,CAAA,CAAC;YAEvE,OAAO,oBAAC,KAAK,IAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,KAAK,GAAI,CAAC;QAC/F,CAAC,CAAC;;IAKJ,CAAC;IAvCQ,0CAAM,GAAb;QACE,OAAO,CACL,oBAAC,MAAM;YACL;;gBACiB,uCAAY;uDACzB;YACJ,oBAAC,WAAW,IAAC,MAAM,EAAC,UAAU,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,kBAAkB,EAAE,IAAI,CAAC,mBAAmB,GAAI,CACpH,CACV,CAAC;IACJ,CAAC;IA2BO,iDAAa,GAArB;QACE,OAAO,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAA9E,CAA8E,CAAC,CAAC;IACpI,CAAC;IACH,gCAAC;AAAD,CAAC,AA3CD,CAA+C,KAAK,CAAC,SAAS,GA2C7D","sourcesContent":["import * as React from 'react';\r\nimport { HoverCard, IPlainCardProps, HoverCardType } from 'office-ui-fabric-react/lib/HoverCard';\r\nimport { DetailsList, buildColumns, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\r\nimport { createListItems, IExampleItem } from 'office-ui-fabric-react/lib/utilities/exampleData';\r\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport { Fabric } from 'office-ui-fabric-react/lib/Fabric';\r\nimport { getColorFromString } from 'office-ui-fabric-react/lib/Color';\r\nimport { mergeStyles } from 'office-ui-fabric-react/lib/Styling';\r\n\r\nconst itemClass = mergeStyles({\r\n  selectors: {\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n      cursor: 'pointer'\r\n    }\r\n  }\r\n});\r\n\r\nexport class HoverCardPlainCardExample extends React.Component<{}, {}> {\r\n  private _items: IExampleItem[] = createListItems(10);\r\n  private _columns: IColumn[] = this._buildColumns();\r\n\r\n  public render() {\r\n    return (\r\n      <Fabric>\r\n        <p>\r\n          Hover over the <i>color</i> cell of a row item to see the card.\r\n        </p>\r\n        <DetailsList setKey=\"hoverSet\" items={this._items} columns={this._columns} onRenderItemColumn={this._onRenderItemColumn} />\r\n      </Fabric>\r\n    );\r\n  }\r\n\r\n  private _onRenderItemColumn = (item: IExampleItem, index: number, column: IColumn): JSX.Element | React.ReactText => {\r\n    const plainCardProps: IPlainCardProps = {\r\n      onRenderPlainCard: this._onRenderPlainCard,\r\n      renderData: item\r\n    };\r\n\r\n    if (column.key === 'color') {\r\n      return (\r\n        <HoverCard plainCardProps={plainCardProps} instantOpenOnClick={true} type={HoverCardType.plain}>\r\n          <div className={itemClass} style={{ color: item.color }}>\r\n            {item.color}\r\n          </div>\r\n        </HoverCard>\r\n      );\r\n    }\r\n\r\n    return item[column.key as keyof IExampleItem];\r\n  };\r\n\r\n  private _onRenderPlainCard = (item: IExampleItem): JSX.Element => {\r\n    const src = item.thumbnail + `/${getColorFromString(item.color)!.hex}`;\r\n\r\n    return <Image src={src} width={item.width} height={item.height} imageFit={ImageFit.cover} />;\r\n  };\r\n\r\n  private _buildColumns(): IColumn[] {\r\n    return buildColumns(this._items).filter(column => column.name === 'color' || column.name === 'width' || column.name === 'height');\r\n  }\r\n}\r\n"]}