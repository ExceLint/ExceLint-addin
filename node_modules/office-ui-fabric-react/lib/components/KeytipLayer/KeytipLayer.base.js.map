{"version":3,"file":"KeytipLayer.base.js","sourceRoot":"../src/","sources":["components/KeytipLayer/KeytipLayer.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IKeytipLayerProps, IKeytipLayerStyles, IKeytipLayerStyleProps } from './KeytipLayer.types';\r\nimport { getLayerStyles } from './KeytipLayer.styles';\r\nimport { Keytip, IKeytipProps } from '../../Keytip';\r\nimport { Layer } from '../../Layer';\r\nimport { BaseComponent, classNamesFunction, getDocument, arraysEqual, warn, isMac } from '../../Utilities';\r\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\r\nimport { KeytipTree } from './KeytipTree';\r\nimport { IKeytipTreeNode } from './IKeytipTreeNode';\r\nimport { ktpTargetFromId, ktpTargetFromSequences, sequencesToID, mergeOverflows } from '../../utilities/keytips/KeytipUtils';\r\nimport { transitionKeysContain, KeytipTransitionModifier, IKeytipTransitionKey } from '../../utilities/keytips/IKeytipTransitionKey';\r\nimport { KeytipEvents, KTP_LAYER_ID, KTP_ARIA_SEPARATOR } from '../../utilities/keytips/KeytipConstants';\r\n\r\nexport interface IKeytipLayerState {\r\n  inKeytipMode: boolean;\r\n  keytips: IKeytipProps[];\r\n  visibleKeytips: IKeytipProps[];\r\n}\r\n\r\n// Default sequence is Alt-Windows (Alt-Meta) in Windows, Option-Control (Alt-Control) in Mac\r\nconst defaultStartSequence: IKeytipTransitionKey = {\r\n  key: isMac() ? 'Control' : 'Meta',\r\n  modifierKeys: [KeytipTransitionModifier.alt]\r\n};\r\n\r\n// Default exit sequence is the same as the start sequence\r\nconst defaultExitSequence: IKeytipTransitionKey = defaultStartSequence;\r\n\r\n// Default return sequence is Escape\r\nconst defaultReturnSequence: IKeytipTransitionKey = {\r\n  key: 'Escape'\r\n};\r\n\r\nconst getClassNames = classNamesFunction<IKeytipLayerStyleProps, IKeytipLayerStyles>();\r\n\r\n/**\r\n * A layer that holds all keytip items\r\n */\r\nexport class KeytipLayerBase extends BaseComponent<IKeytipLayerProps, IKeytipLayerState> {\r\n  public static defaultProps: IKeytipLayerProps = {\r\n    keytipStartSequences: [defaultStartSequence],\r\n    keytipExitSequences: [defaultExitSequence],\r\n    keytipReturnSequences: [defaultReturnSequence],\r\n    content: ''\r\n  };\r\n\r\n  private _keytipTree: KeytipTree;\r\n\r\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\r\n  private _classNames: { [key in keyof IKeytipLayerStyles]: string };\r\n  private _currentSequence: string;\r\n  private _newCurrentKeytipSequences?: string[];\r\n\r\n  private _delayedKeytipQueue: string[] = [];\r\n  private _delayedQueueTimeout: number;\r\n\r\n  private _keyHandled = false;\r\n\r\n  // tslint:disable-next-line:no-any\r\n  constructor(props: IKeytipLayerProps, context: any) {\r\n    super(props, context);\r\n\r\n    const managerKeytips = [...this._keytipManager.getKeytips()];\r\n    this.state = {\r\n      inKeytipMode: false,\r\n      // Get the initial set of keytips\r\n      keytips: managerKeytips,\r\n      visibleKeytips: this._getVisibleKeytips(managerKeytips)\r\n    };\r\n\r\n    this._keytipTree = new KeytipTree();\r\n    // Add regular and persisted keytips to the tree\r\n    for (const uniqueKeytip of this._keytipManager.keytips.concat(this._keytipManager.persistedKeytips)) {\r\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\r\n    }\r\n\r\n    this._currentSequence = '';\r\n\r\n    // Add keytip listeners\r\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_ADDED, this._onKeytipAdded);\r\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_UPDATED, this._onKeytipUpdated);\r\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_REMOVED, this._onKeytipRemoved);\r\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_ADDED, this._onPersistedKeytipAdded);\r\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_REMOVED, this._onPersistedKeytipRemoved);\r\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, this._onPersistedKeytipExecute);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { content, styles } = this.props;\r\n\r\n    const { keytips, visibleKeytips } = this.state;\r\n\r\n    this._classNames = getClassNames(styles, {});\r\n\r\n    return (\r\n      <Layer styles={getLayerStyles}>\r\n        <span id={KTP_LAYER_ID} className={this._classNames.innerContent}>{`${content}${KTP_ARIA_SEPARATOR}`}</span>\r\n        {keytips &&\r\n          keytips.map((keytipProps: IKeytipProps, index: number) => {\r\n            return (\r\n              <span key={index} id={sequencesToID(keytipProps.keySequences)} className={this._classNames.innerContent}>\r\n                {keytipProps.keySequences.join(KTP_ARIA_SEPARATOR)}\r\n              </span>\r\n            );\r\n          })}\r\n        {visibleKeytips &&\r\n          visibleKeytips.map((visibleKeytipProps: IKeytipProps) => {\r\n            return <Keytip key={sequencesToID(visibleKeytipProps.keySequences)} {...visibleKeytipProps} />;\r\n          })}\r\n      </Layer>\r\n    );\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    // Add window listeners\r\n    this._events.on(window, 'mouseup', this._onDismiss, true /* useCapture */);\r\n    this._events.on(window, 'pointerup', this._onDismiss, true /* useCapture */);\r\n    this._events.on(window, 'resize', this._onDismiss);\r\n    this._events.on(window, 'keydown', this._onKeyDown, true /* useCapture */);\r\n    this._events.on(window, 'keypress', this._onKeyPress, true /* useCapture */);\r\n    this._events.on(window, 'scroll', this._onDismiss, true /* useCapture */);\r\n\r\n    // Add keytip listeners\r\n    this._events.on(this._keytipManager, KeytipEvents.ENTER_KEYTIP_MODE, this._enterKeytipMode);\r\n    this._events.on(this._keytipManager, KeytipEvents.EXIT_KEYTIP_MODE, this._exitKeytipMode);\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    // Remove window listeners\r\n    this._events.off(window, 'mouseup', this._onDismiss, true /* useCapture */);\r\n    this._events.off(window, 'pointerup', this._onDismiss, true /* useCapture */);\r\n    this._events.off(window, 'resize', this._onDismiss);\r\n    this._events.off(window, 'keydown', this._onKeyDown, true /* useCapture */);\r\n    this._events.off(window, 'keypress', this._onKeyPress, true /* useCapture */);\r\n    this._events.off(window, 'scroll', this._onDismiss, true /* useCapture */);\r\n\r\n    // Remove keytip listeners\r\n    this._events.off(this._keytipManager, KeytipEvents.KEYTIP_ADDED, this._onKeytipAdded);\r\n    this._events.off(this._keytipManager, KeytipEvents.KEYTIP_UPDATED, this._onKeytipUpdated);\r\n    this._events.off(this._keytipManager, KeytipEvents.KEYTIP_REMOVED, this._onKeytipRemoved);\r\n    this._events.off(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_ADDED, this._onPersistedKeytipAdded);\r\n    this._events.off(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_REMOVED, this._onPersistedKeytipRemoved);\r\n    this._events.off(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, this._onPersistedKeytipExecute);\r\n    this._events.off(this._keytipManager, KeytipEvents.ENTER_KEYTIP_MODE, this._enterKeytipMode);\r\n    this._events.off(this._keytipManager, KeytipEvents.EXIT_KEYTIP_MODE, this._exitKeytipMode);\r\n  }\r\n\r\n  // The below public functions are only public for testing purposes\r\n  // They are not intended to be used in app code by using a KeytipLayer reference\r\n\r\n  public getCurrentSequence(): string {\r\n    return this._currentSequence;\r\n  }\r\n\r\n  public getKeytipTree(): KeytipTree {\r\n    return this._keytipTree;\r\n  }\r\n\r\n  /**\r\n   * Processes an IKeytipTransitionKey entered by the user\r\n   *\r\n   * @param transitionKey - IKeytipTransitionKey received by the layer to process\r\n   */\r\n  public processTransitionInput(transitionKey: IKeytipTransitionKey, ev?: React.KeyboardEvent<HTMLElement>): void {\r\n    const currKtp = this._keytipTree.currentKeytip;\r\n    if (transitionKeysContain(this.props.keytipExitSequences!, transitionKey) && currKtp) {\r\n      // If key sequence is in 'exit sequences', exit keytip mode\r\n      this._keyHandled = true;\r\n      this._exitKeytipMode(ev);\r\n    } else if (transitionKeysContain(this.props.keytipReturnSequences!, transitionKey)) {\r\n      // If key sequence is in return sequences, move currentKeytip to parent (or if currentKeytip is the root, exit)\r\n      if (currKtp) {\r\n        this._keyHandled = true;\r\n        if (currKtp.id === this._keytipTree.root.id) {\r\n          // We are at the root, exit keytip mode\r\n          this._exitKeytipMode(ev);\r\n        } else {\r\n          // If this keytip has a onReturn prop, we execute the func.\r\n          if (currKtp.onReturn) {\r\n            currKtp.onReturn(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\r\n          }\r\n\r\n          // Reset currentSequence\r\n          this._currentSequence = '';\r\n          // Return pointer to its parent\r\n          this._keytipTree.currentKeytip = this._keytipTree.getNode(currKtp.parent);\r\n          // Show children keytips of the new currentKeytip\r\n          this.showKeytips(this._keytipTree.getChildren());\r\n          this._warnIfDuplicateKeytips();\r\n        }\r\n      }\r\n    } else if (transitionKeysContain(this.props.keytipStartSequences!, transitionKey) && !currKtp) {\r\n      // If key sequence is in 'entry sequences' and currentKeytip is null, we enter keytip mode\r\n      this._keyHandled = true;\r\n      this._enterKeytipMode();\r\n      this._warnIfDuplicateKeytips();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Processes inputs from the document listener and traverse the keytip tree\r\n   *\r\n   * @param key - Key pressed by the user\r\n   */\r\n  public processInput(key: string, ev?: React.KeyboardEvent<HTMLElement>): void {\r\n    // Concat the input key with the current sequence\r\n    const currSequence: string = this._currentSequence + key;\r\n    let currKtp = this._keytipTree.currentKeytip;\r\n\r\n    // currentKeytip must be defined, otherwise we haven't entered keytip mode yet\r\n    if (currKtp) {\r\n      const node = this._keytipTree.getExactMatchedNode(currSequence, currKtp);\r\n      if (node) {\r\n        this._keytipTree.currentKeytip = currKtp = node;\r\n        const currKtpChildren = this._keytipTree.getChildren();\r\n\r\n        // Execute this node's onExecute if defined\r\n        if (currKtp.onExecute) {\r\n          currKtp.onExecute(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\r\n          // Reset currKtp, this might have changed from the onExecute\r\n          currKtp = this._keytipTree.currentKeytip;\r\n        }\r\n\r\n        // To exit keytipMode after executing the keytip it must not have a menu or have dynamic children\r\n        if (currKtpChildren.length === 0 && !(currKtp.hasDynamicChildren || currKtp.hasMenu)) {\r\n          this._exitKeytipMode(ev);\r\n        } else {\r\n          // Show all children keytips\r\n          this.showKeytips(currKtpChildren);\r\n          this._warnIfDuplicateKeytips();\r\n        }\r\n\r\n        // Clear currentSequence\r\n        this._currentSequence = '';\r\n        return;\r\n      }\r\n\r\n      const partialNodes = this._keytipTree.getPartiallyMatchedNodes(currSequence, currKtp);\r\n      if (partialNodes.length > 0) {\r\n        // We found nodes that partially match the sequence, so we show only those\r\n        // Omit showing persisted nodes here\r\n        const ids = partialNodes\r\n          .filter((partialNode: IKeytipTreeNode) => {\r\n            return !partialNode.persisted;\r\n          })\r\n          .map((partialNode: IKeytipTreeNode) => {\r\n            return partialNode.id;\r\n          });\r\n        this.showKeytips(ids);\r\n\r\n        // Save currentSequence\r\n        this._currentSequence = currSequence;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show the given keytips and hide all others\r\n   *\r\n   * @param ids - Keytip IDs to show\r\n   */\r\n  public showKeytips(ids: string[]): void {\r\n    // Update the visible prop in the manager\r\n    for (const keytip of this._keytipManager.getKeytips()) {\r\n      const keytipId = sequencesToID(keytip.keySequences);\r\n      if (ids.indexOf(keytipId) >= 0) {\r\n        keytip.visible = true;\r\n      } else if (\r\n        keytip.overflowSetSequence &&\r\n        ids.indexOf(sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence))) >= 0\r\n      ) {\r\n        // Check if the ID with the overflow is the keytip we're looking for\r\n        keytip.visible = true;\r\n      } else {\r\n        keytip.visible = false;\r\n      }\r\n    }\r\n    // Apply the manager changes to the Layer state\r\n    this._setKeytips();\r\n  }\r\n\r\n  /**\r\n   * Enters keytip mode for this layer\r\n   */\r\n  private _enterKeytipMode(): void {\r\n    if (this._keytipManager.shouldEnterKeytipMode) {\r\n      this._keytipTree.currentKeytip = this._keytipTree.root;\r\n      // Show children of root\r\n      this.showKeytips(this._keytipTree.getChildren());\r\n\r\n      this._setInKeytipMode(true /* inKeytipMode */);\r\n\r\n      if (this.props.onEnterKeytipMode) {\r\n        this.props.onEnterKeytipMode();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exits keytip mode for this layer\r\n   */\r\n  private _exitKeytipMode(ev?: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\r\n    this._keytipTree.currentKeytip = undefined;\r\n    this._currentSequence = '';\r\n    // Hide all keytips\r\n    this.showKeytips([]);\r\n\r\n    // Reset the delayed keytips if any\r\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\r\n    this._delayedKeytipQueue = [];\r\n\r\n    this._setInKeytipMode(false /* inKeytipMode */);\r\n\r\n    if (this.props.onExitKeytipMode) {\r\n      this.props.onExitKeytipMode(ev);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the keytips state property\r\n   *\r\n   * @param keytipProps - Keytips to set in this layer\r\n   */\r\n  private _setKeytips(keytipProps: IKeytipProps[] = this._keytipManager.getKeytips()) {\r\n    this.setState({ keytips: keytipProps, visibleKeytips: this._getVisibleKeytips(keytipProps) });\r\n  }\r\n\r\n  /**\r\n   * Callback function to use for persisted keytips\r\n   *\r\n   * @param overflowButtonSequences - The overflow button sequence to execute\r\n   * @param keytipSequences - The keytip that should become the 'currentKeytip' when it is registered\r\n   */\r\n  private _persistedKeytipExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\r\n    // Save newCurrentKeytip for later\r\n    this._newCurrentKeytipSequences = keytipSequences;\r\n\r\n    // Execute the overflow button's onExecute\r\n    const overflowKeytipNode = this._keytipTree.getNode(sequencesToID(overflowButtonSequences));\r\n    if (overflowKeytipNode && overflowKeytipNode.onExecute) {\r\n      overflowKeytipNode.onExecute(this._getKtpExecuteTarget(overflowKeytipNode), this._getKtpTarget(overflowKeytipNode));\r\n    }\r\n  }\r\n\r\n  private _getVisibleKeytips(keytips: IKeytipProps[]): IKeytipProps[] {\r\n    // Filter out non-visible keytips and duplicates\r\n    const seenIds: { [childSequence: string]: number } = {};\r\n    return keytips.filter(keytip => {\r\n      const keytipId = sequencesToID(keytip.keySequences);\r\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\r\n      return keytip.visible && seenIds[keytipId] === 1;\r\n    });\r\n  }\r\n\r\n  private _onDismiss = (ev?: React.MouseEvent<HTMLElement>): void => {\r\n    // if we are in keytip mode, then exit keytip mode\r\n    if (this.state.inKeytipMode) {\r\n      this._exitKeytipMode(ev);\r\n    }\r\n  };\r\n\r\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\r\n    this._keyHandled = false;\r\n    // using key since which has been deprecated and key is now widely suporrted.\r\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\r\n    let key = ev.key;\r\n    switch (key) {\r\n      case 'Alt':\r\n        // ALT puts focus in the browser bar, so it should not be used as a key for keytips.\r\n        // It can be used as a modifier\r\n        break;\r\n      case 'Tab':\r\n      case 'Enter':\r\n      case 'Spacebar':\r\n      case ' ':\r\n      case 'ArrowUp':\r\n      case 'Up':\r\n      case 'ArrowDown':\r\n      case 'Down':\r\n      case 'ArrowLeft':\r\n      case 'Left':\r\n      case 'ArrowRight':\r\n      case 'Right':\r\n        if (this.state.inKeytipMode) {\r\n          this._keyHandled = true;\r\n          this._exitKeytipMode(ev);\r\n        }\r\n        break;\r\n      default:\r\n        // Special cases for browser-specific keys that are not at standard\r\n        // (according to http://www.w3.org/TR/uievents-key/#keys-navigation)\r\n        if (key === 'Esc') {\r\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\r\n          key = 'Escape';\r\n        } else if (key === 'OS' || key === 'Win') {\r\n          // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1232918\r\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\r\n          // and https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/16424492/\r\n          key = 'Meta';\r\n        }\r\n        const transitionKey: IKeytipTransitionKey = { key };\r\n        transitionKey.modifierKeys = this._getModifierKey(key, ev);\r\n        this.processTransitionInput(transitionKey, ev);\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the ModifierKeyCodes based on the keyboard event\r\n   *\r\n   * @param ev - React.KeyboardEvent\r\n   * @returns List of ModifierKeyCodes that were pressed\r\n   */\r\n  private _getModifierKey(key: string, ev: React.KeyboardEvent<HTMLElement>): KeytipTransitionModifier[] | undefined {\r\n    const modifierKeys = [];\r\n    if (ev.altKey && key !== 'Alt') {\r\n      modifierKeys.push(KeytipTransitionModifier.alt);\r\n    }\r\n    if (ev.ctrlKey && key !== 'Control') {\r\n      modifierKeys.push(KeytipTransitionModifier.ctrl);\r\n    }\r\n    if (ev.shiftKey && key !== 'Shift') {\r\n      modifierKeys.push(KeytipTransitionModifier.shift);\r\n    }\r\n    if (ev.metaKey && key !== 'Meta') {\r\n      modifierKeys.push(KeytipTransitionModifier.meta);\r\n    }\r\n    return modifierKeys.length ? modifierKeys : undefined;\r\n  }\r\n\r\n  private _onKeyPress = (ev: React.KeyboardEvent<HTMLElement>): void => {\r\n    if (this.state.inKeytipMode && !this._keyHandled) {\r\n      // Call processInput\r\n      this.processInput(ev.key.toLocaleLowerCase(), ev);\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    }\r\n  };\r\n\r\n  private _onKeytipAdded = (eventArgs: any) => {\r\n    const keytipProps = eventArgs.keytip;\r\n    const uniqueID = eventArgs.uniqueID;\r\n\r\n    this._keytipTree.addNode(keytipProps, uniqueID);\r\n    this._setKeytips();\r\n\r\n    // Add the keytip to the queue to show later\r\n    if (this._keytipTree.isCurrentKeytipParent(keytipProps)) {\r\n      this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\r\n    }\r\n\r\n    if (this._newCurrentKeytipSequences && arraysEqual(keytipProps.keySequences, this._newCurrentKeytipSequences)) {\r\n      this._triggerKeytipImmediately(keytipProps);\r\n    }\r\n\r\n    if (this._isCurrentKeytipAnAlias(keytipProps)) {\r\n      let keytipSequence = keytipProps.keySequences;\r\n      if (keytipProps.overflowSetSequence) {\r\n        keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\r\n      }\r\n      this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\r\n    }\r\n  };\r\n\r\n  private _onKeytipUpdated = (eventArgs: any) => {\r\n    const keytipProps = eventArgs.keytip;\r\n    const uniqueID = eventArgs.uniqueID;\r\n    this._keytipTree.updateNode(keytipProps, uniqueID);\r\n    this._setKeytips();\r\n  };\r\n\r\n  private _onKeytipRemoved = (eventArgs: any) => {\r\n    const keytipProps = eventArgs.keytip;\r\n    const uniqueID = eventArgs.uniqueID;\r\n\r\n    // Remove keytip from the delayed queue\r\n    this._removeKeytipFromQueue(sequencesToID(keytipProps.keySequences));\r\n\r\n    // Remove the node from the Tree\r\n    this._keytipTree.removeNode(keytipProps, uniqueID);\r\n    this._setKeytips();\r\n  };\r\n\r\n  private _onPersistedKeytipAdded = (eventArgs: any) => {\r\n    const keytipProps = eventArgs.keytip;\r\n    const uniqueID = eventArgs.uniqueID;\r\n    this._keytipTree.addNode(keytipProps, uniqueID, true);\r\n  };\r\n\r\n  private _onPersistedKeytipRemoved = (eventArgs: any) => {\r\n    const keytipProps = eventArgs.keytip;\r\n    const uniqueID = eventArgs.uniqueID;\r\n    this._keytipTree.removeNode(keytipProps, uniqueID);\r\n  };\r\n\r\n  private _onPersistedKeytipExecute = (eventArgs: any) => {\r\n    this._persistedKeytipExecute(eventArgs.overflowButtonSequences, eventArgs.keytipSequences);\r\n  };\r\n\r\n  /**\r\n   * Trigger a keytip immediately and set it as the current keytip\r\n   *\r\n   * @param keytipProps - Keytip to trigger immediately\r\n   */\r\n  private _triggerKeytipImmediately(keytipProps: IKeytipProps) {\r\n    // This keytip should become the currentKeytip and should execute right away\r\n    let keytipSequence = [...keytipProps.keySequences];\r\n    if (keytipProps.overflowSetSequence) {\r\n      keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\r\n    }\r\n\r\n    // Set currentKeytip\r\n    this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\r\n    if (this._keytipTree.currentKeytip) {\r\n      // Show all children keytips if any\r\n      const children = this._keytipTree.getChildren();\r\n      if (children.length) {\r\n        this.showKeytips(children);\r\n      }\r\n\r\n      if (this._keytipTree.currentKeytip.onExecute) {\r\n        this._keytipTree.currentKeytip.onExecute(\r\n          this._getKtpExecuteTarget(this._keytipTree.currentKeytip),\r\n          this._getKtpTarget(this._keytipTree.currentKeytip)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Unset _newCurrKtpSequences\r\n    this._newCurrentKeytipSequences = undefined;\r\n  }\r\n\r\n  private _addKeytipToQueue(keytipID: string) {\r\n    // Add keytip\r\n    this._delayedKeytipQueue.push(keytipID);\r\n    // Clear timeout\r\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\r\n    // Reset timeout\r\n    this._delayedQueueTimeout = this._async.setTimeout(() => {\r\n      if (this._delayedKeytipQueue.length) {\r\n        this.showKeytips(this._delayedKeytipQueue);\r\n        this._delayedKeytipQueue = [];\r\n      }\r\n    }, 300);\r\n  }\r\n\r\n  private _removeKeytipFromQueue(keytipID: string) {\r\n    const index = this._delayedKeytipQueue.indexOf(keytipID);\r\n    if (index >= 0) {\r\n      // Remove keytip\r\n      this._delayedKeytipQueue.splice(index, 1);\r\n      // Clear timeout\r\n      this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\r\n      // Reset timeout\r\n      this._delayedQueueTimeout = this._async.setTimeout(() => {\r\n        if (this._delayedKeytipQueue.length) {\r\n          this.showKeytips(this._delayedKeytipQueue);\r\n          this._delayedKeytipQueue = [];\r\n        }\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  private _getKtpExecuteTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\r\n    return getDocument()!.querySelector(ktpTargetFromId(currKtp.id));\r\n  }\r\n\r\n  private _getKtpTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\r\n    return getDocument()!.querySelector(ktpTargetFromSequences(currKtp.keySequences));\r\n  }\r\n\r\n  /**\r\n   * Returns T/F if the keytipProps keySequences match the currentKeytip, and the currentKeytip is in an overflow well\r\n   * This will make 'keytipProps' the new currentKeytip\r\n   *\r\n   * @param keytipProps - Keytip props to check\r\n   * @returns - T/F if this keytip should become the currentKeytip\r\n   */\r\n  private _isCurrentKeytipAnAlias(keytipProps: IKeytipProps): boolean {\r\n    const currKtp = this._keytipTree.currentKeytip;\r\n    if (currKtp && (currKtp.overflowSetSequence || currKtp.persisted) && arraysEqual(keytipProps.keySequences, currKtp.keySequences)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sets if we are in keytip mode.\r\n   * Note, this sets both the state for the layer as well as\r\n   * the value that the manager will expose externally.\r\n   * @param inKeytipMode - Boolean so set whether we are in keytip mode or not\r\n   */\r\n  private _setInKeytipMode = (inKeytipMode: boolean): void => {\r\n    this.setState({ inKeytipMode: inKeytipMode });\r\n    this._keytipManager.inKeytipMode = inKeytipMode;\r\n  };\r\n\r\n  /**\r\n   * Emits a warning if duplicate keytips are found for the children of the current keytip\r\n   */\r\n  private _warnIfDuplicateKeytips = (): void => {\r\n    const duplicateKeytips = this._getDuplicateIds(this._keytipTree.getChildren());\r\n    if (duplicateKeytips.length) {\r\n      warn('Duplicate keytips found for ' + duplicateKeytips.join(', '));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns duplicates among keytip IDs\r\n   * If the returned array is empty, no duplicates were found\r\n   *\r\n   * @param keytipIds - Array of keytip IDs to find duplicates for\r\n   * @returns - Array of duplicates that were found. If multiple duplicates were found it will only be added once to this array\r\n   */\r\n  private _getDuplicateIds = (keytipIds: string[]): string[] => {\r\n    const seenIds: { [id: string]: number } = {};\r\n    return keytipIds.filter(keytipId => {\r\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\r\n      // Only add the first duplicate keytip seen\r\n      return seenIds[keytipId] === 2;\r\n    });\r\n  };\r\n}\r\n"]}