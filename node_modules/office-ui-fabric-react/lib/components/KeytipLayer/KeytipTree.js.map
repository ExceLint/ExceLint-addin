{"version":3,"file":"KeytipTree.js","sourceRoot":"../src/","sources":["components/KeytipLayer/KeytipTree.ts"],"names":[],"mappings":"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","sourcesContent":["import { find, values } from '../../Utilities';\r\nimport { IKeytipProps } from '../../Keytip';\r\nimport { IKeytipTreeNode } from './IKeytipTreeNode';\r\nimport { mergeOverflows, sequencesToID } from '../../utilities/keytips/KeytipUtils';\r\nimport { KTP_LAYER_ID } from '../../utilities/keytips/KeytipConstants';\r\n\r\n/**\r\n * This class is responsible for handling the parent/child relationships between keytips\r\n */\r\nexport class KeytipTree {\r\n  public currentKeytip?: IKeytipTreeNode;\r\n  public root: IKeytipTreeNode;\r\n  public nodeMap: { [nodeId: string]: IKeytipTreeNode } = {};\r\n\r\n  /**\r\n   * KeytipTree constructor\r\n   */\r\n  constructor() {\r\n    // Root has no keytipSequence\r\n    this.root = {\r\n      id: KTP_LAYER_ID,\r\n      children: [],\r\n      parent: '',\r\n      keySequences: []\r\n    };\r\n    this.nodeMap[this.root.id] = this.root;\r\n  }\r\n\r\n  /**\r\n   * Add a keytip node to this KeytipTree\r\n   *\r\n   * @param keytipProps - Keytip to add to the Tree\r\n   * @param uniqueID - Unique ID for this keytip\r\n   * @param persisted - T/F if this keytip should be marked as persisted\r\n   */\r\n  public addNode(keytipProps: IKeytipProps, uniqueID: string, persisted?: boolean): void {\r\n    const fullSequence = this._getFullSequence(keytipProps);\r\n    const nodeID = sequencesToID(fullSequence);\r\n\r\n    // Take off the last item to calculate the parent sequence\r\n    fullSequence.pop();\r\n    // Parent ID is the root if there aren't any more sequences\r\n    const parentID = this._getParentID(fullSequence);\r\n\r\n    // Create node and add to map\r\n    const node = this._createNode(nodeID, parentID, [], keytipProps, persisted);\r\n    this.nodeMap[uniqueID] = node;\r\n\r\n    // Try to add self to parents children, if they exist\r\n    const parent = this.getNode(parentID);\r\n    if (parent) {\r\n      parent.children.push(nodeID);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a node in the tree\r\n   *\r\n   * @param keytipProps - Keytip props to update\r\n   * @param uniqueID - Unique ID for this keytip\r\n   */\r\n  public updateNode(keytipProps: IKeytipProps, uniqueID: string): void {\r\n    const fullSequence = this._getFullSequence(keytipProps);\r\n    const nodeID = sequencesToID(fullSequence);\r\n\r\n    // Take off the last item to calculate the parent sequence\r\n    fullSequence.pop();\r\n    // Parent ID is the root if there aren't any more sequences\r\n    const parentID = this._getParentID(fullSequence);\r\n    const node = this.nodeMap[uniqueID];\r\n    if (node) {\r\n      // Update values\r\n      node.id = nodeID;\r\n      node.keySequences = keytipProps.keySequences;\r\n      node.overflowSetSequence = keytipProps.overflowSetSequence;\r\n      node.onExecute = keytipProps.onExecute;\r\n      node.onReturn = keytipProps.onReturn;\r\n      node.hasDynamicChildren = keytipProps.hasDynamicChildren;\r\n      node.hasMenu = keytipProps.hasMenu;\r\n      node.parent = parentID;\r\n      node.disabled = keytipProps.disabled;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a node from the KeytipTree\r\n   *\r\n   * @param sequence - full string of the node to remove\r\n   */\r\n  public removeNode(keytipProps: IKeytipProps, uniqueID: string): void {\r\n    const fullSequence = this._getFullSequence(keytipProps);\r\n    const nodeID = sequencesToID(fullSequence);\r\n\r\n    // Take off the last sequence to calculate the parent ID\r\n    fullSequence.pop();\r\n\r\n    // Parent ID is the root if there aren't any more sequences\r\n    const parentID = this._getParentID(fullSequence);\r\n    const parent = this.getNode(parentID);\r\n    if (parent) {\r\n      // Remove node from its parent's children\r\n      parent.children.splice(parent.children.indexOf(nodeID), 1);\r\n    }\r\n\r\n    if (this.nodeMap[uniqueID]) {\r\n      // Remove the node from the nodeMap\r\n      delete this.nodeMap[uniqueID];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Searches the currentKeytip's children to exactly match a sequence. Will not match disabled nodes but\r\n   * will match persisted nodes\r\n   *\r\n   * @param keySequence - string to match\r\n   * @param currentKeytip - The keytip whose children will try to match\r\n   * @returns The node that exactly matched the keySequence, or undefined if none matched\r\n   */\r\n  public getExactMatchedNode(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode | undefined {\r\n    const possibleNodes = this.getNodes(currentKeytip.children);\r\n    return find(possibleNodes, (node: IKeytipTreeNode) => {\r\n      return this._getNodeSequence(node) === keySequence && !node.disabled;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Searches the currentKeytip's children to find nodes that start with the given sequence. Will not match\r\n   * disabled nodes but will match persisted nodes\r\n   *\r\n   * @param keySequence - string to partially match\r\n   * @param currentKeytip - The keytip whose children will try to partially match\r\n   * @returns List of tree nodes that partially match the given sequence\r\n   */\r\n  public getPartiallyMatchedNodes(keySequence: string, currentKeytip: IKeytipTreeNode): IKeytipTreeNode[] {\r\n    // Get children that are persisted\r\n    const possibleNodes = this.getNodes(currentKeytip.children);\r\n    return possibleNodes.filter((node: IKeytipTreeNode) => {\r\n      return this._getNodeSequence(node).indexOf(keySequence) === 0 && !node.disabled;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the non-persisted children of the give node\r\n   * If no node is given, will use the 'currentKeytip'\r\n   *\r\n   * @param node - Node to get the children for\r\n   * @returns List of node IDs that are the children of the node\r\n   */\r\n  public getChildren(node?: IKeytipTreeNode): string[] {\r\n    if (!node) {\r\n      node = this.currentKeytip;\r\n      if (!node) {\r\n        return [];\r\n      }\r\n    }\r\n    const children = node.children;\r\n    return Object.keys(this.nodeMap).reduce((nodes: string[], key: string): string[] => {\r\n      if (children.indexOf(this.nodeMap[key].id) >= 0 && !this.nodeMap[key].persisted) {\r\n        nodes.push(this.nodeMap[key].id);\r\n      }\r\n      return nodes;\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Gets all nodes from their IDs\r\n   *\r\n   * @param ids List of keytip IDs\r\n   * @returns Array of nodes that match the given IDs, can be empty\r\n   */\r\n  public getNodes(ids: string[]): IKeytipTreeNode[] {\r\n    return Object.keys(this.nodeMap).reduce((nodes: IKeytipTreeNode[], key: string): IKeytipTreeNode[] => {\r\n      if (ids.indexOf(this.nodeMap[key].id) >= 0) {\r\n        nodes.push(this.nodeMap[key]);\r\n      }\r\n      return nodes;\r\n    }, []);\r\n  }\r\n\r\n  /**\r\n   * Gets a single node from its ID\r\n   *\r\n   * @param id - ID of the node to get\r\n   * @returns Node with the given ID, if found\r\n   */\r\n  public getNode(id: string): IKeytipTreeNode | undefined {\r\n    const nodeMapValues = values<IKeytipTreeNode>(this.nodeMap);\r\n    return find(\r\n      nodeMapValues,\r\n      (node: IKeytipTreeNode): boolean => {\r\n        return node.id === id;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Tests if the currentKeytip in this.keytipTree is the parent of 'keytipProps'\r\n   *\r\n   * @param keytipProps - Keytip to test the parent for\r\n   * @returns T/F if the currentKeytip is this keytipProps' parent\r\n   */\r\n  public isCurrentKeytipParent(keytipProps: IKeytipProps): boolean {\r\n    if (this.currentKeytip) {\r\n      let fullSequence = [...keytipProps.keySequences];\r\n      if (keytipProps.overflowSetSequence) {\r\n        fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\r\n      }\r\n      // Take off the last sequence to calculate the parent ID\r\n      fullSequence.pop();\r\n      // Parent ID is the root if there aren't any more sequences\r\n      const parentID = fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\r\n      let matchesCurrWithoutOverflow = false;\r\n      if (this.currentKeytip.overflowSetSequence) {\r\n        const currKeytipIdWithoutOverflow = sequencesToID(this.currentKeytip.keySequences);\r\n        matchesCurrWithoutOverflow = currKeytipIdWithoutOverflow === parentID;\r\n      }\r\n      return matchesCurrWithoutOverflow || this.currentKeytip.id === parentID;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private _getParentID(fullSequence: string[]): string {\r\n    return fullSequence.length === 0 ? this.root.id : sequencesToID(fullSequence);\r\n  }\r\n\r\n  private _getFullSequence(keytipProps: IKeytipProps): string[] {\r\n    let fullSequence = [...keytipProps.keySequences];\r\n    if (keytipProps.overflowSetSequence) {\r\n      fullSequence = mergeOverflows(fullSequence, keytipProps.overflowSetSequence);\r\n    }\r\n    return fullSequence;\r\n  }\r\n\r\n  private _getNodeSequence(node: IKeytipTreeNode): string {\r\n    let fullSequence = [...node.keySequences];\r\n    if (node.overflowSetSequence) {\r\n      fullSequence = mergeOverflows(fullSequence, node.overflowSetSequence);\r\n    }\r\n    return fullSequence[fullSequence.length - 1];\r\n  }\r\n\r\n  private _createNode(id: string, parentId: string, children: string[], keytipProps: IKeytipProps, persisted?: boolean): IKeytipTreeNode {\r\n    const { keySequences, hasDynamicChildren, overflowSetSequence, hasMenu, onExecute, onReturn, disabled } = keytipProps;\r\n    const node = {\r\n      id,\r\n      keySequences,\r\n      overflowSetSequence,\r\n      parent: parentId,\r\n      children,\r\n      onExecute,\r\n      onReturn,\r\n      hasDynamicChildren,\r\n      hasMenu,\r\n      disabled,\r\n      persisted\r\n    };\r\n    node.children = Object.keys(this.nodeMap).reduce((array: string[], nodeMapKey: string): string[] => {\r\n      if (this.nodeMap[nodeMapKey].parent === id) {\r\n        array.push(this.nodeMap[nodeMapKey].id);\r\n      }\r\n      return array;\r\n    }, []);\r\n    return node;\r\n  }\r\n}\r\n"]}