{"version":3,"file":"Announced.LazyLoading.Example.js","sourceRoot":"../src/","sources":["components/Announced/examples/Announced.LazyLoading.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Announced } from '../Announced';\r\nimport { createArray, createRef } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { Image } from 'office-ui-fabric-react/lib/Image';\r\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\r\nimport { Text } from 'office-ui-fabric-react/lib/Text';\r\nimport { IStackTokens, Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\r\nimport { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';\r\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\r\nimport './Announced.Example.scss';\r\n\r\nconst DELAY = 10;\r\n\r\nexport interface IAnnouncedLazyLoadingExampleState {\r\n  photos: { url: string; width: number; height: number }[];\r\n  total: number;\r\n  announced?: JSX.Element;\r\n  percentComplete: number;\r\n  loading: boolean;\r\n  complete: boolean;\r\n  timeSinceLastAnnounce: number;\r\n}\r\n\r\nexport interface IAnnouncedLazyLoadingExampleProps {}\r\n\r\nexport class AnnouncedLazyLoadingExample extends React.Component<IAnnouncedLazyLoadingExampleProps, IAnnouncedLazyLoadingExampleState> {\r\n  private _root = createRef<HTMLElement>();\r\n  private timer: number;\r\n  private increaseTotal: number;\r\n  private _async: Async;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this._async = new Async(this);\r\n\r\n    this.state = {\r\n      photos: this._createPhotos(),\r\n      total: 0,\r\n      announced: undefined,\r\n      percentComplete: 0,\r\n      loading: false,\r\n      complete: false,\r\n      timeSinceLastAnnounce: 0\r\n    };\r\n\r\n    this._renderPhotos = this._renderPhotos.bind(this);\r\n    this._renderAnnounced = this._renderAnnounced.bind(this);\r\n    this._onToggleChange = this._onToggleChange.bind(this);\r\n\r\n    this.increaseTotal = this._async.setInterval(() => {\r\n      if (this.state.loading && this.state.total < this.state.photos.length) {\r\n        this.setState({ total: this.state.total + 1 });\r\n      } else if (this.state.total === this.state.photos.length && this.state.complete !== true) {\r\n        this.setState({ complete: true, announced: undefined });\r\n      }\r\n    }, 2000);\r\n\r\n    this.timer = this._async.setInterval(() => {\r\n      if (this.state.loading && !this.state.complete) {\r\n        this.setState({ timeSinceLastAnnounce: this.state.timeSinceLastAnnounce + 1 });\r\n\r\n        if (this.state.timeSinceLastAnnounce === DELAY || this.state.percentComplete === 1) {\r\n          this.setState({\r\n            announced: <Announced message={`${this.state.total} of ${this.state.photos.length} photos loaded`} />,\r\n            timeSinceLastAnnounce: 0\r\n          });\r\n        }\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { percentComplete } = this.state;\r\n    const stackTokens: IStackTokens = { childrenGap: 10 };\r\n\r\n    return (\r\n      <Stack tokens={stackTokens}>\r\n        <Text>\r\n          Turn on Narrator and check the toggle to start loading photos. Announced should announce the number of photos loaded every 10\r\n          seconds, as that is the delay chosen for this example.\r\n        </Text>\r\n        <Toggle label=\"Check to start loading photos\" onText=\"Start/Resume\" offText=\"Pause\" onChange={this._onToggleChange} />\r\n        <ProgressIndicator label={percentComplete < 1 ? 'Loading photos' : 'Finished loading photos'} percentComplete={percentComplete} />\r\n        {this._renderAnnounced()}\r\n        <FocusZone as=\"ul\" className=\"ms-AnnouncedExamples-photoList\">\r\n          {this._renderPhotos()}\r\n        </FocusZone>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    clearTimeout(this.timer);\r\n    clearTimeout(this.increaseTotal);\r\n  }\r\n\r\n  public componentDidUpdate(): void {\r\n    const percentComplete = this.state.total / this.state.photos.length;\r\n    if (percentComplete !== this.state.percentComplete && this.state.percentComplete < 1) {\r\n      this.setState({ percentComplete: percentComplete });\r\n    }\r\n  }\r\n\r\n  private _onToggleChange(): void {\r\n    this.setState({ loading: !this.state.loading });\r\n  }\r\n\r\n  private _renderAnnounced(): JSX.Element | undefined {\r\n    const { announced } = this.state;\r\n    return announced;\r\n  }\r\n\r\n  private _createPhotos(): { url: string; width: number; height: number }[] {\r\n    const width = 100;\r\n    const height = 100;\r\n\r\n    const result = createArray(30, () => {\r\n      return {\r\n        url: `http://placehold.it/${width}x${height}`,\r\n        width: width,\r\n        height: height\r\n      };\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private _renderPhotos(): JSX.Element[] {\r\n    const result = this.state.photos.map((photo: { url: string; width: number; height: number }, index: number) => (\r\n      <ul\r\n        key={index}\r\n        className=\"ms-AnnouncedExamples-photoCell\"\r\n        aria-posinset={index + 1}\r\n        aria-setsize={this.state.photos.length}\r\n        aria-label=\"Photo\"\r\n        data-is-focusable={true}\r\n        ref={this._root}\r\n      >\r\n        {this.state.total > index ? <Image src={photo.url} width={photo.width} height={photo.height} /> : <div />}\r\n      </ul>\r\n    ));\r\n\r\n    return result;\r\n  }\r\n}\r\n"]}