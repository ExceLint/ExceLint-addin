{"version":3,"file":"DocumentCardActivity.base.js","sourceRoot":"../src/","sources":["components/DocumentCard/DocumentCardActivity.base.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,aAAa,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAQpE,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,IAAM,aAAa,GAAG,kBAAkB,EAAgE,CAAC;AAEzG;IAA8C,oDAA8C;IAA5F;;IA6DA,CAAC;IA1DQ,yCAAM,GAAb;QACQ,IAAA,eAA2D,EAAzD,sBAAQ,EAAE,kBAAM,EAAE,kBAAM,EAAE,gBAAK,EAAE,wBAAS,CAAgB;QAElE,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;YACxC,KAAK,EAAE,KAAM;YACb,SAAS,WAAA;YACT,cAAc,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC;SAClC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC;SACb;QAED,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;YAClC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;YAC5B,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO;gBACtC,8BAAM,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,IAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAQ;gBAC5E,8BAAM,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAG,QAAQ,CAAQ,CACzD,CACF,CACP,CAAC;IACJ,CAAC;IAEO,iDAAc,GAAtB,UAAuB,MAAqC;QAC1D,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO;YACrC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;YACxD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAC1B,CACP,CAAC;IACJ,CAAC;IAEO,gDAAa,GAArB,UAAsB,MAAmC;QACvD,OAAO,CACL,6BAAK,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM;YACrC,oBAAC,WAAW,IACV,aAAa,EAAE,MAAM,CAAC,QAAQ,EAC9B,IAAI,EAAE,MAAM,CAAC,IAAI,EACjB,QAAQ,EAAE,MAAM,CAAC,eAAe,EAChC,aAAa,EAAE,MAAM,CAAC,aAAa,EACnC,kBAAkB,EAAE,MAAM,CAAC,kBAAkB,EAC7C,IAAI,EAAC,cAAc,EACnB,IAAI,EAAE,WAAW,CAAC,MAAM,GACxB,CACE,CACP,CAAC;IACJ,CAAC;IAEO,iDAAc,GAAtB,UAAuB,MAAqC;QAC1D,IAAI,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAEhC,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;YACtB,UAAU,IAAI,IAAI,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC1C;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IACH,+BAAC;AAAD,CAAC,AA7DD,CAA8C,aAAa,GA6D1D","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\r\nimport {\r\n  IDocumentCardActivityProps,\r\n  IDocumentCardActivityPerson,\r\n  IDocumentCardActivityStyleProps,\r\n  IDocumentCardActivityStyles\r\n} from './DocumentCardActivity.types';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport { PersonaSize } from '../../Persona';\r\nimport { PersonaCoin } from '../../PersonaCoin';\r\n\r\nconst getClassNames = classNamesFunction<IDocumentCardActivityStyleProps, IDocumentCardActivityStyles>();\r\n\r\nexport class DocumentCardActivityBase extends BaseComponent<IDocumentCardActivityProps, any> {\r\n  private _classNames: IProcessedStyleSet<IDocumentCardActivityStyles>;\r\n\r\n  public render(): JSX.Element | null {\r\n    const { activity, people, styles, theme, className } = this.props;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className,\r\n      multiplePeople: people.length > 1\r\n    });\r\n\r\n    if (!people || people.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className={this._classNames.root}>\r\n        {this._renderAvatars(people)}\r\n        <div className={this._classNames.details}>\r\n          <span className={this._classNames.name}>{this._getNameString(people)}</span>\r\n          <span className={this._classNames.activity}>{activity}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderAvatars(people: IDocumentCardActivityPerson[]): React.ReactElement<{}> {\r\n    return (\r\n      <div className={this._classNames.avatars}>\r\n        {people.length > 1 ? this._renderAvatar(people[1]) : null}\r\n        {this._renderAvatar(people[0])}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderAvatar(person: IDocumentCardActivityPerson): JSX.Element {\r\n    return (\r\n      <div className={this._classNames.avatar}>\r\n        <PersonaCoin\r\n          imageInitials={person.initials}\r\n          text={person.name}\r\n          imageUrl={person.profileImageSrc}\r\n          initialsColor={person.initialsColor}\r\n          allowPhoneInitials={person.allowPhoneInitials}\r\n          role=\"presentation\"\r\n          size={PersonaSize.size32}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getNameString(people: IDocumentCardActivityPerson[]): string {\r\n    let nameString = people[0].name;\r\n\r\n    if (people.length >= 2) {\r\n      nameString += ' +' + (people.length - 1);\r\n    }\r\n\r\n    return nameString;\r\n  }\r\n}\r\n"]}