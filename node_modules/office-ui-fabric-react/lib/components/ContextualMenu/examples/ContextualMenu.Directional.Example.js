import * as tslib_1 from "tslib";
import * as React from 'react';
import { DefaultButton } from 'office-ui-fabric-react/lib/Button';
import { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';
import { DirectionalHint, ContextualMenuItemType } from 'office-ui-fabric-react/lib/ContextualMenu';
import { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';
import { getRTL } from 'office-ui-fabric-react/lib/Utilities';
import './ContextualMenuExample.scss';
import * as exampleStylesImport from '../../../common/_exampleStyles.scss';
var exampleStyles = exampleStylesImport;
var DIRECTION_OPTIONS = [
    { key: DirectionalHint.topLeftEdge, text: 'Top Left Edge' },
    { key: DirectionalHint.topCenter, text: 'Top Center' },
    { key: DirectionalHint.topRightEdge, text: 'Top Right Edge' },
    { key: DirectionalHint.topAutoEdge, text: 'Top Auto Edge' },
    { key: DirectionalHint.bottomLeftEdge, text: 'Bottom Left Edge' },
    { key: DirectionalHint.bottomCenter, text: 'Bottom Center' },
    { key: DirectionalHint.bottomRightEdge, text: 'Bottom Right Edge' },
    { key: DirectionalHint.bottomAutoEdge, text: 'Bottom Auto Edge' },
    { key: DirectionalHint.leftTopEdge, text: 'Left Top Edge' },
    { key: DirectionalHint.leftCenter, text: 'Left Center' },
    { key: DirectionalHint.leftBottomEdge, text: 'Left Bottom Edge' },
    { key: DirectionalHint.rightTopEdge, text: 'Right Top Edge' },
    { key: DirectionalHint.rightCenter, text: 'Right Center' },
    { key: DirectionalHint.rightBottomEdge, text: 'Right Bottom Edge' }
];
var ContextualMenuDirectionalExample = /** @class */ (function (_super) {
    tslib_1.__extends(ContextualMenuDirectionalExample, _super);
    function ContextualMenuDirectionalExample(props) {
        var _this = _super.call(this, props) || this;
        _this._onShowBeakChange = function (event, isVisible) {
            _this.setState({
                isBeakVisible: isVisible
            });
        };
        _this._onUseRtlHintChange = function (event, isVisible) {
            _this.setState({
                useDirectionalHintForRtl: isVisible
            });
        };
        _this._onDirectionalChanged = function (event, option) {
            _this.setState({
                directionalHint: option.key
            });
        };
        _this._onDirectionalRtlChanged = function (event, option) {
            _this.setState({
                directionalHintForRTL: option.key
            });
        };
        _this.state = {
            isBeakVisible: false,
            directionalHint: DirectionalHint.bottomLeftEdge,
            directionalHintForRTL: DirectionalHint.bottomLeftEdge,
            useDirectionalHintForRtl: false,
            gapSpace: 0,
            beakWidth: 20,
            edgeFixed: false
        };
        return _this;
    }
    ContextualMenuDirectionalExample.prototype.render = function () {
        var _a = this.state, beakWidth = _a.beakWidth, directionalHint = _a.directionalHint, directionalHintForRTL = _a.directionalHintForRTL, edgeFixed = _a.edgeFixed, gapSpace = _a.gapSpace, isBeakVisible = _a.isBeakVisible, useDirectionalHintForRtl = _a.useDirectionalHintForRtl;
        return (React.createElement("div", { className: "ms-ContextualMenuDirectionalExample" },
            React.createElement("div", { className: "ms-ContextualMenuDirectionalExample-configArea" },
                React.createElement(Checkbox, { className: exampleStyles.exampleCheckbox, label: "Show beak", checked: isBeakVisible, onChange: this._onShowBeakChange }),
                React.createElement(Dropdown, { label: "Directional hint", selectedKey: directionalHint, options: DIRECTION_OPTIONS, onChange: this._onDirectionalChanged }),
                getRTL() && React.createElement(Checkbox, { label: "Use RTL directional hint", checked: useDirectionalHintForRtl, onChange: this._onUseRtlHintChange }),
                getRTL() && (React.createElement(Dropdown, { label: "Directional hint for RTL", selectedKey: directionalHintForRTL, options: DIRECTION_OPTIONS, onChange: this._onDirectionalRtlChanged, disabled: !useDirectionalHintForRtl }))),
            React.createElement("div", { className: "ms-ContextualMenuDirectionalExample-buttonArea" },
                React.createElement(DefaultButton, { text: "Show context menu", menuProps: {
                        isBeakVisible: isBeakVisible,
                        directionalHint: directionalHint,
                        directionalHintForRTL: useDirectionalHintForRtl ? directionalHintForRTL : undefined,
                        gapSpace: gapSpace,
                        beakWidth: beakWidth,
                        directionalHintFixed: edgeFixed,
                        items: [
                            {
                                key: 'newItem',
                                text: 'New'
                            },
                            {
                                key: 'divider_1',
                                itemType: ContextualMenuItemType.Divider
                            },
                            {
                                key: 'rename',
                                text: 'Rename'
                            },
                            {
                                key: 'edit',
                                text: 'Edit'
                            },
                            {
                                key: 'properties',
                                text: 'Properties'
                            },
                            {
                                key: 'disabled',
                                text: 'Disabled item',
                                disabled: true
                            }
                        ]
                    } }))));
    };
    return ContextualMenuDirectionalExample;
}(React.Component));
export { ContextualMenuDirectionalExample };
//# sourceMappingURL=ContextualMenu.Directional.Example.js.map