{"version":3,"file":"ContextualMenuItemWrapper.types.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuItemWrapper.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IContextualMenuItem, IContextualMenuItemProps } from '../../../ContextualMenu';\r\nimport { IMenuItemClassNames } from '../ContextualMenu.classNames';\r\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\r\nimport { IRefObject } from '../../../Utilities';\r\n\r\nexport interface IContextualMenuItemWrapperProps extends React.ClassAttributes<IContextualMenuItem> {\r\n  /**\r\n   * Optional callback to access the ContextualMenuSplitButton interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<ContextualMenuItemWrapper>;\r\n\r\n  /**\r\n   * The IContextualMenuItem that is used to render the item in the menu.\r\n   */\r\n  item: IContextualMenuItem;\r\n\r\n  /**\r\n   * CSS class to apply to the context menu.\r\n   */\r\n  classNames: IMenuItemClassNames;\r\n\r\n  /**\r\n   * The index number of the wrapper among all items in the contextual menu including things like dividers and headers.\r\n   */\r\n  index: number;\r\n\r\n  /**\r\n   * The index number of the wrapper among all items in the contextual menu excluding dividers and headers.\r\n   */\r\n  focusableElementIndex: number;\r\n\r\n  /**\r\n   * The total number of items in the contextual menu.\r\n   */\r\n  totalItemCount: number;\r\n\r\n  /**\r\n   * Whether or not if the item for the wrapper uses checkmarks.\r\n   */\r\n  hasCheckmarks?: boolean;\r\n\r\n  /**\r\n   * Whether or not the item for the wrapper uses icons.\r\n   */\r\n  hasIcons?: boolean;\r\n\r\n  /**\r\n   * Method to override the render of the individual menu items.\r\n   * @defaultvalue ContextualMenuItem\r\n   */\r\n  contextualMenuItemAs?: React.ComponentClass<IContextualMenuItemProps> | React.StatelessComponent<IContextualMenuItemProps>;\r\n\r\n  /**\r\n   * Callback for when the user's mouse enters the wrapper.\r\n   */\r\n  onItemMouseEnter?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>, target: HTMLElement) => boolean | void;\r\n\r\n  /**\r\n   * Callback for when the user's mouse leaves the wrapper.\r\n   */\r\n  onItemMouseLeave?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback for when the user's mouse moves in the wrapper.\r\n   */\r\n  onItemMouseMove?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>, target: HTMLElement) => void;\r\n\r\n  /**\r\n   * Callback for the mousedown event on the icon button in the wrapper.\r\n   */\r\n  onItemMouseDown?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback for when the click event on the primary button.\r\n   */\r\n  executeItemClick?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback for when the click event on the icon button from the wrapper.\r\n   */\r\n  onItemClick?: (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback for when the click event on the icon button which also takes in a specific HTMLElement that will be focused.\r\n   */\r\n  onItemClickBase?: (\r\n    item: IContextualMenuItem,\r\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\r\n    target: HTMLElement\r\n  ) => void;\r\n\r\n  /**\r\n   * Callback for keyboard events on the wrapper.\r\n   */\r\n  onItemKeyDown?: (item: IContextualMenuItem, ev: React.KeyboardEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * Callback to get the subMenu ID for an IContextualMenuItem.\r\n   */\r\n  getSubMenuId?: (item: IContextualMenuItem) => string | undefined;\r\n\r\n  /**\r\n   * Key of the currently expanded subMenu.\r\n   */\r\n  expandedMenuItemKey?: string;\r\n\r\n  /**\r\n   * Callback for touch/pointer events on the split button.\r\n   */\r\n  onTap?: (ev: React.TouchEvent<HTMLElement> | PointerEvent) => void;\r\n\r\n  /**\r\n   * This prop will get set by ContextualMenu and can be called to open this item's subMenu, if present.\r\n   */\r\n  openSubMenu?: (item: any, target: HTMLElement) => void;\r\n\r\n  /**\r\n   * This prop will get set by ContextualMenu and can be called to close this item's subMenu, if present.\r\n   */\r\n  dismissSubMenu?: () => void;\r\n\r\n  /**\r\n   * This prop will get set by ContextualMenu and can be called to close the menu this item belongs to.\r\n   * If dismissAll is true, all menus will be closed.\r\n   */\r\n  dismissMenu?: (ev?: any, dismissAll?: boolean) => void;\r\n}\r\n"]}