{"version":3,"file":"ColorSlider.types.js","sourceRoot":"../src/","sources":["components/ColorPicker/ColorSlider/ColorSlider.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ITheme, IStyle } from '../../../Styling';\r\nimport { IBaseProps, IRefObject, IStyleFunctionOrObject } from '../../../Utilities';\r\n\r\nexport interface IColorSlider {}\r\n\r\nexport interface IColorSliderProps extends IBaseProps<IColorSlider> {\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef?: IRefObject<IColorSlider>;\r\n\r\n  /**\r\n   * Minimum value of the slider.\r\n   */\r\n  minValue?: number;\r\n\r\n  /**\r\n   * Maximum value of the slider.\r\n   */\r\n  maxValue?: number;\r\n\r\n  /**\r\n   * Current value of the slider.\r\n   */\r\n  value?: number;\r\n\r\n  /**\r\n   * CSS-compatible string for the color of the thumb element.\r\n   */\r\n  thumbColor?: string;\r\n\r\n  /**\r\n   * Custom style for the overlay element.\r\n   */\r\n  overlayStyle?: any;\r\n\r\n  /**\r\n   * Callback issued when the value changes.\r\n   */\r\n  onChange?: (event: React.MouseEvent<HTMLElement>, newValue?: number) => void;\r\n\r\n  /**\r\n   * Deprecated, use `onChange` instead.\r\n   * @deprecated Use `onChange` instead.\r\n   */\r\n  onChanged?: (newValue: number) => void;\r\n\r\n  /**\r\n   * If true, the slider represents an alpha slider.\r\n   * Otherwise, the slider represents a hue slider.\r\n   */\r\n  isAlpha?: boolean;\r\n\r\n  /**\r\n   * Additional CSS class(es) to apply to the ColorSlider.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Theme (provided through customization).\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IColorSliderStyleProps, IColorSliderStyles>;\r\n}\r\n\r\nexport interface IColorSliderStyleProps {\r\n  /**\r\n   * Theme (provided through customization).\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Additional CSS class(es) to apply to the ColorSlider.\r\n   */\r\n  className?: string;\r\n}\r\n\r\nexport interface IColorSliderStyles {\r\n  /**\r\n   * Style set for the root element.\r\n   */\r\n  root?: IStyle;\r\n\r\n  /**\r\n   * Style set for the draggable thumb element.\r\n   */\r\n  sliderThumb?: IStyle;\r\n\r\n  /**\r\n   * Style set for the overlay element.\r\n   */\r\n  sliderOverlay?: IStyle;\r\n}\r\n"]}