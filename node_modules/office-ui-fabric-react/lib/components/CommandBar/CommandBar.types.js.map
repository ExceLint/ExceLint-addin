{"version":3,"file":"CommandBar.types.js","sourceRoot":"../src/","sources":["components/CommandBar/CommandBar.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IContextualMenuItem } from '../../ContextualMenu';\r\nimport { IButtonStyles, IButtonProps } from '../../Button';\r\nimport { ICommandBarData } from './CommandBar.base';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject, IComponentAs } from '../../Utilities';\r\nimport { ITooltipHostProps } from '../../Tooltip';\r\n\r\n/**\r\n * {@docCategory CommandBar}\r\n */\r\nexport interface ICommandBar {\r\n  /**\r\n   * Sets focus to the active command in the list.\r\n   */\r\n  focus(): void;\r\n\r\n  /**\r\n   * Remeasures the available space.\r\n   */\r\n  remeasure(): void;\r\n}\r\n\r\n/**\r\n * {@docCategory CommandBar}\r\n */\r\nexport interface ICommandBarProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * Optional callback to access the ICommandBar interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<ICommandBar>;\r\n\r\n  /**\r\n   * Items to render. ICommandBarItemProps extends IContextualMenuItem.\r\n   */\r\n  items: ICommandBarItemProps[];\r\n\r\n  /**\r\n   * Items to render on the right side (or left, in RTL). ICommandBarItemProps extends IContextualMenuItem.\r\n   */\r\n  farItems?: ICommandBarItemProps[];\r\n\r\n  /**\r\n   * Default items to have in the overflow menu. ICommandBarItemProps extends IContextualMenuItem.\r\n   */\r\n  overflowItems?: ICommandBarItemProps[];\r\n\r\n  /**\r\n   * Props to be passed to overflow button.\r\n   * If `menuProps` are passed through this prop, any items provided will be prepended to any\r\n   * computed overflow items.\r\n   */\r\n  overflowButtonProps?: IButtonProps;\r\n\r\n  /**\r\n   * Custom component for the overflow button.\r\n   */\r\n  overflowButtonAs?: IComponentAs<IButtonProps>;\r\n\r\n  /**\r\n   * Custom component for the near and far item buttons. Not used for overflow menu items.\r\n   */\r\n  buttonAs?: IComponentAs<IButtonProps>;\r\n\r\n  /**\r\n   * When true, items will be 'shifted' off the front of the array when reduced, and unshifted during grow.\r\n   */\r\n  shiftOnReduce?: boolean;\r\n\r\n  /**\r\n   * Custom function to reduce data if items do not fit in given space.\r\n   * Return `undefined` if no more steps can be taken to avoid infinate loop.\r\n   */\r\n  onReduceData?: (data: ICommandBarData) => ICommandBarData | undefined;\r\n\r\n  /**\r\n   * Custom function to grow data if items are too small for the given space.\r\n   * Return `undefined` if no more steps can be taken to avoid infinate loop.\r\n   */\r\n  onGrowData?: (data: ICommandBarData) => ICommandBarData | undefined;\r\n\r\n  /**\r\n   * Callback invoked when data has been reduced.\r\n   */\r\n  onDataReduced?: (movedItem: ICommandBarItemProps) => void;\r\n\r\n  /**\r\n   * Callback invoked when data has been grown.\r\n   */\r\n  onDataGrown?: (movedItem: ICommandBarItemProps) => void;\r\n\r\n  /**\r\n   * Function to be called every time data is rendered. It provides the data that was actually rendered.\r\n   * A use case would be adding telemetry when a particular control is shown in an overflow or dropped\r\n   * as a result of `onReduceData`, or to count the number of renders that an implementation of\r\n   * `onReduceData` triggers.\r\n   */\r\n  dataDidRender?: (renderedData: any) => void;\r\n\r\n  /**\r\n   * Additional css class to apply to the command bar\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Accessibility text to be read by the screen reader when the user's\r\n   * focus enters the command bar. The screen reader will read this text\r\n   * after reading information about the first focusable item in the command bar.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<ICommandBarStyleProps, ICommandBarStyles>;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n}\r\n\r\n/**\r\n * ICommandBarItemProps extends IContextualMenuItem and adds a few CommandBar-specific props.\r\n * {@docCategory CommandBar}\r\n */\r\nexport interface ICommandBarItemProps extends IContextualMenuItem {\r\n  /**\r\n   * Show only an icon for this item, not text.\r\n   * Does not apply if item is in the overflow.\r\n   * @defaultvalue false\r\n   */\r\n  iconOnly?: boolean;\r\n\r\n  /**\r\n   * Props for the tooltip when in `iconOnly` mode.\r\n   */\r\n  tooltipHostProps?: ITooltipHostProps;\r\n\r\n  /**\r\n   * Custom styles for individual button\r\n   */\r\n  buttonStyles?: IButtonStyles;\r\n\r\n  /**\r\n   * A custom cache key to be used for this item. If `cacheKey` is changed, the cache will invalidate.\r\n   * Defaults to `key` value.\r\n   */\r\n  cacheKey?: string;\r\n\r\n  /**\r\n   * Context under which the item is being rendered.\r\n   * This value is mutated by the CommandBar and is useful for adjusting the `onRender` function.\r\n   */\r\n  renderedInOverflow?: boolean;\r\n\r\n  /**\r\n   * Method to override the render of the individual command bar button.\r\n   * Not used when item is rendered in overflow.\r\n   * @defaultvalue CommandBarButton\r\n   */\r\n  commandBarButtonAs?: IComponentAs<ICommandBarItemProps>;\r\n}\r\n\r\n/**\r\n * {@docCategory CommandBar}\r\n */\r\nexport interface ICommandBarStyleProps {\r\n  theme: ITheme;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * {@docCategory CommandBar}\r\n */\r\nexport interface ICommandBarStyles {\r\n  root?: IStyle;\r\n  primarySet?: IStyle;\r\n  secondarySet?: IStyle;\r\n}\r\n"]}