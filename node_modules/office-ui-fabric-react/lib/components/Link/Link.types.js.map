{"version":3,"file":"Link.types.js","sourceRoot":"../src/","sources":["components/Link/Link.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { LinkBase } from './Link.base';\r\n\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { IKeytipProps } from '../../Keytip';\r\n\r\nexport interface ILink {\r\n  /** Sets focus to the link. */\r\n  focus(): void;\r\n}\r\n\r\nexport interface ILinkHTMLAttributes<T> extends React.HTMLAttributes<T> {\r\n  // Shared\r\n  type?: string;\r\n\r\n  // Anchor\r\n  download?: any;\r\n  href?: string;\r\n  hrefLang?: string;\r\n  media?: string;\r\n  rel?: string;\r\n  target?: string;\r\n\r\n  // Button\r\n  autoFocus?: boolean;\r\n  disabled?: boolean;\r\n  form?: string;\r\n  formAction?: string;\r\n  formEncType?: string;\r\n  formMethod?: string;\r\n  formNoValidate?: boolean;\r\n  formTarget?: string;\r\n  name?: string;\r\n  value?: string | string[] | number;\r\n\r\n  // Any other props for HTMLElements or a React component passed to as=\r\n  [index: string]: any;\r\n}\r\n\r\nexport interface ILinkProps extends ILinkHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement | LinkBase> {\r\n  /**\r\n   * Optional callback to access the ILink interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<ILink>;\r\n\r\n  /**\r\n   * Whether the link is disabled\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>;\r\n\r\n  /**\r\n   * Theme (provided through customization.)\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * A component that should be used as the root element of the link returned from the Link component.\r\n   */\r\n  as?: string | React.ComponentClass | React.StatelessComponent;\r\n\r\n  /**\r\n   * Optional keytip for this Link\r\n   */\r\n  keytipProps?: IKeytipProps;\r\n}\r\n\r\nexport interface ILinkStyleProps {\r\n  className?: string;\r\n  isButton?: boolean;\r\n  isDisabled?: boolean;\r\n  theme: ITheme;\r\n}\r\n\r\nexport interface ILinkStyles {\r\n  root: IStyle;\r\n}\r\n"]}