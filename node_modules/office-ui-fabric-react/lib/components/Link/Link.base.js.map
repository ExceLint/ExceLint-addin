{"version":3,"file":"Link.base.js","sourceRoot":"../src/","sources":["components/Link/Link.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\r\nimport { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\r\nimport { KeytipData } from '../../KeytipData';\r\n\r\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\r\n\r\nexport class LinkBase extends BaseComponent<ILinkProps, any> implements ILink {\r\n  private _link = React.createRef<HTMLAnchorElement | HTMLButtonElement | null>();\r\n\r\n  public render(): JSX.Element {\r\n    const { disabled, children, className, href, theme, styles, keytipProps } = this.props;\r\n\r\n    const classNames = getClassNames(styles!, {\r\n      className,\r\n      isButton: !href,\r\n      isDisabled: disabled,\r\n      theme: theme!\r\n    });\r\n\r\n    const RootType = this._getRootType(this.props);\r\n\r\n    return (\r\n      <KeytipData\r\n        keytipProps={keytipProps}\r\n        ariaDescribedBy={(this.props as { 'aria-describedby': string })['aria-describedby']}\r\n        disabled={disabled}\r\n      >\r\n        {(keytipAttributes: any): JSX.Element => (\r\n          <RootType\r\n            {...keytipAttributes}\r\n            {...this._adjustPropsForRootType(RootType, this.props)}\r\n            className={classNames.root}\r\n            onClick={this._onClick}\r\n            ref={this._link}\r\n            aria-disabled={disabled}\r\n          >\r\n            {children}\r\n          </RootType>\r\n        )}\r\n      </KeytipData>\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    const { current } = this._link;\r\n\r\n    if (current && current.focus) {\r\n      current.focus();\r\n    }\r\n  }\r\n\r\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\r\n    const { onClick, disabled } = this.props;\r\n\r\n    if (disabled) {\r\n      ev.preventDefault();\r\n    } else if (onClick) {\r\n      onClick(ev);\r\n    }\r\n  };\r\n\r\n  private _adjustPropsForRootType(\r\n    RootType: string | React.ComponentClass | React.StatelessComponent,\r\n    props: ILinkProps & { getStyles?: any }\r\n  ): Partial<ILinkProps> {\r\n    // Deconstruct the props so we remove props like `as`, `theme` and `styles`\r\n    // as those will always be removed. We also take some props that are optional\r\n    // based on the RootType.\r\n    const { children, as, disabled, target, href, theme, getStyles, styles, componentRef, ...restProps } = props;\r\n\r\n    // RootType will be a string if we're dealing with an html component\r\n    if (typeof RootType === 'string') {\r\n      // Remove the disabled prop for anchor elements\r\n      if (RootType === 'a') {\r\n        return {\r\n          target,\r\n          href: disabled ? undefined : href,\r\n          ...restProps\r\n        };\r\n      }\r\n\r\n      // Add the type='button' prop for button elements\r\n      if (RootType === 'button') {\r\n        return {\r\n          type: 'button',\r\n          disabled,\r\n          ...restProps\r\n        };\r\n      }\r\n\r\n      // Remove the target and href props for all other non anchor elements\r\n      return { ...restProps, disabled };\r\n    }\r\n\r\n    // Retain all props except 'as' for ReactComponents\r\n    return { target, href, disabled, ...restProps };\r\n  }\r\n\r\n  private _getRootType(props: ILinkProps): string | React.ComponentClass | React.StatelessComponent {\r\n    if (props.as) {\r\n      return props.as;\r\n    }\r\n\r\n    if (props.href) {\r\n      return 'a';\r\n    }\r\n\r\n    return 'button';\r\n  }\r\n}\r\n"]}