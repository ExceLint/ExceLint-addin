import * as tslib_1 from "tslib";
import * as React from 'react';
import { FocusZone, FocusZoneDirection } from 'office-ui-fabric-react/lib/FocusZone';
import { List } from 'office-ui-fabric-react/lib/List';
import { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';
import { mergeStyleSets, getTheme, DefaultFontStyles, FontSizes, getFocusStyle } from 'office-ui-fabric-react/lib/Styling';
var theme = getTheme();
var classNames = mergeStyleSets({
    container: {
        overflow: 'auto',
        maxHeight: 500
    },
    itemCell: [
        getFocusStyle(theme, -1),
        {
            minHeight: 54,
            padding: 10,
            boxSizing: 'border-box',
            borderBottom: "1px solid " + theme.semanticColors.bodyDivider,
            display: 'flex',
            selectors: {
                '&:hover': { background: theme.palette.neutralLight }
            }
        }
    ],
    itemImage: {
        flexShrink: 0
    },
    itemContent: {
        marginLeft: 10,
        overflow: 'hidden',
        flexGrow: 1
    },
    itemName: [
        DefaultFontStyles.xLarge,
        {
            whiteSpace: 'nowrap',
            overflow: 'hidden',
            textOverflow: 'ellipsis'
        }
    ],
    itemIndex: {
        fontSize: FontSizes.small,
        color: theme.palette.neutralTertiary,
        marginBottom: 10
    },
    chevron: {
        alignSelf: 'center',
        marginLeft: 10,
        color: theme.palette.neutralTertiary,
        fontSize: FontSizes.large,
        flexShrink: 0
    }
});
var ListGhostingExample = /** @class */ (function (_super) {
    tslib_1.__extends(ListGhostingExample, _super);
    function ListGhostingExample() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ListGhostingExample.prototype.render = function () {
        var items = this.props.items;
        return (React.createElement(FocusZone, { direction: FocusZoneDirection.vertical },
            React.createElement("div", { className: classNames.container, "data-is-scrollable": true },
                React.createElement(List, { items: items, onRenderCell: this._onRenderCell }))));
    };
    ListGhostingExample.prototype._onRenderCell = function (item, index, isScrolling) {
        return (React.createElement("div", { className: classNames.itemCell, "data-is-focusable": true },
            React.createElement(Image, { className: classNames.itemImage, src: isScrolling ? undefined : item.thumbnail, width: 50, height: 50, imageFit: ImageFit.cover }),
            React.createElement("div", { className: classNames.itemContent },
                React.createElement("div", { className: classNames.itemName }, item.name),
                React.createElement("div", { className: classNames.itemIndex }, "Item " + index))));
    };
    return ListGhostingExample;
}(React.Component));
export { ListGhostingExample };
//# sourceMappingURL=List.Ghosting.Example.js.map