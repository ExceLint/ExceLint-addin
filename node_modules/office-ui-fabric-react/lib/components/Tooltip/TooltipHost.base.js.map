{"version":3,"file":"TooltipHost.base.js","sourceRoot":"../src/","sources":["components/Tooltip/TooltipHost.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  divProperties,\r\n  getNativeProps,\r\n  getId,\r\n  assign,\r\n  hasOverflow,\r\n  portalContainsElement,\r\n  classNamesFunction\r\n} from '../../Utilities';\r\nimport { ITooltipHostProps, TooltipOverflowMode, ITooltipHostStyles, ITooltipHostStyleProps, ITooltipHost } from './TooltipHost.types';\r\nimport { Tooltip } from './Tooltip';\r\nimport { TooltipDelay } from './Tooltip.types';\r\n\r\nexport interface ITooltipHostState {\r\n  isTooltipVisible: boolean;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\r\n\r\nexport class TooltipHostBase extends BaseComponent<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\r\n  public static defaultProps = {\r\n    delay: TooltipDelay.medium\r\n  };\r\n\r\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\r\n\r\n  // The wrapping div that gets the hover events\r\n  private _tooltipHost = React.createRef<HTMLDivElement>();\r\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\r\n\r\n  // The ID of the setTimeout that will eventually close the tooltip if the\r\n  // the tooltip isn't hovered over.\r\n  private _closingTimer = -1;\r\n\r\n  // Constructor\r\n  constructor(props: ITooltipHostProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isTooltipVisible: false\r\n    };\r\n  }\r\n\r\n  // Render\r\n  public render(): JSX.Element {\r\n    const {\r\n      calloutProps,\r\n      children,\r\n      content,\r\n      delay,\r\n      directionalHint,\r\n      directionalHintForRTL,\r\n      hostClassName: className,\r\n      id,\r\n      setAriaDescribedBy = true,\r\n      tooltipProps,\r\n      styles,\r\n      theme\r\n    } = this.props;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className\r\n    });\r\n\r\n    const { isTooltipVisible } = this.state;\r\n    const tooltipId = id || getId('tooltip');\r\n    const isContentPresent = !!(content || (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent()));\r\n    const showTooltip = isTooltipVisible && isContentPresent;\r\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\r\n\r\n    return (\r\n      <div\r\n        className={this._classNames.root}\r\n        ref={this._tooltipHost}\r\n        {...{ onFocusCapture: this._onTooltipMouseEnter }}\r\n        {...{ onBlurCapture: this._hideTooltip }}\r\n        onMouseEnter={this._onTooltipMouseEnter}\r\n        onMouseLeave={this._onTooltipMouseLeave}\r\n        aria-describedby={ariaDescribedBy}\r\n      >\r\n        {children}\r\n        {showTooltip && (\r\n          <Tooltip\r\n            id={tooltipId}\r\n            delay={delay}\r\n            content={content}\r\n            targetElement={this._getTargetElement()}\r\n            directionalHint={directionalHint}\r\n            directionalHintForRTL={directionalHintForRTL}\r\n            calloutProps={assign({}, calloutProps, {\r\n              onMouseEnter: this._onTooltipMouseEnter,\r\n              onMouseLeave: this._onTooltipMouseLeave\r\n            })}\r\n            onMouseEnter={this._onTooltipMouseEnter}\r\n            onMouseLeave={this._onTooltipMouseLeave}\r\n            {...getNativeProps(this.props, divProperties)}\r\n            {...tooltipProps}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\r\n      TooltipHostBase._currentVisibleTooltip = undefined;\r\n    }\r\n  }\r\n\r\n  public show = (): void => {\r\n    this._toggleTooltip(true);\r\n  };\r\n\r\n  public dismiss = (): void => {\r\n    this._hideTooltip();\r\n  };\r\n\r\n  private _getTargetElement(): HTMLElement | undefined {\r\n    if (!this._tooltipHost.current) {\r\n      return undefined;\r\n    }\r\n\r\n    const { overflowMode } = this.props;\r\n\r\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\r\n    // to the parent element, otherwise it might look off.\r\n    if (overflowMode !== undefined) {\r\n      switch (overflowMode) {\r\n        case TooltipOverflowMode.Parent:\r\n          return this._tooltipHost.current.parentElement!;\r\n\r\n        case TooltipOverflowMode.Self:\r\n          return this._tooltipHost.current;\r\n      }\r\n    }\r\n\r\n    return this._tooltipHost.current;\r\n  }\r\n\r\n  // Show Tooltip\r\n  private _onTooltipMouseEnter = (ev: any): void => {\r\n    const { overflowMode } = this.props;\r\n\r\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\r\n      TooltipHostBase._currentVisibleTooltip.dismiss();\r\n    }\r\n    TooltipHostBase._currentVisibleTooltip = this;\r\n\r\n    if (overflowMode !== undefined) {\r\n      const overflowElement = this._getTargetElement();\r\n      if (overflowElement && !hasOverflow(overflowElement)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement())) {\r\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\r\n      return;\r\n    }\r\n\r\n    this._toggleTooltip(true);\r\n    this._clearDismissTimer();\r\n  };\r\n\r\n  // Hide Tooltip\r\n  private _onTooltipMouseLeave = (ev: any): void => {\r\n    if (this.props.closeDelay) {\r\n      this._clearDismissTimer();\r\n\r\n      this._closingTimer = this._async.setTimeout(() => {\r\n        this._toggleTooltip(false);\r\n      }, this.props.closeDelay);\r\n    } else {\r\n      this._toggleTooltip(false);\r\n    }\r\n    if (TooltipHostBase._currentVisibleTooltip === this) {\r\n      TooltipHostBase._currentVisibleTooltip = undefined;\r\n    }\r\n  };\r\n\r\n  private _clearDismissTimer = (): void => {\r\n    this._async.clearTimeout(this._closingTimer);\r\n  };\r\n\r\n  // Hide Tooltip\r\n  private _hideTooltip = (): void => {\r\n    this._toggleTooltip(false);\r\n  };\r\n\r\n  private _toggleTooltip(isTooltipVisible: boolean): void {\r\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\r\n      this.setState({ isTooltipVisible }, () => this.props.onTooltipToggle && this.props.onTooltipToggle(this.state.isTooltipVisible));\r\n    }\r\n  }\r\n}\r\n"]}