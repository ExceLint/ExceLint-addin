{"version":3,"file":"TooltipHost.base.js","sourceRoot":"../src/","sources":["components/Tooltip/TooltipHost.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport {\n  initializeComponentRef,\n  Async,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow,\n  portalContainsElement,\n  classNamesFunction,\n  KeyCodes,\n} from '../../Utilities';\nimport {\n  ITooltipHostProps,\n  TooltipOverflowMode,\n  ITooltipHostStyles,\n  ITooltipHostStyleProps,\n  ITooltipHost,\n} from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\n\nexport interface ITooltipHostState {\n  isAriaPlaceholderRendered: boolean;\n  isTooltipVisible: boolean;\n}\n\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\n\nexport class TooltipHostBase extends React.Component<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\n  public static defaultProps = {\n    delay: TooltipDelay.medium,\n  };\n\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost = React.createRef<HTMLDivElement>();\n\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\n  private _async: Async;\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _defaultTooltipId = getId('tooltip');\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false,\n    };\n\n    this._async = new Async(this);\n  }\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      calloutProps,\n      children,\n      content,\n      directionalHint,\n      directionalHintForRTL,\n      hostClassName: className,\n      id,\n      setAriaDescribedBy = true,\n      tooltipProps,\n      styles,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    const { isAriaPlaceholderRendered, isTooltipVisible } = this.state;\n    const tooltipId = id || this._defaultTooltipId;\n    const isContentPresent = !!(\n      content ||\n      (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent())\n    );\n    const showTooltip = isTooltipVisible && isContentPresent;\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        ref={this._tooltipHost}\n        {...{ onFocusCapture: this._onTooltipMouseEnter }}\n        {...{ onBlurCapture: this._hideTooltip }}\n        onMouseEnter={this._onTooltipMouseEnter}\n        onMouseLeave={this._onTooltipMouseLeave}\n        onKeyDown={this._onTooltipKeyDown}\n        aria-describedby={ariaDescribedBy}\n      >\n        {children}\n        {showTooltip && (\n          <Tooltip\n            id={tooltipId}\n            content={content}\n            targetElement={this._getTargetElement()}\n            directionalHint={directionalHint}\n            directionalHintForRTL={directionalHintForRTL}\n            calloutProps={assign({}, calloutProps, {\n              onDismiss: this._hideTooltip,\n              onMouseEnter: this._onTooltipMouseEnter,\n              onMouseLeave: this._onTooltipMouseLeave,\n            })}\n            onMouseEnter={this._onTooltipMouseEnter}\n            onMouseLeave={this._onTooltipMouseLeave}\n            {...getNativeProps(this.props, divProperties)}\n            {...tooltipProps}\n          />\n        )}\n        {isAriaPlaceholderRendered && (\n          <div id={tooltipId} style={hiddenContentStyle as React.CSSProperties}>\n            {content}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  public componentWillUnmount(): void {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  }\n\n  public show = (): void => {\n    this._toggleTooltip(true);\n  };\n\n  public dismiss = (): void => {\n    this._hideTooltip();\n  };\n\n  private _getTargetElement = (): HTMLElement | undefined => {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  };\n\n  // Show Tooltip\n  private _onTooltipMouseEnter = (ev: any): void => {\n    const { overflowMode, delay } = this.props;\n\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\n      TooltipHostBase._currentVisibleTooltip.dismiss();\n    }\n    TooltipHostBase._currentVisibleTooltip = this;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement())) {\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\n      return;\n    }\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (delay !== TooltipDelay.zero) {\n      this.setState({ isAriaPlaceholderRendered: true });\n      const delayTime = this._getDelayTime(delay!); // non-null assertion because we set it in `defaultProps`\n\n      this._openTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(true);\n      }, delayTime);\n    } else {\n      this._toggleTooltip(true);\n    }\n  };\n\n  // Hide Tooltip\n  private _onTooltipMouseLeave = (ev: any): void => {\n    const { closeDelay } = this.props;\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (closeDelay) {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(false);\n      }, closeDelay);\n    } else {\n      this._toggleTooltip(false);\n    }\n\n    if (TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n  };\n\n  private _onTooltipKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if ((ev.which === KeyCodes.escape || ev.ctrlKey) && this.state.isTooltipVisible) {\n      this._hideTooltip();\n      ev.stopPropagation();\n    }\n  };\n\n  private _clearDismissTimer = (): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n  };\n\n  private _clearOpenTimer = (): void => {\n    this._async.clearTimeout(this._openTimerId);\n  };\n\n  // Hide Tooltip\n  private _hideTooltip = (): void => {\n    this._clearOpenTimer();\n    this._clearDismissTimer();\n    this._toggleTooltip(false);\n  };\n\n  private _toggleTooltip = (isTooltipVisible: boolean): void => {\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState(\n        { isAriaPlaceholderRendered: false, isTooltipVisible },\n        () => this.props.onTooltipToggle && this.props.onTooltipToggle(isTooltipVisible),\n      );\n    }\n  };\n\n  private _getDelayTime = (delay: TooltipDelay): number => {\n    switch (delay) {\n      case TooltipDelay.medium:\n        return 300;\n      case TooltipDelay.long:\n        return 500;\n      default:\n        return 0;\n    }\n  };\n}\n"]}