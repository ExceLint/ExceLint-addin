{"version":3,"file":"Pivot.types.js","sourceRoot":"../src/","sources":["components/Pivot/Pivot.types.ts"],"names":[],"mappings":"AAmIA,MAAM,CAAN,IAAY,eAUX;AAVD,WAAY,eAAe;IACzB;;OAEG;IACH,uDAAS,CAAA;IAET;;OAEG;IACH,qDAAQ,CAAA;AACV,CAAC,EAVW,eAAe,KAAf,eAAe,QAU1B;AAED,MAAM,CAAN,IAAY,aAUX;AAVD,WAAY,aAAa;IACvB;;OAEG;IACH,qDAAU,CAAA;IAEV;;OAEG;IACH,mDAAS,CAAA;AACX,CAAC,EAVW,aAAa,KAAb,aAAa,QAUxB","sourcesContent":["import * as React from 'react';\r\nimport { PivotBase } from './Pivot.base';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { PivotItem } from './PivotItem';\r\n\r\nexport interface IPivot {\r\n  /**\r\n   * Sets focus to the first pivot tab.\r\n   */\r\n  focus(): void;\r\n}\r\n\r\nexport interface IPivotProps extends React.ClassAttributes<PivotBase>, React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * Optional callback to access the IPivot interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IPivot>;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IPivotStyleProps, IPivotStyles>;\r\n\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Additional css class to apply to the Pivot\r\n   * @defaultvalue undefined\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Default selected key for the pivot. Only provide this if the pivot is an uncontrolled component;\r\n   * otherwise, use the `selectedKey` property.\r\n   *\r\n   * This property is also mutually exclusive with `defaultSelectedIndex`.\r\n   */\r\n  defaultSelectedKey?: string;\r\n\r\n  /**\r\n   * Default selected index for the pivot. Only provide this if the pivot is an uncontrolled component;\r\n   * otherwise, use the `selectedKey` property.\r\n   *\r\n   * This property is also mutually exclusive with `defaultSelectedKey`.\r\n   */\r\n  defaultSelectedIndex?: number;\r\n\r\n  /**\r\n   * Index of the pivot item initially selected. Mutually exclusive with `initialSelectedKey`.\r\n   * Only provide this if the pivot is an uncontrolled component; otherwise, use `selectedKey`.\r\n   *\r\n   * @deprecated Use `defaultSelectedIndex`\r\n   */\r\n  initialSelectedIndex?: number;\r\n\r\n  /**\r\n   * Key of the pivot item initially selected. Mutually exclusive with `initialSelectedIndex`.\r\n   * Only provide this if the pivot is an uncontrolled component; otherwise, use `selectedKey`.\r\n   *\r\n   * @deprecated Use `defaultSelectedKey`\r\n   */\r\n  initialSelectedKey?: string;\r\n\r\n  /**\r\n   * Key of the selected pivot item. Updating this will override the Pivot's selected item state.\r\n   * Only provide this if the pivot is a controlled component where you are maintaining the\r\n   * current state; otherwise, use `defaultSelectedKey`.\r\n   */\r\n  selectedKey?: string;\r\n\r\n  /**\r\n   * Callback for when the selected pivot item is changed.\r\n   */\r\n  onLinkClick?: (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * PivotLinkSize to use (normal, large)\r\n   */\r\n  linkSize?: PivotLinkSize;\r\n\r\n  /**\r\n   * PivotLinkFormat to use (links, tabs)\r\n   */\r\n  linkFormat?: PivotLinkFormat;\r\n\r\n  /**\r\n   * Whether to skip rendering the tabpanel with the content of the selected tab.\r\n   * Use this prop if you plan to separately render the tab content\r\n   * and don't want to leave an empty tabpanel in the page that may confuse Screen Readers.\r\n   */\r\n  headersOnly?: boolean;\r\n\r\n  /**\r\n   * Callback to customize how IDs are generated for each tab header.\r\n   * Useful if you're rendering content outside and need to connect aria-labelledby.\r\n   */\r\n  getTabId?: (itemKey: string, index: number) => string;\r\n}\r\n\r\nexport type IPivotStyleProps = Required<Pick<IPivotProps, 'theme'>> &\r\n  Pick<IPivotProps, 'className'> & {\r\n    /** Indicates whether Pivot has large format. */\r\n    rootIsLarge?: boolean;\r\n    /** Indicates whether Pivot has tabbed format. */\r\n    rootIsTabs?: boolean;\r\n    /**\r\n     * Indicates whether Pivot link is selected.\r\n     * @deprecated Is not populated with valid value. Specify `linkIsSelected` styling instead.\r\n     */\r\n    linkIsSelected?: boolean;\r\n  };\r\n\r\nexport interface IPivotStyles {\r\n  /**\r\n   * Style for the root element.\r\n   */\r\n  root: IStyle;\r\n  link: IStyle;\r\n  linkContent: IStyle;\r\n  linkIsSelected: IStyle;\r\n  text: IStyle;\r\n  count: IStyle;\r\n  icon: IStyle;\r\n  itemContainer?: IStyle;\r\n}\r\n\r\nexport enum PivotLinkFormat {\r\n  /**\r\n   * Display Pivot Links as links\r\n   */\r\n  links = 0,\r\n\r\n  /**\r\n   * Display Pivot Links as Tabs\r\n   */\r\n  tabs = 1\r\n}\r\n\r\nexport enum PivotLinkSize {\r\n  /**\r\n   * Display Link using normal font size\r\n   */\r\n  normal = 0,\r\n\r\n  /**\r\n   * Display links using large font size\r\n   */\r\n  large = 1\r\n}\r\n"]}