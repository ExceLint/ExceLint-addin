{"version":3,"file":"MaskedTextField.js","sourceRoot":"../src/","sources":["components/TextField/MaskedTextField/MaskedTextField.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TextField } from '../TextField';\nimport { ITextField, IMaskedTextFieldProps } from '../TextField.types';\nimport { initializeComponentRef, KeyCodes } from '../../../Utilities';\n\nimport {\n  clearNext,\n  clearPrev,\n  clearRange,\n  DEFAULT_MASK_FORMAT_CHARS,\n  getLeftFormatIndex,\n  getMaskDisplay,\n  getRightFormatIndex,\n  IMaskValue,\n  insertString,\n  parseMask,\n} from './inputMask';\n\n/**\n * State for the MaskedTextField component.\n */\nexport interface IMaskedTextFieldState {\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n  displayValue: string;\n  /** The index into the rendered value of the first unfilled format character */\n  maskCursorPosition?: number;\n}\n\nexport const DEFAULT_MASK_CHAR = '_';\n\ntype InputChangeType = 'default' | 'backspace' | 'delete' | 'textPasted';\n\nexport class MaskedTextField extends React.Component<IMaskedTextFieldProps, IMaskedTextFieldState>\n  implements ITextField {\n  public static defaultProps: IMaskedTextFieldProps = {\n    maskChar: DEFAULT_MASK_CHAR,\n    maskFormat: DEFAULT_MASK_FORMAT_CHARS,\n  };\n\n  private _textField = React.createRef<ITextField>();\n\n  /**\n   *  An array of data containing information regarding the format characters,\n   *  their indices inside the display text, and their corresponding values.\n   * @example\n   * ```\n   *  [\n   *    { value: '1', displayIndex: 16, format: /[0-9]/ },\n   *    { value: '2', displayIndex: 17, format: /[0-9]/ },\n   *    { displayIndex: 18, format: /[0-9]/ },\n   *    { value: '4', displayIndex: 22, format: /[0-9]/ },\n   *    ...\n   *  ]\n   * ```\n   */\n  private _maskCharData: IMaskValue[];\n  /** True if the TextField is focused */\n  private _isFocused: boolean;\n  /** True if the TextField was not focused and it was clicked into */\n  private _moveCursorOnMouseUp: boolean;\n\n  /** The stored selection data prior to input change events. */\n  private _changeSelectionData: {\n    changeType: InputChangeType;\n    selectionStart: number;\n    selectionEnd: number;\n  } | null;\n\n  constructor(props: IMaskedTextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    // Translate mask into charData\n    this._maskCharData = parseMask(props.mask, props.maskFormat);\n    // If an initial value is provided, use it to populate the format chars\n    props.value !== undefined && this.setValue(props.value);\n\n    this._isFocused = false;\n    this._moveCursorOnMouseUp = false;\n\n    this.state = {\n      displayValue: getMaskDisplay(props.mask, this._maskCharData, props.maskChar),\n    };\n  }\n\n  public UNSAFE_componentWillReceiveProps(newProps: IMaskedTextFieldProps) {\n    if (newProps.mask !== this.props.mask || newProps.value !== this.props.value) {\n      this._maskCharData = parseMask(newProps.mask, newProps.maskFormat);\n      newProps.value !== undefined && this.setValue(newProps.value);\n\n      this.setState({\n        displayValue: getMaskDisplay(newProps.mask, this._maskCharData, newProps.maskChar),\n      });\n    }\n  }\n\n  public componentDidUpdate() {\n    // Move the cursor to the start of the mask format on update\n    if (this._isFocused && this.state.maskCursorPosition !== undefined && this._textField.current) {\n      this._textField.current.setSelectionRange(this.state.maskCursorPosition, this.state.maskCursorPosition);\n    }\n  }\n\n  public render() {\n    return (\n      <TextField\n        {...this.props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onMouseDown={this._onMouseDown}\n        onMouseUp={this._onMouseUp}\n        onChange={this._onInputChange}\n        onKeyDown={this._onKeyDown}\n        onPaste={this._onPaste}\n        value={this.state.displayValue || ''}\n        componentRef={this._textField}\n      />\n    );\n  }\n\n  /**\n   * @returns The value of all filled format characters or undefined if not all format characters are filled\n   */\n  public get value(): string | undefined {\n    let value = '';\n\n    for (let i = 0; i < this._maskCharData.length; i++) {\n      if (!this._maskCharData[i].value) {\n        return undefined;\n      }\n      value += this._maskCharData[i].value;\n    }\n    return value;\n  }\n\n  public setValue(newValue: string): void {\n    let valueIndex = 0;\n    let charDataIndex = 0;\n\n    while (valueIndex < newValue.length && charDataIndex < this._maskCharData.length) {\n      // Test if the next character in the new value fits the next format character\n      const testVal = newValue[valueIndex];\n      if (this._maskCharData[charDataIndex].format.test(testVal)) {\n        this._maskCharData[charDataIndex].value = testVal;\n        charDataIndex++;\n      }\n      valueIndex++;\n    }\n  }\n\n  public focus(): void {\n    const { current } = this._textField;\n\n    current && current.focus();\n  }\n\n  public blur(): void {\n    const { current } = this._textField;\n\n    current && current.blur();\n  }\n\n  public select(): void {\n    const { current } = this._textField;\n\n    current && current.select();\n  }\n\n  public setSelectionStart(value: number): void {\n    const { current } = this._textField;\n\n    current && current.setSelectionStart(value);\n  }\n\n  public setSelectionEnd(value: number): void {\n    const { current } = this._textField;\n\n    current && current.setSelectionEnd(value);\n  }\n\n  public setSelectionRange(start: number, end: number): void {\n    const { current } = this._textField;\n    current && current.setSelectionRange(start, end);\n  }\n\n  public get selectionStart(): number | null {\n    const { current } = this._textField;\n\n    return current && current.selectionStart !== null ? current.selectionStart : -1;\n  }\n\n  public get selectionEnd(): number | null {\n    const { current } = this._textField;\n\n    return current && current.selectionEnd ? current.selectionEnd : -1;\n  }\n\n  private _onFocus = (event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    this._isFocused = true;\n\n    // Move the cursor position to the leftmost unfilled position\n    for (let i = 0; i < this._maskCharData.length; i++) {\n      if (!this._maskCharData[i].value) {\n        this.setState({\n          maskCursorPosition: this._maskCharData[i].displayIndex,\n        });\n        break;\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    this._isFocused = false;\n    this._moveCursorOnMouseUp = true;\n  };\n\n  private _onMouseDown = (event: React.MouseEvent<HTMLInputElement>) => {\n    if (this.props.onMouseDown) {\n      this.props.onMouseDown(event);\n    }\n\n    if (!this._isFocused) {\n      this._moveCursorOnMouseUp = true;\n    }\n  };\n\n  private _onMouseUp = (event: React.MouseEvent<HTMLInputElement>) => {\n    if (this.props.onMouseUp) {\n      this.props.onMouseUp(event);\n    }\n\n    // Move the cursor on mouseUp after focusing the textField\n    if (this._moveCursorOnMouseUp) {\n      this._moveCursorOnMouseUp = false;\n      // Move the cursor position to the rightmost unfilled position\n      for (let i = 0; i < this._maskCharData.length; i++) {\n        if (!this._maskCharData[i].value) {\n          this.setState({\n            maskCursorPosition: this._maskCharData[i].displayIndex,\n          });\n          break;\n        }\n      }\n    }\n  };\n\n  private _onInputChange = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, value: string) => {\n    const textField = this._textField.current;\n    if (this._changeSelectionData === null && textField) {\n      this._changeSelectionData = {\n        changeType: 'default',\n        selectionStart: textField.selectionStart !== null ? textField.selectionStart : -1,\n        selectionEnd: textField.selectionEnd !== null ? textField.selectionEnd : -1,\n      };\n    }\n    if (!this._changeSelectionData) {\n      return;\n    }\n\n    const { displayValue } = this.state;\n\n    // The initial value of cursorPos does not matter\n    let cursorPos = 0;\n    const { changeType, selectionStart, selectionEnd } = this._changeSelectionData;\n\n    if (changeType === 'textPasted') {\n      const charsSelected = selectionEnd - selectionStart;\n      const charCount = value.length + charsSelected - displayValue.length;\n      const startPos = selectionStart;\n      const pastedString = value.substr(startPos, charCount);\n\n      // Clear any selected characters\n      if (charsSelected) {\n        this._maskCharData = clearRange(this._maskCharData, selectionStart, charsSelected);\n      }\n      cursorPos = insertString(this._maskCharData, startPos, pastedString);\n    } else if (changeType === 'delete' || changeType === 'backspace') {\n      // isDel is true If the characters are removed LTR, otherwise RTL\n      const isDel = changeType === 'delete';\n      const charCount = selectionEnd - selectionStart;\n\n      if (charCount) {\n        // charCount is > 0 if range was deleted\n        this._maskCharData = clearRange(this._maskCharData, selectionStart, charCount);\n        cursorPos = getRightFormatIndex(this._maskCharData, selectionStart);\n      } else {\n        // If charCount === 0, there was no selection and a single character was deleted\n        if (isDel) {\n          this._maskCharData = clearNext(this._maskCharData, selectionStart);\n          cursorPos = getRightFormatIndex(this._maskCharData, selectionStart);\n        } else {\n          this._maskCharData = clearPrev(this._maskCharData, selectionStart);\n          cursorPos = getLeftFormatIndex(this._maskCharData, selectionStart);\n        }\n      }\n    } else if (value.length > displayValue.length) {\n      // This case is if the user added characters\n      const charCount = value.length - displayValue.length;\n      const startPos = selectionEnd - charCount;\n      const enteredString = value.substr(startPos, charCount);\n\n      cursorPos = insertString(this._maskCharData, startPos, enteredString);\n    } else if (value.length <= displayValue.length) {\n      /**\n       * This case is reached only if the user has selected a block of 1 or more\n       * characters and input a character replacing the characters they've selected.\n       */\n      const charCount = 1;\n      const selectCount = displayValue.length + charCount - value.length;\n      const startPos = selectionEnd - charCount;\n      const enteredString = value.substr(startPos, charCount);\n\n      // Clear the selected range\n      this._maskCharData = clearRange(this._maskCharData, startPos, selectCount);\n      // Insert the printed character\n      cursorPos = insertString(this._maskCharData, startPos, enteredString);\n    }\n\n    this._changeSelectionData = null;\n\n    const newValue = getMaskDisplay(this.props.mask, this._maskCharData, this.props.maskChar);\n\n    this.setState({\n      displayValue: newValue,\n      maskCursorPosition: cursorPos,\n    });\n\n    // Perform onChange after input has been processed. Return value is expected to be the displayed text\n    if (this.props.onChange) {\n      this.props.onChange(ev, newValue);\n    }\n  };\n\n  private _onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const { current } = this._textField;\n\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(event);\n    }\n\n    this._changeSelectionData = null;\n    if (current && current.value) {\n      const { keyCode, ctrlKey, metaKey } = event;\n\n      // Ignore ctrl and meta keydown\n      if (ctrlKey || metaKey) {\n        return;\n      }\n\n      // On backspace or delete, store the selection and the keyCode\n      if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n        const selectionStart = (event.target as HTMLInputElement).selectionStart;\n        const selectionEnd = (event.target as HTMLInputElement).selectionEnd;\n\n        // Check if backspace or delete press is valid.\n        if (\n          !(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&\n          !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < current.value.length)\n        ) {\n          return;\n        }\n\n        this._changeSelectionData = {\n          changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n          selectionStart: selectionStart !== null ? selectionStart : -1,\n          selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n        };\n      }\n    }\n  };\n\n  private _onPaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    if (this.props.onPaste) {\n      this.props.onPaste(event);\n    }\n\n    const selectionStart = (event.target as HTMLInputElement).selectionStart;\n    const selectionEnd = (event.target as HTMLInputElement).selectionEnd;\n    // Store the paste selection range\n    this._changeSelectionData = {\n      changeType: 'textPasted',\n      selectionStart: selectionStart !== null ? selectionStart : -1,\n      selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n    };\n  };\n}\n"]}