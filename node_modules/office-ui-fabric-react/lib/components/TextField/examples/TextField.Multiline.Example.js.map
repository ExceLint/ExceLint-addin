{"version":3,"file":"TextField.Multiline.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.Multiline.Example.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,MAAM,sCAAsC,CAAC;AACjE,OAAO,2BAA2B,CAAC;AACnC,OAAO,EAAE,KAAK,EAAE,MAAM,kDAAkD,CAAC;AAMzE;IAA+C,qDAA4B;IAEzE,mCAAY,KAAU;QAAtB,YACE,kBAAM,KAAK,CAAC,SAGb;QAoBO,eAAS,GAAG,UAAC,EAAO,EAAE,OAAe;YAC3C,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;YACzC,IAAI,YAAY,KAAK,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE;gBACzC,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC;QA3BA,KAAI,CAAC,KAAK,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;QAClC,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;;IAC3B,CAAC;IAEM,0CAAM,GAAb;QACE,OAAO,CACL,6BAAK,SAAS,EAAC,uBAAuB;YACpC,oBAAC,SAAS,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,GAAI;YACjD,oBAAC,SAAS,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,GAAI;YACrF,oBAAC,SAAS,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,GAAI;YACjE,oBAAC,SAAS,IAAC,KAAK,EAAC,oBAAoB,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,EAAE,YAAY,EAAC,2BAA2B,GAAG;YACpG,oBAAC,SAAS,IAAC,KAAK,EAAC,eAAe,EAAC,SAAS,QAAC,SAAS,EAAE,KAAK,GAAI;YAC/D,oBAAC,SAAS,IAAC,KAAK,EAAC,4BAA4B,EAAC,SAAS,QAAC,gBAAgB,SAAG;YAC3E,oBAAC,SAAS,IACR,KAAK,EAAC,0EAA0E,EAChF,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAC/B,QAAQ,EAAE,IAAI,CAAC,SAAS,GACxB,CACE,CACP,CAAC;IACJ,CAAC;IAQH,gCAAC;AAAD,CAAC,AAhCD,CAA+C,KAAK,CAAC,SAAS,GAgC7D","sourcesContent":["import * as React from 'react';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport './TextField.Examples.scss';\r\nimport { lorem } from 'office-ui-fabric-react/lib/utilities/exampleData';\r\n\r\nexport interface IState {\r\n  multiline: boolean;\r\n}\r\n\r\nexport class TextFieldMultilineExample extends React.Component<any, IState> {\r\n  private _lorem: string;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { multiline: false };\r\n    this._lorem = lorem(100);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"docs-TextFieldExample\">\r\n        <TextField label=\"Standard\" multiline rows={4} />\r\n        <TextField label=\"Disabled\" multiline rows={4} disabled={true} value={this._lorem} />\r\n        <TextField label=\"Required\" multiline rows={4} required={true} />\r\n        <TextField label=\"With error message\" multiline rows={4} errorMessage=\"This is an error message.\" />\r\n        <TextField label=\"Non-resizable\" multiline resizable={false} />\r\n        <TextField label=\"With auto adjusting height\" multiline autoAdjustHeight />\r\n        <TextField\r\n          label=\"Switches from single to multiline if more than 50 characters are entered\"\r\n          multiline={this.state.multiline}\r\n          onChange={this._onChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onChange = (ev: any, newText: string): void => {\r\n    const newMultiline = newText.length > 50;\r\n    if (newMultiline !== this.state.multiline) {\r\n      this.setState({ multiline: newMultiline });\r\n    }\r\n  };\r\n}\r\n"]}