{"version":3,"file":"ProgressIndicator.types.js","sourceRoot":"../src/","sources":["components/ProgressIndicator/ProgressIndicator.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { ProgressIndicatorBase } from './ProgressIndicator.base';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IStyleFunctionOrObject, IRenderFunction } from '../../Utilities';\n\n/**\n * {@docCategory ProgressIndicator}\n */\nexport interface IProgressIndicatorProps extends React.ClassAttributes<ProgressIndicatorBase> {\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IProgressIndicatorStyleProps, IProgressIndicatorStyles>;\n\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the ProgressIndicator\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * Label to display above the control. May be a string or React virtual elements.\n   */\n  label?: React.ReactNode;\n\n  /**\n   * Text describing or supplementing the operation. May be a string or React virtual elements.\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Percentage of the operation's completeness, numerically between 0 and 1. If this is not set,\n   * the indeterminate progress animation will be shown instead.\n   */\n  percentComplete?: number;\n\n  /**\n   * Whether or not to hide the progress state.\n   */\n  progressHidden?: boolean;\n\n  /**\n   * A render override for the progress track.\n   */\n  onRenderProgress?: IRenderFunction<IProgressIndicatorProps>;\n\n  /**\n   * Text alternative of the progress status, used by screen readers for reading the value of the progress.\n   */\n  ariaValueText?: string;\n\n  /**\n   * Deprecated at v0.43.0, to be removed at \\>= v0.53.0. Use `label` instead.\n   * @deprecated Use `label` instead.\n   */\n  title?: string;\n\n  /**\n   * Height of the ProgressIndicator\n   * @defaultvalue 2\n   */\n  barHeight?: number;\n}\n\n/**\n * {@docCategory ProgressIndicator}\n */\nexport interface IProgressIndicatorStyleProps {\n  /**\n   * Theme provided by High-Order Component.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n  indeterminate?: boolean;\n  barHeight?: number;\n}\n\n/**\n * {@docCategory ProgressIndicator}\n */\nexport interface IProgressIndicatorStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n  itemName: IStyle;\n  itemDescription: IStyle;\n  itemProgress: IStyle;\n  progressTrack: IStyle;\n  progressBar: IStyle;\n}\n"]}