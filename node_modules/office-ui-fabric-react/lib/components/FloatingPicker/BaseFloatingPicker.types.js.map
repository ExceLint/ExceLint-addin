{"version":3,"file":"BaseFloatingPicker.types.js","sourceRoot":"../src/","sources":["components/FloatingPicker/BaseFloatingPicker.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { ISuggestionModel } from '../../Pickers';\r\nimport { IPersonaProps } from '../../Persona';\r\nimport { ISuggestionsControlProps } from './Suggestions/Suggestions.types';\r\nimport { SuggestionsStore } from './Suggestions/SuggestionsStore';\r\nimport { IRefObject } from '../../Utilities';\r\n\r\nexport interface IBaseFloatingPicker {\r\n  /** Whether the suggestions are shown */\r\n  isSuggestionsShown: boolean;\r\n\r\n  /** On queryString changed */\r\n  onQueryStringChanged: (input: string) => void;\r\n\r\n  /** Hides the picker */\r\n  hidePicker: () => void;\r\n\r\n  /** Shows the picker\r\n   * @param updateValue - Optional param to indicate whether to update the query string\r\n   */\r\n  showPicker: (updateValue?: boolean) => void;\r\n\r\n  /** Gets the suggestions */\r\n  // tslint:disable-next-line:no-any\r\n  suggestions: any[];\r\n\r\n  /** Gets the input text */\r\n  inputText: string;\r\n}\r\n\r\n// Type T is the type of the item that is displayed\r\n// and searched for by the people picker. For example, if the picker is\r\n// displaying persona's than type T could either be of Persona or Ipersona props\r\n// tslint:disable-next-line:no-any\r\nexport interface IBaseFloatingPickerProps<T> extends React.ClassAttributes<any> {\r\n  componentRef?: IRefObject<IBaseFloatingPicker>;\r\n\r\n  /**\r\n   * The suggestions store\r\n   */\r\n  suggestionsStore: SuggestionsStore<T>;\r\n\r\n  /**\r\n   * The suggestions to show on zero query, return null if using as a controlled component\r\n   */\r\n  onZeroQuerySuggestion?: (selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;\r\n\r\n  /**\r\n   * The input element to listen on events\r\n   */\r\n  inputElement?: HTMLInputElement | null;\r\n\r\n  /**\r\n   * Function that specifies how an individual suggestion item will appear.\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  onRenderSuggestionsItem?: (props: T, itemProps: any) => JSX.Element;\r\n  /**\r\n   * A callback for what should happen when a person types text into the input.\r\n   * Returns the already selected items so the resolver can filter them out.\r\n   * If used in conjunction with resolveDelay this will ony kick off after the delay throttle.\r\n   * Return null if using as a controlled component\r\n   */\r\n  onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;\r\n\r\n  /**\r\n   * A callback for when the input has been changed\r\n   */\r\n  onInputChanged?: (filter: string) => void;\r\n\r\n  /**\r\n   * The delay time in ms before resolving suggestions, which is kicked off when input has been changed.\r\n   * e.g. If a second input change happens within the resolveDelay time, the timer will start over.\r\n   * Only until after the timer completes will onResolveSuggestions be called.\r\n   */\r\n  resolveDelay?: number;\r\n\r\n  /**\r\n   * A callback for when a suggestion is clicked\r\n   */\r\n  onChange?: (item: T) => void;\r\n\r\n  /**\r\n   * ClassName for the picker.\r\n   */\r\n  className?: string;\r\n  /**\r\n   * The properties that will get passed to the Suggestions component.\r\n   */\r\n  pickerSuggestionsProps?: IBaseFloatingPickerSuggestionProps;\r\n  /**\r\n   * A callback for when a persona is removed from the suggestion list\r\n   */\r\n  onRemoveSuggestion?: (item: IPersonaProps) => void;\r\n  /**\r\n   * A function used to validate if raw text entered into the well can be added\r\n   */\r\n  onValidateInput?: (input: string) => boolean;\r\n  /**\r\n   * The text to display while searching for more results in a limited suggestions list\r\n   */\r\n  searchingText?: ((props: { input: string }) => string) | string;\r\n\r\n  /**\r\n   * Function that specifies how arbitrary text entered into the well is handled.\r\n   */\r\n  createGenericItem?: (input: string, isValid: boolean) => ISuggestionModel<T>;\r\n\r\n  /**\r\n   * The callback that should be called to see if the force resolve command should be shown\r\n   */\r\n  showForceResolve?: () => boolean;\r\n\r\n  /**\r\n   * The items that the base picker should currently display as selected. If this is provided then the picker will act as a controlled\r\n   * component.\r\n   */\r\n  selectedItems?: T[];\r\n\r\n  /**\r\n   * A callback to get text from an item. Used to autofill text in the pickers.\r\n   */\r\n  getTextFromItem?: (item: T, currentValue?: string) => string;\r\n\r\n  /**\r\n   * Width for the suggestions callout\r\n   */\r\n  calloutWidth?: number;\r\n\r\n  /**\r\n   * The callback that should be called when the suggestions are shown\r\n   */\r\n  onSuggestionsShown?: () => void;\r\n\r\n  /**\r\n   * The callback that should be called when the suggestions are hiden\r\n   */\r\n  onSuggestionsHidden?: () => void;\r\n\r\n  /**\r\n   * If using as a controlled component, the items to show in the suggestion list\r\n   */\r\n  suggestionItems?: T[];\r\n}\r\n\r\n/**\r\n * Props which are passed on to the inner Suggestions component\r\n */\r\nexport type IBaseFloatingPickerSuggestionProps = Pick<\r\n  ISuggestionsControlProps<any>,\r\n  'shouldSelectFirstItem' | 'headerItemsProps' | 'footerItemsProps' | 'showRemoveButtons'\r\n>;\r\n"]}