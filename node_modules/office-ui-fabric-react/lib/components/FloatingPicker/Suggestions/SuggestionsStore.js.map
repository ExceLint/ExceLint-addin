{"version":3,"file":"SuggestionsStore.js","sourceRoot":"../src/","sources":["components/FloatingPicker/Suggestions/SuggestionsStore.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAG9C;IAGE;QACE,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAEM,4CAAiB,GAAxB,UAAyB,cAAmB;QAC1C,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mCAAmC,CAAC,cAAc,CAAC,CAAC;SAC7E;aAAM;YACL,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;SACvB;IACH,CAAC;IAEM,yCAAc,GAArB;QACE,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAEM,+CAAoB,GAA3B,UAA4B,KAAa;QACvC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAEM,2CAAgB,GAAvB,UAAwB,KAAa;QACnC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACpC,CAAC;IAEM,8DAAmC,GAA1C,UAA2C,WAA2C;QACpF,OAAO,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACxF,CAAC;IAGO,6CAAkB,GAA1B,UAA2B,KAA8B;QACvD,OAA6B,KAAM,CAAC,IAAI,KAAK,SAAS,CAAC;IACzD,CAAC;IAGO,iDAAsB,GAA9B,UAA+B,UAAmC;QAChE,IAAI,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;YACvC,OAAO,UAAiC,CAAC;SAC1C;aAAM;YACL,OAAO;gBACL,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,KAAK;gBACf,kCAAkC;gBAClC,SAAS,EAAQ,UAAW,CAAC,IAAI,IAAU,UAAW,CAAC,WAAW;aAC5C,CAAC;SAC1B;IACH,CAAC;IAhBD;QADC,QAAQ;8DAGR;IAGD;QADC,QAAQ;kEAYR;IACH,uBAAC;CAAA,AAjDD,IAiDC;SAjDY,gBAAgB","sourcesContent":["import { autobind } from '../../../Utilities';\r\nimport { ISuggestionModel } from '../../../Pickers';\r\n\r\nexport class SuggestionsStore<T> {\r\n  public suggestions: ISuggestionModel<T>[];\r\n\r\n  constructor() {\r\n    this.suggestions = [];\r\n  }\r\n\r\n  public updateSuggestions(newSuggestions: T[]): void {\r\n    if (newSuggestions && newSuggestions.length > 0) {\r\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\r\n    } else {\r\n      this.suggestions = [];\r\n    }\r\n  }\r\n\r\n  public getSuggestions(): ISuggestionModel<T>[] {\r\n    return this.suggestions;\r\n  }\r\n\r\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\r\n    return this.suggestions[index];\r\n  }\r\n\r\n  public removeSuggestion(index: number): void {\r\n    this.suggestions.splice(index, 1);\r\n  }\r\n\r\n  public convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[] {\r\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\r\n  }\r\n\r\n  @autobind\r\n  private _isSuggestionModel(value: ISuggestionModel<T> | T): value is ISuggestionModel<T> {\r\n    return (<ISuggestionModel<T>>value).item !== undefined;\r\n  }\r\n\r\n  @autobind\r\n  private _ensureSuggestionModel(suggestion: ISuggestionModel<T> | T): ISuggestionModel<T> {\r\n    if (this._isSuggestionModel(suggestion)) {\r\n      return suggestion as ISuggestionModel<T>;\r\n    } else {\r\n      return {\r\n        item: suggestion,\r\n        selected: false,\r\n        // tslint:disable-next-line:no-any\r\n        ariaLabel: (<any>suggestion).name || (<any>suggestion).primaryText\r\n      } as ISuggestionModel<T>;\r\n    }\r\n  }\r\n}\r\n"]}