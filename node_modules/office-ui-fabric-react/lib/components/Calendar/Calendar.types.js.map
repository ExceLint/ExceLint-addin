{"version":3,"file":"Calendar.types.js","sourceRoot":"../src/","sources":["components/Calendar/Calendar.types.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,uCAAuC,CAAC;AAElG,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE,CAAC","sourcesContent":["import { DayOfWeek, FirstWeekOfYear, DateRangeType } from '../../utilities/dateValues/DateValues';\r\nimport { IRefObject, IBaseProps } from '../../Utilities';\r\nexport { DayOfWeek, DateRangeType, FirstWeekOfYear };\r\n\r\nexport interface ICalendar {\r\n  /** Sets focus to the selected date. */\r\n  focus: () => void;\r\n}\r\n\r\nexport interface ICalendarProps extends IBaseProps<ICalendar>, React.HTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Optional callback to access the ICalendar interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<ICalendar>;\r\n\r\n  /**\r\n   * Optional class name to add to the root element.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Callback issued when a date is selected\r\n   * @param date - The date the user selected\r\n   * @param selectedDateRangeArray - The resultant list of dates that are selected based on the date range type set for the component.\r\n   */\r\n  onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;\r\n\r\n  /**\r\n   * Callback issued when calendar is closed\r\n   */\r\n  onDismiss?: () => void;\r\n\r\n  /**\r\n   * Whether the month picker is shown beside the day picker or hidden.\r\n   * @defaultvalue true\r\n   */\r\n  isMonthPickerVisible?: boolean;\r\n\r\n  /**\r\n   * Whether the day picker is shown beside the month picker or hidden.\r\n   * @defaultvalue true\r\n   */\r\n  isDayPickerVisible?: boolean;\r\n\r\n  /**\r\n   * Show month picker on top of date picker when visible.\r\n   * @defaultvalue false\r\n   */\r\n  showMonthPickerAsOverlay?: boolean;\r\n\r\n  /**\r\n   * Value of today. If null, current time in client machine will be used.\r\n   */\r\n  today?: Date;\r\n\r\n  /**\r\n   * Default value of the Calendar, if any\r\n   */\r\n  value?: Date;\r\n\r\n  /**\r\n   * The first day of the week for your locale.\r\n   * @defaultvalue DayOfWeek.Sunday\r\n   */\r\n  firstDayOfWeek?: DayOfWeek;\r\n\r\n  /**\r\n   * The date range type indicating how  many days should be selected as the user\r\n   * selects days\r\n   * @defaultvalue DateRangeType.Day\r\n   */\r\n  dateRangeType?: DateRangeType;\r\n\r\n  /**\r\n   * Whether the month view should automatically navigate to the next or previous date range\r\n   * depending on the selected date. If this property is set to true and the currently displayed\r\n   * month is March 2017, if the user clicks on a day outside the month, i.e., April 1st, the\r\n   * picker will automatically navigate to the month of April.\r\n   * @defaultvalue false\r\n   */\r\n  autoNavigateOnSelection?: boolean;\r\n\r\n  /**\r\n   * Whether the \"Go to today\" link should be shown or not\r\n   */\r\n  showGoToToday?: boolean;\r\n\r\n  /**\r\n   * This property has been removed at 0.80.0 in place of the `focus` method, to be removed \\@ 1.0.0.\r\n   * @deprecated Replaced with the `focus` method.\r\n   */\r\n  shouldFocusOnMount?: boolean;\r\n\r\n  /**\r\n   * Localized strings to use in the Calendar\r\n   */\r\n  strings: ICalendarStrings | null;\r\n\r\n  /**\r\n   * Whether the month picker should highlight the current month\r\n   * @defaultvalue false\r\n   */\r\n  highlightCurrentMonth?: boolean;\r\n\r\n  /**\r\n   * Whether the month picker should highlight the selected month\r\n   * @defaultvalue false\r\n   */\r\n  highlightSelectedMonth?: boolean;\r\n\r\n  /**\r\n   * Customize navigation icons using ICalendarIconStrings\r\n   */\r\n  navigationIcons?: ICalendarIconStrings;\r\n\r\n  /**\r\n   * Whether the calendar should show the week number (weeks 1 to 53) before each week row\r\n   * @defaultvalue false\r\n   */\r\n  showWeekNumbers?: boolean;\r\n\r\n  /**\r\n   * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\r\n   * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\r\n   * @defaultvalue FirstWeekOfYear.FirstDay\r\n   */\r\n  firstWeekOfYear?: FirstWeekOfYear;\r\n\r\n  /**\r\n   * Apply additional formating to dates, for example localized date formatting.\r\n   */\r\n  dateTimeFormatter?: ICalendarFormatDateCallbacks;\r\n\r\n  /**\r\n   * If set the Calendar will not allow navigation to or selection of a date earlier than this value.\r\n   */\r\n  minDate?: Date;\r\n\r\n  /**\r\n   * If set the Calendar will not allow navigation to or selection of a date later than this value.\r\n   */\r\n  maxDate?: Date;\r\n\r\n  /**\r\n   * If set the Calendar will not allow selection of dates in this array.\r\n   */\r\n  restrictedDates?: Date[];\r\n\r\n  /**\r\n   * Whether the calendar should show 6 weeks by default.\r\n   * @defaultvalue false\r\n   */\r\n  showSixWeeksByDefault?: boolean;\r\n\r\n  /**\r\n   * The days that are selectable when dateRangeType is WorkWeek. If dateRangeType is not WorkWeek this property does nothing.\r\n   * @defaultvalue [Monday,Tuesday,Wednesday,Thursday,Friday]\r\n   */\r\n  workWeekDays?: DayOfWeek[];\r\n\r\n  /**\r\n   * When clicking on \"Today\", select the date and close the calendar.\r\n   * @defaultvalue false\r\n   */\r\n  selectDateOnClick?: boolean;\r\n\r\n  /**\r\n   * Whether the close button should be shown or not\r\n   * @defaultvalue false\r\n   */\r\n  showCloseButton?: boolean;\r\n\r\n  /**\r\n   * Allows all dates and buttons to be focused, including disabled ones\r\n   * @defaultvalue false\r\n   */\r\n  allFocusable?: boolean;\r\n\r\n  /**\r\n   * Whether the year picker is enabled\r\n   * @defaultvalue false\r\n   */\r\n  yearPickerHidden?: boolean;\r\n}\r\n\r\nexport interface ICalendarStrings {\r\n  /**\r\n   * An array of strings for the full names of months.\r\n   * The array is 0-based, so months[0] should be the full name of January.\r\n   */\r\n  months: string[];\r\n\r\n  /**\r\n   * An array of strings for the short names of months.\r\n   * The array is 0-based, so shortMonths[0] should be the short name of January.\r\n   */\r\n  shortMonths: string[];\r\n\r\n  /**\r\n   * An array of strings for the full names of days of the week.\r\n   * The array is 0-based, so days[0] should be the full name of Sunday.\r\n   */\r\n  days: string[];\r\n\r\n  /**\r\n   * An array of strings for the initials of the days of the week.\r\n   * The array is 0-based, so days[0] should be the initial of Sunday.\r\n   */\r\n  shortDays: string[];\r\n\r\n  /**\r\n   * String to render for button to direct the user to today's date.\r\n   */\r\n  goToToday: string;\r\n\r\n  /**\r\n   * Aria-label for the \"previous month\" button.\r\n   */\r\n  prevMonthAriaLabel?: string;\r\n\r\n  /**\r\n   * Aria-label for the \"next month\" button.\r\n   */\r\n  nextMonthAriaLabel?: string;\r\n\r\n  /**\r\n   * Aria-label for the \"previous year\" button.\r\n   */\r\n  prevYearAriaLabel?: string;\r\n\r\n  /**\r\n   * Aria-label for the \"next year\" button.\r\n   */\r\n  nextYearAriaLabel?: string;\r\n\r\n  /**\r\n   * Aria-label for the \"close\" button.\r\n   */\r\n  closeButtonAriaLabel?: string;\r\n\r\n  /**\r\n   * Aria-label format string for the week number header. Should have 1 string param e.g. \"week number \\{0\\}\"\r\n   */\r\n  weekNumberFormatString?: string;\r\n}\r\n\r\nexport interface ICalendarIconStrings {\r\n  /**\r\n   * FabricMDL2Icons name for the left navigation icon.  Previous default: ChevronLeft.\r\n   * @defaultvalue 'Up'\r\n   */\r\n  leftNavigation?: string;\r\n\r\n  /**\r\n   * FabricMDL2Icons name for the right navigation icon.  Previous default: ChevronRight.\r\n   * @defaultvalue 'Down'\r\n   */\r\n  rightNavigation?: string;\r\n\r\n  /**\r\n   * Close icon\r\n   * @defaultvalue 'CalculatorMultiply'\r\n   */\r\n  closeIcon?: string;\r\n}\r\n\r\nexport interface ICalendarFormatDateCallbacks {\r\n  /**\r\n   * Callback to apply formatting to mmmm d, yyyy formated dates\r\n   */\r\n  formatMonthDayYear: (date: Date, strings?: ICalendarStrings) => string;\r\n\r\n  /**\r\n   * Callback to apply formatting to the month and year in the Day Picker header\r\n   */\r\n  formatMonthYear: (date: Date, strings?: ICalendarStrings) => string;\r\n\r\n  /**\r\n   * Callback to apply formatting to the days in the Day Picker calendar\r\n   */\r\n  formatDay: (date: Date) => string;\r\n\r\n  /**\r\n   * Callback to apply formatting to the year in the Month Picker header\r\n   */\r\n  formatYear: (date: Date) => string;\r\n}\r\n"]}