{"version":3,"file":"DropdownSizePosCache.js","sourceRoot":"../src/","sources":["components/Dropdown/utilities/DropdownSizePosCache.ts"],"names":[],"mappings":";AAAA,OAAO,EAAmB,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AAE1E;;;;;;;;;GASG;AACH;IAAA;QAGU,UAAK,GAAG,CAAC,CAAC;IA0DpB,CAAC;IAxDC;;OAEG;IACI,4CAAa,GAApB,UAAqB,OAA0B;QAC7C,IAAM,uBAAuB,GAAG,EAAE,CAAC;QACnC,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,oBAAoB,CAAC,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,oBAAoB,CAAC,MAAM,EAAE;gBAC/G,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACjC;iBAAM,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;gBAC7B,IAAI,EAAE,CAAC;aACR;SACF;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,wBAAwB,GAAG,uBAAuB,CAAC;QACxD,IAAI,CAAC,cAAc,kBAAO,OAAO,CAAC,CAAC;IACrC,CAAC;IAKD,sBAAW,+CAAa;QAHxB;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;;;OAAA;IAKD,sBAAW,+CAAa;QAHxB;;WAEG;aACH;YACE,OAAO,IAAI,CAAC,cAAc,CAAC;QAC7B,CAAC;;;OAAA;IAED;;;;OAIG;IACI,4CAAa,GAApB,UAAqB,KAAyB;QAC5C,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,SAAS,CAAC;SAClB;QAED,+GAA+G;QAC/G,gHAAgH;QAChH,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,OAAO,KAAK,GAAG,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,EAAE;YACpD,MAAM,EAAE,CAAC;SACV;QAED,IAAI,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,KAAK,KAAK,EAAE;YACnD,MAAM,IAAI,KAAK,CAAC,iCAA+B,KAAK,kCAA+B,CAAC,CAAC;SACtF;QAED,OAAO,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;IAC5B,CAAC;IACH,2BAAC;AAAD,CAAC,AA7DD,IA6DC","sourcesContent":["import { IDropdownOption, DropdownMenuItemType } from '../Dropdown.types';\n\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\nexport class DropdownSizePosCache {\n  private _cachedOptions: IDropdownOption[];\n  private _displayOnlyOptionsCache: number[];\n  private _size = 0;\n\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n  public updateOptions(options: IDropdownOption[]) {\n    const displayOnlyOptionsCache = [];\n    let size = 0;\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].itemType === DropdownMenuItemType.Divider || options[i].itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n      } else if (!options[i].hidden) {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._cachedOptions = [...options];\n  }\n\n  /**\n   * The size of all the selectable options.\n   */\n  public get optionSetSize(): number {\n    return this._size;\n  }\n\n  /**\n   * The chached options array.\n   */\n  public get cachedOptions(): IDropdownOption[] {\n    return this._cachedOptions;\n  }\n\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n  public positionInSet(index: number | undefined): number | undefined {\n    if (index === undefined) {\n      return undefined;\n    }\n\n    // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n    let offset = 0;\n    while (index > this._displayOnlyOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(`Unexpected: Option at index ${index} is not a selectable element.`);\n    }\n\n    return index - offset + 1;\n  }\n}\n"]}