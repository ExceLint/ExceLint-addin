{"version":3,"file":"DetailsRowFields.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRowFields.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { css } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    columnStartIndex,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    onRenderItemColumn,\n    getCellValueKey,\n    cellsByColumn,\n    enableUpdateAnimations,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map((column, columnIndex) => {\n        const width: string | number =\n          typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n        const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n        const cellContentsRender =\n          cellsByColumn && column.key in cellsByColumn\n            ? cellsByColumn[column.key]\n            : onRender\n            ? onRender(item, itemIndex, column)\n            : getCellText(item, column);\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        // generate a key that auto-dirties when content changes, to force the container to re-render,\n        // to trigger animation\n        const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n        return (\n          <div\n            key={key}\n            role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n            aria-readonly\n            aria-colindex={columnIndex + columnStartIndex + 1}\n            className={css(\n              column.className,\n              column.isMultiline && rowClassNames.isMultiline,\n              column.isRowHeader && rowClassNames.isRowHeader,\n              rowClassNames.cell,\n              column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n              showAnimation && rowClassNames.cellAnimation,\n            )}\n            style={{ width }}\n            data-automationid=\"DetailsRowCell\"\n            data-automation-key={column.key}\n          >\n            {cellContentsRender}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"]}