{"version":3,"file":"DetailsRow.types.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsRow.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { DetailsRowBase } from './DetailsRow.base';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IColumn, CheckboxVisibility, IDetailsListProps } from './DetailsList.types';\r\nimport { ISelection, SelectionMode } from '../../utilities/selection/interfaces';\r\nimport { IDragDropHelper, IDragDropEvents } from '../../utilities/dragdrop/interfaces';\r\nimport { IViewport } from '../../utilities/decorators/withViewport';\r\nimport { CollapseAllVisibility } from '../GroupedList/GroupedList.types';\r\nimport { IBaseProps, IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { IDetailsRowCheckProps } from './DetailsRowCheck.types';\r\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\r\n\r\nexport interface IDetailsRow {}\r\n\r\nexport interface IDetailsItemProps {\r\n  /**\r\n   * Column metadata\r\n   */\r\n  columns?: IColumn[];\r\n\r\n  /**\r\n   * Nesting depth of a grouping\r\n   */\r\n  groupNestingDepth?: number;\r\n\r\n  /**\r\n   * How much to indent\r\n   */\r\n  indentWidth?: number | undefined;\r\n\r\n  /**\r\n   * Selection from utilities\r\n   */\r\n  selection?: ISelection | undefined;\r\n\r\n  /**\r\n   * Selection mode\r\n   */\r\n  selectionMode?: SelectionMode | undefined;\r\n\r\n  /**\r\n   * View port of the virtualized list\r\n   */\r\n  viewport?: IViewport | undefined;\r\n\r\n  /**\r\n   * Checkbox visibility\r\n   */\r\n  checkboxVisibility?: CheckboxVisibility | undefined;\r\n\r\n  /**\r\n   * Rules for rendering column cells.\r\n   */\r\n  cellStyleProps?: ICellStyleProps;\r\n}\r\n\r\nexport interface IDetailsRowBaseProps extends Pick<IDetailsListProps, 'onRenderItemColumn'>, IBaseProps<IDetailsRow>, IDetailsItemProps {\r\n  /**\r\n   * Theme provided by styled() function\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Overriding styles to this row\r\n   */\r\n  styles?: IStyleFunctionOrObject<IDetailsRowStyleProps, IDetailsRowStyles>;\r\n\r\n  /**\r\n   * Ref of the component\r\n   */\r\n  componentRef?: IRefObject<IDetailsRow>;\r\n\r\n  /**\r\n   * Data source for this component\r\n   */\r\n  item: any;\r\n\r\n  /**\r\n   * Index of the collection of items of the DetailsList\r\n   */\r\n  itemIndex: number;\r\n\r\n  /**\r\n   * Whether to render in compact mode\r\n   */\r\n  compact?: boolean;\r\n\r\n  /**\r\n   * A list of events to register\r\n   */\r\n  eventsToRegister?: { eventName: string; callback: (item?: any, index?: number, event?: any) => void }[];\r\n\r\n  /**\r\n   * Callback for did mount for parent\r\n   */\r\n  onDidMount?: (row?: DetailsRowBase) => void;\r\n\r\n  /**\r\n   * Callback for will mount for parent\r\n   */\r\n  onWillUnmount?: (row?: DetailsRowBase) => void;\r\n\r\n  /**\r\n   * Callback for rendering a checkbox\r\n   */\r\n  onRenderCheck?: (props: IDetailsRowCheckProps) => JSX.Element;\r\n\r\n  /**\r\n   * Handling drag and drop events\r\n   */\r\n  dragDropEvents?: IDragDropEvents;\r\n\r\n  /**\r\n   * Helper for the drag and drop\r\n   */\r\n  dragDropHelper?: IDragDropHelper;\r\n\r\n  /**\r\n   * Collapse all visibility\r\n   */\r\n  collapseAllVisibility?: CollapseAllVisibility;\r\n\r\n  /**\r\n   * Callback for getting the row aria label\r\n   */\r\n  getRowAriaLabel?: (item: any) => string;\r\n\r\n  /**\r\n   * Callback for getting the row aria-describedby\r\n   */\r\n  getRowAriaDescribedBy?: (item: any) => string;\r\n\r\n  /**\r\n   * Check button's aria label\r\n   */\r\n  checkButtonAriaLabel?: string;\r\n\r\n  /**\r\n   * Class name for the checkbox cell\r\n   */\r\n  checkboxCellClassName?: string;\r\n\r\n  /**\r\n   * DOM element into which to render row field\r\n   */\r\n  rowFieldsAs?: React.StatelessComponent<IDetailsRowFieldsProps> | React.ComponentClass<IDetailsRowFieldsProps>;\r\n\r\n  /**\r\n   * Overriding class name\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Whether to render shimmer\r\n   */\r\n  shimmer?: boolean;\r\n\r\n  /**\r\n   * Rerender DetailsRow only when props changed. Might cause regression when depending on external updates.\r\n   * @defaultvalue false\r\n   */\r\n  useReducedRowRenderer?: boolean;\r\n  /**\r\n   * Optional pre-rendered content per column. Preferred over onRender or onRenderItemColumn if provided.\r\n   */\r\n  cellsByColumn?: {\r\n    [columnKey: string]: React.ReactNode;\r\n  };\r\n}\r\n\r\nexport interface IDetailsRowProps extends IDetailsRowBaseProps {\r\n  /**\r\n   * Column metadata\r\n   */\r\n  columns: IColumn[];\r\n\r\n  /**\r\n   * Selection from utilities\r\n   */\r\n  selection: ISelection;\r\n\r\n  /**\r\n   * Selection mode\r\n   */\r\n  selectionMode: SelectionMode;\r\n}\r\n\r\nexport type IDetailsRowStyleProps = Required<Pick<IDetailsRowProps, 'theme'>> & {\r\n  /** Whether the row is selected  */\r\n  isSelected?: boolean;\r\n\r\n  /** Whether there are any rows in the list selected */\r\n  anySelected?: boolean;\r\n\r\n  /** Whether this row can be selected */\r\n  canSelect?: boolean;\r\n\r\n  /** Class name of when this becomes a drop target. */\r\n  droppingClassName?: string;\r\n\r\n  /** Is the checkbox visible */\r\n  isCheckVisible?: boolean;\r\n\r\n  /** Is this a row header */\r\n  isRowHeader?: boolean;\r\n\r\n  /** A class name from the checkbox cell, so proper styling can be targeted */\r\n  checkboxCellClassName?: string;\r\n\r\n  /** CSS class name for the component */\r\n  className?: string;\r\n\r\n  /** Is list in compact mode */\r\n  compact?: boolean;\r\n\r\n  cellStyleProps?: ICellStyleProps;\r\n};\r\n\r\nexport interface ICellStyleProps {\r\n  cellLeftPadding: number;\r\n  cellRightPadding: number;\r\n  cellExtraRightPadding: number;\r\n}\r\n\r\nexport interface IDetailsRowStyles {\r\n  root: IStyle;\r\n  cell: IStyle;\r\n  cellUnpadded: IStyle;\r\n  cellPadded: IStyle;\r\n  checkCell: IStyle;\r\n  isRowHeader: IStyle;\r\n  isMultiline: IStyle;\r\n  fields: IStyle;\r\n  cellMeasurer: IStyle;\r\n  checkCover: IStyle;\r\n  shimmer: IStyle;\r\n  shimmerIconPlaceholder: IStyle;\r\n  shimmerLeftBorder: IStyle;\r\n  shimmerBottomBorder: IStyle;\r\n  check: IStyle;\r\n}\r\n"]}