{"version":3,"file":"DetailsList.DragDrop.Example.js","sourceRoot":"../src/","sources":["components/DetailsList/examples/DetailsList.DragDrop.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Link } from 'office-ui-fabric-react/lib/Link';\r\nimport { DetailsList, Selection, IColumn, buildColumns, IColumnReorderOptions } from 'office-ui-fabric-react/lib/DetailsList';\r\nimport { MarqueeSelection } from 'office-ui-fabric-react/lib/MarqueeSelection';\r\nimport { IDragDropEvents, IDragDropContext } from 'office-ui-fabric-react/lib/utilities/dragdrop/interfaces';\r\nimport { createListItems, IExampleItem } from 'office-ui-fabric-react/lib/utilities/exampleData';\r\nimport { TextField, ITextFieldStyles } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\r\nimport { getTheme, mergeStyles } from 'office-ui-fabric-react/lib/Styling';\r\n\r\nconst theme = getTheme();\r\nconst margin = '0 30px 20px 0';\r\nconst dragEnterClass = mergeStyles({\r\n  backgroundColor: theme.palette.neutralLight\r\n});\r\nconst controlWrapperClass = mergeStyles({\r\n  display: 'flex',\r\n  flexWrap: 'wrap'\r\n});\r\nconst textFieldStyles: Partial<ITextFieldStyles> = {\r\n  root: { margin: margin },\r\n  fieldGroup: { maxWidth: '100px' }\r\n};\r\n\r\nexport interface IDetailsListDragDropExampleState {\r\n  items: IExampleItem[];\r\n  columns: IColumn[];\r\n  isColumnReorderEnabled: boolean;\r\n  frozenColumnCountFromStart: string;\r\n  frozenColumnCountFromEnd: string;\r\n}\r\n\r\nexport class DetailsListDragDropExample extends React.Component<{}, IDetailsListDragDropExampleState> {\r\n  private _selection: Selection;\r\n  private _dragDropEvents: IDragDropEvents;\r\n  private _draggedItem: IExampleItem | undefined;\r\n  private _draggedIndex: number;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this._selection = new Selection();\r\n    this._dragDropEvents = this._getDragDropEvents();\r\n    this._draggedIndex = -1;\r\n    const items = createListItems(10, 0);\r\n\r\n    this.state = {\r\n      items: items,\r\n      columns: buildColumns(items, true),\r\n      isColumnReorderEnabled: true,\r\n      frozenColumnCountFromStart: '1',\r\n      frozenColumnCountFromEnd: '0'\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { items, columns, isColumnReorderEnabled, frozenColumnCountFromStart, frozenColumnCountFromEnd } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className={controlWrapperClass}>\r\n          <Toggle\r\n            label=\"Enable column reorder\"\r\n            checked={isColumnReorderEnabled}\r\n            onChange={this._onChangeColumnReorderEnabled}\r\n            onText=\"Enabled\"\r\n            offText=\"Disabled\"\r\n            styles={{ root: { margin: margin } }}\r\n          />\r\n          <TextField\r\n            label=\"Number of left frozen columns\"\r\n            onGetErrorMessage={this._validateNumber}\r\n            value={frozenColumnCountFromStart}\r\n            onChange={this._onChangeStartCountText}\r\n            styles={textFieldStyles}\r\n          />\r\n          <TextField\r\n            label=\"Number of right frozen columns\"\r\n            onGetErrorMessage={this._validateNumber}\r\n            value={frozenColumnCountFromEnd}\r\n            onChange={this._onChangeEndCountText}\r\n            styles={textFieldStyles}\r\n          />\r\n        </div>\r\n        <MarqueeSelection selection={this._selection}>\r\n          <DetailsList\r\n            setKey=\"items\"\r\n            items={items}\r\n            columns={columns}\r\n            selection={this._selection}\r\n            selectionPreservedOnEmptyClick={true}\r\n            onItemInvoked={this._onItemInvoked}\r\n            onRenderItemColumn={this._onRenderItemColumn}\r\n            dragDropEvents={this._dragDropEvents}\r\n            columnReorderOptions={this.state.isColumnReorderEnabled ? this._getColumnReorderOptions() : undefined}\r\n            ariaLabelForSelectionColumn=\"Toggle selection\"\r\n            ariaLabelForSelectAllCheckbox=\"Toggle selection for all items\"\r\n          />\r\n        </MarqueeSelection>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _handleColumnReorder = (draggedIndex: number, targetIndex: number) => {\r\n    const draggedItems = this.state.columns[draggedIndex];\r\n    const newColumns: IColumn[] = [...this.state.columns];\r\n\r\n    // insert before the dropped item\r\n    newColumns.splice(draggedIndex, 1);\r\n    newColumns.splice(targetIndex, 0, draggedItems);\r\n    this.setState({ columns: newColumns });\r\n  };\r\n\r\n  private _getColumnReorderOptions(): IColumnReorderOptions {\r\n    return {\r\n      frozenColumnCountFromStart: parseInt(this.state.frozenColumnCountFromStart, 10),\r\n      frozenColumnCountFromEnd: parseInt(this.state.frozenColumnCountFromEnd, 10),\r\n      handleColumnReorder: this._handleColumnReorder\r\n    };\r\n  }\r\n\r\n  private _validateNumber(value: string): string {\r\n    return isNaN(Number(value)) ? `The value should be a number, actual is ${value}.` : '';\r\n  }\r\n\r\n  private _onChangeStartCountText = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, text: string): void => {\r\n    this.setState({ frozenColumnCountFromStart: text });\r\n  };\r\n\r\n  private _onChangeEndCountText = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, text: string): void => {\r\n    this.setState({ frozenColumnCountFromEnd: text });\r\n  };\r\n\r\n  private _onChangeColumnReorderEnabled = (ev: React.MouseEvent<HTMLElement>, checked: boolean): void => {\r\n    this.setState({ isColumnReorderEnabled: checked });\r\n  };\r\n\r\n  private _getDragDropEvents(): IDragDropEvents {\r\n    return {\r\n      canDrop: (dropContext?: IDragDropContext, dragContext?: IDragDropContext) => {\r\n        return true;\r\n      },\r\n      canDrag: (item?: any) => {\r\n        return true;\r\n      },\r\n      onDragEnter: (item?: any, event?: DragEvent) => {\r\n        // return string is the css classes that will be added to the entering element.\r\n        return dragEnterClass;\r\n      },\r\n      onDragLeave: (item?: any, event?: DragEvent) => {\r\n        return;\r\n      },\r\n      onDrop: (item?: any, event?: DragEvent) => {\r\n        if (this._draggedItem) {\r\n          this._insertBeforeItem(item);\r\n        }\r\n      },\r\n      onDragStart: (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => {\r\n        this._draggedItem = item;\r\n        this._draggedIndex = itemIndex!;\r\n      },\r\n      onDragEnd: (item?: any, event?: DragEvent) => {\r\n        this._draggedItem = undefined;\r\n        this._draggedIndex = -1;\r\n      }\r\n    };\r\n  }\r\n\r\n  private _onItemInvoked = (item: IExampleItem): void => {\r\n    alert(`Item invoked: ${item.name}`);\r\n  };\r\n\r\n  private _onRenderItemColumn = (item: IExampleItem, index: number, column: IColumn): JSX.Element | string => {\r\n    const key = column.key as keyof IExampleItem;\r\n    if (key === 'name') {\r\n      return <Link data-selection-invoke={true}>{item[key]}</Link>;\r\n    }\r\n\r\n    return String(item[key]);\r\n  };\r\n\r\n  private _insertBeforeItem(item: IExampleItem): void {\r\n    const draggedItems = this._selection.isIndexSelected(this._draggedIndex)\r\n      ? (this._selection.getSelection() as IExampleItem[])\r\n      : [this._draggedItem!];\r\n\r\n    const items = this.state.items.filter(itm => draggedItems.indexOf(itm) === -1);\r\n    let insertIndex = items.indexOf(item);\r\n\r\n    // if dragging/dropping on itself, index will be 0.\r\n    if (insertIndex === -1) {\r\n      insertIndex = 0;\r\n    }\r\n\r\n    items.splice(insertIndex, 0, ...draggedItems);\r\n\r\n    this.setState({ items: items });\r\n  }\r\n}\r\n"]}