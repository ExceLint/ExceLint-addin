{"version":3,"file":"DetailsColumn.types.js","sourceRoot":"../src/","sources":["components/DetailsList/DetailsColumn.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IColumn } from './DetailsList.types';\r\nimport { DetailsColumnBase } from './DetailsColumn.base';\r\nimport { IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { ITooltipHostProps } from '../../Tooltip';\r\nimport { IDragDropHelper } from '../../utilities/dragdrop/index';\r\nimport { ICellStyleProps } from './DetailsRow.types';\r\nimport { ITheme, IStyle } from '../../Styling';\r\n\r\nexport interface IDetailsColumnProps extends React.ClassAttributes<DetailsColumnBase> {\r\n  theme?: ITheme;\r\n  styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\r\n  componentRef?: () => void;\r\n  column: IColumn;\r\n  columnIndex: number;\r\n  parentId?: string;\r\n  onRenderColumnHeaderTooltip?: IRenderFunction<ITooltipHostProps>;\r\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\r\n  onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\r\n  dragDropHelper?: IDragDropHelper | null;\r\n  isDraggable?: boolean;\r\n  // @deprecated, use `updateDragInfo`\r\n  setDraggedItemIndex?: (itemIndex: number) => void;\r\n  updateDragInfo?: (props: { itemIndex: number }, event?: MouseEvent) => void;\r\n  isDropped?: boolean;\r\n  cellStyleProps?: ICellStyleProps;\r\n}\r\n\r\nexport type IDetailsColumnStyleProps = Required<Pick<IDetailsColumnProps, 'theme' | 'cellStyleProps'>> & {\r\n  headerClassName?: string;\r\n  isActionable?: boolean;\r\n  isEmpty?: boolean;\r\n  isIconVisible?: boolean;\r\n  isPadded?: boolean;\r\n  isIconOnly?: boolean;\r\n  iconClassName?: string;\r\n  transitionDurationDrag?: number;\r\n  transitionDurationDrop?: number;\r\n};\r\n\r\nexport interface IDetailsColumnStyles {\r\n  root: IStyle;\r\n  gripperBarVerticalStyle: IStyle;\r\n  cellTooltip: IStyle;\r\n  cellTitle: IStyle;\r\n  cellName: IStyle;\r\n  iconClassName: IStyle;\r\n  nearIcon: IStyle;\r\n  accessibleLabel: IStyle;\r\n  sortIcon: IStyle;\r\n  filterChevron: IStyle;\r\n  borderAfterDropping: IStyle;\r\n  noBorderAfterDropping: IStyle;\r\n  borderWhileDragging: IStyle;\r\n  noBorderWhileDragging: IStyle;\r\n}\r\n"]}