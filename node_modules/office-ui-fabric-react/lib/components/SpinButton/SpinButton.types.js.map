{"version":3,"file":"SpinButton.types.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { Position } from '../../utilities/positioning';\r\nimport { IIconProps } from '../../Icon';\r\nimport { ITheme, IStyle } from '../../Styling';\r\nimport { ISpinButtonClassNames } from './SpinButton.classNames';\r\nimport { KeyboardSpinDirection } from './SpinButton';\r\nimport { IButtonStyles } from '../../Button';\r\nimport { IKeytipProps } from '../../Keytip';\r\nimport { IRefObject } from '../../Utilities';\r\n\r\nexport interface ISpinButton {\r\n  /**\r\n   * The value of the SpinButton. Use this if you intend to pass in a new value as a result of onChange events.\r\n   * This value is mutually exclusive to defaultValue. Use one or the other.\r\n   */\r\n  value?: string;\r\n\r\n  /**\r\n   * Sets focus to the spin button.\r\n   */\r\n  focus: () => void;\r\n}\r\n\r\nexport interface ISpinButtonProps {\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef?: IRefObject<ISpinButton>;\r\n\r\n  /**\r\n   * The initial value of the SpinButton. Use this if you intend for the SpinButton to be an uncontrolled component.\r\n   * This value is mutually exclusive to value. Use one or the other.\r\n   * @defaultvalue 0\r\n   */\r\n  defaultValue?: string;\r\n\r\n  /**\r\n   * The value of the SpinButton. Use this if you intend to pass in a new value as a result of onChange events.\r\n   * This value is mutually exclusive to defaultValue. Use one or the other.\r\n   */\r\n  value?: string;\r\n\r\n  /**\r\n   * The min value of the SpinButton.\r\n   * @defaultvalue 0\r\n   */\r\n  min?: number;\r\n\r\n  /**\r\n   * The max value of the SpinButton.\r\n   * @defaultvalue 10\r\n   */\r\n  max?: number;\r\n\r\n  /**\r\n   * The difference between the two adjacent values of the SpinButton.\r\n   * This value is sued to calculate the precision of the input if no\r\n   * precision is given. The precision calculated this way will always\r\n   * be \\>= 0.\r\n   * @defaultvalue 1\r\n   */\r\n  step?: number;\r\n\r\n  /**\r\n   * A description of the SpinButton for the benefit of screen readers.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Optional prop to add a string id that can be referenced inside the aria-describedby attribute\r\n   */\r\n  ariaDescribedBy?: string;\r\n\r\n  /**\r\n   * A title for the SpinButton used for a more descriptive name that's also visible on its tooltip.\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * Whether or not the SpinButton is disabled.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Optional className for SpinButton.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Descriptive label for the SpinButton.\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * @defaultvalue Left\r\n   */\r\n  labelPosition?: Position;\r\n\r\n  /**\r\n   * Icon that goes along with the label for the whole SpinButton\r\n   */\r\n  iconProps?: IIconProps;\r\n\r\n  /**\r\n   * This callback is triggered when the value inside the SpinButton should be validated.\r\n   * @param value - The value entered in the SpinButton to validate\r\n   * @param event - The event that triggered this validate, if any. (For accessibility)\r\n   * @returns If a string is returned, it will be used as the value of the SpinButton.\r\n   */\r\n  onValidate?: (value: string, event?: React.SyntheticEvent<HTMLElement>) => string | void;\r\n\r\n  /**\r\n   * This callback is triggered when the increment button is pressed or if the user presses up arrow\r\n   * with focus on the input of the spinButton\r\n   * @returns If a string is returned, it will be used as the value of the SpinButton.\r\n   */\r\n  onIncrement?: (value: string) => string | void;\r\n\r\n  /**\r\n   * This callback is triggered when the decrement button is pressed or if the user presses down arrow\r\n   * with focus on the input of the spinButton\r\n   * @returns If a string is returned, it will be used as the value of the SpinButton.\r\n   */\r\n  onDecrement?: (value: string) => string | void;\r\n\r\n  /**\r\n   * A callback for when the user put focus on the picker\r\n   */\r\n  onFocus?: React.FocusEventHandler<HTMLInputElement>;\r\n\r\n  /**\r\n   * A callback for when the user moves the focus away from the picker\r\n   */\r\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\r\n\r\n  /**\r\n   * Icon for the increment button of the spinButton\r\n   */\r\n  incrementButtonIcon?: IIconProps;\r\n\r\n  /**\r\n   * Icon for the decrement button of the spinButton\r\n   */\r\n  decrementButtonIcon?: IIconProps;\r\n\r\n  /**\r\n   * Custom styling for individual elements within the button DOM.\r\n   */\r\n  styles?: Partial<ISpinButtonStyles>;\r\n\r\n  /**\r\n   * Custom function for providing the classNames for the spinbutton. Can be used to provide\r\n   * all styles for the component instead of applying them on top of the default styles.\r\n   */\r\n  getClassNames?: (\r\n    theme: ITheme,\r\n    disabled: boolean,\r\n    isFocused: boolean,\r\n    keyboardSpinDirection: KeyboardSpinDirection,\r\n    labelPosition?: Position,\r\n    className?: string\r\n  ) => ISpinButtonClassNames;\r\n\r\n  /**\r\n   * Custom styles for the upArrow button.\r\n   *\r\n   * Note: The buttons are in a checked state when arrow keys are used to\r\n   * incremenent/decrement the spinButton. Use rootChecked instead of rootPressed\r\n   * for styling when that is the case.\r\n   */\r\n  upArrowButtonStyles?: Partial<IButtonStyles>;\r\n\r\n  /**\r\n   * Custom styles for the downArrow button.\r\n   *\r\n   * Note: The buttons are in a checked state when arrow keys are used to\r\n   * incremenent/decrement the spinButton. Use rootChecked instead of rootPressed\r\n   * for styling when that is the case.\r\n   */\r\n  downArrowButtonStyles?: Partial<IButtonStyles>;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Accessibile label text for the increment button for the benefit of the screen reader.\r\n   */\r\n  incrementButtonAriaLabel?: string;\r\n\r\n  /**\r\n   * Accessibile label text for the decrement button for the benefit of the screen reader.\r\n   */\r\n  decrementButtonAriaLabel?: string;\r\n\r\n  /**\r\n   * To how many decimal places the value should be rounded to.\r\n   * The default value is calculated based on the precision of step.\r\n   * IE: if step = 1, precision = 0. step = 0.0089, precision = 4. step = 300, precision = 2. step = 23.00, precision = 2.\r\n   */\r\n  precision?: number;\r\n\r\n  /**\r\n   * The position in the parent set (if in a set) for aria-posinset.\r\n   */\r\n  ariaPositionInSet?: number;\r\n\r\n  /**\r\n   * The total size of the parent set (if in a set) for aria-setsize.\r\n   */\r\n  ariaSetSize?: number;\r\n\r\n  /**\r\n   * Sets the aria-valuenow of the spin button. The component must be\r\n   * controlled by the creator who controls the value externally.\r\n   * ariaValueNow would be the numeric form of value.\r\n   */\r\n  ariaValueNow?: number;\r\n\r\n  /*\r\n   * Sets the aria-valuetext of the spin button. The component must be\r\n   * controlled by the creator who controls the values externally.\r\n   */\r\n  ariaValueText?: string;\r\n\r\n  /**\r\n   * Optional keytip for this spin button\r\n   */\r\n  keytipProps?: IKeytipProps;\r\n}\r\n\r\nexport interface ISpinButtonStyles {\r\n  /**\r\n   * Styles for the root of the spin button component.\r\n   */\r\n  root: IStyle;\r\n\r\n  /**\r\n   * Style for the label wrapper element of the component\r\n   * The label wrapper contains the icon and the label.\r\n   */\r\n  labelWrapper: IStyle;\r\n\r\n  /**\r\n   * Style override when the label is positioned at the start.\r\n   */\r\n  labelWrapperStart: IStyle;\r\n\r\n  /**\r\n   * Style override when the label is positioned at the end.\r\n   */\r\n  labelWrapperEnd: IStyle;\r\n\r\n  /**\r\n   * Style override when the label is positioned at the top.\r\n   */\r\n  labelWrapperTop: IStyle;\r\n\r\n  /**\r\n   * Style override when the label is positioned at the bottom.\r\n   */\r\n  labelWrapperBottom: IStyle;\r\n\r\n  /**\r\n   * Style for the icon.\r\n   */\r\n  icon: IStyle;\r\n\r\n  /**\r\n   * Style for the icon.\r\n   */\r\n  iconDisabled: IStyle;\r\n\r\n  /**\r\n   * Style for the label text\r\n   */\r\n  label: IStyle;\r\n\r\n  /**\r\n   * Style for the label text\r\n   */\r\n  labelDisabled: IStyle;\r\n\r\n  /**\r\n   * Style for spinButtonWrapper when enabled.\r\n   */\r\n  spinButtonWrapper: IStyle;\r\n\r\n  /**\r\n   * Style override when label is positioned at the top/bottom.\r\n   */\r\n  spinButtonWrapperTopBottom: IStyle;\r\n\r\n  /**\r\n   * Style override when spinButton is enabled/hovered.\r\n   */\r\n  spinButtonWrapperHovered: IStyle;\r\n\r\n  /**\r\n   * Style override when spinButton is enabled/focused.\r\n   */\r\n  spinButtonWrapperFocused: IStyle;\r\n\r\n  /**\r\n   * Style override when spinButton is disabled.\r\n   */\r\n  spinButtonWrapperDisabled: IStyle;\r\n\r\n  /**\r\n   * Styles for the input.\r\n   */\r\n  input: IStyle;\r\n\r\n  /**\r\n   * Style override for ::selection\r\n   */\r\n  inputTextSelected: IStyle;\r\n\r\n  /**\r\n   * Style override when spinButton is disabled.\r\n   */\r\n  inputDisabled: IStyle;\r\n\r\n  /**\r\n   * Styles for the arrowButtonsContainer\r\n   */\r\n  arrowButtonsContainer: IStyle;\r\n\r\n  /**\r\n   * Style override for the arrowButtonsContainer when spin button is disabled.\r\n   */\r\n  arrowButtonsContainerDisabled: IStyle;\r\n}\r\n"]}