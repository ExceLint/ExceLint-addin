{"version":3,"file":"ColorPickerGridCell.styles.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { IsFocusVisibleClassName } from '../../Utilities';\r\nimport { HighContrastSelector } from '../../Styling';\r\nimport { IColorPickerGridCellStyleProps, IColorPickerGridCellStyles } from './ColorPickerGridCell.types';\r\n\r\n// Size breakpoint when the default border width changes from 2px to 4px.\r\nconst CELL_BORDER_BREAKPOINT = 24;\r\nconst LARGE_BORDER = 4;\r\nconst SMALL_BORDER = 2;\r\nconst DIVIDING_PADDING = 2;\r\nconst DEFAULT_CELL_SIZE = 20;\r\n\r\nexport const getStyles = (props: IColorPickerGridCellStyleProps): IColorPickerGridCellStyles => {\r\n  const { theme, disabled, selected, circle, isWhite, height = DEFAULT_CELL_SIZE, width = DEFAULT_CELL_SIZE, borderWidth } = props;\r\n  const { semanticColors } = theme;\r\n\r\n  // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\r\n  const calculatedBorderWidth = borderWidth ? borderWidth : width < CELL_BORDER_BREAKPOINT ? SMALL_BORDER : LARGE_BORDER;\r\n\r\n  return {\r\n    // this is a button that wraps the color\r\n    colorCell: [\r\n      {\r\n        backgroundColor: semanticColors.bodyBackground,\r\n        padding: 0,\r\n        position: 'relative',\r\n        boxSizing: 'border-box',\r\n        display: 'inline-block',\r\n        cursor: 'pointer',\r\n        userSelect: 'none',\r\n        border: 'none',\r\n        height: height,\r\n        width: width\r\n      },\r\n      !circle && {\r\n        selectors: {\r\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\r\n            // -1px so that we don't increase visually the size of the cell.\r\n            outlineOffset: `${calculatedBorderWidth - 1}px`\r\n          }\r\n        }\r\n      },\r\n      // In focus state for circle we want a round border which is not possible with outline.\r\n      circle && {\r\n        borderRadius: '50%',\r\n        selectors: {\r\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\r\n            outline: 'none',\r\n            borderColor: semanticColors.focusBorder,\r\n            borderRadius: '50%',\r\n            left: -calculatedBorderWidth,\r\n            right: -calculatedBorderWidth,\r\n            top: -calculatedBorderWidth,\r\n            bottom: -calculatedBorderWidth,\r\n            selectors: {\r\n              [HighContrastSelector]: {\r\n                outline: `1px solid ButtonText`\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      selected && {\r\n        padding: DIVIDING_PADDING,\r\n        border: `${calculatedBorderWidth}px solid ${theme.palette.neutralTertiaryAlt}`\r\n      },\r\n      !selected && {\r\n        selectors: {\r\n          ['&:hover, &:active, &:focus']: {\r\n            backgroundColor: semanticColors.bodyBackground, // overwrite white's override\r\n            padding: DIVIDING_PADDING,\r\n            border: `${calculatedBorderWidth}px solid ${theme.palette.neutralLight}`\r\n          },\r\n          ['&:focus']: {\r\n            borderColor: semanticColors.bodyBackground,\r\n            padding: 0,\r\n            selectors: {\r\n              ':hover': {\r\n                borderColor: theme.palette.neutralLight,\r\n                padding: DIVIDING_PADDING\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      disabled && {\r\n        color: semanticColors.disabledBodyText,\r\n        pointerEvents: 'none',\r\n        opacity: 0.3\r\n      },\r\n      isWhite &&\r\n        !selected && {\r\n          // fake a border for white\r\n          backgroundColor: semanticColors.bodyDivider,\r\n          padding: 1\r\n        }\r\n    ],\r\n    // the <svg> that holds the color\r\n    svg: [\r\n      {\r\n        width: '100%',\r\n        height: '100%'\r\n      },\r\n      circle && {\r\n        borderRadius: '50%'\r\n      }\r\n    ]\r\n  };\r\n};\r\n"]}