{"version":3,"file":"Checkbox.base.js","sourceRoot":"../src/","sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { getId, classNamesFunction, mergeAriaAttributeValues, initializeComponentRef, warnMutuallyExclusive } from '../../Utilities';\r\nimport { Icon } from '../../Icon';\r\nimport { ICheckbox, ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\r\nimport { KeytipData } from '../../KeytipData';\r\n\r\nexport interface ICheckboxState {\r\n  /** Is true when Uncontrolled control is checked. */\r\n  isChecked?: boolean;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\r\n\r\nexport class CheckboxBase extends React.Component<ICheckboxProps, ICheckboxState> implements ICheckbox {\r\n  public static defaultProps: ICheckboxProps = {\r\n    boxSide: 'start'\r\n  };\r\n\r\n  private _checkBox = React.createRef<HTMLInputElement>();\r\n  private _id: string;\r\n  private _classNames: { [key in keyof ICheckboxStyles]: string };\r\n\r\n  /**\r\n   * Initialize a new instance of the Checkbox\r\n   * @param props - Props for the component\r\n   * @param context - Context or initial state for the base component.\r\n   */\r\n  constructor(props: ICheckboxProps, context?: any) {\r\n    super(props, context);\r\n\r\n    initializeComponentRef(this);\r\n\r\n    if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\r\n      warnMutuallyExclusive('Checkbox', props, {\r\n        checked: 'defaultChecked'\r\n      });\r\n    }\r\n\r\n    this._id = this.props.id || getId('checkbox-');\r\n    this.state = {\r\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked)\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ICheckboxProps): void {\r\n    if (newProps.checked !== undefined) {\r\n      this.setState({\r\n        isChecked: !!newProps.checked // convert null to false\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the Checkbox based on passed props\r\n   */\r\n  public render(): JSX.Element {\r\n    const {\r\n      checked,\r\n      className,\r\n      defaultChecked,\r\n      disabled,\r\n      inputProps,\r\n      name,\r\n      boxSide,\r\n      theme,\r\n      ariaLabel,\r\n      ariaLabelledBy,\r\n      ariaDescribedBy,\r\n      styles,\r\n      onRenderLabel = this._onRenderLabel,\r\n      checkmarkIconProps,\r\n      ariaPositionInSet,\r\n      ariaSetSize,\r\n      keytipProps,\r\n      title\r\n    } = this.props;\r\n\r\n    const isChecked = checked === undefined ? this.state.isChecked : checked;\r\n    const isReversed = boxSide !== 'start' ? true : false;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className,\r\n      disabled,\r\n      checked: isChecked,\r\n      reversed: isReversed,\r\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel\r\n    });\r\n\r\n    return (\r\n      <KeytipData keytipProps={keytipProps} disabled={disabled}>\r\n        {(keytipAttributes: any): JSX.Element => (\r\n          <div className={this._classNames.root}>\r\n            <input\r\n              type=\"checkbox\"\r\n              {...inputProps}\r\n              data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\r\n              {...checked !== undefined && { checked }}\r\n              {...defaultChecked !== undefined && { defaultChecked }}\r\n              disabled={disabled}\r\n              className={this._classNames.input}\r\n              ref={this._checkBox}\r\n              name={name}\r\n              id={this._id}\r\n              title={title}\r\n              onChange={this._onChange}\r\n              onFocus={this._onFocus}\r\n              onBlur={this._onBlur}\r\n              aria-disabled={disabled}\r\n              aria-label={ariaLabel}\r\n              aria-labelledby={ariaLabelledBy}\r\n              aria-describedby={mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])}\r\n              aria-posinset={ariaPositionInSet}\r\n              aria-setsize={ariaSetSize}\r\n            />\r\n            <label className={this._classNames.label} htmlFor={this._id}>\r\n              <div className={this._classNames.checkbox} data-ktp-target={keytipAttributes['data-ktp-target']}>\r\n                <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={this._classNames.checkmark} />\r\n              </div>\r\n              {onRenderLabel(this.props, this._onRenderLabel)}\r\n            </label>\r\n          </div>\r\n        )}\r\n      </KeytipData>\r\n    );\r\n  }\r\n\r\n  public get checked(): boolean {\r\n    return this.state.isChecked!;\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._checkBox.current) {\r\n      this._checkBox.current.focus();\r\n    }\r\n  }\r\n\r\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { inputProps } = this.props;\r\n\r\n    if (inputProps && inputProps.onFocus) {\r\n      inputProps.onFocus(ev);\r\n    }\r\n  };\r\n\r\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { inputProps } = this.props;\r\n\r\n    if (inputProps && inputProps.onBlur) {\r\n      inputProps.onBlur(ev);\r\n    }\r\n  };\r\n\r\n  private _onChange = (ev: React.FormEvent<HTMLElement>): void => {\r\n    const { disabled, onChange } = this.props;\r\n    const { isChecked } = this.state;\r\n\r\n    if (!disabled) {\r\n      if (onChange) {\r\n        onChange(ev, !isChecked);\r\n      }\r\n\r\n      if (this.props.checked === undefined) {\r\n        this.setState({ isChecked: !isChecked });\r\n      }\r\n    }\r\n  };\r\n\r\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\r\n    const { label } = props;\r\n\r\n    return label ? <span className={this._classNames.text}>{label}</span> : null;\r\n  };\r\n}\r\n"]}