{"version":3,"file":"Modal.base.js","sourceRoot":"../src/","sources":["components/Modal/Modal.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction, getId, allowScrollOnElement } from '../../Utilities';\r\nimport { FocusTrapZone, IFocusTrapZone } from '../FocusTrapZone/index';\r\nimport { animationDuration } from './Modal.styles';\r\nimport { IModalProps, IModalStyleProps, IModalStyles, IModal } from './Modal.types';\r\nimport { Overlay } from '../../Overlay';\r\nimport { ILayerProps, Layer } from '../../Layer';\r\nimport { Popup } from '../Popup/index';\r\nimport { withResponsiveMode, ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\r\n\r\n// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\r\n\r\nconst DefaultLayerProps: ILayerProps = {\r\n  eventBubblingEnabled: false\r\n};\r\n\r\nexport interface IDialogState {\r\n  isOpen?: boolean;\r\n  isVisible?: boolean;\r\n  isVisibleClose?: boolean;\r\n  id?: string;\r\n  hasBeenOpened?: boolean;\r\n  modalRectangleTop?: number;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<IModalStyleProps, IModalStyles>();\r\n\r\n@withResponsiveMode\r\nexport class ModalBase extends BaseComponent<IModalProps, IDialogState> implements IModal {\r\n  public static defaultProps: IModalProps = {\r\n    isOpen: false,\r\n    isDarkOverlay: true,\r\n    isBlocking: false,\r\n    className: '',\r\n    containerClassName: ''\r\n  };\r\n\r\n  private _onModalCloseTimer: number;\r\n  private _focusTrapZone = React.createRef<IFocusTrapZone>();\r\n  private _scrollableContent: HTMLDivElement | null;\r\n\r\n  constructor(props: IModalProps) {\r\n    super(props);\r\n    this.state = {\r\n      id: getId('Modal'),\r\n      isOpen: props.isOpen,\r\n      isVisible: props.isOpen,\r\n      hasBeenOpened: props.isOpen\r\n    };\r\n\r\n    this._warnDeprecations({\r\n      onLayerDidMount: 'layerProps.onLayerDidMount'\r\n    });\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IModalProps): void {\r\n    clearTimeout(this._onModalCloseTimer);\r\n\r\n    // Opening the dialog\r\n    if (newProps.isOpen) {\r\n      if (!this.state.isOpen) {\r\n        // First Open\r\n        this.setState({\r\n          isOpen: true\r\n        });\r\n      } else {\r\n        // Modal has been opened\r\n        // Reopen during closing\r\n        this.setState({\r\n          hasBeenOpened: true,\r\n          isVisible: true\r\n        });\r\n\r\n        if (newProps.topOffsetFixed) {\r\n          const dialogMain = document.getElementsByClassName('ms-Dialog-main');\r\n          let modalRectangle;\r\n          if (dialogMain.length > 0) {\r\n            modalRectangle = dialogMain[0].getBoundingClientRect();\r\n            this.setState({\r\n              modalRectangleTop: modalRectangle.top\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Closing the dialog\r\n    if (!newProps.isOpen && this.state.isOpen) {\r\n      this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, parseFloat(animationDuration) * 1000);\r\n      this.setState({\r\n        isVisible: false\r\n      });\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IModalProps, prevState: IDialogState) {\r\n    if (!prevProps.isOpen && !prevState.isVisible) {\r\n      this.setState({\r\n        isVisible: true\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element | null {\r\n    const {\r\n      className,\r\n      containerClassName,\r\n      scrollableContentClassName,\r\n      elementToFocusOnDismiss,\r\n      firstFocusableSelector,\r\n      forceFocusInsideTrap,\r\n      ignoreExternalFocusing,\r\n      isBlocking,\r\n      isClickableOutsideFocusTrap,\r\n      isDarkOverlay,\r\n      onDismiss,\r\n      layerProps,\r\n      responsiveMode,\r\n      titleAriaId,\r\n      styles,\r\n      subtitleAriaId,\r\n      theme,\r\n      topOffsetFixed,\r\n      onLayerDidMount,\r\n      isModeless\r\n    } = this.props;\r\n    const { isOpen, isVisible, hasBeenOpened, modalRectangleTop } = this.state;\r\n\r\n    if (!isOpen) {\r\n      return null;\r\n    }\r\n\r\n    const classNames = getClassNames(styles, {\r\n      theme: theme!,\r\n      className,\r\n      containerClassName,\r\n      scrollableContentClassName,\r\n      isOpen,\r\n      isVisible,\r\n      hasBeenOpened,\r\n      modalRectangleTop,\r\n      topOffsetFixed,\r\n      isModeless\r\n    });\r\n\r\n    // if the modal is modeless, add the classname to correctly style the layer\r\n    const layerClassName = isModeless\r\n      ? this.props.className\r\n        ? `${this.props.className} ${classNames.layer}`\r\n        : classNames.layer\r\n      : this.props.className;\r\n\r\n    const mergedLayerProps = {\r\n      ...DefaultLayerProps,\r\n      ...this.props.layerProps,\r\n      onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount,\r\n      className: layerClassName,\r\n      insertFirst: isModeless\r\n    };\r\n\r\n    // @temp tuatology - Will adjust this to be a panel at certain breakpoints\r\n    if (responsiveMode! >= ResponsiveMode.small) {\r\n      return (\r\n        <Layer {...mergedLayerProps}>\r\n          <Popup\r\n            role={isModeless || !isBlocking ? 'dialog' : 'alertdialog'}\r\n            aria-modal={!isModeless}\r\n            ariaLabelledBy={titleAriaId}\r\n            ariaDescribedBy={subtitleAriaId}\r\n            onDismiss={onDismiss}\r\n          >\r\n            <div className={classNames.root}>\r\n              {!isModeless && <Overlay isDarkThemed={isDarkOverlay} onClick={isBlocking ? undefined : (onDismiss as any)} />}\r\n              <FocusTrapZone\r\n                componentRef={this._focusTrapZone}\r\n                className={classNames.main}\r\n                elementToFocusOnDismiss={elementToFocusOnDismiss}\r\n                isClickableOutsideFocusTrap={isModeless || isClickableOutsideFocusTrap || !isBlocking}\r\n                ignoreExternalFocusing={ignoreExternalFocusing}\r\n                forceFocusInsideTrap={isModeless ? !isModeless : forceFocusInsideTrap}\r\n                firstFocusableSelector={firstFocusableSelector}\r\n              >\r\n                <div ref={this._allowScrollOnModal} className={classNames.scrollableContent} data-is-scrollable={true}>\r\n                  {this.props.children}\r\n                </div>\r\n              </FocusTrapZone>\r\n            </div>\r\n          </Popup>\r\n        </Layer>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public focus() {\r\n    if (this._focusTrapZone.current) {\r\n      this._focusTrapZone.current.focus();\r\n    }\r\n  }\r\n\r\n  // Allow the user to scroll within the modal but not on the body\r\n  private _allowScrollOnModal = (elt: HTMLDivElement | null): void => {\r\n    if (elt) {\r\n      allowScrollOnElement(elt, this._events);\r\n    } else {\r\n      this._events.off(this._scrollableContent);\r\n    }\r\n    this._scrollableContent = elt;\r\n  };\r\n\r\n  // Watch for completed animations and set the state\r\n  private _onModalClose(): void {\r\n    this.setState({\r\n      isOpen: false\r\n    });\r\n\r\n    // Call the onDismiss callback\r\n    if (this.props.onDismissed) {\r\n      this.props.onDismissed();\r\n    }\r\n  }\r\n}\r\n"]}