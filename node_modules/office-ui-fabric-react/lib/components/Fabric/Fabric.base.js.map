{"version":3,"file":"Fabric.base.js","sourceRoot":"../src/","sources":["components/Fabric/Fabric.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Customizer,\n  getNativeProps,\n  divProperties,\n  classNamesFunction,\n  getDocument,\n  memoizeFunction,\n  getRTL,\n  FocusRects,\n} from '../../Utilities';\nimport { IFabricProps, IFabricStyleProps, IFabricStyles } from './Fabric.types';\nimport { IProcessedStyleSet } from '@uifabric/merge-styles';\nimport { ITheme, createTheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IFabricStyleProps, IFabricStyles>();\nconst getFabricTheme = memoizeFunction((theme?: ITheme, isRTL?: boolean) => createTheme({ ...theme, rtl: isRTL }));\n\nconst getDir = (theme?: ITheme, dir?: IFabricProps['dir']) => {\n  const contextDir = getRTL(theme) ? 'rtl' : 'ltr';\n  const pageDir = getRTL() ? 'rtl' : 'ltr';\n  const componentDir = dir ? dir : contextDir;\n  return {\n    // If Fabric dir !== contextDir\n    // Or If contextDir !== pageDir\n    // Then we need to set dir of the Fabric root\n    rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,\n    // If dir !== contextDir || pageDir\n    // then set contextual theme around content\n    needsTheme: componentDir !== contextDir,\n  };\n};\n\nexport class FabricBase extends React.Component<IFabricProps> {\n  private _rootElement = React.createRef<HTMLDivElement>();\n  private _removeClassNameFromBody?: () => void = undefined;\n\n  public render() {\n    const { as: Root = 'div', theme, dir } = this.props;\n    const classNames = this._getClassNames();\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['dir']);\n    const { rootDir, needsTheme } = getDir(theme, dir);\n\n    let renderedContent = <Root dir={rootDir} {...divProps} className={classNames.root} ref={this._rootElement} />;\n\n    if (needsTheme) {\n      renderedContent = (\n        <Customizer settings={{ theme: getFabricTheme(theme, dir === 'rtl') }}>{renderedContent}</Customizer>\n      );\n    }\n\n    return (\n      <>\n        {renderedContent}\n        <FocusRects rootRef={this._rootElement} />\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    this._addClassNameToBody();\n  }\n\n  public componentWillUnmount(): void {\n    if (this._removeClassNameFromBody) {\n      this._removeClassNameFromBody();\n    }\n  }\n\n  private _getClassNames(): IProcessedStyleSet<IFabricStyles> {\n    const { className, theme, applyTheme, styles } = this.props;\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      applyTheme: applyTheme,\n      className,\n    });\n    return classNames;\n  }\n\n  private _addClassNameToBody(): void {\n    if (this.props.applyThemeToBody) {\n      const classNames = this._getClassNames();\n      const currentDoc = getDocument(this._rootElement.current);\n      if (currentDoc) {\n        currentDoc.body.classList.add(classNames.bodyThemed);\n        this._removeClassNameFromBody = () => {\n          currentDoc.body.classList.remove(classNames.bodyThemed);\n        };\n      }\n    }\n  }\n}\n"]}