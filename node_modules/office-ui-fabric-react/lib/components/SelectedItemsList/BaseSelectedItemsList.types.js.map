{"version":3,"file":"BaseSelectedItemsList.types.js","sourceRoot":"../src/","sources":["components/SelectedItemsList/BaseSelectedItemsList.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IPickerItemProps, ISuggestionModel, ValidationState } from '../../Pickers';\r\nimport { Selection } from '../../Selection';\r\nimport { IRefObject } from '../../Utilities';\r\n\r\nexport interface IBaseSelectedItemsList<T> {\r\n  /** Gets the current value of the input. */\r\n  items: T[] | undefined;\r\n\r\n  addItems: (items: T[]) => void;\r\n}\r\n\r\nexport interface ISelectedItemProps<T> extends IPickerItemProps<T> {\r\n  onCopyItem: (item: T) => void;\r\n}\r\n\r\n// Type T is the type of the item that is displayed\r\n// For example, if the picker is displaying persona's than type T could either be of Persona or Ipersona props\r\n// tslint:disable-next-line:no-any\r\nexport interface IBaseSelectedItemsListProps<T> extends React.ClassAttributes<any> {\r\n  componentRef?: IRefObject<IBaseSelectedItemsList<T>>;\r\n\r\n  /**\r\n   * The selection\r\n   */\r\n  selection?: Selection;\r\n  /**\r\n   * A callback for when items are copied\r\n   */\r\n  onCopyItems?: (items: T[]) => string;\r\n  /**\r\n   * Function that specifies how the selected item will appear.\r\n   */\r\n  onRenderItem?: (props: ISelectedItemProps<T>) => JSX.Element;\r\n  /**\r\n   * Initial items that have already been selected and should appear in the people picker.\r\n   */\r\n  defaultSelectedItems?: T[];\r\n  /**\r\n   * A callback for when the selected list of items changes.\r\n   */\r\n  onChange?: (items?: T[]) => void;\r\n  /**\r\n   * Function that specifies how arbitrary text entered into the well is handled.\r\n   */\r\n  createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T>;\r\n  /**\r\n   * A callback to process a selection after the user selects something from the picker.\r\n   */\r\n  onItemSelected?: (selectedItem?: T) => T | PromiseLike<T>;\r\n  /**\r\n   * The items that the base picker should currently display as selected. If this is provided then the picker will act as a\r\n   * controlled component.\r\n   */\r\n  selectedItems?: T[];\r\n\r\n  /**\r\n   * Aria label for the 'X' button in the selected item component.\r\n   * @defaultvalue ''\r\n   */\r\n  removeButtonAriaLabel?: string;\r\n  /**\r\n   * A callback when an item is deleted\r\n   * @deprecated Use `onItemsDeleted` instead.\r\n   */\r\n  onItemDeleted?: (deletedItem: T) => void;\r\n\r\n  /**\r\n   * A callback when and item or items are deleted\r\n   */\r\n  onItemsDeleted?: (deletedItems: T[]) => void;\r\n\r\n  /**\r\n   * A callback on whether this item can be deleted\r\n   */\r\n  canRemoveItem?: (item: T) => boolean;\r\n}\r\n"]}