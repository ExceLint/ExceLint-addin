{"version":3,"file":"Layer.notification.js","sourceRoot":"../src/","sources":["components/Layer/Layer.notification.ts"],"names":[],"mappings":"AAAA,IAAM,eAAe,GAA4C,EAAE,CAAC;AAEpE,IAAI,oBAAwC,CAAC;AAE7C;;;;GAIG;AACH,MAAM,wBAAwB,MAAc,EAAE,KAAsB;IAClE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE;QAC5B,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;KAC9B;IAED,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtC,CAAC;AAED;;;;GAIG;AACH,MAAM,0BAA0B,MAAc,EAAE,KAAsB;IACpE,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE;QAC3B,IAAM,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,GAAG,IAAI,CAAC,EAAE;YACZ,eAAe,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACvC,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxC,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;aAChC;SACF;KACF;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,4BAA4B,EAAU;IAC1C,IAAI,eAAe,CAAC,EAAE,CAAC,EAAE;QACvB,eAAe,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,WAAW,EAAE,EAAnB,CAAmB,CAAC,CAAC;KAC3D;AACH,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,2BAA2B,QAAiB;IAChD,oBAAoB,GAAG,QAAQ,CAAC;AAClC,CAAC;AAED;;GAEG;AACH,MAAM;IACJ,OAAO,oBAAoB,CAAC;AAC9B,CAAC","sourcesContent":["const _layersByHostId: { [hostId: string]: React.Component[] } = {};\r\n\r\nlet _defaultHostSelector: string | undefined;\r\n\r\n/**\r\n * Register a layer for a given host id\r\n * @param hostId Id of the layer host\r\n * @param layer Layer instance\r\n */\r\nexport function registerLayer(hostId: string, layer: React.Component) {\r\n  if (!_layersByHostId[hostId]) {\r\n    _layersByHostId[hostId] = [];\r\n  }\r\n\r\n  _layersByHostId[hostId].push(layer);\r\n}\r\n\r\n/**\r\n * Unregister a layer for a given host id\r\n * @param hostId Id of the layer host\r\n * @param layer Layer instance\r\n */\r\nexport function unregisterLayer(hostId: string, layer: React.Component) {\r\n  if (_layersByHostId[hostId]) {\r\n    const idx = _layersByHostId[hostId].indexOf(layer);\r\n    if (idx >= 0) {\r\n      _layersByHostId[hostId].splice(idx, 1);\r\n      if (_layersByHostId[hostId].length === 0) {\r\n        delete _layersByHostId[hostId];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\r\n * care about the specific host.\r\n */\r\nexport function notifyHostChanged(id: string) {\r\n  if (_layersByHostId[id]) {\r\n    _layersByHostId[id].forEach(layer => layer.forceUpdate());\r\n  }\r\n}\r\n\r\n/**\r\n * Sets the default target selector to use when determining the host in which\r\n * Layered content will be injected into. If not provided, an element will be\r\n * created at the end of the document body.\r\n *\r\n * Passing in a falsey value will clear the default target and reset back to\r\n * using a created element at the end of document body.\r\n */\r\nexport function setDefaultTarget(selector?: string) {\r\n  _defaultHostSelector = selector;\r\n}\r\n\r\n/**\r\n * Get the default target selector when determining a host\r\n */\r\nexport function getDefaultTarget(): string | undefined {\r\n  return _defaultHostSelector;\r\n}\r\n"]}