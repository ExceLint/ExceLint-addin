{"version":3,"file":"Layer.Hosted.Example.js","sourceRoot":"../src/","sources":["components/Layer/examples/Layer.Hosted.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Toggle } from 'office-ui-fabric-react/lib/Toggle';\r\nimport * as exampleStyles from 'office-ui-fabric-react/lib/common/_exampleStyles.scss';\r\nimport { Layer, LayerHost } from 'office-ui-fabric-react/lib/Layer';\r\nimport { AnimationClassNames, mergeStyles } from 'office-ui-fabric-react/lib/Styling';\r\nimport { getId, css } from 'office-ui-fabric-react/lib/Utilities';\r\nimport * as React from 'react';\r\nimport * as styles from './Layer.Example.scss';\r\n\r\nconst rootClass = mergeStyles({\r\n  selectors: { p: { marginTop: 30 } }\r\n});\r\n\r\nexport interface ILayerHostedExampleState {\r\n  showLayer: boolean;\r\n  showLayerNoId: boolean;\r\n  showHost: boolean;\r\n}\r\n\r\nexport class LayerHostedExample extends React.Component<{}, ILayerHostedExampleState> {\r\n  public state: ILayerHostedExampleState = {\r\n    showLayer: false,\r\n    showLayerNoId: false,\r\n    showHost: true\r\n  };\r\n  // Use getId() to ensure that the ID is unique on the page.\r\n  // (It's also okay to use a plain string without getId() and manually ensure uniqueness.)\r\n  private _layerHostId: string = getId('layerhost');\r\n\r\n  public render(): JSX.Element {\r\n    const { showLayer, showLayerNoId, showHost } = this.state;\r\n    const content = <div className={css(styles.content, AnimationClassNames.scaleUpIn100)}>This is example layer content.</div>;\r\n\r\n    return (\r\n      <div className={rootClass}>\r\n        <Toggle label=\"Show host\" inlineLabel checked={showHost} onChange={this._onChangeToggle} />\r\n\r\n        {showHost && <LayerHost id={this._layerHostId} className={styles.customHost} />}\r\n\r\n        <p>\r\n          In some cases, you may need to contain layered content within an area. Create an instance of a LayerHost along with an id, and\r\n          provide a hostId on the layer to render it within the specific host. (Note that it's important that you don't include children\r\n          within the LayerHost. It's meant to contain Layered content only.)\r\n        </p>\r\n\r\n        <Toggle\r\n          className={exampleStyles.exampleCheckbox}\r\n          label={`Render the box below in a Layer and target it at hostId=${this._layerHostId}`}\r\n          inlineLabel\r\n          checked={showLayer}\r\n          onChange={this._onChangeCheckbox}\r\n        />\r\n\r\n        {showLayer ? (\r\n          <Layer hostId={this._layerHostId} onLayerDidMount={this._log('didmount')} onLayerWillUnmount={this._log('willunmount')}>\r\n            {content}\r\n          </Layer>\r\n        ) : (\r\n          content\r\n        )}\r\n\r\n        <div className={styles.nonLayered}>I am normally below the content.</div>\r\n\r\n        <p>If you do not specify a hostId, the hosted layer will default to being fixed to the page by default.</p>\r\n\r\n        <Toggle\r\n          className={exampleStyles.exampleCheckbox}\r\n          label=\"Render the box below in a Layer without specifying a host, fixing it to the top of the page\"\r\n          inlineLabel\r\n          checked={showLayerNoId}\r\n          onChange={this._onChangeCheckboxNoId}\r\n        />\r\n\r\n        {showLayerNoId ? (\r\n          <Layer onLayerDidMount={this._log('didmount')} onLayerWillUnmount={this._log('willunmount')}>\r\n            {content}\r\n          </Layer>\r\n        ) : (\r\n          content\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _log(text: string): () => void {\r\n    return (): void => {\r\n      console.log(text);\r\n    };\r\n  }\r\n\r\n  private _onChangeCheckbox = (ev: React.FormEvent<HTMLElement | HTMLInputElement>, checked: boolean): void => {\r\n    this.setState({ showLayer: checked });\r\n  };\r\n\r\n  private _onChangeCheckboxNoId = (ev: React.FormEvent<HTMLElement | HTMLInputElement>, checked: boolean): void => {\r\n    this.setState({ showLayerNoId: checked });\r\n  };\r\n\r\n  private _onChangeToggle = (ev: React.MouseEvent<HTMLElement>, checked: boolean): void => {\r\n    this.setState({ showHost: checked });\r\n  };\r\n}\r\n"]}