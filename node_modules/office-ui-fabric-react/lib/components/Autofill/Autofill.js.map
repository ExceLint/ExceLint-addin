{"version":3,"file":"Autofill.js","sourceRoot":"../src/","sources":["components/Autofill/Autofill.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { IAutofillProps, IAutofill } from './Autofill.types';\nimport { KeyCodes, getNativeProps, inputProperties, isIE11, Async, initializeComponentRef } from '../../Utilities';\n\nexport interface IAutofillState {\n  displayValue?: string;\n}\n\nconst SELECTION_FORWARD = 'forward';\nconst SELECTION_BACKWARD = 'backward';\n\n/**\n * {@docCategory Autofill}\n */\nexport class Autofill extends React.Component<IAutofillProps, IAutofillState> implements IAutofill {\n  public static defaultProps = {\n    enableAutofillOnKeyPress: [KeyCodes.down, KeyCodes.up] as KeyCodes[],\n  };\n\n  private _inputElement = React.createRef<HTMLInputElement>();\n  private _autoFillEnabled = true;\n  private _value: string;\n  private _isComposing: boolean = false;\n  private _async: Async;\n\n  constructor(props: IAutofillProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._value = props.defaultVisibleValue || '';\n    this.state = {\n      displayValue: props.defaultVisibleValue || '',\n    };\n  }\n\n  public get cursorLocation(): number | null {\n    if (this._inputElement.current) {\n      const inputElement = this._inputElement.current;\n      if (inputElement.selectionDirection !== SELECTION_FORWARD) {\n        return inputElement.selectionEnd;\n      } else {\n        return inputElement.selectionStart;\n      }\n    } else {\n      return -1;\n    }\n  }\n\n  public get isValueSelected(): boolean {\n    return Boolean(this.inputElement && this.inputElement.selectionStart !== this.inputElement.selectionEnd);\n  }\n\n  public get value(): string {\n    return this._value;\n  }\n\n  public get selectionStart(): number | null {\n    return this._inputElement.current ? this._inputElement.current.selectionStart : -1;\n  }\n\n  public get selectionEnd(): number | null {\n    return this._inputElement.current ? this._inputElement.current.selectionEnd : -1;\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this._inputElement.current;\n  }\n\n  public UNSAFE_componentWillReceiveProps(nextProps: IAutofillProps): void {\n    if (this.props.updateValueInWillReceiveProps) {\n      const updatedInputValue = this.props.updateValueInWillReceiveProps();\n      // Don't update if we have a null value or the value isn't changing\n      // the value should still update if an empty string is passed in\n      if (updatedInputValue !== null && updatedInputValue !== this._value) {\n        this._value = updatedInputValue;\n      }\n    }\n\n    const newDisplayValue = this._getDisplayValue(this._value, nextProps.suggestedDisplayValue);\n\n    if (typeof newDisplayValue === 'string') {\n      this.setState({ displayValue: newDisplayValue });\n    }\n  }\n\n  public componentDidUpdate() {\n    const value = this._value;\n    const { suggestedDisplayValue, shouldSelectFullInputValueInComponentDidUpdate, preventValueSelection } = this.props;\n    let differenceIndex = 0;\n\n    if (preventValueSelection) {\n      return;\n    }\n\n    if (\n      this._autoFillEnabled &&\n      value &&\n      suggestedDisplayValue &&\n      this._doesTextStartWith(suggestedDisplayValue, value)\n    ) {\n      let shouldSelectFullRange = false;\n\n      if (shouldSelectFullInputValueInComponentDidUpdate) {\n        shouldSelectFullRange = shouldSelectFullInputValueInComponentDidUpdate();\n      }\n\n      if (shouldSelectFullRange && this._inputElement.current) {\n        this._inputElement.current.setSelectionRange(0, suggestedDisplayValue.length, SELECTION_BACKWARD);\n      } else {\n        while (\n          differenceIndex < value.length &&\n          value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()\n        ) {\n          differenceIndex++;\n        }\n        if (differenceIndex > 0 && this._inputElement.current) {\n          this._inputElement.current.setSelectionRange(\n            differenceIndex,\n            suggestedDisplayValue.length,\n            SELECTION_BACKWARD,\n          );\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { displayValue } = this.state;\n\n    const nativeProps = getNativeProps<React.InputHTMLAttributes<HTMLInputElement>>(this.props, inputProperties);\n    return (\n      <input\n        autoCapitalize=\"off\"\n        autoComplete=\"off\"\n        aria-autocomplete={'both'}\n        {...nativeProps}\n        ref={this._inputElement}\n        value={displayValue}\n        onCompositionStart={this._onCompositionStart}\n        onCompositionUpdate={this._onCompositionUpdate}\n        onCompositionEnd={this._onCompositionEnd}\n        // TODO (Fabric 8?) - switch to calling only onChange. See notes in TextField._onInputChange.\n        onChange={this._onChanged}\n        onInput={this._onInputChanged}\n        onKeyDown={this._onKeyDown}\n        onClick={this.props.onClick ? this.props.onClick : this._onClick}\n        data-lpignore={true}\n      />\n    );\n  }\n\n  public focus() {\n    this._inputElement.current && this._inputElement.current.focus();\n  }\n\n  public clear() {\n    this._autoFillEnabled = true;\n    this._updateValue('', false);\n    this._inputElement.current && this._inputElement.current.setSelectionRange(0, 0);\n  }\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and langauges like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionStart = (ev: React.CompositionEvent<HTMLInputElement>) => {\n    this._isComposing = true;\n    this._autoFillEnabled = false;\n  };\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and languages like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionUpdate = () => {\n    if (isIE11()) {\n      this._updateValue(this._getCurrentInputValue(), true);\n    }\n  };\n\n  // Composition events are used when the character/text requires several keystrokes to be completed.\n  // Some examples of this are mobile text input and langauges like Japanese or Arabic.\n  // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n  private _onCompositionEnd = (ev: React.CompositionEvent<HTMLInputElement>) => {\n    const inputValue = this._getCurrentInputValue();\n    this._tryEnableAutofill(inputValue, this.value, false, true);\n    this._isComposing = false;\n    // Due to timing, this needs to be async, otherwise no text will be selected.\n    this._async.setTimeout(() => {\n      // it's technically possible that the value of _isComposing is reset during this timeout,\n      // so explicitly trigger this with composing=true here, since it is supposed to be the\n      // update for composition end\n      this._updateValue(this._getCurrentInputValue(), false);\n    }, 0);\n  };\n\n  private _onClick = () => {\n    if (this._value && this._value !== '' && this._autoFillEnabled) {\n      this._autoFillEnabled = false;\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (this.props.onKeyDown) {\n      this.props.onKeyDown(ev);\n    }\n\n    // If the event is actively being composed, then don't alert autofill.\n    // Right now typing does not have isComposing, once that has been fixed any should be removed.\n    if (!(ev.nativeEvent as any).isComposing) {\n      switch (ev.which) {\n        case KeyCodes.backspace:\n          this._autoFillEnabled = false;\n          break;\n        case KeyCodes.left:\n        case KeyCodes.right:\n          if (this._autoFillEnabled) {\n            this._value = this.state.displayValue!;\n            this._autoFillEnabled = false;\n          }\n          break;\n        default:\n          if (!this._autoFillEnabled) {\n            if (this.props.enableAutofillOnKeyPress!.indexOf(ev.which) !== -1) {\n              this._autoFillEnabled = true;\n            }\n          }\n          break;\n      }\n    }\n  };\n\n  private _onInputChanged = (ev: React.FormEvent<HTMLElement>) => {\n    const value: string = this._getCurrentInputValue(ev);\n\n    if (!this._isComposing) {\n      this._tryEnableAutofill(value, this._value, (ev.nativeEvent as any).isComposing);\n    }\n\n    // If it is not IE11 and currently composing, update the value\n    if (!(isIE11() && this._isComposing)) {\n      const nativeEventComposing = (ev.nativeEvent as any).isComposing;\n      const isComposing = nativeEventComposing === undefined ? this._isComposing : nativeEventComposing;\n      this._updateValue(value, isComposing);\n    }\n  };\n\n  private _onChanged = (): void => {\n    // Swallow this event, we don't care about it\n    // We must provide it because React PropTypes marks it as required, but onInput serves the correct purpose\n    return;\n  };\n\n  private _getCurrentInputValue(ev?: React.FormEvent<HTMLElement>): string {\n    if (ev && ev.target && (ev.target as any).value) {\n      return (ev.target as any).value;\n    } else if (this.inputElement && this.inputElement.value) {\n      return this.inputElement.value;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Attempts to enable autofill. Whether or not autofill is enabled depends on the input value,\n   * whether or not any text is selected, and only if the new input value is longer than the old input value.\n   * Autofill should never be set to true if the value is composing. Once compositionEnd is called, then\n   * it should be completed.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent for more information on composition.\n   * @param newValue - new input value\n   * @param oldValue - old input value\n   * @param isComposing - if true then the text is actively being composed and it has not completed.\n   * @param isComposed - if the text is a composed text value.\n   */\n  private _tryEnableAutofill(newValue: string, oldValue: string, isComposing?: boolean, isComposed?: boolean): void {\n    if (\n      !isComposing &&\n      newValue &&\n      this._inputElement.current &&\n      this._inputElement.current.selectionStart === newValue.length &&\n      !this._autoFillEnabled &&\n      (newValue.length > oldValue.length || isComposed)\n    ) {\n      this._autoFillEnabled = true;\n    }\n  }\n\n  private _notifyInputChange(newValue: string, composing: boolean): void {\n    if (this.props.onInputValueChange) {\n      this.props.onInputValueChange(newValue, composing);\n    }\n  }\n\n  /**\n   * Updates the current input value as well as getting a new display value.\n   * @param newValue - The new value from the input\n   */\n  private _updateValue = (newValue: string, composing: boolean) => {\n    // Only proceed if the value is nonempty and is different from the old value\n    // This is to work around the fact that, in IE 11, inputs with a placeholder fire an onInput event on focus\n    if (!newValue && newValue === this._value) {\n      return;\n    }\n    this._value = this.props.onInputChange ? this.props.onInputChange(newValue, composing) : newValue;\n    this.setState(\n      {\n        displayValue: this._getDisplayValue(this._value, this.props.suggestedDisplayValue),\n      },\n      () => this._notifyInputChange(this._value, composing),\n    );\n  };\n\n  /**\n   * Returns a string that should be used as the display value.\n   * It evaluates this based on whether or not the suggested value starts with the input value\n   * and whether or not autofill is enabled.\n   * @param inputValue - the value that the input currently has.\n   * @param suggestedDisplayValue - the possible full value\n   */\n  private _getDisplayValue(inputValue: string, suggestedDisplayValue?: string): string {\n    let displayValue = inputValue;\n    if (\n      suggestedDisplayValue &&\n      inputValue &&\n      this._doesTextStartWith(suggestedDisplayValue, displayValue) &&\n      this._autoFillEnabled\n    ) {\n      displayValue = suggestedDisplayValue;\n    }\n    return displayValue;\n  }\n\n  private _doesTextStartWith(text: string, startWith: string): boolean {\n    if (!text || !startWith) {\n      return false;\n    }\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\n  }\n}\n\n/**\n *  @deprecated do not use.\n * {@docCategory Autofill}\n */\nexport class BaseAutoFill extends Autofill {}\n"]}