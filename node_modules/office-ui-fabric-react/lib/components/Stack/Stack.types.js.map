{"version":3,"file":"Stack.types.js","sourceRoot":"../src/","sources":["components/Stack/Stack.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IComponentStyles, IHTMLSlot, ISlotProp, IComponent, IStyleableComponentProps } from '../../Foundation';\r\n\r\n/**\r\n * Defines a type made by the union of the different values that the align-items and justify-content flexbox\r\n * properties can take.\r\n */\r\nexport type Alignment = 'start' | 'end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' | 'baseline' | 'stretch';\r\n\r\nexport type IStackComponent = IComponent<IStackProps, IStackTokens, IStackStyles>;\r\n\r\n// These types are redundant with IStackComponent but are needed until TS function return widening issue is resolved:\r\n// https://github.com/Microsoft/TypeScript/issues/241\r\n// For now, these helper types can be used to provide return type safety when specifying tokens and styles functions.\r\nexport type IStackTokenReturnType = ReturnType<Extract<IStackComponent['tokens'], Function>>;\r\nexport type IStackStylesReturnType = ReturnType<Extract<IStackComponent['styles'], Function>>;\r\n\r\nexport type IStackSlot = ISlotProp<IStackProps>;\r\n\r\nexport interface IStackSlots {\r\n  /**\r\n   * Defines root slot of the component.\r\n   */\r\n  root?: IHTMLSlot;\r\n\r\n  /**\r\n   * Defines a slot that is placed inside the root slot in order to achieve wrapping. Only used when the wrap\r\n   * property is set to true.\r\n   */\r\n  inner?: IHTMLSlot;\r\n}\r\n\r\nexport interface IStackProps\r\n  extends IStackSlots,\r\n    IStyleableComponentProps<IStackProps, IStackTokens, IStackStyles>,\r\n    React.HTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Defines how to render the Stack.\r\n   */\r\n  as?: React.ReactType<React.HTMLAttributes<HTMLElement>>;\r\n\r\n  /**\r\n   * Defines whether to render Stack children horizontally.\r\n   * @defaultvalue false\r\n   */\r\n  horizontal?: boolean;\r\n\r\n  /**\r\n   * Defines whether to render Stack children in the opposite direction (bottom-to-top if it's a vertical Stack and\r\n   * right-to-left if it's a horizontal Stack).\r\n   * @defaultvalue false\r\n   */\r\n  reversed?: boolean;\r\n\r\n  /**\r\n   * Defines how to align Stack children horizontally (along the x-axis).\r\n   */\r\n  horizontalAlign?: Alignment;\r\n\r\n  /**\r\n   * Defines how to align Stack children vertically (along the y-axis).\r\n   */\r\n  verticalAlign?: Alignment;\r\n\r\n  /**\r\n   * Defines whether the Stack should take up 100% of the height of its parent.\r\n   * This property is required to be set to true when using the `grow` flag on children in vertical oriented Stacks.\r\n   * Stacks are rendered as block elements and grow horizontally to the container already.\r\n   * @defaultvalue false\r\n   */\r\n  verticalFill?: boolean;\r\n\r\n  /**\r\n   * Defines whether Stack children should not shrink to fit the available space.\r\n   * @defaultvalue false\r\n   */\r\n  disableShrink?: boolean;\r\n\r\n  /**\r\n   * Defines how much to grow the Stack in proportion to its siblings.\r\n   */\r\n  grow?: boolean | number | 'inherit' | 'initial' | 'unset';\r\n\r\n  /**\r\n   * Defines the spacing between Stack children.\r\n   * The property is specified as a value for 'row gap', followed optionally by a value for 'column gap'.\r\n   * If 'column gap' is omitted, it's set to the same value as 'row gap'.\r\n   */\r\n  gap?: number | string;\r\n\r\n  /**\r\n   * Defines the maximum width that the Stack can take.\r\n   */\r\n  maxWidth?: number | string;\r\n\r\n  /**\r\n   * Defines the maximum height that the Stack can take.\r\n   */\r\n  maxHeight?: number | string;\r\n\r\n  /**\r\n   * Defines the inner padding of the Stack.\r\n   */\r\n  padding?: number | string;\r\n\r\n  /**\r\n   * Defines whether Stack children should wrap onto multiple rows or columns when they are about to overflow\r\n   * the size of the Stack.\r\n   * @defaultvalue false\r\n   */\r\n  wrap?: boolean;\r\n}\r\n\r\nexport interface IStackTokens {\r\n  childrenGap?: number | string;\r\n}\r\n\r\nexport type IStackStyles = IComponentStyles<IStackSlots>;\r\n"]}