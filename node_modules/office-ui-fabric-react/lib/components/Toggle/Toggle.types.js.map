{"version":3,"file":"Toggle.types.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IComponentAs, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { IKeytipProps } from '../../Keytip';\r\n\r\nexport interface IToggle {\r\n  focus: () => void;\r\n}\r\n\r\n/**\r\n * Toggle component props.\r\n */\r\nexport interface IToggleProps extends React.HTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Render the root element as another type.\r\n   */\r\n  as?: IComponentAs<React.HTMLAttributes<HTMLElement>>;\r\n\r\n  /**\r\n   * Optional callback to access the IToggle interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IToggle>;\r\n\r\n  /**\r\n   * A label for the toggle.\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Text to display when toggle is ON.\r\n   * Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.\r\n   */\r\n  onText?: string;\r\n\r\n  /**\r\n   * Text to display when toggle is OFF.\r\n   * Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.\r\n   */\r\n  offText?: string;\r\n\r\n  /**\r\n   * Text for screen-reader to announce as the name of the toggle.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * @deprecated Use `ariaLabel` for name, and let the metadata convey state\r\n   */\r\n  onAriaLabel?: string;\r\n\r\n  /**\r\n   * @deprecated Use `ariaLabel` for name, and let the metadata convey state\r\n   */\r\n  offAriaLabel?: string;\r\n\r\n  /**\r\n   * Checked state of the toggle. If you are maintaining state yourself, use this property. Otherwise refer to `defaultChecked`.\r\n   */\r\n  checked?: boolean;\r\n\r\n  /**\r\n   * Initial state of the toggle. If you want the toggle to maintain its own state, use this. Otherwise refer to `checked`.\r\n   */\r\n  defaultChecked?: boolean;\r\n\r\n  /**\r\n   * Optional disabled flag.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Whether the label (not the onText/offText) should be positioned inline with the toggle control.\r\n   * Left (right in RTL) side when on/off text provided VS right (left in RTL) side when no on/off text.\r\n   * Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.\r\n   */\r\n  inlineLabel?: boolean;\r\n\r\n  /**\r\n   * Callback issued when the value changes.\r\n   */\r\n  onChange?: (event: React.MouseEvent<HTMLElement>, checked?: boolean) => void;\r\n\r\n  /**\r\n   * @deprecated Use `onChange` instead.\r\n   */\r\n  onChanged?: (checked: boolean) => void;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Optional styles for the component.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>;\r\n\r\n  /**\r\n   * Optional keytip for this toggle\r\n   */\r\n  keytipProps?: IKeytipProps;\r\n}\r\n\r\n/**\r\n * Properties required to build the styles for the Toggle component.\r\n */\r\nexport interface IToggleStyleProps {\r\n  /**\r\n   * Theme values.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Root element class name.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Component is disabled.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Component is checked.\r\n   */\r\n  checked?: boolean;\r\n\r\n  /**\r\n   * Whether label should be positioned inline with the toggle.\r\n   */\r\n  inlineLabel?: boolean;\r\n\r\n  /**\r\n   * Whether the user did not specify a on/off text. Influencing only when inlineLabel is used.\r\n   */\r\n  onOffMissing?: boolean;\r\n}\r\n\r\n/**\r\n * Styles for the Toggle component.\r\n */\r\nexport interface IToggleStyles {\r\n  /** Root element. */\r\n  root: IStyle;\r\n\r\n  /**\r\n   * Label element above the toggle.\r\n   */\r\n  label: IStyle;\r\n\r\n  /**\r\n   * Container for the toggle pill and the text next to it.\r\n   */\r\n  container: IStyle;\r\n\r\n  /**\r\n   * Pill, rendered as a button.\r\n   */\r\n  pill: IStyle;\r\n\r\n  /**\r\n   * Thumb inside of the pill.\r\n   */\r\n  thumb: IStyle;\r\n\r\n  /**\r\n   * Text next to the pill.\r\n   */\r\n  text: IStyle;\r\n}\r\n"]}