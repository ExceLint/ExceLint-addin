{"version":3,"file":"ShimmerElementsGroup.types.js","sourceRoot":"../src/","sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IStyle, ITheme } from '../../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../../Utilities';\r\nimport { IShimmerElement } from '../Shimmer.types';\r\n\r\nexport interface IShimmerElementsGroup {}\r\n\r\n/**\r\n * ShimmerElementsGroup component props.\r\n */\r\nexport interface IShimmerElementsGroupProps extends React.AllHTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Optional callback to access the IShimmerElementsGroup interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IShimmerElementsGroup>;\r\n\r\n  /**\r\n   * Optional maximum row height of the shimmerElements container.\r\n   */\r\n  rowHeight?: number;\r\n\r\n  /**\r\n   * Elements to render in one group of the Shimmer.\r\n   */\r\n  shimmerElements?: IShimmerElement[];\r\n\r\n  /**\r\n   * Optional boolean for enabling flexWrap of the container containing the shimmerElements.\r\n   * @defaultvalue false\r\n   */\r\n  flexWrap?: boolean;\r\n\r\n  /**\r\n   * Optional width for ShimmerElements container.\r\n   */\r\n  width?: string;\r\n\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Defines the background color of the space in between and around shimmer elements.\r\n   * @defaultvalue theme.palette.white\r\n   */\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>;\r\n}\r\n\r\n/**\r\n * Props needed to construct styles.\r\n */\r\nexport interface IShimmerElementsGroupStyleProps {\r\n  /**\r\n   * Boolean flag to notify whether the root element needs to flex wrap.\r\n   */\r\n  flexWrap?: boolean;\r\n\r\n  /** Theme provided by High-Order Component. */\r\n  theme: ITheme;\r\n}\r\n\r\n/**\r\n * Represents the stylable areas of the control.\r\n */\r\nexport interface IShimmerElementsGroupStyles {\r\n  /**\r\n   * Represents the wrapper root element holding all elements inside.\r\n   */\r\n  root?: IStyle;\r\n}\r\n"]}