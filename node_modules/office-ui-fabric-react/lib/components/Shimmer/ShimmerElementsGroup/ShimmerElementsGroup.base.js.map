{"version":3,"file":"ShimmerElementsGroup.base.js","sourceRoot":"../src/","sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction } from '../../../Utilities';\r\nimport { IShimmerElementsGroupProps, IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles } from './ShimmerElementsGroup.types';\r\nimport { IRawStyle } from '../../../Styling';\r\nimport { ShimmerElementType, ShimmerElementsDefaultHeights, IShimmerElement } from '../Shimmer.types';\r\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\r\nimport { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\r\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\r\nimport { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\r\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\r\nimport { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\r\n\r\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\r\n\r\nexport class ShimmerElementsGroupBase extends BaseComponent<IShimmerElementsGroupProps, {}> {\r\n  public static defaultProps: IShimmerElementsGroupProps = {\r\n    flexWrap: false\r\n  };\r\n\r\n  private _classNames: { [key in keyof IShimmerElementsGroupStyles]: string };\r\n\r\n  constructor(props: IShimmerElementsGroupProps) {\r\n    super(props);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { styles, width, shimmerElements, rowHeight, flexWrap, theme } = this.props;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      flexWrap\r\n    });\r\n\r\n    const height = rowHeight ? rowHeight : this._findMaxElementHeight(shimmerElements ? shimmerElements : []);\r\n\r\n    return (\r\n      // tslint:disable-next-line:jsx-ban-props\r\n      <div style={{ width: width ? width : 'auto' }} className={this._classNames.root}>\r\n        {this._getRenderedElements(shimmerElements, height)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getRenderedElements = (shimmerElements?: IShimmerElement[], rowHeight?: number): React.ReactNode => {\r\n    const renderedElements: React.ReactNode = shimmerElements ? (\r\n      shimmerElements.map(\r\n        (elem: IShimmerElement, index: number): JSX.Element => {\r\n          const { type, ...filteredElem } = elem;\r\n          switch (elem.type) {\r\n            case ShimmerElementType.circle:\r\n              return <ShimmerCircle key={index} {...filteredElem} styles={this._getStyles(elem, rowHeight)} />;\r\n            case ShimmerElementType.gap:\r\n              return <ShimmerGap key={index} {...filteredElem} styles={this._getStyles(elem, rowHeight)} />;\r\n            case ShimmerElementType.line:\r\n              return <ShimmerLine key={index} {...filteredElem} styles={this._getStyles(elem, rowHeight)} />;\r\n          }\r\n        }\r\n      )\r\n    ) : (\r\n      <ShimmerLine height={ShimmerElementsDefaultHeights.line} styles={{ root: [{ borderWidth: '0px' }] }} />\r\n    );\r\n\r\n    return renderedElements;\r\n  };\r\n\r\n  private _getStyles = (elem: IShimmerElement, rowHeight?: number): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\r\n    const { backgroundColor } = this.props;\r\n    const { verticalAlign, type } = elem;\r\n    const elemHeight: number | undefined = elem.height;\r\n    const dif: number = rowHeight && elemHeight ? rowHeight - elemHeight : 0;\r\n\r\n    let borderStyle: IRawStyle | undefined;\r\n\r\n    if (!verticalAlign || verticalAlign === 'center') {\r\n      borderStyle = {\r\n        borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\r\n        borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`\r\n      };\r\n    } else if (verticalAlign && verticalAlign === 'top') {\r\n      borderStyle = {\r\n        borderBottomWidth: `${dif ? dif : 0}px`,\r\n        borderTopWidth: `0px`\r\n      };\r\n    } else if (verticalAlign && verticalAlign === 'bottom') {\r\n      borderStyle = {\r\n        borderBottomWidth: `0px`,\r\n        borderTopWidth: `${dif ? dif : 0}px`\r\n      };\r\n    }\r\n\r\n    if (backgroundColor) {\r\n      switch (type) {\r\n        case ShimmerElementType.circle:\r\n          return {\r\n            root: { ...borderStyle, borderColor: backgroundColor },\r\n            svg: { fill: backgroundColor }\r\n          };\r\n        case ShimmerElementType.gap:\r\n          return {\r\n            root: { ...borderStyle, borderColor: backgroundColor, backgroundColor: backgroundColor }\r\n          };\r\n        case ShimmerElementType.line:\r\n          return {\r\n            root: { ...borderStyle, borderColor: backgroundColor },\r\n            topLeftCorner: { fill: backgroundColor },\r\n            topRightCorner: { fill: backgroundColor },\r\n            bottomLeftCorner: { fill: backgroundColor },\r\n            bottomRightCorner: { fill: backgroundColor }\r\n          };\r\n      }\r\n    }\r\n\r\n    return {\r\n      root: { ...borderStyle }\r\n    };\r\n  };\r\n\r\n  /**\r\n   * User should not worry to provide which of the elements is the highest, we do the calculation for him.\r\n   * Plus if user forgot to specify the height we assign their defaults.\r\n   */\r\n  private _findMaxElementHeight = (elements: IShimmerElement[]): number => {\r\n    const itemsDefaulted: IShimmerElement[] = elements.map(\r\n      (elem: IShimmerElement): IShimmerElement => {\r\n        switch (elem.type) {\r\n          case ShimmerElementType.circle:\r\n            if (!elem.height) {\r\n              elem.height = ShimmerElementsDefaultHeights.circle;\r\n            }\r\n          case ShimmerElementType.line:\r\n            if (!elem.height) {\r\n              elem.height = ShimmerElementsDefaultHeights.line;\r\n            }\r\n          case ShimmerElementType.gap:\r\n            if (!elem.height) {\r\n              elem.height = ShimmerElementsDefaultHeights.gap;\r\n            }\r\n        }\r\n        return elem;\r\n      }\r\n    );\r\n\r\n    const rowHeight = itemsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\r\n      return next.height ? (next.height > acc ? next.height : acc) : acc;\r\n    }, 0);\r\n\r\n    return rowHeight;\r\n  };\r\n}\r\n"]}