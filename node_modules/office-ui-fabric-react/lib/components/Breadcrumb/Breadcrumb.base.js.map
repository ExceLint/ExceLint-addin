{"version":3,"file":"Breadcrumb.base.js","sourceRoot":"../src/","sources":["components/Breadcrumb/Breadcrumb.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, getRTL, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\r\nimport { IProcessedStyleSet } from '../../Styling';\r\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { Link } from '../../Link';\r\nimport { Icon } from '../../Icon';\r\nimport { IconButton } from '../../Button';\r\nimport { IBreadcrumbProps, IBreadcrumbItem, IDividerAsProps } from './Breadcrumb.types';\r\nimport { DirectionalHint } from '../../common/DirectionalHint';\r\nimport { ResizeGroup } from '../../ResizeGroup';\r\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\r\nimport { IBreadcrumbStyleProps, IBreadcrumbStyles } from './Breadcrumb.types';\r\n\r\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\r\n\r\nexport interface IBreadCrumbData {\r\n  props: IBreadcrumbProps;\r\n  renderedItems: IBreadcrumbItem[];\r\n  renderedOverflowItems: IBreadcrumbItem[];\r\n}\r\n\r\nconst OVERFLOW_KEY = 'overflow';\r\nconst nullFunction = (): null => null;\r\n\r\nexport class BreadcrumbBase extends BaseComponent<IBreadcrumbProps, any> {\r\n  public static defaultProps: IBreadcrumbProps = {\r\n    items: [],\r\n    maxDisplayedItems: 999,\r\n    overflowIndex: 0\r\n  };\r\n\r\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\r\n  private _focusZone = React.createRef<FocusZone>();\r\n\r\n  constructor(props: IBreadcrumbProps) {\r\n    super(props);\r\n\r\n    this._validateProps(props);\r\n  }\r\n\r\n  /**\r\n   * Sets focus to the first breadcrumb link.\r\n   */\r\n  public focus(): void {\r\n    if (this._focusZone.current) {\r\n      this._focusZone.current.focus();\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { onReduceData = this._onReduceData, overflowIndex, maxDisplayedItems, items, className, theme, styles } = this.props;\r\n    const renderedItems = [...items];\r\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\r\n    const breadCrumbData: IBreadCrumbData = {\r\n      props: this.props,\r\n      renderedItems,\r\n      renderedOverflowItems\r\n    };\r\n\r\n    this._classNames = getClassNames(styles, {\r\n      className,\r\n      theme: theme!\r\n    });\r\n\r\n    return <ResizeGroup onRenderData={this._onRenderBreadcrumb} onReduceData={onReduceData} data={breadCrumbData} />;\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: IBreadcrumbProps): void {\r\n    this._validateProps(nextProps);\r\n  }\r\n\r\n  private _onReduceData = (data: IBreadCrumbData): IBreadCrumbData | undefined => {\r\n    let { renderedItems, renderedOverflowItems } = data;\r\n    const { overflowIndex } = data.props;\r\n\r\n    const movedItem = renderedItems[overflowIndex!];\r\n    renderedItems = [...renderedItems];\r\n    renderedItems.splice(overflowIndex!, 1);\r\n\r\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\r\n\r\n    if (movedItem !== undefined) {\r\n      return { ...data, renderedItems, renderedOverflowItems };\r\n    }\r\n  };\r\n\r\n  private _onRenderBreadcrumb = (data: IBreadCrumbData) => {\r\n    const {\r\n      ariaLabel,\r\n      dividerAs: DividerType = Icon as React.ReactType<IDividerAsProps>,\r\n      onRenderItem = this._onRenderItem,\r\n      overflowAriaLabel,\r\n      overflowIndex\r\n    } = data.props;\r\n    const { renderedOverflowItems, renderedItems } = data;\r\n\r\n    const contextualItems = renderedOverflowItems.map((item, index) => ({\r\n      name: item.text,\r\n      key: item.key,\r\n      onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\r\n      href: item.href\r\n    }));\r\n\r\n    // Find index of last rendered item so the divider icon\r\n    // knows not to render on that item\r\n    const lastItemIndex = renderedItems.length - 1;\r\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\r\n\r\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => (\r\n      <li className={this._classNames.listItem} key={item.key || String(index)}>\r\n        {onRenderItem(item, this._onRenderItem)}\r\n        {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\r\n          <DividerType className={this._classNames.chevron} iconName={getRTL() ? 'ChevronLeft' : 'ChevronRight'} item={item} />\r\n        )}\r\n      </li>\r\n    ));\r\n\r\n    if (hasOverflowItems) {\r\n      itemElements.splice(\r\n        overflowIndex!,\r\n        0,\r\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\r\n          <IconButton\r\n            className={this._classNames.overflowButton}\r\n            iconProps={{ iconName: 'More' }}\r\n            role=\"button\"\r\n            aria-haspopup=\"true\"\r\n            ariaLabel={overflowAriaLabel}\r\n            onRenderMenuIcon={nullFunction}\r\n            menuProps={{\r\n              items: contextualItems,\r\n              directionalHint: DirectionalHint.bottomLeftEdge\r\n            }}\r\n          />\r\n          {overflowIndex !== lastItemIndex + 1 && (\r\n            <DividerType\r\n              className={this._classNames.chevron}\r\n              iconName={getRTL() ? 'ChevronLeft' : 'ChevronRight'}\r\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\r\n            />\r\n          )}\r\n        </li>\r\n      );\r\n    }\r\n\r\n    const nativeProps = getNativeProps(this.props, htmlElementProperties, ['className']);\r\n\r\n    return (\r\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\r\n        <FocusZone componentRef={this._focusZone} direction={FocusZoneDirection.horizontal}>\r\n          <ol className={this._classNames.list}>{itemElements}</ol>\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private _onRenderItem = (item: IBreadcrumbItem) => {\r\n    if (item.onClick || item.href) {\r\n      return (\r\n        <Link\r\n          className={this._classNames.itemLink}\r\n          href={item.href}\r\n          aria-current={item.isCurrentItem ? 'page' : undefined}\r\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\r\n        >\r\n          <TooltipHost content={item.text} overflowMode={TooltipOverflowMode.Parent}>\r\n            {item.text}\r\n          </TooltipHost>\r\n        </Link>\r\n      );\r\n    } else {\r\n      return (\r\n        <span className={this._classNames.item}>\r\n          <TooltipHost content={item.text} overflowMode={TooltipOverflowMode.Parent}>\r\n            {item.text}\r\n          </TooltipHost>\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\r\n    if (item.onClick) {\r\n      item.onClick(ev, item);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validate incoming props\r\n   * @param props - Props to validate\r\n   */\r\n  private _validateProps(props: IBreadcrumbProps): void {\r\n    const { maxDisplayedItems, overflowIndex, items } = props;\r\n    if (\r\n      overflowIndex! < 0 ||\r\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\r\n      (items.length > 0 && overflowIndex! > items.length - 1)\r\n    ) {\r\n      throw new Error('Breadcrumb: overflowIndex out of range');\r\n    }\r\n  }\r\n}\r\n"]}