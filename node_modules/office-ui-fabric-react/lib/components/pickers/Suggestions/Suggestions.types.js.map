{"version":3,"file":"Suggestions.types.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/Suggestions.types.ts"],"names":[],"mappings":"AAqRA,yEAAyE;AACzE,MAAM,CAAN,IAAY,oBASX;AATD,WAAY,oBAAoB;IAC9B,uCAAuC;IACvC,+DAAI,CAAA;IAEJ,uCAAuC;IACvC,+EAAY,CAAA;IAEZ,qCAAqC;IACrC,2EAAU,CAAA;AACZ,CAAC,EATW,oBAAoB,KAApB,oBAAoB,QAS/B","sourcesContent":["import * as React from 'react';\r\n\r\nimport { IRefObject, IRenderFunction, KeyCodes, IStyleFunctionOrObject } from '../../../Utilities';\r\nimport { IPersonaProps } from '../../Persona/Persona.types';\r\nimport { IStyle, ITheme } from '../../../Styling';\r\nimport { ISpinnerStyleProps } from '../../Spinner/Spinner.types';\r\n\r\n/** Suggestions component. */\r\nexport interface ISuggestions<T> {\r\n  /** Execute the action selected. Can be SearchMore or ForceResolve actions. */\r\n  executeSelectedAction: () => void;\r\n\r\n  /** Focus on the ForceResolve action above the suggestions. If not available then focus on SearchMore action. */\r\n  focusAboveSuggestions: () => void;\r\n\r\n  /** Focus on the SearchMore action below the suggestions. If not available then focus on ForceResolve action. */\r\n  focusBelowSuggestions: () => void;\r\n\r\n  /** Focus the SearchMore action button. */\r\n  focusSearchForMoreButton: () => void;\r\n\r\n  /** Whether it has any suggested actions like ForceResolve or SearchMore. */\r\n  hasSuggestedAction: () => boolean;\r\n\r\n  /** Whether any of the suggested actions (ForceResolve or SearchMore) is selected. */\r\n  hasSuggestedActionSelected: () => boolean;\r\n\r\n  /** Returns true if the event was handled, false otherwise. */\r\n  tryHandleKeyDown: (keyCode: number, currentSuggestionIndex: number) => boolean;\r\n}\r\n\r\n/**\r\n * Suggestions props interface. Refers to the entire container holding all the suggestions.\r\n * Type T is the type of the items that are displayed.\r\n */\r\nexport interface ISuggestionsProps<T> extends React.Props<any> {\r\n  /**\r\n   * Optional callback to access the ISuggestions interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<ISuggestions<T>>;\r\n\r\n  /**\r\n   * How the suggestion should look in the suggestion list.\r\n   */\r\n  onRenderSuggestion?: (props: T, suggestionItemProps: T) => JSX.Element;\r\n\r\n  /**\r\n   * What should occur when a suggestion is clicked\r\n   */\r\n  onSuggestionClick: (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void;\r\n\r\n  /**\r\n   * The list of Suggestions that will be displayed\r\n   */\r\n  suggestions: ISuggestionModel<T>[];\r\n\r\n  /**\r\n   * How the \"no result found\" should look in the suggestion list.\r\n   */\r\n  onRenderNoResultFound?: IRenderFunction<void>;\r\n\r\n  /**\r\n   * The text that appears at the top of the suggestions list.\r\n   */\r\n  suggestionsHeaderText?: string;\r\n\r\n  /**\r\n   * The text that should appear at the top of the most recently used box.\r\n   */\r\n  mostRecentlyUsedHeaderText?: string;\r\n\r\n  /**\r\n   * The text that appears indicating to the user that they can search for more results.\r\n   */\r\n  searchForMoreText?: string;\r\n\r\n  /**\r\n   * The callback that should be called when the user attempts to get more results\r\n   */\r\n  onGetMoreResults?: () => void;\r\n\r\n  /**\r\n   * The text that appears indicating to the use to force resolve the input\r\n   */\r\n  forceResolveText?: string;\r\n\r\n  /**\r\n   * The callback that should be called to see if the force resolve command should be shown\r\n   */\r\n  showForceResolve?: () => boolean;\r\n\r\n  /**\r\n   * The callback that should be called when the user attempts to use the input text as as item\r\n   */\r\n  createGenericItem?: () => void;\r\n\r\n  /**\r\n   * The CSS className of the suggestions root.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * The CSS className of the suggestions list\r\n   */\r\n  suggestionsClassName?: string;\r\n\r\n  /**\r\n   * The text that should appear if there is a search error.\r\n   */\r\n  searchErrorText?: string;\r\n\r\n  /**\r\n   * The text that should appear if no results are found when searching.\r\n   */\r\n  noResultsFoundText?: string;\r\n\r\n  /**\r\n   * The className of the suggestion item.\r\n   */\r\n  suggestionsItemClassName?: string;\r\n\r\n  /**\r\n   * Used to indicate whether or not the user can request more suggestions.\r\n   * Dictates whether or not the searchForMore button is displayed.\r\n   */\r\n  moreSuggestionsAvailable?: boolean;\r\n\r\n  /**\r\n   * Used to indicate whether or not the suggestions are loading.\r\n   */\r\n  isLoading?: boolean;\r\n\r\n  /**\r\n   * Used to indicate whether or not the component is searching for more results.\r\n   */\r\n  isSearching?: boolean;\r\n\r\n  /**\r\n   * The text to display while the results are loading.\r\n   */\r\n  loadingText?: string;\r\n\r\n  /**\r\n   * The text to display while searching for more results in a limited suggestions list.\r\n   */\r\n  searchingText?: string;\r\n\r\n  /**\r\n   * Indicates if a short list of recent suggestions should be shown.\r\n   */\r\n  isMostRecentlyUsedVisible?: boolean;\r\n\r\n  /**\r\n   * Function to fire when one of the optional remove buttons on a suggestion is clicked.\r\n   *\r\n   * TODO (adjective-object) remove IPersonaprops before the next major version bump\r\n   */\r\n  onSuggestionRemove?: (ev?: React.MouseEvent<HTMLElement>, item?: T | IPersonaProps, index?: number) => void;\r\n\r\n  /**\r\n   * Indicates if the text in resultsFooter or resultsFooterFull should be shown at the end of the suggestion list.\r\n   * @defaultvalue true\r\n   */\r\n  isResultsFooterVisible?: boolean;\r\n\r\n  /**\r\n   * Maximum number of suggestions to show in the full suggestion list.\r\n   */\r\n  resultsMaximumNumber?: number;\r\n\r\n  /**\r\n   * A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber.\r\n   */\r\n  resultsFooterFull?: (props: ISuggestionsProps<T>) => JSX.Element;\r\n\r\n  /**\r\n   * A renderer that adds an element at the end of the suggestions list it has fewer items than resultsMaximumNumber.\r\n   */\r\n  resultsFooter?: (props: ISuggestionsProps<T>) => JSX.Element;\r\n\r\n  /**\r\n   * Indicates whether to show a button with each suggestion to remove that suggestion.\r\n   */\r\n  showRemoveButtons?: boolean;\r\n\r\n  /**\r\n   * Screen reader message to read when there are suggestions available.\r\n   */\r\n  suggestionsAvailableAlertText?: string;\r\n\r\n  /**\r\n   * A function that resets focus to the expected item in the suggestion list\r\n   */\r\n  refocusSuggestions?: (keyCode: KeyCodes) => void;\r\n\r\n  /**\r\n   * An ARIA label for the container that is the parent of the suggestions.\r\n   */\r\n  suggestionsContainerAriaLabel?: string;\r\n\r\n  /**\r\n   * An ARIA label to use for the buttons to remove individual suggestions.\r\n   */\r\n  removeSuggestionAriaLabel?: string;\r\n\r\n  /**\r\n   * The string that will be used as the suggestionsListId.\r\n   * Will be used by the BasePicker to keep track of the list for aria.\r\n   */\r\n  suggestionsListId?: string;\r\n\r\n  /** Call to provide customized styling that will layer on top of the variant rules. */\r\n  styles?: IStyleFunctionOrObject<{}, {}>;\r\n\r\n  /** Theme provided by High-Order Component. */\r\n  theme?: ITheme;\r\n}\r\n\r\n/** The props needed to construct Suggestions styles. */\r\nexport type ISuggestionsStyleProps = Required<Pick<ISuggestionsProps<any>, 'theme'>> &\r\n  Pick<ISuggestionsProps<any>, 'className' | 'suggestionsClassName'> & {\r\n    /** Whether the forceResolve actionButton is selected. */\r\n    forceResolveButtonSelected?: boolean;\r\n\r\n    /** Whether the searchForMore actionButton is selected. */\r\n    searchForMoreButtonSelected?: boolean;\r\n  };\r\n\r\n/** Represents the stylable areas of the Suggestions. */\r\nexport interface ISuggestionsStyles {\r\n  /** Root element of the suggestions outer wrapper. */\r\n  root: IStyle;\r\n\r\n  /** Refers to the suggestions container. */\r\n  suggestionsContainer: IStyle;\r\n\r\n  /** Refers to the title rendered for suggestions container header and/or footer (if provided). */\r\n  title: IStyle;\r\n\r\n  /** Refers to the 'Force resolve' actionButton. */\r\n  forceResolveButton: IStyle;\r\n\r\n  /** Refers to the 'Search for more' actionButton. */\r\n  searchForMoreButton: IStyle;\r\n\r\n  /** Refers to the text rendered when no suggestions are found. */\r\n  noSuggestions: IStyle;\r\n\r\n  /** Refers to the text displaying if more suggestions available. */\r\n  suggestionsAvailable: IStyle;\r\n\r\n  /** SubComponents (Spinner) styles. */\r\n  subComponentStyles: ISuggestionsSubComponentStyles;\r\n}\r\n\r\n/** Styles interface of the SubComponents rendered within PeoplePickerItemSelected. */\r\nexport interface ISuggestionsSubComponentStyles {\r\n  /** Refers to the Spinner rendered within the Suggestions when searching or loading suggestions. */\r\n  spinner: IStyleFunctionOrObject<ISpinnerStyleProps, any>;\r\n}\r\n\r\n/**\r\n * SuggestionModel interface.\r\n * Type T is the type of the item that is suggested (Persona, Tag or any other custom picker).\r\n */\r\nexport interface ISuggestionModel<T> {\r\n  /** The suggested item of the type T */\r\n  item: T;\r\n\r\n  /** Whether the suggested item is selected or not. */\r\n  selected: boolean;\r\n\r\n  /** Aria-label string for each suggested item. */\r\n  ariaLabel?: string;\r\n}\r\n\r\n/** Enum to help identify which suggestions action button is selected. */\r\nexport enum SuggestionActionType {\r\n  /** None of the actions is selected. */\r\n  none,\r\n\r\n  /** ForceResolve action is selected. */\r\n  forceResolve,\r\n\r\n  /** SearchMore action is selected. */\r\n  searchMore\r\n}\r\n"]}