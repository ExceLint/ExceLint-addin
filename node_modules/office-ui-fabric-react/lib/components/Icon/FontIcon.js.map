{"version":3,"file":"FontIcon.js","sourceRoot":"../src/","sources":["components/Icon/FontIcon.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,GAAG,EAAE,cAAc,EAAE,qBAAqB,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAC9F,OAAO,EAAE,OAAO,EAAkC,MAAM,eAAe,CAAC;AAQxE,MAAM,CAAC,IAAM,cAAc,GAAG,eAAe,CAC3C,UAAC,QAAiB;IACV,IAAA;;;KAGL,EAHO,cAAI,EAAE,kBAGb,CAAC;IAEF,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IAED,OAAO;QACL,QAAQ,EAAE,IAAI;QACd,aAAa,EAAE,MAAM,CAAC,SAAS;QAC/B,UAAU,EAAE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU;KAC1D,CAAC;AACJ,CAAC,EACD,SAAS,EACT,IAAI,CAAC,gCAAgC,CACtC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAM,QAAQ,GAA4C,UAAA,KAAK;IAC5D,IAAA,yBAAQ,EAAE,2BAAS,EAAE,gBAAU,EAAV,+BAAU,CAAW;IAClD,IAAM,WAAW,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC3C,IAAA,yCAAa,EAAE,+BAAQ,EAAE,mCAAU,CAAiB;IAE5D,IAAM,WAAW,GAAG,cAAc,CAAoC,KAAK,EAAE,qBAAqB,CAAC,CAAC;IACpG,IAAM,cAAc,GAAG,KAAK,CAAC,YAAY,CAAC;QACxC,CAAC,CAAC,EAAE;QACJ,CAAC,CAAC;YACE,IAAI,EAAE,cAAc;YACpB,aAAa,EAAE,IAAI;SACpB,CAAC;IAEN,OAAO,CACL,sDACkB,QAAQ,IACpB,cAAc,EACd,WAAW,IACf,SAAS,EAAE,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC,QAAQ,IAAI,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC;QACvG,mGAAmG;QACnG,qDAAqD;QACrD,KAAK,aAAI,UAAU,YAAA,IAAK,KAAK,MAE5B,QAAQ,CACP,CACL,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,CAAC,IAAM,WAAW,GAAG,eAAe,CAAC,UAAC,QAAgB,EAAE,SAAkB,EAAE,SAAkB;IAClG,OAAO,QAAQ,CAAC,EAAE,QAAQ,UAAA,EAAE,SAAS,WAAA,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nimport { IFontIconProps } from './Icon.types';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon, IIconRecord, IIconSubsetRecord } from '../../Styling';\n\nexport interface IIconContent {\n  children?: string;\n  iconClassName?: string;\n  fontFamily?: string;\n}\n\nexport const getIconContent = memoizeFunction(\n  (iconName?: string): IIconContent | null => {\n    const { code, subset }: Pick<IIconRecord, 'code'> & { subset: Partial<IIconSubsetRecord> } = getIcon(iconName) || {\n      subset: {},\n      code: undefined,\n    };\n\n    if (!code) {\n      return null;\n    }\n\n    return {\n      children: code,\n      iconClassName: subset.className,\n      fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n    };\n  },\n  undefined,\n  true /*ignoreNullOrUndefinedResult */,\n);\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className, style = {} } = props;\n  const iconContent = getIconContent(iconName) || {};\n  const { iconClassName, children, fontFamily } = iconContent;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const containerProps = props['aria-label']\n    ? {}\n    : {\n        role: 'presentation',\n        'aria-hidden': true,\n      };\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n      // https://github.com/microsoft/fluentui/issues/10449\n      style={{ fontFamily, ...style }}\n    >\n      {children}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"]}