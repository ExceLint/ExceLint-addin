"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var Announced_1 = require("../Announced");
var Utilities_1 = require("office-ui-fabric-react/lib/Utilities");
var Image_1 = require("office-ui-fabric-react/lib/Image");
var FocusZone_1 = require("office-ui-fabric-react/lib/FocusZone");
var Text_1 = require("office-ui-fabric-react/lib/Text");
var Stack_1 = require("office-ui-fabric-react/lib/Stack");
var Toggle_1 = require("office-ui-fabric-react/lib/Toggle");
var ProgressIndicator_1 = require("office-ui-fabric-react/lib/ProgressIndicator");
var Utilities_2 = require("office-ui-fabric-react/lib/Utilities");
require("./Announced.Example.scss");
var DELAY = 10;
var AnnouncedLazyLoadingExample = /** @class */ (function (_super) {
    tslib_1.__extends(AnnouncedLazyLoadingExample, _super);
    function AnnouncedLazyLoadingExample(props) {
        var _this = _super.call(this, props) || this;
        _this._root = Utilities_1.createRef();
        _this._async = new Utilities_2.Async(_this);
        _this.state = {
            photos: _this._createPhotos(),
            total: 0,
            announced: undefined,
            percentComplete: 0,
            loading: false,
            complete: false,
            timeSinceLastAnnounce: 0
        };
        _this._renderPhotos = _this._renderPhotos.bind(_this);
        _this._renderAnnounced = _this._renderAnnounced.bind(_this);
        _this._onToggleChange = _this._onToggleChange.bind(_this);
        _this.increaseTotal = _this._async.setInterval(function () {
            if (_this.state.loading && _this.state.total < _this.state.photos.length) {
                _this.setState({ total: _this.state.total + 1 });
            }
            else if (_this.state.total === _this.state.photos.length && _this.state.complete !== true) {
                _this.setState({ complete: true, announced: undefined });
            }
        }, 2000);
        _this.timer = _this._async.setInterval(function () {
            if (_this.state.loading && !_this.state.complete) {
                _this.setState({ timeSinceLastAnnounce: _this.state.timeSinceLastAnnounce + 1 });
                if (_this.state.timeSinceLastAnnounce === DELAY || _this.state.percentComplete === 1) {
                    _this.setState({
                        announced: React.createElement(Announced_1.Announced, { message: _this.state.total + " of " + _this.state.photos.length + " photos loaded" }),
                        timeSinceLastAnnounce: 0
                    });
                }
            }
        }, 1000);
        return _this;
    }
    AnnouncedLazyLoadingExample.prototype.render = function () {
        var percentComplete = this.state.percentComplete;
        var stackTokens = { childrenGap: 10 };
        return (React.createElement(Stack_1.Stack, { tokens: stackTokens },
            React.createElement(Text_1.Text, null, "Turn on Narrator and check the toggle to start loading photos. Announced should announce the number of photos loaded every 10 seconds, as that is the delay chosen for this example."),
            React.createElement(Toggle_1.Toggle, { label: "Check to start loading photos", onText: "Start/Resume", offText: "Pause", onChange: this._onToggleChange }),
            React.createElement(ProgressIndicator_1.ProgressIndicator, { label: percentComplete < 1 ? 'Loading photos' : 'Finished loading photos', percentComplete: percentComplete }),
            this._renderAnnounced(),
            React.createElement(FocusZone_1.FocusZone, { as: "ul", className: "ms-AnnouncedExamples-photoList" }, this._renderPhotos())));
    };
    AnnouncedLazyLoadingExample.prototype.componentWillUnmount = function () {
        clearTimeout(this.timer);
        clearTimeout(this.increaseTotal);
    };
    AnnouncedLazyLoadingExample.prototype.componentDidUpdate = function () {
        var percentComplete = this.state.total / this.state.photos.length;
        if (percentComplete !== this.state.percentComplete && this.state.percentComplete < 1) {
            this.setState({ percentComplete: percentComplete });
        }
    };
    AnnouncedLazyLoadingExample.prototype._onToggleChange = function () {
        this.setState({ loading: !this.state.loading });
    };
    AnnouncedLazyLoadingExample.prototype._renderAnnounced = function () {
        var announced = this.state.announced;
        return announced;
    };
    AnnouncedLazyLoadingExample.prototype._createPhotos = function () {
        var width = 100;
        var height = 100;
        var result = Utilities_1.createArray(30, function () {
            return {
                url: "http://placehold.it/" + width + "x" + height,
                width: width,
                height: height
            };
        });
        return result;
    };
    AnnouncedLazyLoadingExample.prototype._renderPhotos = function () {
        var _this = this;
        var result = this.state.photos.map(function (photo, index) { return (React.createElement("ul", { key: index, className: "ms-AnnouncedExamples-photoCell", "aria-posinset": index + 1, "aria-setsize": _this.state.photos.length, "aria-label": "Photo", "data-is-focusable": true, ref: _this._root }, _this.state.total > index ? React.createElement(Image_1.Image, { src: photo.url, width: photo.width, height: photo.height }) : React.createElement("div", null))); });
        return result;
    };
    return AnnouncedLazyLoadingExample;
}(React.Component));
exports.AnnouncedLazyLoadingExample = AnnouncedLazyLoadingExample;
//# sourceMappingURL=Announced.LazyLoading.Example.js.map