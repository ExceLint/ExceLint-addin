{"version":3,"file":"Announced.SearchResults.Example.js","sourceRoot":"../src/","sources":["components/Announced/examples/Announced.SearchResults.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,0CAAyC;AACzC,8DAA+D;AAC/D,wDAAuD;AACvD,0DAAuE;AACvE,kEAA6D;AAE7D,IAAM,SAAS,GAAG;IAChB,OAAO;IACP,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;IACP,SAAS;IACT,OAAO;IACP,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,KAAK;IACL,MAAM;IACN,QAAQ;IACR,OAAO;IACP,QAAQ;CACT,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAA3B,CAA2B,CAAC,CAAC;AAU3C;IAAmD,yDAGlD;IAIC,uCAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAab;QA+CO,sBAAgB,GAAG,UAAC,UAAkB,EAAE,OAAwC;YACtF,IAAI,UAAU,IAAI,KAAI,CAAC,KAAK,CAAC,UAAU,EAAE;gBACvC,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;aACtC;iBAAM,IAAI,CAAC,UAAU,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,UAAU,EAAE;gBAChD,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;aACrC;YAED,IAAM,YAAY,GAAG,UAAU;gBAC7B,CAAC,CAAC,SAAS;qBACN,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,EAA9D,CAA8D,CAAC;qBAC7E,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,KAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,OAAO,CAAC,EAAzC,CAAyC,CAAC;gBAC7D,CAAC,CAAC,EAAE,CAAC;YAEP,IAAI,YAAY,CAAC,MAAM,KAAK,KAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE;gBAC1D,KAAI,CAAC,QAAQ,CAAC,EAAE,mBAAmB,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;aAC7D;YAED,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC;QA5EA,KAAI,CAAC,MAAM,GAAG,IAAI,iBAAK,CAAC,KAAI,CAAC,CAAC;QAE9B,KAAI,CAAC,KAAK,GAAG;YACX,OAAO,EAAE,CAAC;YACV,mBAAmB,EAAE,CAAC;YACtB,UAAU,EAAE,IAAI;SACjB,CAAC;QAEF,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,WAAW,CAAC;YACnC,KAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,KAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC;QACrD,CAAC,EAAE,IAAI,CAAC,CAAC;;IACX,CAAC;IAEM,8CAAM,GAAb;QACE,IAAM,WAAW,GAAiB,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QAEtD,OAAO,CACL,oBAAC,aAAK,IAAC,MAAM,EAAE,WAAW;YACxB,oBAAC,WAAI,yIAEE;YACN,IAAI,CAAC,gBAAgB,EAAE;YACxB,oBAAC,mBAAS,IACR,oBAAoB,EAAE,IAAI,CAAC,gBAAgB,EAC3C,eAAe,EAAE,IAAI,CAAC,gBAAgB,EACtC,sBAAsB,EAAE;oBACtB,qBAAqB,EAAE,gBAAgB;oBACvC,kBAAkB,EAAE,qBAAqB,CAAC,sEAAsE;iBACjH,EACD,UAAU,EAAE;oBACV,YAAY,EAAE,YAAY;iBAC3B,GACD,CACI,CACT,CAAC;IACJ,CAAC;IAEM,4DAAoB,GAA3B;QACE,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAEO,wDAAgB,GAAxB;QACQ,IAAA,eAAgD,EAA9C,4CAAmB,EAAE,0BAAU,CAAgB;QAEvD,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,CACL,oBAAC,qBAAS,IACR,OAAO,EAAE,mBAAmB,KAAK,CAAC,CAAC,CAAC,CAAI,mBAAmB,qBAAkB,CAAC,CAAC,CAAI,mBAAmB,sBAAmB,GACzH,CACH,CAAC;SACH;IACH,CAAC;IAED,kCAAkC;IAC1B,wDAAgB,GAAxB,UAAyB,IAAS;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAsBO,6DAAqB,GAA7B,UAA8B,GAAkC,EAAE,OAAwC;QACxG,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACvD,OAAO,KAAK,CAAC;SACd;QACD,OAAO,OAAO,CAAC,MAAM,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,EAA1B,CAA0B,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7E,CAAC;IACH,oCAAC;AAAD,CAAC,AA9FD,CAAmD,KAAK,CAAC,SAAS,GA8FjE;AA9FY,sEAA6B","sourcesContent":["import * as React from 'react';\r\nimport { Announced } from '../Announced';\r\nimport { TagPicker } from 'office-ui-fabric-react/lib/Pickers';\r\nimport { Text } from 'office-ui-fabric-react/lib/Text';\r\nimport { IStackTokens, Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\r\n\r\nconst _testTags = [\r\n  'black',\r\n  'blue',\r\n  'brown',\r\n  'cyan',\r\n  'green',\r\n  'magenta',\r\n  'mauve',\r\n  'orange',\r\n  'pink',\r\n  'purple',\r\n  'red',\r\n  'rose',\r\n  'violet',\r\n  'white',\r\n  'yellow'\r\n].map(item => ({ key: item, name: item }));\r\n\r\nexport interface IAnnouncedSearchResultsExampleState {\r\n  seconds: number;\r\n  numberOfSuggestions: number;\r\n  emptyInput: boolean;\r\n}\r\n\r\nexport interface IAnnouncedSearchResultsExampleProps {}\r\n\r\nexport class AnnouncedSearchResultsExample extends React.Component<\r\n  IAnnouncedSearchResultsExampleProps,\r\n  IAnnouncedSearchResultsExampleState\r\n> {\r\n  private timer: number;\r\n  private _async: Async;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this._async = new Async(this);\r\n\r\n    this.state = {\r\n      seconds: 0,\r\n      numberOfSuggestions: 0,\r\n      emptyInput: true\r\n    };\r\n\r\n    this.timer = this._async.setInterval(() => {\r\n      this.setState({ seconds: this.state.seconds + 1 });\r\n    }, 1000);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const stackTokens: IStackTokens = { childrenGap: 10 };\r\n\r\n    return (\r\n      <Stack tokens={stackTokens}>\r\n        <Text>\r\n          Turn on Narrator and type a letter or two into the TagPicker. This picker will filter added items from the search suggestions.\r\n        </Text>\r\n        {this._renderAnnounced()}\r\n        <TagPicker\r\n          onResolveSuggestions={this._onFilterChanged}\r\n          getTextFromItem={this._getTextFromItem}\r\n          pickerSuggestionsProps={{\r\n            suggestionsHeaderText: 'Suggested Tags',\r\n            noResultsFoundText: 'No Color Tags Found' // this alert handles the case when there are no suggestions available\r\n          }}\r\n          inputProps={{\r\n            'aria-label': 'Tag Picker'\r\n          }}\r\n        />\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    clearTimeout(this.timer);\r\n  }\r\n\r\n  private _renderAnnounced(): JSX.Element | undefined {\r\n    const { numberOfSuggestions, emptyInput } = this.state;\r\n\r\n    if (!emptyInput) {\r\n      return (\r\n        <Announced\r\n          message={numberOfSuggestions === 1 ? `${numberOfSuggestions} Color Tag Found` : `${numberOfSuggestions} Color Tags Found`}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private _getTextFromItem(item: any): any {\r\n    return item.name;\r\n  }\r\n\r\n  private _onFilterChanged = (filterText: string, tagList: { key: string; name: string }[]): { key: string; name: string }[] => {\r\n    if (filterText && this.state.emptyInput) {\r\n      this.setState({ emptyInput: false });\r\n    } else if (!filterText && !this.state.emptyInput) {\r\n      this.setState({ emptyInput: true });\r\n    }\r\n\r\n    const filteredTags = filterText\r\n      ? _testTags\r\n          .filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0)\r\n          .filter(tag => !this._listContainsDocument(tag, tagList))\r\n      : [];\r\n\r\n    if (filteredTags.length !== this.state.numberOfSuggestions) {\r\n      this.setState({ numberOfSuggestions: filteredTags.length });\r\n    }\r\n\r\n    return filteredTags;\r\n  };\r\n\r\n  private _listContainsDocument(tag: { key: string; name: string }, tagList: { key: string; name: string }[]) {\r\n    if (!tagList || !tagList.length || tagList.length === 0) {\r\n      return false;\r\n    }\r\n    return tagList.filter(compareTag => compareTag.key === tag.key).length > 0;\r\n  }\r\n}\r\n"]}