{"version":3,"file":"ThemeRulesStandard.js","sourceRoot":"../src/","sources":["components/ThemeGenerator/ThemeRulesStandard.ts"],"names":[],"mappings":"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","sourcesContent":["import { Shade } from '../../utilities/color/shades';\r\nimport { getColorFromString } from '../../utilities/color/colors';\r\nimport { mapEnumByName } from '../../Utilities';\r\n\r\nimport { IThemeRules } from './IThemeRules';\r\n\r\n/* This is the set of rules for our default theme.\r\n   We start with three base slots, defining the background, foreground (text), and\r\n   primary color (sometimes called theme color). Each Fabric slot is generated from\r\n   shades (or tints) of one of those three, creating the Fabric palette.\r\n   Then, we have semantic slots, the new thing intended to eventually replace the\r\n   Fabric palette. The semantic slots inherit from the Fabric palette. */\r\n\r\n/* The most minimal set of slots we start with. All other ones can be generated based on rules.\r\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety.\r\n * For now, we are only dealing with color. */\r\nexport enum BaseSlots {\r\n  primaryColor,\r\n  backgroundColor,\r\n  foregroundColor\r\n}\r\n\r\n/* The original Fabric palette, only for back-compat. */\r\nexport enum FabricSlots {\r\n  themePrimary, // BaseSlots.primaryColor, Shade[Shade.Unshaded]);\r\n  themeLighterAlt, // BaseSlots.primaryColor, Shade[Shade.Shade1]);\r\n  themeLighter, // BaseSlots.primaryColor, Shade[Shade.Shade2]);\r\n  themeLight, // BaseSlots.primaryColor, Shade[Shade.Shade3]);\r\n  themeTertiary, // BaseSlots.primaryColor, Shade[Shade.Shade4]);\r\n  themeSecondary, // BaseSlots.primaryColor, Shade[Shade.Shade5]);\r\n  themeDarkAlt, // BaseSlots.primaryColor, Shade[Shade.Shade6]);\r\n  themeDark, // BaseSlots.primaryColor, Shade[Shade.Shade7]);\r\n  themeDarker, // BaseSlots.primaryColor, Shade[Shade.Shade8]);\r\n\r\n  neutralLighterAlt, // BaseSlots.backgroundColor, Shade[Shade.Shade1]);\r\n  neutralLighter, // BaseSlots.backgroundColor, Shade[Shade.Shade2]);\r\n  neutralLight, // BaseSlots.backgroundColor, Shade[Shade.Shade3]);\r\n  neutralQuaternaryAlt, // BaseSlots.backgroundColor, Shade[Shade.Shade4]);\r\n  neutralQuaternary, // BaseSlots.backgroundColor, Shade[Shade.Shade5]);\r\n  neutralTertiaryAlt, // BaseSlots.backgroundColor, Shade[Shade.Shade6]); // bg6 or fg2\r\n  neutralTertiary, // BaseSlots.foregroundColor, Shade[Shade.Shade3]);\r\n  // deprecated: neutralSecondaryAlt, // BaseSlots.foregroundColor, Shade[Shade.Shade4]);\r\n  neutralSecondary, // BaseSlots.foregroundColor, Shade[Shade.Shade5]);\r\n  neutralPrimaryAlt, // BaseSlots.foregroundColor, Shade[Shade.Shade6]);\r\n  neutralPrimary, // BaseSlots.foregroundColor, Shade[Shade.Unshaded]);\r\n  neutralDark, // BaseSlots.foregroundColor, Shade[Shade.Shade7]);\r\n\r\n  black, // BaseSlots.foregroundColor, Shade[Shade.Shade8]);\r\n  white // BaseSlots.backgroundColor, Shade[Shade.Unshaded]);\r\n}\r\n\r\n/* List of all the semantic color slots for this theme.\r\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety. */\r\nexport enum SemanticColorSlots {\r\n  bodyBackground,\r\n  bodyText,\r\n  disabledBackground,\r\n  disabledText\r\n}\r\n\r\nexport function themeRulesStandardCreator(): IThemeRules {\r\n  const slotRules: IThemeRules = {};\r\n\r\n  /*** BASE COLORS and their SHADES */\r\n  // iterate through each base slot and make the SlotRules for those\r\n  mapEnumByName(BaseSlots, (baseSlot: string) => {\r\n    // first make the SlotRule for the unshaded base Color\r\n    slotRules[baseSlot] = {\r\n      name: baseSlot,\r\n      isCustomized: true,\r\n      dependentRules: []\r\n    };\r\n\r\n    // then make a rule for each shade of this base color, but skip unshaded\r\n    mapEnumByName(Shade, (shadeName: string, shadeValue: Shade) => {\r\n      if (shadeName === Shade[Shade.Unshaded]) {\r\n        return;\r\n      }\r\n      const inherits = slotRules[baseSlot];\r\n      const thisSlotRule = {\r\n        name: baseSlot + shadeName,\r\n        inherits: slotRules[baseSlot],\r\n        asShade: shadeValue,\r\n        isCustomized: false,\r\n        isBackgroundShade: baseSlot === BaseSlots[BaseSlots.backgroundColor] ? true : false,\r\n        dependentRules: []\r\n      };\r\n      slotRules[baseSlot + shadeName] = thisSlotRule;\r\n      inherits.dependentRules.push(thisSlotRule);\r\n\r\n      return void 0;\r\n    });\r\n\r\n    return void 0;\r\n  });\r\n\r\n  // set default colors for the base colors\r\n  slotRules[BaseSlots[BaseSlots.primaryColor]].color = getColorFromString('#0078d4');\r\n  slotRules[BaseSlots[BaseSlots.backgroundColor]].color = getColorFromString('#fff');\r\n  slotRules[BaseSlots[BaseSlots.foregroundColor]].color = getColorFromString('#333');\r\n\r\n  // set default colors for shades (the slot rules were already created above and will be used if the base colors ever change)\r\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade1]].color = getColorFromString('#eff6fc');\r\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade2]].color = getColorFromString('#deecf9');\r\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade3]].color = getColorFromString('#c7e0f4');\r\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade4]].color = getColorFromString('#71afe5');\r\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade5]].color = getColorFromString('#2b88d8');\r\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade6]].color = getColorFromString('#106ebe');\r\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade7]].color = getColorFromString('#005a9e');\r\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade8]].color = getColorFromString('#004578');\r\n\r\n  // set default colors for shades (the slot rules were already created above and will be used if the base colors ever change)\r\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade1]].color = getColorFromString('#eaeaea');\r\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade2]].color = getColorFromString('#c8c8c8');\r\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade3]].color = getColorFromString('#a6a6a6');\r\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade4]].color = getColorFromString('#767676');\r\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade5]].color = getColorFromString('#666666');\r\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade6]].color = getColorFromString('#3c3c3c');\r\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade7]].color = getColorFromString('#212121');\r\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade8]].color = getColorFromString('#000000');\r\n\r\n  function _makeFabricSlotRule(slotName: string, inheritedBase: BaseSlots, inheritedShade: Shade, isBackgroundShade = false): void {\r\n    const inherits = slotRules[BaseSlots[inheritedBase]];\r\n    const thisSlotRule = {\r\n      name: slotName,\r\n      inherits: inherits,\r\n      asShade: inheritedShade,\r\n      isCustomized: false,\r\n      isBackgroundShade: isBackgroundShade,\r\n      dependentRules: []\r\n    };\r\n    slotRules[slotName] = thisSlotRule;\r\n    inherits.dependentRules.push(thisSlotRule);\r\n  }\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themePrimary], BaseSlots.primaryColor, Shade.Unshaded);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighterAlt], BaseSlots.primaryColor, Shade.Shade1);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighter], BaseSlots.primaryColor, Shade.Shade2);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLight], BaseSlots.primaryColor, Shade.Shade3);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeTertiary], BaseSlots.primaryColor, Shade.Shade4);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeSecondary], BaseSlots.primaryColor, Shade.Shade5);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarkAlt], BaseSlots.primaryColor, Shade.Shade6);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDark], BaseSlots.primaryColor, Shade.Shade7);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarker], BaseSlots.primaryColor, Shade.Shade8);\r\n\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighterAlt], BaseSlots.backgroundColor, Shade.Shade1, true);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighter], BaseSlots.backgroundColor, Shade.Shade2, true);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLight], BaseSlots.backgroundColor, Shade.Shade3, true);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternaryAlt], BaseSlots.backgroundColor, Shade.Shade4, true);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternary], BaseSlots.backgroundColor, Shade.Shade5, true);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiaryAlt], BaseSlots.backgroundColor, Shade.Shade6, true); // bg6 or fg2\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiary], BaseSlots.foregroundColor, Shade.Shade3);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralSecondary], BaseSlots.foregroundColor, Shade.Shade4);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimaryAlt], BaseSlots.foregroundColor, Shade.Shade5);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimary], BaseSlots.foregroundColor, Shade.Unshaded);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralDark], BaseSlots.foregroundColor, Shade.Shade7);\r\n\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.black], BaseSlots.foregroundColor, Shade.Shade8);\r\n  _makeFabricSlotRule(FabricSlots[FabricSlots.white], BaseSlots.backgroundColor, Shade.Unshaded, true);\r\n\r\n  // manually set initial colors for the primary-based Fabric slots to match the default theme\r\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].color = getColorFromString('#eff6fc');\r\n  slotRules[FabricSlots[FabricSlots.themeLighter]].color = getColorFromString('#deecf9');\r\n  slotRules[FabricSlots[FabricSlots.themeLight]].color = getColorFromString('#c7e0f4');\r\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].color = getColorFromString('#71afe5');\r\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].color = getColorFromString('#2b88d8');\r\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].color = getColorFromString('#106ebe');\r\n  slotRules[FabricSlots[FabricSlots.themeDark]].color = getColorFromString('#005a9e');\r\n  slotRules[FabricSlots[FabricSlots.themeDarker]].color = getColorFromString('#004578');\r\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].isCustomized = true;\r\n  slotRules[FabricSlots[FabricSlots.themeLighter]].isCustomized = true;\r\n  slotRules[FabricSlots[FabricSlots.themeLight]].isCustomized = true;\r\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].isCustomized = true;\r\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].isCustomized = true;\r\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].isCustomized = true;\r\n  slotRules[FabricSlots[FabricSlots.themeDark]].isCustomized = true;\r\n  slotRules[FabricSlots[FabricSlots.themeDarker]].isCustomized = true;\r\n\r\n  /*** SEMANTIC SLOTS */\r\n  // This code is commented out for now but left for future semantic color customization.\r\n  // create the SlotRule for a semantic slot\r\n  // function _makeSemanticSlotRule(semanticSlot: SemanticColorSlots, inheritedFabricSlot: FabricSlots): void {\r\n  //   const inherits = slotRules[FabricSlots[inheritedFabricSlot]];\r\n  //   const thisSlotRule = {\r\n  //     name: SemanticColorSlots[semanticSlot],\r\n  //     inherits: slotRules[FabricSlots[inheritedFabricSlot]],\r\n  //     isCustomized: false,\r\n  //     dependentRules: []\r\n  //   };\r\n  //   slotRules[SemanticColorSlots[semanticSlot]] = thisSlotRule;\r\n  //   inherits.dependentRules.push(thisSlotRule);\r\n  // }\r\n\r\n  // Basic simple slots\r\n  // _makeSemanticSlotRule(SemanticColorSlots.bodyBackground, FabricSlots.white);\r\n  // _makeSemanticSlotRule(SemanticColorSlots.bodyText, FabricSlots.neutralPrimary);\r\n\r\n  return slotRules;\r\n}\r\n"]}