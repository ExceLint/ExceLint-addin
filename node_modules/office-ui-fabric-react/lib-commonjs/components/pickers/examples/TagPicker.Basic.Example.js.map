{"version":3,"file":"TagPicker.Basic.Example.js","sourceRoot":"../src/","sources":["components/pickers/examples/TagPicker.Basic.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n\r\nimport { BaseComponent } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { TagPicker, IBasePicker, ITag } from 'office-ui-fabric-react/lib/Pickers';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\n\r\nimport * as exampleStylesImport from 'office-ui-fabric-react/lib/common/_exampleStyles.scss';\r\nconst exampleStyles: any = exampleStylesImport;\r\n\r\nconst _testTags: ITag[] = [\r\n  'black',\r\n  'blue',\r\n  'brown',\r\n  'cyan',\r\n  'green',\r\n  'magenta',\r\n  'mauve',\r\n  'orange',\r\n  'pink',\r\n  'purple',\r\n  'red',\r\n  'rose',\r\n  'violet',\r\n  'white',\r\n  'yellow'\r\n].map(item => ({ key: item, name: item }));\r\n\r\nexport interface ITagPickerDemoPageState {\r\n  isPickerDisabled?: boolean;\r\n}\r\n\r\nexport class TagPickerBasicExample extends BaseComponent<{}, ITagPickerDemoPageState> {\r\n  // All pickers extend from BasePicker specifying the item type.\r\n  private _picker = React.createRef<IBasePicker<ITag>>();\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      isPickerDisabled: false\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <Checkbox\r\n          className={exampleStyles.exampleCheckbox}\r\n          label=\"Disable Tag Picker\"\r\n          checked={this.state.isPickerDisabled}\r\n          onChange={this._onDisabledButtonClick}\r\n        />\r\n        Filter items in suggestions: This picker will filter added items from the search suggestions.\r\n        <TagPicker\r\n          onResolveSuggestions={this._onFilterChanged}\r\n          getTextFromItem={this._getTextFromItem}\r\n          pickerSuggestionsProps={{\r\n            suggestionsHeaderText: 'Suggested Tags',\r\n            noResultsFoundText: 'No Color Tags Found'\r\n          }}\r\n          itemLimit={2}\r\n          disabled={this.state.isPickerDisabled}\r\n          inputProps={{\r\n            onBlur: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onBlur called'),\r\n            onFocus: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onFocus called'),\r\n            'aria-label': 'Tag Picker'\r\n          }}\r\n        />\r\n        <br />\r\n        Filter items on selected: This picker will show already-added suggestions but will not add duplicate tags.\r\n        <TagPicker\r\n          componentRef={this._picker}\r\n          onResolveSuggestions={this._onFilterChangedNoFilter}\r\n          onItemSelected={this._onItemSelected}\r\n          getTextFromItem={this._getTextFromItem}\r\n          pickerSuggestionsProps={{\r\n            suggestionsHeaderText: 'Suggested Tags',\r\n            noResultsFoundText: 'No Color Tags Found'\r\n          }}\r\n          itemLimit={2}\r\n          disabled={this.state.isPickerDisabled}\r\n          inputProps={{\r\n            onBlur: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onBlur called'),\r\n            onFocus: (ev: React.FocusEvent<HTMLInputElement>) => console.log('onFocus called'),\r\n            'aria-label': 'Tag Picker'\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getTextFromItem(item: ITag): string {\r\n    return item.name;\r\n  }\r\n\r\n  private _onDisabledButtonClick = (): void => {\r\n    this.setState({\r\n      isPickerDisabled: !this.state.isPickerDisabled\r\n    });\r\n  };\r\n\r\n  private _onFilterChanged = (filterText: string, tagList: ITag[]): ITag[] => {\r\n    return filterText\r\n      ? _testTags\r\n          .filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0)\r\n          .filter(tag => !this._listContainsDocument(tag, tagList))\r\n      : [];\r\n  };\r\n\r\n  private _onFilterChangedNoFilter = (filterText: string, tagList: ITag[]): ITag[] => {\r\n    return filterText ? _testTags.filter(tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0) : [];\r\n  };\r\n\r\n  private _onItemSelected = (item: ITag): ITag | null => {\r\n    if (this._picker.current && this._listContainsDocument(item, this._picker.current.items)) {\r\n      return null;\r\n    }\r\n    return item;\r\n  };\r\n\r\n  private _listContainsDocument(tag: ITag, tagList?: ITag[]) {\r\n    if (!tagList || !tagList.length || tagList.length === 0) {\r\n      return false;\r\n    }\r\n    return tagList.filter(compareTag => compareTag.key === tag.key).length > 0;\r\n  }\r\n}\r\n"]}