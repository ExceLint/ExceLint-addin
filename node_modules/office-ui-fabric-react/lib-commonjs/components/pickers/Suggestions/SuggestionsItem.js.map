{"version":3,"file":"SuggestionsItem.js","sourceRoot":"../src/","sources":["components/pickers/Suggestions/SuggestionsItem.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAE/B,gDAA4E;AAE5E,0CAA4D;AAG5D,iDAAmD;AACnD,IAAM,YAAY,GAAQ,YAAY,CAAC;AAEvC,IAAM,aAAa,GAAG,8BAAkB,EAAsD,CAAC;AAE/F;IAAwC,2CAA0C;IAAlF;;IA6DA,CAAC;IA5DQ,gCAAM,GAAb;QACQ,IAAA,eAUQ,EATZ,oCAAe,EACf,sCAAgB,EAChB,oBAAO,EACP,wBAAS,EACT,8BAAY,EACZ,0CAAkB,EAClB,gDAAqB,EACrB,kBAAM,EACN,gBAAK,CACQ;QAEf,OAAO;QACP,gFAAgF;QAChF,oFAAoF;QACpF,+EAA+E;QAC/E,oFAAoF;QACpF,mFAAmF;QACnF,wDAAwD;QACxD,+EAA+E;QAC/E,sFAAsF;QACtF,wFAAwF;QACxF,gDAAgD;QAChD,IAAM,UAAU,GAAwD,MAAM;YAC5E,CAAC,CAAC,aAAa,CAAC,MAAM,EAAE;gBACpB,KAAK,EAAE,KAAM;gBACb,SAAS,WAAA;gBACT,SAAS,EAAE,eAAe,CAAC,QAAQ,IAAI,kBAAkB;aAC1D,CAAC;YACJ,CAAC,CAAC;gBACE,IAAI,EAAE,eAAG,CACP,qBAAqB,EACrB,YAAY,CAAC,eAAe;oBAE1B,GAAC,eAAe,GAAG,YAAY,CAAC,0BAA0B,IAAG,eAAe,CAAC,QAAQ,IAAI,kBAAkB;yBAE7G,SAAS,CACV;gBACD,UAAU,EAAE,eAAG,CAAC,2BAA2B,EAAE,YAAY,CAAC,UAAU,CAAC;gBACrE,WAAW,EAAE,eAAG,CAAC,4BAA4B,EAAE,YAAY,CAAC,WAAW,CAAC;aACzE,CAAC;QAEN,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,IAAI;YAC7B,oBAAC,sBAAa,IAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,UAAU,IAC9D,gBAAgB,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CACrC;YACf,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAC7B,oBAAC,mBAAU,IACT,SAAS,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,EACzE,KAAK,EAAE,qBAAqB,EAC5B,SAAS,EAAE,qBAAqB,EAChC,OAAO,EAAE,YAAY,EACrB,SAAS,EAAE,UAAU,CAAC,WAAW,GACjC,CACH,CAAC,CAAC,CAAC,IAAI,CACJ,CACP,CAAC;;IACJ,CAAC;IACH,sBAAC;AAAD,CAAC,AA7DD,CAAwC,yBAAa,GA6DpD;AA7DY,0CAAe","sourcesContent":["import * as React from 'react';\r\n\r\nimport { classNamesFunction, BaseComponent, css } from '../../../Utilities';\r\nimport { IProcessedStyleSet } from '../../../Styling';\r\nimport { CommandButton, IconButton } from '../../../Button';\r\nimport { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\r\n\r\nimport * as stylesImport from './Suggestions.scss';\r\nconst legacyStyles: any = stylesImport;\r\n\r\nconst getClassNames = classNamesFunction<ISuggestionsItemStyleProps, ISuggestionsItemStyles>();\r\n\r\nexport class SuggestionsItem<T> extends BaseComponent<ISuggestionItemProps<T>, {}> {\r\n  public render(): JSX.Element {\r\n    const {\r\n      suggestionModel,\r\n      RenderSuggestion,\r\n      onClick,\r\n      className,\r\n      onRemoveItem,\r\n      isSelectedOverride,\r\n      removeButtonAriaLabel,\r\n      styles,\r\n      theme\r\n    } = this.props;\r\n\r\n    // TODO\r\n    // Clean this up by leaving only the first part after removing support for SASS.\r\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\r\n    // might be used by consumers separately from pickers extending from BasePicker\r\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\r\n    // we can not use the 'styled' function without adding some helpers which can break\r\n    // downstream consumers who did not use the new helpers.\r\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\r\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\r\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\r\n    // then we just use the old SASS styles instead.\r\n    const classNames: Partial<IProcessedStyleSet<ISuggestionsItemStyles>> = styles\r\n      ? getClassNames(styles, {\r\n          theme: theme!,\r\n          className,\r\n          suggested: suggestionModel.selected || isSelectedOverride\r\n        })\r\n      : {\r\n          root: css(\r\n            'ms-Suggestions-item',\r\n            legacyStyles.suggestionsItem,\r\n            {\r\n              ['is-suggested ' + legacyStyles.suggestionsItemIsSuggested]: suggestionModel.selected || isSelectedOverride\r\n            },\r\n            className\r\n          ),\r\n          itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\r\n          closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton)\r\n        };\r\n\r\n    return (\r\n      <div className={classNames.root}>\r\n        <CommandButton onClick={onClick} className={classNames.itemButton}>\r\n          {RenderSuggestion(suggestionModel.item, this.props)}\r\n        </CommandButton>\r\n        {this.props.showRemoveButton ? (\r\n          <IconButton\r\n            iconProps={{ iconName: 'Cancel', styles: { root: { fontSize: '12px' } } }}\r\n            title={removeButtonAriaLabel}\r\n            ariaLabel={removeButtonAriaLabel}\r\n            onClick={onRemoveItem}\r\n            className={classNames.closeButton}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}