{"version":3,"file":"SelectedItemWithMenu.js","sourceRoot":"../src/","sources":["components/pickers/PeoplePicker/PeoplePickerItems/SelectedItemWithMenu.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,mDAA2D;AAE3D,+CAA+D;AAC/D,6DAA6E;AAC7E,6CAAgD;AAChD,mDAAkD;AAElD,wDAA0D;AAC1D,IAAM,MAAM,GAAQ,YAAY,CAAC;AAOjC;;;GAGG;AACH;IAA0C,gDAA6E;IAOrH,8BAAY,KAAqC;QAAjD,YACE,kBAAM,KAAK,CAAC,SAEb;QALO,kBAAY,GAAG,KAAK,CAAC,SAAS,EAAkB,CAAC;QAmCjD,uBAAiB,GAAG,UAAC,EAAQ;YACnC,KAAI,CAAC,QAAQ,CAAC,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,CAAC;QACjD,CAAC,CAAC;QAEM,4BAAsB,GAAG,UAAC,EAAS;YACzC,KAAI,CAAC,QAAQ,CAAC,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC;QArCA,KAAI,CAAC,KAAK,GAAG,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC;;IAChD,CAAC;IAEM,qCAAM,GAAb;QACQ,IAAA,eAA0D,EAAxD,cAAI,EAAE,8BAAY,EAAE,gDAAqB,CAAgB;QACjE,OAAO,CACL,kDAAwB,IAAI,EAAE,SAAS,EAAE,eAAG,CAAC,yBAAyB,EAAE,MAAM,CAAC,aAAa,CAAC;YAC3F,oBAAC,qBAAS,IAAC,SAAS,EAAE,eAAG,CAAC,4BAA4B,EAAE,MAAM,CAAC,gBAAgB,CAAC;gBAC9E,6BAAK,SAAS,EAAE,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;oBAC9D,oBAAC,iBAAO,uBAAK,IAAW,IAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,yBAAe,CAAC,IAAI,IAAI,CACtG;gBACN,6BAAK,GAAG,EAAE,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;oBACtF,oBAAC,mBAAU,IAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,iBAAiB,GAAI,CAC5E;gBACN,6BAAK,SAAS,EAAE,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;oBAC9D,oBAAC,mBAAU,IAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,qBAAqB,GAAI,CACtG;gBACL,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAClC,oBAAC,+BAAc,IACb,KAAK,EAAE,IAAI,CAAC,SAAU,EACtB,kBAAkB,EAAE,IAAI,EACxB,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,EACjC,SAAS,EAAE,IAAI,CAAC,sBAAsB,EACtC,eAAe,EAAE,gCAAe,CAAC,cAAc,GAC/C,CACH,CAAC,CAAC,CAAC,IAAI,CACE,CACR,CACP,CAAC;IACJ,CAAC;IASH,2BAAC;AAAD,CAAC,AA/CD,CAA0C,yBAAa,GA+CtD;AA/CY,oDAAoB","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, css } from '../../../../Utilities';\r\nimport { IPeoplePickerItemWithMenuProps } from './PeoplePickerItem.types';\r\nimport { Persona, PersonaPresence } from '../../../../Persona';\r\nimport { ContextualMenu, DirectionalHint } from '../../../../ContextualMenu';\r\nimport { IconButton } from '../../../../Button';\r\nimport { FocusZone } from '../../../../FocusZone';\r\n\r\nimport * as stylesImport from './PickerItemsDefault.scss';\r\nconst styles: any = stylesImport;\r\n\r\n/** PeoplePickerItemWithMenu state interface. */\r\nexport interface IPeoplePickerItemWithMenuState {\r\n  contextualMenuVisible: boolean;\r\n}\r\n\r\n/**\r\n * PeoplePickerItem with an additional contextual menu.\r\n * @deprecated Do not use. Will be removed in Fabric 7.0\r\n */\r\nexport class SelectedItemWithMenu extends BaseComponent<IPeoplePickerItemWithMenuProps, IPeoplePickerItemWithMenuState> {\r\n  public refs: {\r\n    [key: string]: any;\r\n  };\r\n\r\n  private _ellipsisRef = React.createRef<HTMLDivElement>();\r\n\r\n  constructor(props: IPeoplePickerItemWithMenuProps) {\r\n    super(props);\r\n    this.state = { contextualMenuVisible: false };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { item, onRemoveItem, removeButtonAriaLabel } = this.props;\r\n    return (\r\n      <div data-is-focusable={true} className={css('ms-PickerItem-container', styles.itemContainer)}>\r\n        <FocusZone className={css('ms-PickerPersona-container', styles.personaContainer)}>\r\n          <div className={css('ms-PickerItem-content', styles.itemContent)}>\r\n            <Persona {...item as any} presence={item.presence !== undefined ? item.presence : PersonaPresence.none} />\r\n          </div>\r\n          <div ref={this._ellipsisRef} className={css('ms-PickerItem-content', styles.itemContent)}>\r\n            <IconButton iconProps={{ iconName: 'More' }} onClick={this._onContextualMenu} />\r\n          </div>\r\n          <div className={css('ms-PickerItem-content', styles.itemContent)}>\r\n            <IconButton iconProps={{ iconName: 'Cancel' }} onClick={onRemoveItem} ariaLabel={removeButtonAriaLabel} />\r\n          </div>\r\n          {this.state.contextualMenuVisible ? (\r\n            <ContextualMenu\r\n              items={item.menuItems!}\r\n              shouldFocusOnMount={true}\r\n              target={this._ellipsisRef.current}\r\n              onDismiss={this._onCloseContextualMenu}\r\n              directionalHint={DirectionalHint.bottomAutoEdge}\r\n            />\r\n          ) : null}\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onContextualMenu = (ev?: any): void => {\r\n    this.setState({ contextualMenuVisible: true });\r\n  };\r\n\r\n  private _onCloseContextualMenu = (ev: Event) => {\r\n    this.setState({ contextualMenuVisible: false });\r\n  };\r\n}\r\n"]}