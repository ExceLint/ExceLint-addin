{"version":3,"file":"Overlay.types.js","sourceRoot":"../src/","sources":["components/Overlay/Overlay.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\n\r\nexport interface IOverlay {}\r\n\r\nexport interface IOverlayProps extends React.HTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef?: IRefObject<IOverlay>;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules\r\n   */\r\n  styles?: IStyleFunctionOrObject<IOverlayStyleProps, IOverlayStyles>;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Additional css class to apply to the Overlay\r\n   * @defaultvalue undefined\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Whether to use the dark-themed overlay.\r\n   * @defaultvalue false\r\n   */\r\n  isDarkThemed?: boolean;\r\n\r\n  onClick?: () => void;\r\n}\r\n\r\nexport interface IOverlayStyleProps {\r\n  /**\r\n   * Accept theme prop.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Accept custom classNames\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Is overlay visible\r\n   */\r\n  isNone?: boolean;\r\n\r\n  /**\r\n   * Is overlay dark themed\r\n   */\r\n  isDark?: boolean;\r\n}\r\n\r\nexport interface IOverlayStyles {\r\n  /**\r\n   * Style for the root element.\r\n   */\r\n  root: IStyle;\r\n}\r\n"]}