{"version":3,"file":"DialogContent.types.js","sourceRoot":"../src/","sources":["components/Dialog/DialogContent.types.ts"],"names":[],"mappings":";;AAyFA,IAAY,UAOX;AAPD,WAAY,UAAU;IACpB,sBAAsB;IACtB,+CAAU,CAAA;IACV,sCAAsC;IACtC,yDAAe,CAAA;IACf,gEAAgE;IAChE,6CAAS,CAAA;AACX,CAAC,EAPW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAOrB","sourcesContent":["import * as React from 'react';\r\nimport { DialogContentBase } from './DialogContent.base';\r\nimport { IButtonProps } from '../Button/Button.types';\r\nimport { ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\n\r\nexport interface IDialogContent {}\r\n\r\nexport interface IDialogContentProps extends React.ClassAttributes<DialogContentBase> {\r\n  /**\r\n   * Optional callback to access the IDialogContent interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IDialogContent>;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules\r\n   */\r\n  styles?: IStyleFunctionOrObject<IDialogContentStyleProps, IDialogContentStyles>;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Is inside a multiline wrapper\r\n   */\r\n  isMultiline?: boolean;\r\n\r\n  /**\r\n   * Show an 'x' close button in the upper-right corner\r\n   */\r\n  showCloseButton?: boolean;\r\n\r\n  /**\r\n   * Other top buttons that will show up next to the close button\r\n   */\r\n  topButtonsProps?: IButtonProps[];\r\n\r\n  /**\r\n   * Optional override class name\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * A callback function for when the Dialog is dismissed from the close button or light dismiss, before the animation completes.\r\n   */\r\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;\r\n\r\n  /**\r\n   * The Id for subText container\r\n   */\r\n  subTextId?: string;\r\n\r\n  /**\r\n   * The subtext to display in the dialog\r\n   */\r\n  subText?: string;\r\n\r\n  /**\r\n   * The Id for title container\r\n   */\r\n  titleId?: string;\r\n\r\n  /**\r\n   * The title text to display at the top of the dialog.\r\n   */\r\n  title?: string;\r\n\r\n  /**\r\n   * Responsive mode passed in from decorator.\r\n   */\r\n  responsiveMode?: ResponsiveMode;\r\n\r\n  /**\r\n   * Label to be passed to to aria-label of close button\r\n   * @defaultvalue Close\r\n   */\r\n  closeButtonAriaLabel?: string;\r\n\r\n  /**\r\n   * The type of Dialog to display.\r\n   * @defaultvalue DialogType.normal\r\n   */\r\n  type?: DialogType;\r\n}\r\n\r\nexport enum DialogType {\r\n  /** Standard dialog */\r\n  normal = 0,\r\n  /** Dialog with large header banner */\r\n  largeHeader = 1,\r\n  /** Dialog with an 'x' close button in the upper-right corner */\r\n  close = 2\r\n}\r\n\r\nexport interface IDialogContentStyleProps {\r\n  /**\r\n   * Accept theme prop.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Accept custom classNames\r\n   */\r\n  className?: string;\r\n\r\n  isLargeHeader?: boolean;\r\n  isClose?: boolean;\r\n  hidden?: boolean;\r\n\r\n  /**\r\n   * Is inside a multiline wrapper\r\n   */\r\n  isMultiline?: boolean;\r\n}\r\n\r\nexport interface IDialogContentStyles {\r\n  /**\r\n   * Style for the content element.\r\n   */\r\n  content: IStyle;\r\n  subText: IStyle;\r\n  header: IStyle;\r\n  button: IStyle;\r\n  inner: IStyle;\r\n  innerContent: IStyle;\r\n  title: IStyle;\r\n  topButton: IStyle;\r\n}\r\n"]}