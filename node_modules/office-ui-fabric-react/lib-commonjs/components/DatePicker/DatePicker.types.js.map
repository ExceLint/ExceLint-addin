{"version":3,"file":"DatePicker.types.js","sourceRoot":"../src/","sources":["components/DatePicker/DatePicker.types.ts"],"names":[],"mappings":"","sourcesContent":["import { DayOfWeek, ICalendarProps } from '../../Calendar';\r\nimport { FirstWeekOfYear } from '../../utilities/dateValues/DateValues';\r\nimport { ICalendarFormatDateCallbacks } from '../Calendar/Calendar.types';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IBaseProps, IStyleFunction, IComponentAs } from '../../Utilities';\r\nimport { ICalloutProps } from '../../Callout';\r\nimport { ITextFieldProps } from '../TextField/TextField.types';\r\n\r\nexport interface IDatePicker {\r\n  /** Sets focus to the text field */\r\n  focus(): void;\r\n\r\n  /** Reset the state of the picker to the default */\r\n  reset(): void;\r\n}\r\n\r\nexport interface IDatePickerProps extends IBaseProps<IDatePicker>, React.HTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Optional callback to access the IDatePicker interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IDatePicker>;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunction<IDatePickerStyleProps, IDatePickerStyles>;\r\n\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Pass callout props to callout component\r\n   */\r\n  calloutProps?: ICalloutProps;\r\n\r\n  /**\r\n   * Pass calendar props to calendar component\r\n   */\r\n  calendarProps?: ICalendarProps;\r\n\r\n  /**\r\n   * Pass textField props to textField component.\r\n   * Prop name is \"textField\" for compatiblity with upcoming slots work.\r\n   */\r\n  textField?: ITextFieldProps;\r\n\r\n  /**\r\n   * Custom Calendar to be used for date picking\r\n   */\r\n  calendarAs?: IComponentAs<ICalendarProps>;\r\n\r\n  /**\r\n   * Callback issued when a date is selected\r\n   */\r\n  onSelectDate?: (date: Date | null | undefined) => void;\r\n\r\n  /**\r\n   * Label for the DatePicker\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Whether the DatePicker is a required field or not\r\n   * @defaultvalue false\r\n   */\r\n  isRequired?: boolean;\r\n\r\n  /**\r\n   * Disabled state of the DatePicker.\r\n   * @defaultvalue false\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Aria Label for TextField of the DatePicker for screen reader users.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Whether or not the Textfield of the DatePicker is underlined.\r\n   * @defaultvalue false\r\n   */\r\n  underlined?: boolean;\r\n\r\n  /**\r\n   * Aria label for date picker popup for screen reader users.\r\n   * @defaultvalue Calendar\r\n   */\r\n  pickerAriaLabel?: string;\r\n\r\n  /**\r\n   * Whether the month picker is shown beside the day picker or hidden.\r\n   * @defaultvalue true\r\n   */\r\n  isMonthPickerVisible?: boolean;\r\n\r\n  /**\r\n   * Show month picker on top of date picker when visible.\r\n   * @defaultvalue false\r\n   */\r\n  showMonthPickerAsOverlay?: boolean;\r\n\r\n  /**\r\n   * Whether the DatePicker allows input a date string directly or not\r\n   * @defaultvalue false\r\n   */\r\n  allowTextInput?: boolean;\r\n\r\n  /**\r\n   * Whether the DatePicker should open automatically when the control is focused\r\n   * @defaultvalue false\r\n   */\r\n  disableAutoFocus?: boolean;\r\n\r\n  /**\r\n   * Placeholder text for the DatePicker\r\n   */\r\n  placeholder?: string;\r\n\r\n  /**\r\n   * Value of today. If null, current time in client machine will be used.\r\n   */\r\n  today?: Date;\r\n\r\n  /**\r\n   * Default value of the DatePicker, if any\r\n   */\r\n  value?: Date;\r\n\r\n  /**\r\n   * Optional method to format the chosen date to a string to display in the DatePicker\r\n   * @defaultvalue date.toString()\r\n   */\r\n  formatDate?: (date?: Date) => string;\r\n\r\n  /**\r\n   * Optional method to parse the text input value to date, it is only useful when allowTextInput is set to true\r\n   * @defaultvalue new Date(Date.parse(dateStr))\r\n   */\r\n  parseDateFromString?: (dateStr: string) => Date | null;\r\n\r\n  /**\r\n   * The first day of the week for your locale.\r\n   * @defaultvalue DayOfWeek.Sunday\r\n   */\r\n  firstDayOfWeek?: DayOfWeek;\r\n\r\n  /**\r\n   * Localized strings to use in the DatePicker\r\n   */\r\n  strings?: IDatePickerStrings;\r\n\r\n  /**\r\n   * Whether the month picker should highlight the current month\r\n   * @defaultvalue false\r\n   */\r\n  highlightCurrentMonth?: boolean;\r\n\r\n  /**\r\n   * Whether the month picker should highlight the selected month\r\n   * @defaultvalue false\r\n   */\r\n  highlightSelectedMonth?: boolean;\r\n\r\n  /**\r\n   * Whether the calendar should show the week number (weeks 1 to 53) before each week row\r\n   * @defaultvalue false\r\n   */\r\n  showWeekNumbers?: boolean;\r\n\r\n  /**\r\n   * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\r\n   * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\r\n   * @defaultvalue FirstWeekOfYear.FirstFullWeek\r\n   */\r\n  firstWeekOfYear?: FirstWeekOfYear;\r\n\r\n  /**\r\n   * Whether the \"Go to today\" link should be shown or not\r\n   */\r\n  showGoToToday?: boolean;\r\n\r\n  /**\r\n   * Determines if DatePicker has a border.\r\n   * @defaultvalue false\r\n   */\r\n  borderless?: boolean;\r\n\r\n  /**\r\n   * Optional Classname for datepicker root element .\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Apply additional formating to dates, for example localized date formatting.\r\n   */\r\n  dateTimeFormatter?: ICalendarFormatDateCallbacks;\r\n\r\n  /**\r\n   * The minimum allowable date.\r\n   */\r\n  minDate?: Date;\r\n\r\n  /**\r\n   * The maximum allowable date.\r\n   */\r\n  maxDate?: Date;\r\n\r\n  /**\r\n   * The initially highlighted date in the calendar picker\r\n   */\r\n  initialPickerDate?: Date;\r\n\r\n  /**\r\n   * Allows all elements to be focused, including disabled ones\r\n   * @defaultvalue false\r\n   */\r\n  allFocusable?: boolean;\r\n\r\n  /**\r\n   * Callback that runs after DatePicker's menu (Calendar) is closed\r\n   */\r\n  onAfterMenuDismiss?: () => void;\r\n\r\n  /**\r\n   * Whether the CalendarDay close button should be shown or not.\r\n   */\r\n  showCloseButton?: boolean;\r\n\r\n  /**\r\n   * The tabIndex of the TextField\r\n   */\r\n  tabIndex?: number;\r\n}\r\n\r\nexport interface IDatePickerStrings {\r\n  /**\r\n   * An array of strings for the full names of months.\r\n   * The array is 0-based, so months[0] should be the full name of January.\r\n   */\r\n  months: string[];\r\n\r\n  /**\r\n   * An array of strings for the short names of months.\r\n   * The array is 0-based, so shortMonths[0] should be the short name of January.\r\n   */\r\n  shortMonths: string[];\r\n\r\n  /**\r\n   * An array of strings for the full names of days of the week.\r\n   * The array is 0-based, so days[0] should be the full name of Sunday.\r\n   */\r\n  days: string[];\r\n\r\n  /**\r\n   * An array of strings for the initials of the days of the week.\r\n   * The array is 0-based, so days[0] should be the initial of Sunday.\r\n   */\r\n  shortDays: string[];\r\n\r\n  /**\r\n   * String to render for button to direct the user to today's date.\r\n   */\r\n  goToToday: string;\r\n\r\n  /**\r\n   * Error message to render for TextField if isRequired validation fails.\r\n   */\r\n  isRequiredErrorMessage?: string;\r\n\r\n  /**\r\n   * Error message to render for TextField if input date string parsing fails.\r\n   */\r\n  invalidInputErrorMessage?: string;\r\n\r\n  /**\r\n   * Error message to render for TextField if date boundary (minDate, maxDate) validation fails.\r\n   */\r\n  isOutOfBoundsErrorMessage?: string;\r\n\r\n  /**\r\n   * Aria-label for the \"previous month\" button.\r\n   */\r\n  prevMonthAriaLabel?: string;\r\n\r\n  /**\r\n   * Aria-label for the \"next month\" button.\r\n   */\r\n  nextMonthAriaLabel?: string;\r\n\r\n  /**\r\n   * Aria-label for the \"previous year\" button.\r\n   */\r\n  prevYearAriaLabel?: string;\r\n\r\n  /**\r\n   * Aria-label for the \"next year\" button.\r\n   */\r\n  nextYearAriaLabel?: string;\r\n\r\n  /**\r\n   * Aria-label for the \"close\" button.\r\n   */\r\n  closeButtonAriaLabel?: string;\r\n}\r\nexport interface IDatePickerStyleProps {\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Accept custom classNames\r\n   */\r\n  className?: string;\r\n\r\n  // Insert DatePicker style props below\r\n  disabled?: boolean;\r\n  label?: boolean;\r\n  isDatePickerShown?: boolean;\r\n}\r\n\r\nexport interface IDatePickerStyles {\r\n  /**\r\n   * Style for the root element.\r\n   */\r\n  root: IStyle;\r\n  textField: IStyle;\r\n  callout: IStyle;\r\n  icon: IStyle;\r\n}\r\n"]}