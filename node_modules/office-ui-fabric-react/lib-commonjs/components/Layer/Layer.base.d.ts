/// <reference types="react" />
import * as React from 'react';
import { ILayerProps } from './Layer.types';
import { BaseComponent } from '../../Utilities';
export declare type ILayerBaseState = {
    hasMounted: boolean;
};
export declare class LayerBase extends BaseComponent<ILayerProps, ILayerBaseState> {
    static defaultProps: ILayerProps;
    private _host;
    private _layerElement;
    private _rootElement;
    constructor(props: ILayerProps);
    componentWillMount(): void;
    componentWillUpdate(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    render(): React.ReactNode;
    /**
     * rootElement wrapper for setting virtual parent as soon as root element ref is available.
     */
    private _handleRootElementRef;
    /**
     * Helper to stop events from bubbling up out of Layer.
     */
    private _filterEvent;
    private _getClassNames();
    private _setVirtualParent();
    private _getLayerElement();
    private _removeLayerElement();
    private _getHost();
}
