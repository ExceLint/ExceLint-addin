{"version":3,"file":"Link.types.js","sourceRoot":"../src/","sources":["components/Link/Link.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { LinkBase } from './Link.base';\n\nimport { IStyle, ITheme } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport { IKeytipProps } from '../../Keytip';\n\n/**\n * {@docCategory Link}\n */\nexport interface ILink {\n  /** Sets focus to the link. */\n  focus(): void;\n}\n\n/**\n * {@docCategory Link}\n */\nexport interface ILinkHTMLAttributes<T> extends React.HTMLAttributes<T> {\n  // Shared\n  type?: string;\n\n  // Anchor\n  download?: any;\n  href?: string;\n  hrefLang?: string;\n  media?: string;\n  rel?: string;\n  target?: string;\n\n  // Button\n  autoFocus?: boolean;\n  disabled?: boolean;\n  form?: string;\n  formAction?: string;\n  formEncType?: string;\n  formMethod?: string;\n  formNoValidate?: boolean;\n  formTarget?: string;\n  name?: string;\n  value?: string | string[] | number;\n\n  // Any other props for HTMLElements or a React component passed to as=\n  [index: string]: any;\n}\n\n/**\n * {@docCategory Link}\n */\nexport interface ILinkProps\n  extends ILinkHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement | LinkBase> {\n  /**\n   * Optional callback to access the ILink interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ILink>;\n\n  /**\n   * Whether the link is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * A component that should be used as the root element of the link returned from the Link component.\n   */\n  as?: string | React.ComponentClass | React.FunctionComponent;\n\n  /**\n   * Optional keytip for this Link\n   */\n  keytipProps?: IKeytipProps;\n}\n\n/**\n * {@docCategory Link}\n */\nexport interface ILinkStyleProps {\n  className?: string;\n  isButton?: boolean;\n  isDisabled?: boolean;\n  theme: ITheme;\n}\n\n/**\n * {@docCategory Link}\n */\nexport interface ILinkStyles {\n  root: IStyle;\n}\n"]}