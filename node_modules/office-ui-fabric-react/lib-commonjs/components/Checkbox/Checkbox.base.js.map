{"version":3,"file":"Checkbox.base.js","sourceRoot":"../src/","sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  getId,\n  classNamesFunction,\n  mergeAriaAttributeValues,\n  initializeComponentRef,\n  warnMutuallyExclusive,\n  FocusRects,\n} from '../../Utilities';\nimport { Icon } from '../../Icon';\nimport { ICheckbox, ICheckboxProps, ICheckboxStyleProps, ICheckboxStyles } from './Checkbox.types';\nimport { KeytipData } from '../../KeytipData';\n\nexport interface ICheckboxState {\n  /** Is true when Uncontrolled control is checked. */\n  isChecked?: boolean;\n  isIndeterminate?: boolean;\n}\n\nconst getClassNames = classNamesFunction<ICheckboxStyleProps, ICheckboxStyles>();\n\nexport class CheckboxBase extends React.Component<ICheckboxProps, ICheckboxState> implements ICheckbox {\n  public static defaultProps: ICheckboxProps = {\n    boxSide: 'start',\n  };\n\n  private _checkBox = React.createRef<HTMLInputElement>();\n  private _id: string;\n  private _classNames: { [key in keyof ICheckboxStyles]: string };\n\n  public static getDerivedStateFromProps(\n    nextProps: Readonly<ICheckboxProps>,\n    prevState: Readonly<ICheckboxState>,\n  ): ICheckboxState | null {\n    const stateUpdate: Partial<ICheckboxState> = {};\n    if (nextProps.indeterminate !== undefined) {\n      stateUpdate.isIndeterminate = !!nextProps.indeterminate;\n    }\n    if (nextProps.checked !== undefined) {\n      stateUpdate.isChecked = !!nextProps.checked;\n    }\n    return Object.keys(stateUpdate).length ? stateUpdate : null;\n  }\n\n  /**\n   * Initialize a new instance of the Checkbox\n   * @param props - Props for the component\n   * @param context - Context or initial state for the base component.\n   */\n  constructor(props: ICheckboxProps, context?: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive('Checkbox', props, {\n        checked: 'defaultChecked',\n        indeterminate: 'defaultIndeterminate',\n      });\n    }\n\n    this._id = this.props.id || getId('checkbox-');\n    this.state = {\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked),\n      isIndeterminate: !!(props.indeterminate !== undefined ? props.indeterminate : props.defaultIndeterminate),\n    };\n  }\n\n  /**\n   * Render the Checkbox based on passed props\n   */\n  public render(): JSX.Element {\n    const {\n      className,\n      disabled,\n      boxSide,\n      theme,\n      styles,\n      onRenderLabel = this._onRenderLabel,\n      keytipProps,\n    } = this.props;\n\n    const { isChecked, isIndeterminate } = this.state;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      indeterminate: isIndeterminate,\n      checked: isChecked,\n      reversed: boxSide !== 'start',\n      isUsingCustomLabelRender: onRenderLabel !== this._onRenderLabel,\n    });\n\n    if (keytipProps) {\n      return (\n        <KeytipData keytipProps={keytipProps} disabled={disabled}>\n          {(keytipAttributes: any): JSX.Element => this._renderContent(isChecked, isIndeterminate, keytipAttributes)}\n        </KeytipData>\n      );\n    }\n\n    return this._renderContent(isChecked, isIndeterminate);\n  }\n\n  public get indeterminate(): boolean {\n    return !!this.state.isIndeterminate;\n  }\n\n  public get checked(): boolean {\n    return !!this.state.isChecked;\n  }\n\n  public focus(): void {\n    if (this._checkBox.current) {\n      this._checkBox.current.focus();\n    }\n  }\n\n  private _renderContent = (\n    checked: boolean | undefined,\n    indeterminate: boolean | undefined,\n    keytipAttributes: any = {},\n  ): JSX.Element => {\n    const {\n      disabled,\n      inputProps,\n      name,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedBy,\n      onRenderLabel = this._onRenderLabel,\n      checkmarkIconProps,\n      ariaPositionInSet,\n      ariaSetSize,\n      title,\n      label,\n    } = this.props;\n\n    return (\n      <div className={this._classNames.root} title={title}>\n        <FocusRects />\n        <input\n          type=\"checkbox\"\n          {...inputProps}\n          data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\n          checked={checked}\n          disabled={disabled}\n          className={this._classNames.input}\n          ref={this._checkBox}\n          name={name}\n          id={this._id}\n          title={title}\n          onChange={this._onChange}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          aria-disabled={disabled}\n          aria-label={ariaLabel || label}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])}\n          aria-posinset={ariaPositionInSet}\n          aria-setsize={ariaSetSize}\n          aria-checked={indeterminate ? 'mixed' : checked ? 'true' : 'false'}\n        />\n        <label className={this._classNames.label} htmlFor={this._id}>\n          <div className={this._classNames.checkbox} data-ktp-target={keytipAttributes['data-ktp-target']}>\n            <Icon iconName=\"CheckMark\" {...checkmarkIconProps} className={this._classNames.checkmark} />\n          </div>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n        </label>\n      </div>\n    );\n  };\n\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onFocus) {\n      inputProps.onFocus(ev);\n    }\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { inputProps } = this.props;\n\n    if (inputProps && inputProps.onBlur) {\n      inputProps.onBlur(ev);\n    }\n  };\n\n  private _onChange = (ev: React.FormEvent<HTMLElement>): void => {\n    const { onChange } = this.props;\n    const { isChecked, isIndeterminate } = this.state;\n\n    if (!isIndeterminate) {\n      if (onChange) {\n        onChange(ev, !isChecked);\n      }\n      if (this.props.checked === undefined) {\n        this.setState({ isChecked: !isChecked });\n      }\n    } else {\n      // If indeterminate, clicking the checkbox *only* removes the indeterminate state (or if\n      // controlled, lets the consumer know to change it by calling onChange). It doesn't\n      // change the checked state.\n      if (onChange) {\n        onChange(ev, isChecked);\n      }\n      if (this.props.indeterminate === undefined) {\n        this.setState({ isIndeterminate: false });\n      }\n    }\n  };\n\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\n    const { label, title } = props;\n\n    return label ? (\n      <span aria-hidden=\"true\" className={this._classNames.text} title={title}>\n        {label}\n      </span>\n    ) : null;\n  };\n}\n"]}