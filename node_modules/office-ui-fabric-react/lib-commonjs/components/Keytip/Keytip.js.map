{"version":3,"file":"Keytip.js","sourceRoot":"../src/","sources":["components/Keytip/Keytip.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAAgD;AAChD,mEAA6F;AAC7F,yCAAwC;AACxC,uDAAuD;AAEvD,iDAAgD;AAChD,iDAA2E;AAE3E;;GAEG;AACH;IAA4B,kCAA+B;IAA3D;;IA6CA,CAAC;IA5CQ,uBAAM,GAAb;QACQ,IAAA,eAA0D,EAAxD,8BAAY,EAAE,kBAAM,EAAE,4CAAmB,CAAgB;QAC3D,IAAA,sCAAY,CAAgB;QAElC,IAAI,YAAoB,CAAC;QACzB,gDAAgD;QAChD,IAAI,mBAAmB,EAAE;YACvB,YAAY,GAAG,oCAAsB,CAAC,4BAAc,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC;SAC1F;aAAM;YACL,YAAY,GAAG,oCAAsB,CAAC,YAAY,CAAC,CAAC;SACrD;QAED,IAAI,MAAM,EAAE;YACV,gEAAgE;YAChE,yBAAyB;YACzB,YAAY,wBACP,YAAY,IACf,WAAW,EAAE,IAAI,EACjB,eAAe,EAAE,gCAAe,CAAC,WAAW,GAC7C,CAAC;SACH;QAED,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,eAAe,KAAK,SAAS,EAAE;YAC/D,mDAAmD;YACnD,YAAY,wBACP,YAAY,IACf,eAAe,EAAE,gCAAe,CAAC,YAAY,GAC9C,CAAC;SACH;QAED,OAAO,CACL,oBAAC,iBAAO,uBACF,YAAY,IAChB,aAAa,EAAE,KAAK,EACpB,UAAU,EAAE,IAAI,EAChB,cAAc,EAAE,CAAC,EACjB,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,sCAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gCAAgB,EAClE,sBAAsB,EAAE,IAAI,EAC5B,MAAM,EAAE,YAAY;YAEpB,oBAAC,6BAAa,uBAAK,IAAI,CAAC,KAAK,EAAI,CACzB,CACX,CAAC;IACJ,CAAC;IACH,aAAC;AAAD,CAAC,AA7CD,CAA4B,yBAAa,GA6CxC;AA7CY,wBAAM","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent } from '../../Utilities';\r\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\r\nimport { Callout } from '../../Callout';\r\nimport { DirectionalHint } from '../../ContextualMenu';\r\nimport { IKeytip, IKeytipProps } from './Keytip.types';\r\nimport { KeytipContent } from './KeytipContent';\r\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\r\n\r\n/**\r\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\r\n */\r\nexport class Keytip extends BaseComponent<IKeytipProps, {}> implements IKeytip {\r\n  public render(): JSX.Element {\r\n    const { keySequences, offset, overflowSetSequence } = this.props;\r\n    let { calloutProps } = this.props;\r\n\r\n    let keytipTarget: string;\r\n    // Take into consideration the overflow sequence\r\n    if (overflowSetSequence) {\r\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\r\n    } else {\r\n      keytipTarget = ktpTargetFromSequences(keySequences);\r\n    }\r\n\r\n    if (offset) {\r\n      // Set callout to top-left corner, will be further positioned in\r\n      // getCalloutOffsetStyles\r\n      calloutProps = {\r\n        ...calloutProps,\r\n        coverTarget: true,\r\n        directionalHint: DirectionalHint.topLeftEdge\r\n      };\r\n    }\r\n\r\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\r\n      // Default callout directional hint to BottomCenter\r\n      calloutProps = {\r\n        ...calloutProps,\r\n        directionalHint: DirectionalHint.bottomCenter\r\n      };\r\n    }\r\n\r\n    return (\r\n      <Callout\r\n        {...calloutProps}\r\n        isBeakVisible={false}\r\n        doNotLayer={true}\r\n        minPagePadding={0}\r\n        styles={offset ? getCalloutOffsetStyles(offset) : getCalloutStyles}\r\n        preventDismissOnScroll={true}\r\n        target={keytipTarget}\r\n      >\r\n        <KeytipContent {...this.props} />\r\n      </Callout>\r\n    );\r\n  }\r\n}\r\n"]}