{"version":3,"file":"List.Grid.Example.js","sourceRoot":"../src/","sources":["components/List/examples/List.Grid.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,kEAAiE;AACjE,wDAAuD;AACvD,oCAAkC;AAOlC,IAAM,aAAa,GAAG,CAAC,CAAC;AACxB,IAAM,cAAc,GAAG,GAAG,CAAC;AAE3B;IAAqC,2CAAsC;IAA3E;QAAA,qEAoDC;QAhCS,0BAAoB,GAAG,UAAC,SAAiB,EAAE,WAAuB;YACxE,IAAI,SAAS,KAAK,CAAC,EAAE;gBACnB,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,cAAc,CAAC,CAAC;gBAClE,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,GAAG,KAAI,CAAC,YAAY,CAAC,CAAC;gBACtE,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,YAAY,CAAC;aACrC;YAED,OAAO,KAAI,CAAC,YAAY,GAAG,aAAa,CAAC;QAC3C,CAAC,CAAC;QAEM,oBAAc,GAAG;YACvB,OAAO,KAAI,CAAC,UAAU,GAAG,aAAa,CAAC;QACzC,CAAC,CAAC;QAEM,mBAAa,GAAG,UAAC,IAAS,EAAE,KAAyB;YAC3D,OAAO,CACL,6BACE,SAAS,EAAC,yBAAyB,uBAChB,IAAI,EACvB,KAAK,EAAE;oBACL,KAAK,EAAE,GAAG,GAAG,KAAI,CAAC,YAAY,GAAG,GAAG;iBACrC;gBAED,6BAAK,SAAS,EAAC,0BAA0B;oBACvC,6BAAK,SAAS,EAAC,0BAA0B;wBACvC,6BAAK,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,EAAC,0BAA0B,GAAG;wBACjE,8BAAM,SAAS,EAAC,0BAA0B,IAAE,UAAQ,KAAO,CAAQ,CAC/D,CACF,CACF,CACP,CAAC;QACJ,CAAC,CAAC;;IACJ,CAAC;IA/CQ,gCAAM,GAAb;QACE,OAAO,CACL,oBAAC,qBAAS;YACR,oBAAC,WAAI,IACH,SAAS,EAAC,oBAAoB,EAC9B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,mBAAmB,EAAE,IAAI,CAAC,oBAAoB,EAC9C,aAAa,EAAE,IAAI,CAAC,cAAc,EAClC,oBAAoB,EAAE,CAAC,EACvB,YAAY,EAAE,IAAI,CAAC,aAAa,GAChC,CACQ,CACb,CAAC;IACJ,CAAC;IAkCH,sBAAC;AAAD,CAAC,AApDD,CAAqC,KAAK,CAAC,SAAS,GAoDnD;AApDY,0CAAe","sourcesContent":["import * as React from 'react';\r\nimport { FocusZone } from 'office-ui-fabric-react/lib/FocusZone';\r\nimport { List } from 'office-ui-fabric-react/lib/List';\r\nimport './List.Grid.Example.scss';\r\nimport { IRectangle } from 'office-ui-fabric-react/lib/Utilities';\r\n\r\nexport interface IListGridExampleProps {\r\n  items: any[];\r\n}\r\n\r\nconst ROWS_PER_PAGE = 3;\r\nconst MAX_ROW_HEIGHT = 250;\r\n\r\nexport class ListGridExample extends React.Component<IListGridExampleProps> {\r\n  private _columnCount: number;\r\n  private _columnWidth: number;\r\n  private _rowHeight: number;\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <FocusZone>\r\n        <List\r\n          className=\"ms-ListGridExample\"\r\n          items={this.props.items}\r\n          getItemCountForPage={this._getItemCountForPage}\r\n          getPageHeight={this._getPageHeight}\r\n          renderedWindowsAhead={4}\r\n          onRenderCell={this._onRenderCell}\r\n        />\r\n      </FocusZone>\r\n    );\r\n  }\r\n\r\n  private _getItemCountForPage = (itemIndex: number, surfaceRect: IRectangle): number => {\r\n    if (itemIndex === 0) {\r\n      this._columnCount = Math.ceil(surfaceRect.width / MAX_ROW_HEIGHT);\r\n      this._columnWidth = Math.floor(surfaceRect.width / this._columnCount);\r\n      this._rowHeight = this._columnWidth;\r\n    }\r\n\r\n    return this._columnCount * ROWS_PER_PAGE;\r\n  };\r\n\r\n  private _getPageHeight = (): number => {\r\n    return this._rowHeight * ROWS_PER_PAGE;\r\n  };\r\n\r\n  private _onRenderCell = (item: any, index: number | undefined): JSX.Element => {\r\n    return (\r\n      <div\r\n        className=\"ms-ListGridExample-tile\"\r\n        data-is-focusable={true}\r\n        style={{\r\n          width: 100 / this._columnCount + '%'\r\n        }}\r\n      >\r\n        <div className=\"ms-ListGridExample-sizer\">\r\n          <div className=\"msListGridExample-padder\">\r\n            <img src={item.thumbnail} className=\"ms-ListGridExample-image\" />\r\n            <span className=\"ms-ListGridExample-label\">{`item ${index}`}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n"]}