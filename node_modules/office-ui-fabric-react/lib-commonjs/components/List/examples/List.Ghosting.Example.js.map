{"version":3,"file":"List.Ghosting.Example.js","sourceRoot":"../src/","sources":["components/List/examples/List.Ghosting.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,kEAAqF;AACrF,wDAAuD;AACvD,0DAAmE;AACnE,8DAA2H;AAQ3H,IAAM,KAAK,GAAG,kBAAQ,EAAE,CAAC;AACzB,IAAM,UAAU,GAAG,wBAAc,CAAC;IAChC,SAAS,EAAE;QACT,QAAQ,EAAE,MAAM;QAChB,SAAS,EAAE,GAAG;KACf;IACD,QAAQ,EAAE;QACR,uBAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACxB;YACE,SAAS,EAAE,EAAE;YACb,OAAO,EAAE,EAAE;YACX,SAAS,EAAE,YAAY;YACvB,YAAY,EAAE,eAAa,KAAK,CAAC,cAAc,CAAC,WAAa;YAC7D,OAAO,EAAE,MAAM;YACf,SAAS,EAAE;gBACT,SAAS,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE;aACtD;SACF;KACF;IACD,SAAS,EAAE;QACT,UAAU,EAAE,CAAC;KACd;IACD,WAAW,EAAE;QACX,UAAU,EAAE,EAAE;QACd,QAAQ,EAAE,QAAQ;QAClB,QAAQ,EAAE,CAAC;KACZ;IACD,QAAQ,EAAE;QACR,2BAAiB,CAAC,MAAM;QACxB;YACE,UAAU,EAAE,QAAQ;YACpB,QAAQ,EAAE,QAAQ;YAClB,YAAY,EAAE,UAAU;SACzB;KACF;IACD,SAAS,EAAE;QACT,QAAQ,EAAE,mBAAS,CAAC,KAAK;QACzB,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,eAAe;QACpC,YAAY,EAAE,EAAE;KACjB;IACD,OAAO,EAAE;QACP,SAAS,EAAE,QAAQ;QACnB,UAAU,EAAE,EAAE;QACd,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,eAAe;QACpC,QAAQ,EAAE,mBAAS,CAAC,KAAK;QACzB,UAAU,EAAE,CAAC;KACd;CACF,CAAC,CAAC;AAEH;IAAyC,+CAA0C;IAAnF;;IA8BA,CAAC;IA7BQ,oCAAM,GAAb;QACU,IAAA,wBAAK,CAAgB;QAE7B,OAAO,CACL,oBAAC,qBAAS,IAAC,SAAS,EAAE,8BAAkB,CAAC,QAAQ;YAC/C,6BAAK,SAAS,EAAE,UAAU,CAAC,SAAS,wBAAsB,IAAI;gBAC5D,oBAAC,WAAI,IAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,GAAI,CACpD,CACI,CACb,CAAC;IACJ,CAAC;IAEO,2CAAa,GAArB,UAAsB,IAAkB,EAAE,KAAa,EAAE,WAAoB;QAC3E,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,QAAQ,uBAAqB,IAAI;YAC1D,oBAAC,aAAK,IACJ,SAAS,EAAE,UAAU,CAAC,SAAS,EAC/B,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAC7C,KAAK,EAAE,EAAE,EACT,MAAM,EAAE,EAAE,EACV,QAAQ,EAAE,gBAAQ,CAAC,KAAK,GACxB;YACF,6BAAK,SAAS,EAAE,UAAU,CAAC,WAAW;gBACpC,6BAAK,SAAS,EAAE,UAAU,CAAC,QAAQ,IAAG,IAAI,CAAC,IAAI,CAAO;gBACtD,6BAAK,SAAS,EAAE,UAAU,CAAC,SAAS,IAAG,UAAQ,KAAO,CAAO,CACzD,CACF,CACP,CAAC;IACJ,CAAC;IACH,0BAAC;AAAD,CAAC,AA9BD,CAAyC,KAAK,CAAC,SAAS,GA8BvD;AA9BY,kDAAmB","sourcesContent":["import * as React from 'react';\r\nimport { FocusZone, FocusZoneDirection } from 'office-ui-fabric-react/lib/FocusZone';\r\nimport { List } from 'office-ui-fabric-react/lib/List';\r\nimport { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';\r\nimport { mergeStyleSets, getTheme, DefaultFontStyles, FontSizes, getFocusStyle } from 'office-ui-fabric-react/lib/Styling';\r\n\r\nexport type IExampleItem = { name: string; thumbnail: string };\r\n\r\nexport interface IListGhostingExampleProps {\r\n  items: IExampleItem[];\r\n}\r\n\r\nconst theme = getTheme();\r\nconst classNames = mergeStyleSets({\r\n  container: {\r\n    overflow: 'auto',\r\n    maxHeight: 500\r\n  },\r\n  itemCell: [\r\n    getFocusStyle(theme, -1),\r\n    {\r\n      minHeight: 54,\r\n      padding: 10,\r\n      boxSizing: 'border-box',\r\n      borderBottom: `1px solid ${theme.semanticColors.bodyDivider}`,\r\n      display: 'flex',\r\n      selectors: {\r\n        '&:hover': { background: theme.palette.neutralLight }\r\n      }\r\n    }\r\n  ],\r\n  itemImage: {\r\n    flexShrink: 0\r\n  },\r\n  itemContent: {\r\n    marginLeft: 10,\r\n    overflow: 'hidden',\r\n    flexGrow: 1\r\n  },\r\n  itemName: [\r\n    DefaultFontStyles.xLarge,\r\n    {\r\n      whiteSpace: 'nowrap',\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis'\r\n    }\r\n  ],\r\n  itemIndex: {\r\n    fontSize: FontSizes.small,\r\n    color: theme.palette.neutralTertiary,\r\n    marginBottom: 10\r\n  },\r\n  chevron: {\r\n    alignSelf: 'center',\r\n    marginLeft: 10,\r\n    color: theme.palette.neutralTertiary,\r\n    fontSize: FontSizes.large,\r\n    flexShrink: 0\r\n  }\r\n});\r\n\r\nexport class ListGhostingExample extends React.Component<IListGhostingExampleProps> {\r\n  public render(): JSX.Element {\r\n    const { items } = this.props;\r\n\r\n    return (\r\n      <FocusZone direction={FocusZoneDirection.vertical}>\r\n        <div className={classNames.container} data-is-scrollable={true}>\r\n          <List items={items} onRenderCell={this._onRenderCell} />\r\n        </div>\r\n      </FocusZone>\r\n    );\r\n  }\r\n\r\n  private _onRenderCell(item: IExampleItem, index: number, isScrolling: boolean): JSX.Element {\r\n    return (\r\n      <div className={classNames.itemCell} data-is-focusable={true}>\r\n        <Image\r\n          className={classNames.itemImage}\r\n          src={isScrolling ? undefined : item.thumbnail}\r\n          width={50}\r\n          height={50}\r\n          imageFit={ImageFit.cover}\r\n        />\r\n        <div className={classNames.itemContent}>\r\n          <div className={classNames.itemName}>{item.name}</div>\r\n          <div className={classNames.itemIndex}>{`Item ${index}`}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}