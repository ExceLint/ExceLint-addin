{"version":3,"file":"ChoiceGroupOption.base.js","sourceRoot":"../src/","sources":["components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Image } from '../../../Image';\r\nimport { Icon } from '../../../Icon';\r\nimport { IChoiceGroupOptionProps, IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles } from './ChoiceGroupOption.types';\r\nimport { classNamesFunction, getNativeProps, inputProperties, css } from '../../../Utilities';\r\nimport { IProcessedStyleSet } from '../../../Styling';\r\n\r\nconst getClassNames = classNamesFunction<IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles>();\r\n\r\nexport class ChoiceGroupOptionBase extends React.Component<IChoiceGroupOptionProps, any> {\r\n  private _inputElement = React.createRef<HTMLInputElement>();\r\n  private _classNames: IProcessedStyleSet<IChoiceGroupOptionStyles>;\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      ariaLabel,\r\n      focused,\r\n      required,\r\n      theme,\r\n      iconProps,\r\n      imageSrc,\r\n      imageSize = { width: 32, height: 32 },\r\n      disabled,\r\n      checked,\r\n      id,\r\n      styles,\r\n      name,\r\n      onRenderField = this._onRenderField,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      hasIcon: !!iconProps,\r\n      hasImage: !!imageSrc,\r\n      checked,\r\n      disabled,\r\n      imageIsLarge: !!imageSrc && (imageSize.width > 71 || imageSize.height > 71),\r\n      focused\r\n    });\r\n\r\n    const { className, ...nativeProps } = getNativeProps<{ className: string }>(rest, inputProperties);\r\n\r\n    return (\r\n      <div className={this._classNames.root}>\r\n        <div className={this._classNames.choiceFieldWrapper}>\r\n          <input\r\n            aria-label={ariaLabel ? ariaLabel : undefined}\r\n            ref={this._inputElement}\r\n            id={id}\r\n            className={css(this._classNames.input, className)}\r\n            type=\"radio\"\r\n            name={name}\r\n            disabled={disabled}\r\n            checked={checked}\r\n            required={required}\r\n            onChange={this._onChange.bind(this, this.props)}\r\n            onFocus={this._onFocus.bind(this, this.props)}\r\n            onBlur={this._onBlur.bind(this, this.props)}\r\n            {...nativeProps}\r\n          />\r\n          {onRenderField(this.props, this._onRenderField)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onChange(props: IChoiceGroupOptionProps, evt: React.FormEvent<HTMLInputElement>): void {\r\n    const { onChange } = props;\r\n    if (onChange) {\r\n      onChange(evt, props);\r\n    }\r\n  }\r\n\r\n  private _onBlur(props: IChoiceGroupOptionProps, evt: React.FocusEvent<HTMLElement>) {\r\n    const { onBlur } = props;\r\n    if (onBlur) {\r\n      onBlur(evt, props);\r\n    }\r\n  }\r\n\r\n  private _onFocus(props: IChoiceGroupOptionProps, evt: React.FocusEvent<HTMLElement>) {\r\n    const { onFocus } = props;\r\n    if (onFocus) {\r\n      onFocus(evt, props);\r\n    }\r\n  }\r\n\r\n  private _onRenderField = (props: IChoiceGroupOptionProps): JSX.Element => {\r\n    const { onRenderLabel = this._onRenderLabel, id, imageSrc, imageAlt, selectedImageSrc, iconProps } = props;\r\n\r\n    const imageSize = props.imageSize ? props.imageSize : { width: 32, height: 32 };\r\n\r\n    return (\r\n      <label htmlFor={id} className={this._classNames.field}>\r\n        {imageSrc && (\r\n          <div className={this._classNames.innerField} style={{ height: imageSize.height, width: imageSize.width }}>\r\n            <div className={this._classNames.imageWrapper}>\r\n              <Image src={imageSrc} alt={imageAlt ? imageAlt : ''} width={imageSize.width} height={imageSize.height} />\r\n            </div>\r\n            <div className={this._classNames.selectedImageWrapper}>\r\n              <Image src={selectedImageSrc} alt={imageAlt ? imageAlt : ''} width={imageSize.width} height={imageSize.height} />\r\n            </div>\r\n          </div>\r\n        )}\r\n        {iconProps ? (\r\n          <div className={this._classNames.innerField}>\r\n            <div className={this._classNames.iconWrapper}>\r\n              <Icon {...iconProps} />\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n        {imageSrc || iconProps ? (\r\n          <div className={this._classNames.labelWrapper} style={{ maxWidth: imageSize.width * 2 }}>\r\n            {onRenderLabel!(props)}\r\n          </div>\r\n        ) : (\r\n          onRenderLabel!(props)\r\n        )}\r\n      </label>\r\n    );\r\n  };\r\n\r\n  private _onRenderLabel = (props: IChoiceGroupOptionProps): JSX.Element => {\r\n    return (\r\n      <span id={props.labelId} className=\"ms-ChoiceFieldLabel\">\r\n        {props.text}\r\n      </span>\r\n    );\r\n  };\r\n}\r\n"]}