{"version":3,"file":"Rating.types.js","sourceRoot":"../src/","sources":["components/Rating/Rating.types.ts"],"names":[],"mappings":";;AAuGA;;GAEG;AACH,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,6CAAS,CAAA;IACT,6CAAS,CAAA;AACX,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB","sourcesContent":["import * as React from 'react';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Rating}\n */\nexport interface IRating {}\n\n/**\n * Rating component props.\n * {@docCategory Rating}\n */\nexport interface IRatingProps extends React.AllHTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the IRating interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IRating>;\n\n  /**\n   * Selected rating, has to be an integer between min and max\n   */\n  rating?: number;\n\n  /**\n   * Minimum rating, defaults to 1, has to be \\>= 0\n   * @deprecated No longer used.\n   */\n  min?: number;\n\n  /**\n   * Maximum rating, defaults to 5, has to be \\>= min\n   */\n  max?: number;\n\n  /**\n   * Allow the rating value to be set to 0 instead of a minimum of 1.\n   */\n  allowZeroStars?: boolean;\n\n  /**\n   * Custom icon\n   * @defaultvalue FavoriteStarFill\n   */\n  icon?: string;\n\n  /**\n   * Custom icon for unselected rating elements.\n   * @defaultvalue FavoriteStar\n   */\n  unselectedIcon?: string;\n\n  /**\n   * Size of rating, defaults to small\n   */\n  size?: RatingSize;\n\n  /**\n   * Callback issued when the rating changes.\n   */\n  onChange?: (event: React.FocusEvent<HTMLElement>, rating?: number) => void;\n\n  /**\n   * @deprecated Use `onChange` instead.\n   */\n  onChanged?: (rating: number) => void;\n\n  /**\n   * Optional label format for a rating star that will be read by screen readers.\n   * Can be used like \"\\{0\\} of \\{1\\} stars selected\",\n   * where \\{0\\} will be substituted by the current rating and \\{1\\} will be substituted by the max rating.\n   * @defaultvalue empty string.\n   */\n  ariaLabelFormat?: string;\n\n  /**\n   * Deprecated: Optional id of label describing this instance of Rating.\n   * @deprecated Use `getAriaLabel` instead.\n   */\n  ariaLabelId?: string;\n\n  /**\n   * Optional flag to mark rating control as readOnly\n   */\n  readOnly?: boolean;\n\n  /*\n   * Optional callback to set the aria-label for rating control.\n   */\n  getAriaLabel?: (rating: number, max: number) => string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<IRatingStyleProps, IRatingStyles>;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory Rating}\n */\nexport enum RatingSize {\n  Small = 0,\n  Large = 1,\n}\n\n/**\n * {@docCategory Rating}\n */\nexport interface IRatingStyleProps {\n  disabled?: boolean;\n  readOnly?: boolean;\n  theme: ITheme;\n}\n\n/**\n * {@docCategory Rating}\n */\nexport interface IRatingStyles {\n  root: IStyle;\n  ratingStar: IStyle;\n  ratingStarBack: IStyle;\n  ratingStarFront: IStyle;\n  ratingButton: IStyle;\n  ratingStarIsSmall: IStyle;\n  ratingStarIsLarge: IStyle;\n  rootIsSmall: IStyle;\n  rootIsLarge: IStyle;\n  labelText: IStyle;\n  ratingFocusZone: IStyle;\n}\n"]}