{"version":3,"file":"SpinButton.styles.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  IRawStyle,\r\n  ITheme,\r\n  concatStyleSets,\r\n  HighContrastSelector,\r\n  IconFontSizes,\r\n  getInputFocusStyle,\r\n} from '../../Styling';\r\nimport { IButtonStyles } from '../../Button';\r\nimport { ISpinButtonStyles } from './SpinButton.types';\r\nimport { memoizeFunction } from '../../Utilities';\r\n\r\nconst ARROW_BUTTON_WIDTH = 23;\r\nconst ARROW_BUTTON_ICON_SIZE = 8;\r\nconst DEFAULT_HEIGHT = 32;\r\nconst DEFAULT_MIN_WIDTH = 86;\r\nconst LABEL_MARGIN = 10;\r\n\r\nconst _getDisabledStyles = memoizeFunction(\r\n  (theme: ITheme): IRawStyle => {\r\n    const { semanticColors } = theme;\r\n\r\n    const SpinButtonTextColorDisabled = semanticColors.disabledText;\r\n    const SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\r\n\r\n    return {\r\n      backgroundColor: SpinButtonBackgroundColorDisabled,\r\n      pointerEvents: 'none',\r\n      cursor: 'default',\r\n      color: SpinButtonTextColorDisabled,\r\n      selectors: {\r\n        ':after': {\r\n          borderColor: SpinButtonBackgroundColorDisabled,\r\n        },\r\n        [HighContrastSelector]: {\r\n          color: 'GrayText',\r\n        },\r\n      },\r\n    };\r\n  },\r\n);\r\n\r\nexport const getArrowButtonStyles = memoizeFunction(\r\n  (theme: ITheme, isUpArrow: boolean, customSpecificArrowStyles?: Partial<IButtonStyles>): IButtonStyles => {\r\n    const { palette, semanticColors, effects } = theme;\r\n\r\n    // TODO: after updating the semanticColor slots all this need to be reevaluated.\r\n    const ArrowButtonTextColor = palette.neutralSecondary;\r\n    const ArrowButtonTextColorHovered = semanticColors.buttonText;\r\n    const ArrowButtonTextColorPressed = semanticColors.buttonText;\r\n\r\n    const ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\r\n    const ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundPressed;\r\n\r\n    const defaultArrowButtonStyles: IButtonStyles = {\r\n      root: {\r\n        outline: 'none',\r\n        display: 'block',\r\n        height: '50%',\r\n        width: ARROW_BUTTON_WIDTH,\r\n        padding: 0,\r\n        backgroundColor: 'transparent',\r\n        textAlign: 'center',\r\n        cursor: 'default',\r\n        color: ArrowButtonTextColor,\r\n        selectors: {\r\n          '&.ms-DownButton': {\r\n            borderRadius: `0 0 ${effects.roundedCorner2} 0`,\r\n          },\r\n          '&.ms-UpButton': {\r\n            borderRadius: `0 ${effects.roundedCorner2} 0 0`,\r\n          },\r\n        },\r\n      },\r\n      rootHovered: {\r\n        backgroundColor: ArrowButtonBackgroundHovered,\r\n        color: ArrowButtonTextColorHovered,\r\n      },\r\n      rootChecked: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootPressed: {\r\n        backgroundColor: ArrowButtonBackgroundPressed,\r\n        color: ArrowButtonTextColorPressed,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      rootDisabled: {\r\n        opacity: 0.5,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            color: 'GrayText',\r\n            opacity: 1,\r\n          },\r\n        },\r\n      },\r\n      icon: {\r\n        fontSize: ARROW_BUTTON_ICON_SIZE,\r\n        marginTop: 0,\r\n        marginRight: 0,\r\n        marginBottom: 0,\r\n        marginLeft: 0,\r\n      },\r\n    };\r\n\r\n    // No specific styles needed as of now.\r\n    const defaultUpArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    const defaultDownArrowButtonStyles: Partial<IButtonStyles> = {};\r\n\r\n    return concatStyleSets(\r\n      defaultArrowButtonStyles,\r\n      isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles,\r\n      customSpecificArrowStyles,\r\n    ) as IButtonStyles;\r\n  },\r\n);\r\n\r\nexport const getStyles = memoizeFunction(\r\n  (theme: ITheme, customStyles?: Partial<ISpinButtonStyles>): ISpinButtonStyles => {\r\n    const { palette, semanticColors, effects, fonts } = theme;\r\n\r\n    const SpinButtonRootBorderColor = semanticColors.inputBorder;\r\n    const SpinButtonRootBackgroundColor = semanticColors.inputBackground;\r\n    const SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\r\n    const SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\r\n\r\n    const SpinButtonInputTextColor = semanticColors.inputText;\r\n    const SpinButtonInputTextColorSelected = palette.white;\r\n    const SpinButtonInputBackgroundColorSelected = semanticColors.inputBackgroundChecked;\r\n\r\n    const SpinButtonIconDisabledColor = semanticColors.disabledText;\r\n\r\n    const defaultStyles: ISpinButtonStyles = {\r\n      root: [\r\n        fonts.medium,\r\n        {\r\n          outline: 'none',\r\n          width: '100%',\r\n          minWidth: DEFAULT_MIN_WIDTH,\r\n        },\r\n      ],\r\n      labelWrapper: {\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n      },\r\n      labelWrapperStart: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'left',\r\n        marginRight: LABEL_MARGIN,\r\n      },\r\n      labelWrapperEnd: {\r\n        height: DEFAULT_HEIGHT,\r\n        float: 'right',\r\n        marginLeft: LABEL_MARGIN,\r\n      },\r\n      labelWrapperTop: {\r\n        // Due to the lineHeight set on the label (below), the height of the wrapper (contains icon+label)\r\n        // ends up 1px taller than a standard label height, causing the vertical alignment to be off when\r\n        // the SpinButton is displayed with the label on top next to other form fields.\r\n        // Decrease the wrapper's effective height slightly to compensate.\r\n        marginBottom: -1,\r\n      },\r\n      labelWrapperBottom: {},\r\n      icon: {\r\n        padding: '0 5px',\r\n        fontSize: IconFontSizes.large,\r\n      },\r\n      iconDisabled: {\r\n        color: SpinButtonIconDisabledColor,\r\n      },\r\n      label: {\r\n        pointerEvents: 'none',\r\n        // centering the label with the icon by forcing the exact same height as the icon.\r\n        lineHeight: IconFontSizes.large,\r\n      },\r\n      labelDisabled: {},\r\n      spinButtonWrapper: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        boxSizing: 'border-box',\r\n        height: DEFAULT_HEIGHT,\r\n        minWidth: DEFAULT_MIN_WIDTH,\r\n        selectors: {\r\n          // setting border using pseudo-element here in order to prevent:\r\n          // input and chevron buttons to overlap border under certain resolutions\r\n          ':after': {\r\n            pointerEvents: 'none',\r\n            content: \"''\",\r\n            position: 'absolute',\r\n            left: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            right: 0,\r\n            borderWidth: '1px',\r\n            borderStyle: 'solid',\r\n            borderColor: SpinButtonRootBorderColor,\r\n            borderRadius: effects.roundedCorner2,\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperTopBottom: {\r\n        width: '100%',\r\n      },\r\n      spinButtonWrapperHovered: {\r\n        selectors: {\r\n          ':after': {\r\n            borderColor: SpinButtonRootBorderColorHovered,\r\n          },\r\n          [HighContrastSelector]: {\r\n            selectors: {\r\n              ':after': {\r\n                borderColor: 'Highlight',\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n      spinButtonWrapperFocused: getInputFocusStyle(SpinButtonRootBorderColorFocused, effects.roundedCorner2),\r\n      spinButtonWrapperDisabled: _getDisabledStyles(theme),\r\n      input: {\r\n        boxSizing: 'border-box',\r\n        boxShadow: 'none',\r\n        borderStyle: 'none',\r\n        flex: 1,\r\n        margin: 0,\r\n        fontSize: fonts.medium.fontSize,\r\n        fontFamily: 'inherit',\r\n        color: SpinButtonInputTextColor,\r\n        backgroundColor: SpinButtonRootBackgroundColor,\r\n        height: '100%',\r\n        padding: '0 8px 0 9px',\r\n        outline: 0,\r\n        display: 'block',\r\n        minWidth: DEFAULT_MIN_WIDTH - ARROW_BUTTON_WIDTH - 2,\r\n        whiteSpace: 'nowrap',\r\n        textOverflow: 'ellipsis',\r\n        overflow: 'hidden',\r\n        cursor: 'text',\r\n        userSelect: 'text',\r\n        borderRadius: `${effects.roundedCorner2} 0 0 ${effects.roundedCorner2}`,\r\n      },\r\n      inputTextSelected: {\r\n        backgroundColor: SpinButtonInputBackgroundColorSelected,\r\n        color: SpinButtonInputTextColorSelected,\r\n        selectors: {\r\n          [HighContrastSelector]: {\r\n            backgroundColor: 'Highlight',\r\n            borderColor: 'Highlight',\r\n            color: 'HighlightText',\r\n          },\r\n        },\r\n      },\r\n      inputDisabled: _getDisabledStyles(theme),\r\n      arrowButtonsContainer: {\r\n        display: 'block',\r\n        height: '100%',\r\n        cursor: 'default',\r\n      },\r\n      arrowButtonsContainerDisabled: _getDisabledStyles(theme),\r\n    };\r\n    return concatStyleSets(defaultStyles, customStyles) as ISpinButtonStyles;\r\n  },\r\n);\r\n"]}