{"version":3,"file":"SpinButton.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IconButton } from '../../Button';\r\nimport { Label } from '../../Label';\r\nimport { Icon } from '../../Icon';\r\nimport {\r\n  BaseComponent,\r\n  getId,\r\n  KeyCodes,\r\n  customizable,\r\n  calculatePrecision,\r\n  precisionRound,\r\n  mergeAriaAttributeValues\r\n} from '../../Utilities';\r\nimport { ISpinButton, ISpinButtonProps } from './SpinButton.types';\r\nimport { Position } from '../../utilities/positioning';\r\nimport { getStyles, getArrowButtonStyles } from './SpinButton.styles';\r\nimport { getClassNames } from './SpinButton.classNames';\r\nimport { KeytipData } from '../../KeytipData';\r\n\r\nexport enum KeyboardSpinDirection {\r\n  down = -1,\r\n  notSpinning = 0,\r\n  up = 1\r\n}\r\n\r\nexport interface ISpinButtonState {\r\n  /**\r\n   * Is true when the control has focus.\r\n   */\r\n  isFocused: boolean;\r\n\r\n  /**\r\n   * the value of the spin button\r\n   */\r\n  value: string;\r\n\r\n  /**\r\n   * keyboard spin direction, used to style the up or down button\r\n   * as active when up/down arrow is pressed\r\n   */\r\n  keyboardSpinDirection: KeyboardSpinDirection;\r\n}\r\n\r\nexport type DefaultProps = Required<\r\n  Pick<ISpinButtonProps, 'step' | 'min' | 'max' | 'disabled' | 'labelPosition' | 'label' | 'incrementButtonIcon' | 'decrementButtonIcon'>\r\n>;\r\n\r\n/** Internal only props */\r\ntype ISpinButtonInternalProps = ISpinButtonProps & DefaultProps;\r\n\r\n@customizable('SpinButton', ['theme', 'styles'], true)\r\nexport class SpinButton extends BaseComponent<ISpinButtonProps, ISpinButtonState> implements ISpinButton {\r\n  public static defaultProps: DefaultProps = {\r\n    step: 1,\r\n    min: 0,\r\n    max: 100,\r\n    disabled: false,\r\n    labelPosition: Position.start,\r\n    label: '',\r\n    incrementButtonIcon: { iconName: 'ChevronUpSmall' },\r\n    decrementButtonIcon: { iconName: 'ChevronDownSmall' }\r\n  };\r\n\r\n  private _input = React.createRef<HTMLInputElement>();\r\n  private _inputId: string;\r\n  private _labelId: string;\r\n  private _lastValidValue: string;\r\n  private _spinningByMouse: boolean;\r\n  private _valueToValidate: string | undefined; // To avoid duplicate validations/submissions\r\n  private _precision: number;\r\n\r\n  private _currentStepFunctionHandle: number;\r\n  private _initialStepDelay = 400;\r\n  private _stepDelay = 75;\r\n\r\n  constructor(props: ISpinButtonProps) {\r\n    super(props);\r\n\r\n    this._warnMutuallyExclusive({\r\n      value: 'defaultValue'\r\n    });\r\n\r\n    const value = props.value || props.defaultValue || String(props.min) || '0';\r\n    this._lastValidValue = value;\r\n\r\n    // Ensure that the autocalculated precision is not negative.\r\n    this._precision = this._calculatePrecision(this.props as ISpinButtonInternalProps);\r\n\r\n    this.state = {\r\n      isFocused: false,\r\n      value: value,\r\n      keyboardSpinDirection: KeyboardSpinDirection.notSpinning\r\n    };\r\n\r\n    this._currentStepFunctionHandle = -1;\r\n    this._labelId = getId('Label');\r\n    this._inputId = getId('input');\r\n    this._spinningByMouse = false;\r\n    this._valueToValidate = undefined;\r\n  }\r\n\r\n  /**\r\n   * Invoked when a component is receiving new props. This method is not called for the initial render.\r\n   */\r\n  public componentWillReceiveProps(newProps: ISpinButtonProps): void {\r\n    this._lastValidValue = this.state.value;\r\n    let value: string = newProps.value ? newProps.value : String(newProps.min);\r\n    if (newProps.defaultValue) {\r\n      value = String(Math.max(newProps.min as number, Math.min(newProps.max as number, Number(newProps.defaultValue))));\r\n    }\r\n\r\n    if (newProps.value !== undefined) {\r\n      this.setState({\r\n        value: value\r\n      });\r\n    }\r\n    this._precision = this._calculatePrecision(newProps as ISpinButtonProps & DefaultProps);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      disabled,\r\n      label,\r\n      min,\r\n      max,\r\n      labelPosition,\r\n      iconProps,\r\n      incrementButtonIcon,\r\n      incrementButtonAriaLabel,\r\n      decrementButtonIcon,\r\n      decrementButtonAriaLabel,\r\n      title,\r\n      ariaLabel,\r\n      ariaDescribedBy,\r\n      styles: customStyles,\r\n      upArrowButtonStyles: customUpArrowButtonStyles,\r\n      downArrowButtonStyles: customDownArrowButtonStyles,\r\n      theme,\r\n      ariaPositionInSet,\r\n      ariaSetSize,\r\n      ariaValueNow,\r\n      ariaValueText,\r\n      keytipProps,\r\n      className\r\n    } = this.props as ISpinButtonInternalProps;\r\n\r\n    const { isFocused, value, keyboardSpinDirection } = this.state;\r\n\r\n    const classNames = this.props.getClassNames\r\n      ? this.props.getClassNames(theme!, !!disabled, !!isFocused, keyboardSpinDirection, labelPosition, className)\r\n      : getClassNames(getStyles(theme!, customStyles), !!disabled, !!isFocused, keyboardSpinDirection, labelPosition, className);\r\n\r\n    return (\r\n      <div className={classNames.root}>\r\n        {labelPosition !== Position.bottom && (\r\n          <div className={classNames.labelWrapper}>\r\n            {iconProps && <Icon {...iconProps} className={classNames.icon} aria-hidden=\"true\" />}\r\n            {label && (\r\n              <Label id={this._labelId} htmlFor={this._inputId} className={classNames.label}>\r\n                {label}\r\n              </Label>\r\n            )}\r\n          </div>\r\n        )}\r\n        <KeytipData keytipProps={keytipProps} disabled={disabled}>\r\n          {(keytipAttributes: any): JSX.Element => (\r\n            <div\r\n              className={classNames.spinButtonWrapper}\r\n              title={title && title}\r\n              aria-label={ariaLabel && ariaLabel}\r\n              aria-posinset={ariaPositionInSet}\r\n              aria-setsize={ariaSetSize}\r\n              data-ktp-target={keytipAttributes['data-ktp-target']}\r\n            >\r\n              <input\r\n                value={value}\r\n                id={this._inputId}\r\n                onChange={this._onChange}\r\n                onInput={this._onInputChange}\r\n                className={classNames.input}\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                role=\"spinbutton\"\r\n                aria-labelledby={label && this._labelId}\r\n                aria-valuenow={!isNaN(Number(ariaValueNow)) ? ariaValueNow : !isNaN(Number(value)) ? Number(value) : undefined}\r\n                aria-valuetext={ariaValueText ? ariaValueText : isNaN(Number(value)) ? value : undefined}\r\n                aria-valuemin={min}\r\n                aria-valuemax={max}\r\n                aria-describedby={mergeAriaAttributeValues(ariaDescribedBy, keytipAttributes['aria-describedby'])}\r\n                onBlur={this._onBlur}\r\n                ref={this._input}\r\n                onFocus={this._onFocus}\r\n                onKeyDown={this._handleKeyDown}\r\n                onKeyUp={this._handleKeyUp}\r\n                readOnly={disabled}\r\n                aria-disabled={disabled}\r\n                data-lpignore={true}\r\n                data-ktp-execute-target={keytipAttributes['data-ktp-execute-target']}\r\n              />\r\n              <span className={classNames.arrowBox}>\r\n                <IconButton\r\n                  styles={getArrowButtonStyles(theme!, true, customUpArrowButtonStyles)}\r\n                  className={'ms-UpButton'}\r\n                  checked={keyboardSpinDirection === KeyboardSpinDirection.up}\r\n                  disabled={disabled}\r\n                  iconProps={incrementButtonIcon}\r\n                  onMouseDown={this._onIncrementMouseDown}\r\n                  onMouseLeave={this._stop}\r\n                  onMouseUp={this._stop}\r\n                  tabIndex={-1}\r\n                  ariaLabel={incrementButtonAriaLabel}\r\n                  data-is-focusable={false}\r\n                />\r\n                <IconButton\r\n                  styles={getArrowButtonStyles(theme!, false, customDownArrowButtonStyles)}\r\n                  className={'ms-DownButton'}\r\n                  checked={keyboardSpinDirection === KeyboardSpinDirection.down}\r\n                  disabled={disabled}\r\n                  iconProps={decrementButtonIcon}\r\n                  onMouseDown={this._onDecrementMouseDown}\r\n                  onMouseLeave={this._stop}\r\n                  onMouseUp={this._stop}\r\n                  tabIndex={-1}\r\n                  ariaLabel={decrementButtonAriaLabel}\r\n                  data-is-focusable={false}\r\n                />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </KeytipData>\r\n        {labelPosition === Position.bottom && (\r\n          <div className={classNames.labelWrapper}>\r\n            {iconProps && <Icon iconName={iconProps.iconName} className={classNames.icon} aria-hidden=\"true\" />}\r\n            {label && (\r\n              <Label id={this._labelId} htmlFor={this._inputId} className={classNames.label}>\r\n                {label}\r\n              </Label>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._input.current) {\r\n      this._input.current.focus();\r\n    }\r\n  }\r\n\r\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement>): void => {\r\n    // We can't set focus on a non-existing element\r\n    if (!this._input.current) {\r\n      return;\r\n    }\r\n\r\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\r\n      this._stop();\r\n    }\r\n\r\n    this._input.current.select();\r\n\r\n    this.setState({ isFocused: true });\r\n\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(ev);\r\n    }\r\n  };\r\n\r\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement>): void => {\r\n    this._validate(ev);\r\n    this.setState({ isFocused: false });\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(ev);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the value of the spin button.\r\n   */\r\n  public get value(): string | undefined {\r\n    return this.props.value === undefined ? this.state.value : this.props.value;\r\n  }\r\n\r\n  private _onValidate = (value: string, event?: React.SyntheticEvent<HTMLElement>): string | void => {\r\n    if (this.props.onValidate) {\r\n      return this.props.onValidate(value, event);\r\n    } else {\r\n      return this._defaultOnValidate(value);\r\n    }\r\n  };\r\n\r\n  private _calculatePrecision = (props: ISpinButtonProps & DefaultProps) => {\r\n    const { precision = Math.max(calculatePrecision(props.step), 0) } = props;\r\n    return precision;\r\n  };\r\n\r\n  /**\r\n   * Validate function to use if one is not passed in\r\n   */\r\n  private _defaultOnValidate = (value: string) => {\r\n    if (value === null || value.trim().length === 0 || isNaN(Number(value))) {\r\n      return this._lastValidValue;\r\n    }\r\n    const newValue = Math.min(this.props.max as number, Math.max(this.props.min as number, Number(value)));\r\n    return String(newValue);\r\n  };\r\n\r\n  private _onIncrement = (value: string): string | void => {\r\n    if (this.props.onIncrement) {\r\n      return this.props.onIncrement(value);\r\n    } else {\r\n      return this._defaultOnIncrement(value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Increment function to use if one is not passed in\r\n   */\r\n  private _defaultOnIncrement = (value: string): string | void => {\r\n    const { max, step } = this.props as ISpinButtonInternalProps;\r\n    let newValue: number = Math.min(Number(value) + Number(step), max);\r\n    newValue = precisionRound(newValue, this._precision);\r\n    return String(newValue);\r\n  };\r\n\r\n  private _onDecrement = (value: string): string | void => {\r\n    if (this.props.onDecrement) {\r\n      return this.props.onDecrement(value);\r\n    } else {\r\n      return this._defaultOnDecrement(value);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Increment function to use if one is not passed in\r\n   */\r\n  private _defaultOnDecrement = (value: string): string | void => {\r\n    const { min, step } = this.props as ISpinButtonInternalProps;\r\n    let newValue: number = Math.max(Number(value) - Number(step), min);\r\n    newValue = precisionRound(newValue, this._precision);\r\n    return String(newValue);\r\n  };\r\n\r\n  private _onChange(): void {\r\n    /**\r\n     * A noop input change handler.\r\n     * https://github.com/facebook/react/issues/7027.\r\n     * Using the native onInput handler fixes the issue but onChange\r\n     * still need to be wired to avoid React console errors\r\n     * TODO: Check if issue is resolved when React 16 is available.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * This is used when validating text entry\r\n   * in the input (not when changed via the buttons)\r\n   * @param event - the event that fired\r\n   */\r\n  private _validate = (event: React.FocusEvent<HTMLInputElement> | React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (this.state.value !== undefined && this._valueToValidate !== undefined && this._valueToValidate !== this._lastValidValue) {\r\n      const newValue = this._onValidate!(this._valueToValidate, event);\r\n      if (newValue) {\r\n        this._lastValidValue = newValue;\r\n        this._valueToValidate = undefined;\r\n        this.setState({ value: newValue });\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * The method is needed to ensure we are updating the actual input value.\r\n   * without this our value will never change (and validation will not have the correct number)\r\n   * @param event - the event that was fired\r\n   */\r\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    const value: string = element.value;\r\n    this._valueToValidate = value;\r\n    this.setState({\r\n      value: value\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Update the value with the given stepFunction\r\n   * @param shouldSpin - should we fire off another updateValue when we are done here? This should be true\r\n   * when spinning in response to a mouseDown\r\n   * @param stepFunction - function to use to step by\r\n   */\r\n  private _updateValue = (shouldSpin: boolean, stepDelay: number, stepFunction: (value: string) => string | void): void => {\r\n    const newValue: string | void = stepFunction(this.state.value);\r\n    if (newValue) {\r\n      this._lastValidValue = newValue;\r\n      this.setState({ value: newValue });\r\n    }\r\n\r\n    if (this._spinningByMouse !== shouldSpin) {\r\n      this._spinningByMouse = shouldSpin;\r\n    }\r\n\r\n    if (shouldSpin) {\r\n      this._currentStepFunctionHandle = this._async.setTimeout(() => {\r\n        this._updateValue(shouldSpin, this._stepDelay, stepFunction);\r\n      }, stepDelay);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Stop spinning (clear any currently pending update and set spinning to false)\r\n   */\r\n  private _stop = (): void => {\r\n    if (this._currentStepFunctionHandle >= 0) {\r\n      this._async.clearTimeout(this._currentStepFunctionHandle);\r\n      this._currentStepFunctionHandle = -1;\r\n    }\r\n\r\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\r\n      this._spinningByMouse = false;\r\n      this.setState({ keyboardSpinDirection: KeyboardSpinDirection.notSpinning });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle keydown on the text field. We need to update\r\n   * the value when up or down arrow are depressed\r\n   * @param event - the keyboardEvent that was fired\r\n   */\r\n  private _handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    // eat the up and down arrow keys to keep focus in the spinButton\r\n    // (especially when a spinButton is inside of a FocusZone)\r\n    if (event.which === KeyCodes.up || event.which === KeyCodes.down || event.which === KeyCodes.enter) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    if (this.props.disabled) {\r\n      this._stop();\r\n      return;\r\n    }\r\n\r\n    let spinDirection = KeyboardSpinDirection.notSpinning;\r\n\r\n    switch (event.which) {\r\n      case KeyCodes.up:\r\n        spinDirection = KeyboardSpinDirection.up;\r\n        this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\r\n        break;\r\n      case KeyCodes.down:\r\n        spinDirection = KeyboardSpinDirection.down;\r\n        this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\r\n        break;\r\n      case KeyCodes.enter:\r\n      case KeyCodes.tab:\r\n        this._validate(event);\r\n        break;\r\n      case KeyCodes.escape:\r\n        if (this.state.value !== this._lastValidValue) {\r\n          this.setState({ value: this._lastValidValue });\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // style the increment/decrement button to look active\r\n    // when the corresponding up/down arrow keys trigger a step\r\n    if (this.state.keyboardSpinDirection !== spinDirection) {\r\n      this.setState({ keyboardSpinDirection: spinDirection });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Make sure that we have stopped spinning on keyUp\r\n   * if the up or down arrow fired this event\r\n   * @param event - keyboard event\r\n   */\r\n  private _handleKeyUp = (event: React.KeyboardEvent<HTMLElement>): void => {\r\n    if (this.props.disabled || event.which === KeyCodes.up || event.which === KeyCodes.down) {\r\n      this._stop();\r\n      return;\r\n    }\r\n  };\r\n\r\n  private _onIncrementMouseDown = (): void => {\r\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\r\n  };\r\n\r\n  private _onDecrementMouseDown = (): void => {\r\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\r\n  };\r\n}\r\n"]}