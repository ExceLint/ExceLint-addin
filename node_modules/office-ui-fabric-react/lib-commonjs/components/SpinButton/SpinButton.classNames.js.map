{"version":3,"file":"SpinButton.classNames.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.classNames.ts"],"names":[],"mappings":";;AAAA,6CAAkD;AAClD,yCAAoD;AAGpD,2DAAuD;AAE1C,QAAA,aAAa,GAAG,2BAAe,CAC1C,UACE,MAAyB,EACzB,QAAiB,EACjB,SAAkB,EAClB,qBAA4C,EAC5C,aAAwC,EACxC,SAAyC;IADzC,8BAAA,EAAA,gBAA0B,sBAAQ,CAAC,KAAK;IACxC,0BAAA,EAAA,qBAAyC;IAEzC,OAAO;QACL,IAAI,EAAE,qBAAW,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC;QACzC,YAAY,EAAE,qBAAW,CAAC,MAAM,CAAC,YAAY,EAAE,gCAAgC,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QACvG,IAAI,EAAE,qBAAW,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,IAAI,MAAM,CAAC,YAAY,CAAC;QAC/D,KAAK,EAAE,qBAAW,CAAC,MAAM,CAAC,KAAK,CAAC;QAChC,iBAAiB,EAAE,qBAAW,CAC5B,MAAM,CAAC,iBAAiB,EACxB,+BAA+B,CAAC,aAAa,EAAE,MAAM,CAAC,EACtD,CAAC,QAAQ,IAAI;YACX;gBACE,SAAS,EAAE;oBACT,QAAQ,EAAE,MAAM,CAAC,wBAAwB;iBAC1C;aACF;YACD,SAAS,IAAI;gBACX,0DAA0D;gBAC1D,iDAAiD;gBACjD,SAAS,EAAE;oBACT,IAAI,EAAE,MAAM,CAAC,wBAAwB;iBACtC;aACF;SACF,EACD,QAAQ,IAAI,MAAM,CAAC,yBAAyB,CAC7C;QACD,KAAK,EAAE,qBAAW,CAChB,qBAAqB,EACrB,MAAM,CAAC,KAAK,EACZ,CAAC,QAAQ,IAAI;YACX,SAAS,EAAE;gBACT,aAAa,EAAE,MAAM,CAAC,iBAAiB;aACxC;SACF,EACD,QAAQ,IAAI,MAAM,CAAC,aAAa,CACjC;QACD,QAAQ,EAAE,qBAAW,CAAC,MAAM,CAAC,qBAAqB,EAAE,QAAQ,IAAI,MAAM,CAAC,6BAA6B,CAAC;KACtG,CAAC;AACJ,CAAC,CACF,CAAC;AAEF;;GAEG;AACH,SAAS,gCAAgC,CAAC,aAAuB,EAAE,MAAyB;IAC1F,QAAQ,aAAa,EAAE;QACrB,KAAK,sBAAQ,CAAC,KAAK;YACjB,OAAO,MAAM,CAAC,iBAAiB,CAAC;QAClC,KAAK,sBAAQ,CAAC,GAAG;YACf,OAAO,MAAM,CAAC,eAAe,CAAC;QAChC,KAAK,sBAAQ,CAAC,GAAG;YACf,OAAO,MAAM,CAAC,eAAe,CAAC;QAChC,KAAK,sBAAQ,CAAC,MAAM;YAClB,OAAO,MAAM,CAAC,kBAAkB,CAAC;KACpC;AACH,CAAC;AAED;;GAEG;AACH,SAAS,+BAA+B,CAAC,aAAuB,EAAE,MAAyB;IACzF,QAAQ,aAAa,EAAE;QACrB,KAAK,sBAAQ,CAAC,GAAG,CAAC;QAClB,KAAK,sBAAQ,CAAC,MAAM;YAClB,OAAO,MAAM,CAAC,0BAA0B,CAAC;QAC3C;YACE,OAAO,EAAE,CAAC;KACb;AACH,CAAC","sourcesContent":["import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles, IStyle } from '../../Styling';\nimport { ISpinButtonClassNames, ISpinButtonStyles } from './SpinButton.types';\nimport { KeyboardSpinDirection } from './SpinButton';\nimport { Position } from '../../utilities/positioning';\n\nexport const getClassNames = memoizeFunction(\n  (\n    styles: ISpinButtonStyles,\n    disabled: boolean,\n    isFocused: boolean,\n    keyboardSpinDirection: KeyboardSpinDirection,\n    labelPosition: Position = Position.start,\n    className: string | undefined = undefined,\n  ): ISpinButtonClassNames => {\n    return {\n      root: mergeStyles(styles.root, className),\n      labelWrapper: mergeStyles(styles.labelWrapper, _getStyleForLabelBasedOnPosition(labelPosition, styles)),\n      icon: mergeStyles(styles.icon, disabled && styles.iconDisabled),\n      label: mergeStyles(styles.label),\n      spinButtonWrapper: mergeStyles(\n        styles.spinButtonWrapper,\n        _getStyleForRootBasedOnPosition(labelPosition, styles),\n        !disabled && [\n          {\n            selectors: {\n              ':hover': styles.spinButtonWrapperHovered,\n            },\n          },\n          isFocused && {\n            // This is to increase the specificity of the focus styles\n            // and make it equal to that of the hover styles.\n            selectors: {\n              '&&': styles.spinButtonWrapperFocused,\n            },\n          },\n        ],\n        disabled && styles.spinButtonWrapperDisabled,\n      ),\n      input: mergeStyles(\n        'ms-spinButton-input',\n        styles.input,\n        !disabled && {\n          selectors: {\n            '::selection': styles.inputTextSelected,\n          },\n        },\n        disabled && styles.inputDisabled,\n      ),\n      arrowBox: mergeStyles(styles.arrowButtonsContainer, disabled && styles.arrowButtonsContainerDisabled),\n    };\n  },\n);\n\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForLabelBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\n  switch (labelPosition) {\n    case Position.start:\n      return styles.labelWrapperStart;\n    case Position.end:\n      return styles.labelWrapperEnd;\n    case Position.top:\n      return styles.labelWrapperTop;\n    case Position.bottom:\n      return styles.labelWrapperBottom;\n  }\n}\n\n/**\n * Returns the Style corresponding to the label position\n */\nfunction _getStyleForRootBasedOnPosition(labelPosition: Position, styles: ISpinButtonStyles): IStyle {\n  switch (labelPosition) {\n    case Position.top:\n    case Position.bottom:\n      return styles.spinButtonWrapperTopBottom;\n    default:\n      return {};\n  }\n}\n"]}