{"version":3,"file":"SpinButton.types.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\nimport { Position } from '../../utilities/positioning';\nimport { IIconProps } from '../../Icon';\nimport { ITheme, IStyle } from '../../Styling';\nimport { KeyboardSpinDirection } from './SpinButton';\nimport { IButtonStyles } from '../../Button';\nimport { IKeytipProps } from '../../Keytip';\nimport { IRefObject } from '../../Utilities';\nimport { IButtonProps } from '../Button/Button.types';\n\n/**\n * {@docCategory SpinButton}\n */\nexport interface ISpinButton {\n  /**\n   * Current value of the control.\n   */\n  value?: string;\n\n  /**\n   * Sets focus to the control.\n   */\n  focus: () => void;\n}\n\n/**\n * {@docCategory SpinButton}\n */\nexport interface ISpinButtonProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: IRefObject<ISpinButton>;\n\n  /**\n   * Initial value of the control. Updates to this prop will not be respected.\n   *\n   * Use this if you intend for the SpinButton to be an uncontrolled component which maintains its own value.\n   * Mutually exclusive with `value`.\n   * @defaultvalue 0\n   */\n  defaultValue?: string;\n\n  /**\n   * Current value of the control.\n   *\n   * Use this if you intend to pass in a new value as a result of change events.\n   * Mutually exclusive with `defaultValue`.\n   */\n  value?: string;\n\n  /**\n   * Min value of the control.\n   * @defaultvalue 0\n   */\n  min?: number;\n\n  /**\n   * Max value of the control.\n   * @defaultvalue 100\n   */\n  max?: number;\n\n  /**\n   * Difference between two adjacent values of the control.\n   * This value is used to calculate the precision of the input if no `precision` is given.\n   * The precision calculated this way will always be \\>= 0.\n   * @defaultvalue 1\n   */\n  step?: number;\n\n  /**\n   * A description of the control for the benefit of screen reader users.\n   */\n  ariaLabel?: string;\n\n  /**\n   * ID of a label which describes the control, if not using the default label.\n   */\n  ariaDescribedBy?: string;\n\n  /**\n   * A more descriptive title for the control, visible on its tooltip.\n   */\n  title?: string;\n\n  /**\n   * Whether or not the control is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Custom className for the control.\n   */\n  className?: string;\n\n  /**\n   * Descriptive label for the control.\n   */\n  label?: string;\n\n  /**\n   * Where to position the control's label.\n   * @defaultvalue Left\n   */\n  labelPosition?: Position;\n\n  /**\n   * Props for an icon to display alongside the control's label.\n   */\n  iconProps?: IIconProps;\n\n  /**\n   * Callback for when the entered value should be validated.\n   * @param value - The entered value to validate\n   * @param event - The event that triggered this validate, if any (for accessibility)\n   * @returns If a string is returned, it will be used as the new value\n   */\n  onValidate?: (value: string, event?: React.SyntheticEvent<HTMLElement>) => string | void;\n\n  /**\n   * Callback for when the increment button or up arrow key is pressed.\n   * @param value - The current value to be incremented\n   * @param event - The event that triggered this increment\n   * @returns If a string is returned, it will be used as the new value\n   */\n  onIncrement?: (\n    value: string,\n    event?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ) => string | void;\n\n  /**\n   * Callback for when the decrement button or down arrow key is pressed.\n   * @param value - The current value to be decremented\n   * @param event - The event that triggered this decrement\n   * @returns If a string is returned, it will be used as the new value\n   */\n  onDecrement?: (\n    value: string,\n    event?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ) => string | void;\n\n  /**\n   * Callback for when the user focuses the control.\n   */\n  onFocus?: React.FocusEventHandler<HTMLInputElement>;\n\n  /**\n   * Callback for when the control loses focus.\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n\n  /**\n   * Custom props for the increment button.\n   */\n  incrementButtonIcon?: IIconProps;\n\n  /**\n   * Custom props for the decrement button.\n   */\n  decrementButtonIcon?: IIconProps;\n\n  /**\n   * Custom styling for individual elements within the control.\n   */\n  styles?: Partial<ISpinButtonStyles>;\n\n  /**\n   * Custom function for providing the classNames for the control. Can be used to provide\n   * all styles for the component instead of applying them on top of the default styles.\n   */\n  getClassNames?: (\n    theme: ITheme,\n    disabled: boolean,\n    isFocused: boolean,\n    keyboardSpinDirection: KeyboardSpinDirection,\n    labelPosition?: Position,\n    className?: string,\n  ) => ISpinButtonClassNames;\n\n  /**\n   * Custom styles for the up arrow button.\n   *\n   * Note: The buttons are in a checked state when arrow keys are used to incremenent/decrement\n   * the SpinButton. Use `rootChecked` instead of `rootPressed` for styling when that is the case.\n   */\n  upArrowButtonStyles?: Partial<IButtonStyles>;\n\n  /**\n   * Custom styles for the down arrow button.\n   *\n   * Note: The buttons are in a checked state when arrow keys are used to incremenent/decrement\n   * the SpinButton. Use `rootChecked` instead of `rootPressed` for styling when that is the case.\n   */\n  downArrowButtonStyles?: Partial<IButtonStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Accessible label text for the increment button (for screen reader users).\n   */\n  incrementButtonAriaLabel?: string;\n\n  /**\n   * Accessible label text for the decrement button (for screen reader users).\n   */\n  decrementButtonAriaLabel?: string;\n\n  /**\n   * How many decimal places the value should be rounded to.\n   *\n   * The default is calculated based on the precision of `step`: i.e. if step = 1, precision = 0.\n   * step = 0.0089, precision = 4. step = 300, precision = 2. step = 23.00, precision = 2.\n   */\n  precision?: number;\n\n  /**\n   * The position in the parent set (if in a set).\n   */\n  ariaPositionInSet?: number;\n\n  /**\n   * The total size of the parent set (if in a set).\n   */\n  ariaSetSize?: number;\n\n  /**\n   * Sets the control's aria-valuenow. This is the numeric form of `value`.\n   * Providing this only makes sense when using as a controlled component.\n   */\n  ariaValueNow?: number;\n\n  /*\n   * Sets the control's aria-valuetext.\n   * Providing this only makes sense when using as a controlled component.\n   */\n  ariaValueText?: string;\n\n  /**\n   * Keytip for the control.\n   */\n  keytipProps?: IKeytipProps;\n\n  /**\n   * Additional props for the input field.\n   */\n  inputProps?: React.InputHTMLAttributes<HTMLElement | HTMLInputElement>;\n\n  /**\n   * Additional props for the up and down arrow buttons.\n   */\n  iconButtonProps?: IButtonProps;\n}\n\n/**\n * {@docCategory SpinButton}\n */\nexport interface ISpinButtonStyles {\n  /**\n   * Styles for the root of the component.\n   */\n  root: IStyle;\n\n  /**\n   * Style for the label wrapper element, which contains the icon and label.\n   */\n  labelWrapper: IStyle;\n\n  /**\n   * Style override when the label is positioned at the start.\n   */\n  labelWrapperStart: IStyle;\n\n  /**\n   * Style override when the label is positioned at the end.\n   */\n  labelWrapperEnd: IStyle;\n\n  /**\n   * Style override when the label is positioned at the top.\n   */\n  labelWrapperTop: IStyle;\n\n  /**\n   * Style override when the label is positioned at the bottom.\n   */\n  labelWrapperBottom: IStyle;\n\n  /**\n   * Style for the icon.\n   */\n  icon: IStyle;\n\n  /**\n   * Style for the icon when the control is disabled.\n   */\n  iconDisabled: IStyle;\n\n  /**\n   * Style for the label text.\n   */\n  label: IStyle;\n\n  /**\n   * Style for the label text when the control is disabled.\n   * @deprecated Disabled styles taken care by `Label` component.\n   */\n  labelDisabled: IStyle;\n\n  /**\n   * Style for the wrapper element of the input field and arrow buttons.\n   */\n  spinButtonWrapper: IStyle;\n\n  /**\n   * Style override when label is positioned at the top/bottom.\n   */\n  spinButtonWrapperTopBottom: IStyle;\n\n  /**\n   * Style override when control is enabled/hovered.\n   */\n  spinButtonWrapperHovered: IStyle;\n\n  /**\n   * Style override when SpinButton is enabled/focused.\n   */\n  spinButtonWrapperFocused: IStyle;\n\n  /**\n   * Style override when control is disabled.\n   */\n  spinButtonWrapperDisabled: IStyle;\n\n  /**\n   * Styles for the input.\n   */\n  input: IStyle;\n\n  /**\n   * Style override for ::selection\n   */\n  inputTextSelected: IStyle;\n\n  /**\n   * Style override when control is disabled.\n   */\n  inputDisabled: IStyle;\n\n  /**\n   * Styles for the arrowButtonsContainer\n   */\n  arrowButtonsContainer: IStyle;\n\n  /**\n   * Style override for the arrowButtonsContainer when control is disabled.\n   */\n  arrowButtonsContainerDisabled: IStyle;\n}\n\n/**\n * {@docCategory SpinButton}\n */\nexport interface ISpinButtonClassNames {\n  root: string;\n  labelWrapper: string;\n  icon: string;\n  label: string;\n  spinButtonWrapper: string;\n  input: string;\n  arrowBox: string;\n}\n"]}