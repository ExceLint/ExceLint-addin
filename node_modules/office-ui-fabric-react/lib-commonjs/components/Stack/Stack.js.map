{"version":3,"file":"Stack.js","sourceRoot":"../src/","sources":["components/Stack/Stack.tsx"],"names":[],"mappings":";;;AAAA,qBAAqB;AACrB,6BAA+B;AAC/B,+CAAwE;AACxE,mDAA8C;AAG9C,+CAAwC;AACxC,6CAAwE;AAExE,IAAM,aAAa,GAAI,uBAAC,mBAAS,OAA2C,CAAC,IAAI,CAAC;AAElF,IAAM,IAAI,GAA4B,UAAA,KAAK;IACjC,IAAA,aAAoB,EAApB,qCAAoB,EAAE,mCAAa,EAAE,iBAAI,EAAE,6DAAO,CAAW;IAErE,IAAM,aAAa,GAAgC,KAAK,CAAC,QAAQ,CAAC,GAAG,CACnE,KAAK,CAAC,QAAQ,EACd,UAAC,KAA0C,EAAE,KAAa;QACxD,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,IAAI,CAAC;SACb;QAED,IAAI,KAAK,CAAC,IAAI,KAAK,aAAa,EAAE;YAChC,IAAM,gBAAgB,GAAoB;gBACxC,MAAM,EAAE,CAAC,aAAa;aACvB,CAAC;YAEF,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,uBAC1B,gBAAgB,EAChB,KAAK,CAAC,KAAK,EACd,CAAC;SACJ;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CACF,CAAC;IAEF,IAAM,WAAW,GAAG,0BAAc,CAAC,IAAI,EAAE,iCAAqB,CAAC,CAAC;IAEhE,IAAM,KAAK,GAAG,qBAAQ,CAA2B,KAAK,EAAE;QACtD,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;IAEH,IAAI,IAAI,EAAE;QACR,OAAO,CACL,uBAAC,KAAK,CAAC,IAAI,uBAAK,WAAW;YACzB,uBAAC,KAAK,CAAC,KAAK,QAAE,aAAa,CAAe,CAC/B,CACd,CAAC;KACH;IAED,OAAO,uBAAC,KAAK,CAAC,IAAI,uBAAK,WAAW,GAAG,aAAa,CAAc,CAAC;AACnE,CAAC,CAAC;AAEF,IAAM,YAAY,GAAG;IACnB,IAAI,EAAE,mBAAS;CAChB,CAAC;AAEW,QAAA,KAAK,GAEd,4BAAe,CAAC;IAClB,WAAW,EAAE,OAAO;IACpB,MAAM,uBAAA;IACN,IAAI,MAAA;IACJ,OAAO,EAAE,YAAY;CACtB,CAAC,CAAC;AAEH,kBAAe,aAAK,CAAC","sourcesContent":["/** @jsx withSlots */\r\nimport * as React from 'react';\r\nimport { withSlots, createComponent, getSlots } from '../../Foundation';\r\nimport StackItem from './StackItem/StackItem';\r\nimport { IStackItemProps } from './StackItem/StackItem.types';\r\nimport { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\r\nimport { styles } from './Stack.styles';\r\nimport { getNativeProps, htmlElementProperties } from '../../Utilities';\r\n\r\nconst StackItemType = (<StackItem /> as React.ReactElement<IStackItemProps>).type;\r\n\r\nconst view: IStackComponent['view'] = props => {\r\n  const { as: RootType = 'div', disableShrink, wrap, ...rest } = props;\r\n\r\n  const stackChildren: (React.ReactChild | null)[] = React.Children.map(\r\n    props.children,\r\n    (child: React.ReactElement<IStackItemProps>, index: number) => {\r\n      if (!child) {\r\n        return null;\r\n      }\r\n\r\n      if (child.type === StackItemType) {\r\n        const defaultItemProps: IStackItemProps = {\r\n          shrink: !disableShrink\r\n        };\r\n\r\n        return React.cloneElement(child, {\r\n          ...defaultItemProps,\r\n          ...child.props\r\n        });\r\n      }\r\n\r\n      return child;\r\n    }\r\n  );\r\n\r\n  const nativeProps = getNativeProps(rest, htmlElementProperties);\r\n\r\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\r\n    root: RootType,\r\n    inner: 'div'\r\n  });\r\n\r\n  if (wrap) {\r\n    return (\r\n      <Slots.root {...nativeProps}>\r\n        <Slots.inner>{stackChildren}</Slots.inner>\r\n      </Slots.root>\r\n    );\r\n  }\r\n\r\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\r\n};\r\n\r\nconst StackStatics = {\r\n  Item: StackItem\r\n};\r\n\r\nexport const Stack: React.StatelessComponent<IStackProps> & {\r\n  Item: React.StatelessComponent<IStackItemProps>;\r\n} = createComponent({\r\n  displayName: 'Stack',\r\n  styles,\r\n  view,\r\n  statics: StackStatics\r\n});\r\n\r\nexport default Stack;\r\n"]}