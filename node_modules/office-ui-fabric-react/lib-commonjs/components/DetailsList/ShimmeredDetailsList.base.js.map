{"version":3,"file":"ShimmeredDetailsList.base.js","sourceRoot":"../src/","sources":["components/DetailsList/ShimmeredDetailsList.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { SelectionMode } from '../../utilities/selection/interfaces';\nimport { DetailsList } from './DetailsList';\nimport { IDetailsRowProps } from './DetailsRow.types';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType, IShimmerElement } from '../../Shimmer';\nimport {\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles,\n} from './ShimmeredDetailsList.types';\nimport { CheckboxVisibility } from './DetailsList.types';\n\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\n\nconst getClassNames = classNamesFunction<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>();\n\nconst SHIMMER_INITIAL_ITEMS = 10;\nconst DEFAULT_SHIMMER_HEIGHT = 7;\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nexport class ShimmeredDetailsListBase extends React.Component<IShimmeredDetailsListProps, {}> {\n  private _shimmerItems: null[];\n  private _classNames: IProcessedStyleSet<IShimmeredDetailsListStyles>;\n\n  constructor(props: IShimmeredDetailsListProps) {\n    super(props);\n\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n  }\n\n  public render(): JSX.Element {\n    const {\n      detailsListStyles,\n      enableShimmer,\n      items,\n      listProps,\n      onRenderCustomPlaceholder,\n      removeFadingOverlay,\n      shimmerLines,\n      styles,\n      theme,\n      ariaLabelForGrid,\n      ariaLabelForShimmer,\n      ...restProps\n    } = this.props;\n\n    const listClassName = listProps && listProps.className;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n    });\n\n    const newListProps = {\n      ...listProps,\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName,\n    };\n\n    return (\n      <DetailsList\n        {...restProps}\n        styles={detailsListStyles}\n        items={enableShimmer ? this._shimmerItems : items}\n        isPlaceholderData={enableShimmer}\n        ariaLabelForGrid={(enableShimmer && ariaLabelForShimmer) || ariaLabelForGrid}\n        onRenderMissingItem={this._onRenderShimmerPlaceholder}\n        listProps={newListProps}\n      />\n    );\n  }\n\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\n    const { onRenderCustomPlaceholder } = this.props;\n\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\n      ? onRenderCustomPlaceholder(rowProps, index, this._renderDefaultShimmerPlaceholder)\n      : this._renderDefaultShimmerPlaceholder(rowProps);\n\n    return <Shimmer customElementsGroup={placeholderElements} />;\n  };\n\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\n    const { columns, compact, selectionMode, checkboxVisibility, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = rowProps;\n\n    const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n    // 1px to take into account the border-bottom of DetailsRow.\n    const gapHeight: number = compact ? compactRowHeight : rowHeight + 1;\n\n    const shimmerElementsRow: JSX.Element[] = [];\n\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n    if (showCheckbox) {\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup\n          key={'checkboxGap'}\n          shimmerElements={[{ type: ShimmerElementType.gap, width: '40px', height: gapHeight }]}\n        />,\n      );\n    }\n\n    columns.forEach((column, columnIdx) => {\n      const shimmerElements: IShimmerElement[] = [];\n      const groupWidth: number =\n        cellStyleProps.cellLeftPadding +\n        cellStyleProps.cellRightPadding +\n        column.calculatedWidth! +\n        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      shimmerElements.push({\n        type: ShimmerElementType.gap,\n        width: cellStyleProps.cellLeftPadding,\n        height: gapHeight,\n      });\n\n      if (column.isIconOnly) {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth!,\n          height: column.calculatedWidth!,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellRightPadding,\n          height: gapHeight,\n        });\n      } else {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n          height: DEFAULT_SHIMMER_HEIGHT,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width:\n            cellStyleProps.cellRightPadding +\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          height: gapHeight,\n        });\n      }\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup key={columnIdx} width={`${groupWidth}px`} shimmerElements={shimmerElements} />,\n      );\n    });\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n    // until the column resizing logic is done.\n    shimmerElementsRow.push(\n      <ShimmerElementsGroup\n        key={'endGap'}\n        width={'100%'}\n        shimmerElements={[{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }]}\n      />,\n    );\n    return <div style={{ display: 'flex' }}>{shimmerElementsRow}</div>;\n  };\n}\n"]}