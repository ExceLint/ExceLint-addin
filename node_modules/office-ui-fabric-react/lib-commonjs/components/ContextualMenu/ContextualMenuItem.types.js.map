{"version":3,"file":"ContextualMenuItem.types.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItem.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IContextualMenuItem } from './ContextualMenu.types';\r\nimport { IMenuItemClassNames } from './ContextualMenu.classNames';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { IButtonStyles } from '../../Button';\r\n\r\nexport interface IContextualMenuRenderItem {\r\n  /**\r\n   * Function to open this item's subMenu, if present.\r\n   */\r\n  openSubMenu: () => void;\r\n\r\n  /**\r\n   * Function to close this item's subMenu, if present.\r\n   */\r\n  dismissSubMenu: () => void;\r\n\r\n  /**\r\n   * Dismiss the menu this item belongs to.\r\n   */\r\n  dismissMenu: (dismissAll?: boolean) => void;\r\n}\r\n\r\nexport interface IContextualMenuItemProps extends React.HTMLAttributes<IContextualMenuItemProps> {\r\n  /**\r\n   * Optional callback to access the IContextualMenuRenderItem interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IContextualMenuRenderItem>;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles>;\r\n\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Additional css class to apply to the ContextualMenuItem\r\n   * @defaultvalue undefined\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * The item to display\r\n   */\r\n  item: IContextualMenuItem;\r\n\r\n  /**\r\n   * Classnames for different aspects of a menu item\r\n   */\r\n  classNames: IMenuItemClassNames;\r\n\r\n  /**\r\n   * Index of the item\r\n   */\r\n  index: number;\r\n\r\n  /**\r\n   * If this item has icons\r\n   */\r\n  hasIcons: boolean | undefined;\r\n\r\n  /**\r\n   * Click handler for the checkmark\r\n   */\r\n  onCheckmarkClick?: ((item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void);\r\n\r\n  /**\r\n   * This prop will get set by ContextualMenu and can be called to open this item's subMenu, if present.\r\n   */\r\n  openSubMenu?: (item: any, target: HTMLElement) => void;\r\n\r\n  /**\r\n   * This prop will get set by ContextualMenu and can be called to close this item's subMenu, if present.\r\n   */\r\n  dismissSubMenu?: () => void;\r\n\r\n  /**\r\n   * This prop will get set by ContextualMenu and can be called to close the menu this item belongs to.\r\n   * If dismissAll is true, all menus will be closed.\r\n   */\r\n  dismissMenu?: (ev?: any, dismissAll?: boolean) => void;\r\n\r\n  /**\r\n   * This prop will get set by the wrapping component and will return the element that wraps this ContextualMenuItem.\r\n   * Used for openSubMenu.\r\n   */\r\n  getSubmenuTarget?: () => HTMLElement | undefined;\r\n}\r\n\r\nexport interface IContextualMenuItemStyleProps {\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Accept custom classNames\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Whether or not the menu item is disabled.\r\n   */\r\n  disabled: boolean;\r\n\r\n  /**\r\n   * Whether or not the menu item is expanded.\r\n   */\r\n  expanded: boolean;\r\n\r\n  /**\r\n   * Whether or not the menu item is checked.\r\n   */\r\n  checked: boolean;\r\n\r\n  /**\r\n   * Indicates if a menu item is an anchor link.\r\n   */\r\n  isAnchorLink: boolean;\r\n\r\n  /**\r\n   * Indicates if the icon used is of the known set of icons.\r\n   */\r\n  knownIcon: boolean;\r\n\r\n  /**\r\n   * The optional class name to apply to the item element.\r\n   */\r\n  itemClassName?: string;\r\n\r\n  /**\r\n   * The optional class name to apply to the divider element.\r\n   */\r\n  dividerClassName?: string;\r\n\r\n  /**\r\n   * The optional class name to apply to the icon element.\r\n   */\r\n  iconClassName?: string;\r\n\r\n  /**\r\n   * The optional class name to apply to the sub-menu if present.\r\n   */\r\n  subMenuClassName?: string;\r\n\r\n  /**\r\n   * Whether or not the primary section of a split menu item is disabled.\r\n   */\r\n  primaryDisabled?: boolean;\r\n}\r\n\r\nexport interface IContextualMenuItemStyles extends IButtonStyles {\r\n  /**\r\n   * Style for the root element.\r\n   */\r\n  root: IStyle;\r\n\r\n  /**\r\n   * Styles for a menu item that is an anchor link.\r\n   */\r\n  item: IStyle;\r\n\r\n  /**\r\n   * Styles for a divider item of a ContextualMenu.\r\n   */\r\n  divider: IStyle;\r\n\r\n  /**\r\n   * Styles for the content inside the button/link of the menuItem.\r\n   */\r\n  linkContent: IStyle;\r\n\r\n  /**\r\n   * Styles for a menu item that is an anchor link.\r\n   */\r\n  anchorLink: IStyle;\r\n\r\n  /**\r\n   * Styles for the icon element of a menu item.\r\n   */\r\n  icon: IStyle;\r\n\r\n  /**\r\n   * Default icon color style for known icons.\r\n   */\r\n  iconColor: IStyle;\r\n\r\n  /**\r\n   * Default style for checkmark icons.\r\n   */\r\n  checkmarkIcon: IStyle;\r\n\r\n  /**\r\n   * Styles for the submenu icon of a menu item.\r\n   */\r\n  subMenuIcon: IStyle;\r\n\r\n  /**\r\n   * Styles for the label of a menu item.\r\n   */\r\n  label: IStyle;\r\n\r\n  /**\r\n   * Styles for the secondary text of a menu item.\r\n   */\r\n  secondaryText: IStyle;\r\n\r\n  /**\r\n   * Styles for the container of a split menu item.\r\n   */\r\n  splitContainer: IStyle;\r\n\r\n  /**\r\n   * Styles for the primary portion of a split menu item.\r\n   */\r\n  splitPrimary: IStyle;\r\n\r\n  /**\r\n   * Styles for the menu portion of a split menu item.\r\n   */\r\n  splitMenu: IStyle;\r\n\r\n  /**\r\n   * Styles for a menu item that is a link.\r\n   */\r\n  linkContentMenu: IStyle;\r\n}\r\n"]}