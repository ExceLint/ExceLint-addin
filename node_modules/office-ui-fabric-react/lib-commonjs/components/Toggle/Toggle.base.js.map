{"version":3,"file":"Toggle.base.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction, getId, inputProperties, getNativeProps } from '../../Utilities';\r\nimport { IToggleProps, IToggle, IToggleStyleProps, IToggleStyles } from './Toggle.types';\r\nimport { Label } from '../../Label';\r\nimport { KeytipData } from '../../KeytipData';\r\n\r\nexport interface IToggleState {\r\n  checked: boolean;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\r\n\r\nexport class ToggleBase extends BaseComponent<IToggleProps, IToggleState> implements IToggle {\r\n  private _id: string;\r\n  private _toggleButton = React.createRef<HTMLButtonElement>();\r\n\r\n  constructor(props: IToggleProps) {\r\n    super(props);\r\n\r\n    this._warnMutuallyExclusive({\r\n      checked: 'defaultChecked'\r\n    });\r\n\r\n    this._warnDeprecations({\r\n      onAriaLabel: 'ariaLabel',\r\n      offAriaLabel: undefined,\r\n      onChanged: 'onChange'\r\n    });\r\n\r\n    this.state = {\r\n      checked: !!(props.checked || props.defaultChecked)\r\n    };\r\n    this._id = props.id || getId('Toggle');\r\n  }\r\n\r\n  /**\r\n   * Gets the current checked state of the toggle.\r\n   */\r\n  public get checked(): boolean {\r\n    return this.state.checked;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IToggleProps): void {\r\n    if (newProps.checked !== undefined) {\r\n      this.setState({\r\n        checked: !!newProps.checked // convert null to false\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      as: RootType = 'div',\r\n      className,\r\n      theme,\r\n      disabled,\r\n      keytipProps,\r\n      label,\r\n      ariaLabel,\r\n      onAriaLabel,\r\n      offAriaLabel,\r\n      offText,\r\n      onText,\r\n      styles,\r\n      inlineLabel\r\n    } = this.props;\r\n    const { checked } = this.state;\r\n    const stateText = checked ? onText : offText;\r\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\r\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\r\n    const classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className,\r\n      disabled,\r\n      checked,\r\n      inlineLabel,\r\n      onOffMissing: !onText && !offText\r\n    });\r\n\r\n    const labelId = `${this._id}-label`;\r\n    const stateTextId = `${this._id}-stateText`;\r\n\r\n    // The following properties take priority for what Narrator should read:\r\n    // 1. ariaLabel\r\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\r\n    // 3. label\r\n    // 4. onText (if checked) or offText (if not checked)\r\n    let labelledById: string | undefined = undefined;\r\n    if (!ariaLabel && !badAriaLabel) {\r\n      if (label) {\r\n        labelledById = labelId;\r\n      } else if (stateText) {\r\n        labelledById = stateTextId;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <RootType className={classNames.root} hidden={(toggleNativeProps as any).hidden}>\r\n        {label && (\r\n          <Label htmlFor={this._id} className={classNames.label} id={labelId}>\r\n            {label}\r\n          </Label>\r\n        )}\r\n\r\n        <div className={classNames.container}>\r\n          <KeytipData keytipProps={keytipProps} ariaDescribedBy={(toggleNativeProps as any)['aria-describedby']} disabled={disabled}>\r\n            {(keytipAttributes: any): JSX.Element => (\r\n              <button\r\n                {...toggleNativeProps}\r\n                {...keytipAttributes}\r\n                className={classNames.pill}\r\n                disabled={disabled}\r\n                id={this._id}\r\n                type=\"button\"\r\n                role=\"switch\" // ARIA 1.1 definition; \"checkbox\" in ARIA 1.0\r\n                ref={this._toggleButton}\r\n                aria-disabled={disabled}\r\n                aria-checked={checked}\r\n                aria-label={ariaLabel ? ariaLabel : badAriaLabel}\r\n                data-is-focusable={true}\r\n                onChange={this._noop}\r\n                onClick={this._onClick}\r\n                aria-labelledby={labelledById}\r\n              >\r\n                <div className={classNames.thumb} />\r\n              </button>\r\n            )}\r\n          </KeytipData>\r\n          {stateText && (\r\n            <Label htmlFor={this._id} className={classNames.text} id={stateTextId}>\r\n              {stateText}\r\n            </Label>\r\n          )}\r\n        </div>\r\n      </RootType>\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    if (this._toggleButton.current) {\r\n      this._toggleButton.current.focus();\r\n    }\r\n  }\r\n\r\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\r\n    const { disabled, checked: checkedProp, onChange, onChanged, onClick } = this.props;\r\n    const { checked } = this.state;\r\n\r\n    if (!disabled) {\r\n      // Only update the state if the user hasn't provided it.\r\n      if (checkedProp === undefined) {\r\n        this.setState({\r\n          checked: !checked\r\n        });\r\n      }\r\n\r\n      if (onChange) {\r\n        onChange(ev, !checked);\r\n      }\r\n\r\n      if (onChanged) {\r\n        onChanged(!checked);\r\n      }\r\n\r\n      if (onClick) {\r\n        onClick(ev);\r\n      }\r\n    }\r\n  };\r\n\r\n  private _noop(): void {\r\n    /* no-op */\r\n  }\r\n}\r\n"]}