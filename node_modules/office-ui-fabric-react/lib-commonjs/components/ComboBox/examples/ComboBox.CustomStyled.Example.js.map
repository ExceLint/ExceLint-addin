{"version":3,"file":"ComboBox.CustomStyled.Example.js","sourceRoot":"../src/","sources":["components/ComboBox/examples/ComboBox.CustomStyled.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { ComboBox, IComboBoxOption, SelectableOptionMenuItemType, Fabric, mergeStyles } from 'office-ui-fabric-react/lib/index';\r\n\r\nconst wrapperClassName = mergeStyles({\r\n  selectors: {\r\n    '& > *': { marginBottom: '20px' },\r\n    '& .ms-ComboBox': { maxWidth: '300px' }\r\n  }\r\n});\r\n\r\nexport class ComboBoxCustomStyledExample extends React.Component<any, any> {\r\n  private _optionsWithCustomStyling: IComboBoxOption[];\r\n  private _optionsForCustomRender: IComboBoxOption[];\r\n\r\n  private _fontMapping: { [fontName: string]: string } = {\r\n    ['Arial Black']: '\"Arial Black\", \"Arial Black_MSFontService\", sans-serif',\r\n    ['Times New Roman']: '\"Times New Roman\", \"Times New Roman_MSFontService\", serif',\r\n    ['Comic Sans MS']: '\"Comic Sans MS\", \"Comic Sans MS_MSFontService\", fantasy',\r\n    ['Calibri']: 'Calibri, Calibri_MSFontService, sans-serif'\r\n  };\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    const fonts = Object.keys(this._fontMapping);\r\n\r\n    // Options for first example\r\n    this._optionsWithCustomStyling = fonts.map((fontName: string) => ({\r\n      key: fontName,\r\n      text: fontName,\r\n      styles: {\r\n        optionText: {\r\n          // This will cause the options to render with the given font\r\n          fontFamily: this._fontMapping[fontName]\r\n        }\r\n      }\r\n    }));\r\n\r\n    // Options for second example\r\n    this._optionsForCustomRender = [\r\n      // Default font options are listed under this heading\r\n      { key: 'header1', text: 'Theme Fonts', itemType: SelectableOptionMenuItemType.Header },\r\n      ...fonts.map((fontName: string) => ({ key: fontName, text: fontName })),\r\n      { key: 'divider', text: '-', itemType: SelectableOptionMenuItemType.Divider },\r\n      // User-added font options will be listed under this heading\r\n      { key: 'header2', text: 'Other Options', itemType: SelectableOptionMenuItemType.Header }\r\n    ];\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <Fabric className={wrapperClassName}>\r\n        <ComboBox\r\n          defaultSelectedKey=\"Calibri\"\r\n          label=\"Custom styled ComboBox\"\r\n          options={this._optionsWithCustomStyling}\r\n          styles={{\r\n            container: {\r\n              maxWidth: '300px'\r\n            },\r\n            // Light purple input background\r\n            root: {\r\n              backgroundColor: '#b4a0ff'\r\n            },\r\n            input: {\r\n              backgroundColor: '#b4a0ff'\r\n            }\r\n          }}\r\n          caretDownButtonStyles={{\r\n            // Purple caret button with white text on hover or press\r\n            rootHovered: {\r\n              color: 'white',\r\n              backgroundColor: '#5c2d91'\r\n            },\r\n            rootChecked: {\r\n              color: 'white',\r\n              backgroundColor: '#5c2d91'\r\n            },\r\n            rootCheckedHovered: {\r\n              color: 'white',\r\n              backgroundColor: '#32145a'\r\n            }\r\n          }}\r\n          comboBoxOptionStyles={{\r\n            optionText: {\r\n              fontFamily: 'initial' // this should be overriden by custom styles for each option\r\n            }\r\n          }}\r\n        />\r\n\r\n        <ComboBox\r\n          defaultSelectedKey=\"Calibri\"\r\n          label=\"ComboBox with custom option rendering (type the name of a font and the option will render in that font)\"\r\n          allowFreeform={true}\r\n          autoComplete=\"on\"\r\n          options={this._optionsForCustomRender}\r\n          onRenderOption={this._onRenderOption}\r\n        />\r\n      </Fabric>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render function for non-header/divider options in the second example.\r\n   */\r\n  private _onRenderOption = (item: IComboBoxOption): JSX.Element => {\r\n    if (item.itemType === SelectableOptionMenuItemType.Header || item.itemType === SelectableOptionMenuItemType.Divider) {\r\n      return <span>{item.text}</span>;\r\n    }\r\n\r\n    let fontFamily = this._fontMapping[item.text];\r\n\r\n    if (!fontFamily) {\r\n      // This is a new user-entered font. Add a font family definition for it.\r\n      const newFontName = item.text;\r\n      fontFamily = this._fontMapping[newFontName] = `\"${newFontName}\",\"Segoe UI\",Tahoma,Sans-Serif`;\r\n    }\r\n\r\n    return <span style={{ fontFamily: fontFamily }}>{item.text}</span>;\r\n  };\r\n}\r\n"]}