{"version":3,"file":"ComboBox.classNames.js","sourceRoot":"../src/","sources":["components/ComboBox/ComboBox.classNames.ts"],"names":[],"mappings":";;AAMA,6CAAkD;AAClD,yCAA4C;AAE/B,QAAA,aAAa,GAAG,2BAAe,CAC1C,UACE,MAAgC,EAChC,SAAiB,EACjB,MAAe,EACf,QAAiB,EACjB,QAAiB,EACjB,OAAgB,EAChB,aAAsB,EACtB,eAAwB;IAExB,OAAO;QACL,SAAS,EAAE,qBAAW,CAAC,uBAAuB,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC;QAC5E,KAAK,EAAE,qBAAW,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,IAAI,MAAM,CAAC,aAAa,CAAC;QAClE,IAAI,EAAE,qBAAW,CACf,aAAa,EACb,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,IAAI,SAAS,EACxD,QAAQ,IAAI,aAAa,EACzB,MAAM,CAAC,IAAI,EACX,CAAC,aAAa,IAAI,MAAM,CAAC,oBAAoB,EAC7C,eAAe,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,IAAI,MAAM,CAAC,WAAW,EAC3F,CAAC,QAAQ,IAAI;YACX,SAAS,EAAE;gBACT,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,MAAM,CAAC,WAAW;gBACxF,SAAS,EAAE,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW;gBAClE,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW;aAClE;SACF,EACD,QAAQ,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,YAAY,CAAC,CACjD;QACD,KAAK,EAAE,qBAAW,CAAC,mBAAmB,EAAE,MAAM,CAAC,KAAK,EAAE,QAAQ,IAAI,MAAM,CAAC,aAAa,CAAC;QACvF,YAAY,EAAE,qBAAW,CAAC,MAAM,CAAC,YAAY,CAAC;QAC9C,OAAO,EAAE,qBAAW,CAAC,qBAAqB,EAAE,MAAM,CAAC,OAAO,CAAC;QAC3D,uBAAuB,EAAE,qBAAW,CAAC,qCAAqC,EAAE,MAAM,CAAC,uBAAuB,CAAC;QAC3G,gBAAgB,EAAE,qBAAW,CAAC,8BAA8B,EAAE,MAAM,CAAC,gBAAgB,CAAC;QACtF,MAAM,EAAE,qBAAW,CAAC,oBAAoB,EAAE,MAAM,CAAC,MAAM,CAAC;QACxD,OAAO,EAAE,qBAAW,CAAC,qBAAqB,EAAE,MAAM,CAAC,OAAO,CAAC;QAC3D,gBAAgB,EAAE,qBAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC;KACvD,CAAC;AACJ,CAAC,CACF,CAAC;AAEW,QAAA,2BAA2B,GAAG,2BAAe,CACxD,UAAC,MAAsC;IACrC,OAAO;QACL,UAAU,EAAE,qBAAW,CAAC,wBAAwB,EAAE,MAAM,CAAC,UAAU,CAAC;QACpE,IAAI,EAAE,qBAAW,CAAC,oBAAoB,EAAE,MAAM,CAAC,IAAI,EAAE;YACnD,SAAS,EAAE;gBACT,QAAQ,EAAE,MAAM,CAAC,WAAW;gBAC5B,QAAQ,EAAE,MAAM,CAAC,WAAW;gBAC5B,SAAS,EAAE,MAAM,CAAC,WAAW;aAC9B;SACF,CAAC;QACF,iBAAiB,EAAE,qBAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC;KACzD,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["import {\r\n  IComboBoxStyles,\r\n  IComboBoxOptionStyles,\r\n  IComboBoxClassNames,\r\n  IComboBoxOptionClassNames,\r\n} from './ComboBox.types';\r\nimport { memoizeFunction } from '../../Utilities';\r\nimport { mergeStyles } from '../../Styling';\r\n\r\nexport const getClassNames = memoizeFunction(\r\n  (\r\n    styles: Partial<IComboBoxStyles>,\r\n    className: string,\r\n    isOpen: boolean,\r\n    disabled: boolean,\r\n    required: boolean,\r\n    focused: boolean,\r\n    allowFreeForm: boolean,\r\n    hasErrorMessage: boolean,\r\n  ): IComboBoxClassNames => {\r\n    return {\r\n      container: mergeStyles('ms-ComboBox-container', className, styles.container),\r\n      label: mergeStyles(styles.label, disabled && styles.labelDisabled),\r\n      root: mergeStyles(\r\n        'ms-ComboBox',\r\n        hasErrorMessage ? styles.rootError : isOpen && 'is-open',\r\n        required && 'is-required',\r\n        styles.root,\r\n        !allowFreeForm && styles.rootDisallowFreeForm,\r\n        hasErrorMessage && !focused ? styles.rootError : !disabled && focused && styles.rootFocused,\r\n        !disabled && {\r\n          selectors: {\r\n            ':hover': hasErrorMessage ? styles.rootError : !isOpen && !focused && styles.rootHovered,\r\n            ':active': hasErrorMessage ? styles.rootError : styles.rootPressed,\r\n            ':focus': hasErrorMessage ? styles.rootError : styles.rootFocused,\r\n          },\r\n        },\r\n        disabled && ['is-disabled', styles.rootDisabled],\r\n      ),\r\n      input: mergeStyles('ms-ComboBox-Input', styles.input, disabled && styles.inputDisabled),\r\n      errorMessage: mergeStyles(styles.errorMessage),\r\n      callout: mergeStyles('ms-ComboBox-callout', styles.callout),\r\n      optionsContainerWrapper: mergeStyles('ms-ComboBox-optionsContainerWrapper', styles.optionsContainerWrapper),\r\n      optionsContainer: mergeStyles('ms-ComboBox-optionsContainer', styles.optionsContainer),\r\n      header: mergeStyles('ms-ComboBox-header', styles.header),\r\n      divider: mergeStyles('ms-ComboBox-divider', styles.divider),\r\n      screenReaderText: mergeStyles(styles.screenReaderText),\r\n    };\r\n  },\r\n);\r\n\r\nexport const getComboBoxOptionClassNames = memoizeFunction(\r\n  (styles: Partial<IComboBoxOptionStyles>): IComboBoxOptionClassNames => {\r\n    return {\r\n      optionText: mergeStyles('ms-ComboBox-optionText', styles.optionText),\r\n      root: mergeStyles('ms-ComboBox-option', styles.root, {\r\n        selectors: {\r\n          ':hover': styles.rootHovered,\r\n          ':focus': styles.rootFocused,\r\n          ':active': styles.rootPressed,\r\n        },\r\n      }),\r\n      optionTextWrapper: mergeStyles(styles.optionTextWrapper),\r\n    };\r\n  },\r\n);\r\n"]}