{"version":3,"file":"SwatchColorPicker.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/SwatchColorPicker.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Async, BaseComponent, classNamesFunction, findIndex, KeyCodes, getId } from '../../Utilities';\r\nimport {\r\n  ISwatchColorPicker,\r\n  ISwatchColorPickerProps,\r\n  ISwatchColorPickerStyleProps,\r\n  ISwatchColorPickerStyles\r\n} from './SwatchColorPicker.types';\r\nimport { Grid } from '../../utilities/grid/Grid';\r\nimport { IColorCellProps } from './ColorPickerGridCell.types';\r\nimport { ColorPickerGridCell } from './ColorPickerGridCell';\r\n\r\nexport interface ISwatchColorPickerState {\r\n  selectedIndex?: number;\r\n}\r\n\r\nconst getClassNames = classNamesFunction<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>();\r\n\r\nexport class SwatchColorPickerBase extends BaseComponent<ISwatchColorPickerProps, ISwatchColorPickerState> implements ISwatchColorPicker {\r\n  public static defaultProps = {\r\n    cellShape: 'circle',\r\n    disabled: false,\r\n    shouldFocusCircularNavigate: true,\r\n    cellMargin: 10\r\n  } as ISwatchColorPickerProps;\r\n\r\n  private _id: string;\r\n  private _cellFocused: boolean;\r\n\r\n  private navigationIdleTimeoutId: number | undefined;\r\n  private isNavigationIdle: boolean;\r\n  private readonly navigationIdleDelay: number = 250 /* ms */;\r\n  private async: Async;\r\n\r\n  constructor(props: ISwatchColorPickerProps) {\r\n    super(props);\r\n\r\n    this._id = props.id || getId('swatchColorPicker');\r\n\r\n    this._warnMutuallyExclusive({\r\n      focusOnHover: 'onHover'\r\n    });\r\n\r\n    this._warnConditionallyRequiredProps(['focusOnHover'], 'mouseLeaveParentSelector', !!this.props.mouseLeaveParentSelector);\r\n\r\n    this.isNavigationIdle = true;\r\n    this.async = new Async(this);\r\n\r\n    let selectedIndex: number | undefined;\r\n    if (props.selectedId) {\r\n      selectedIndex = this._getSelectedIndex(props.colorCells, props.selectedId);\r\n    }\r\n\r\n    this.state = {\r\n      selectedIndex\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ISwatchColorPickerProps): void {\r\n    if (newProps.selectedId !== undefined) {\r\n      this.setState({\r\n        selectedIndex: this._getSelectedIndex(newProps.colorCells, newProps.selectedId)\r\n      });\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    if (this.props.onCellFocused && this._cellFocused) {\r\n      this._cellFocused = false;\r\n      this.props.onCellFocused();\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element | null {\r\n    const {\r\n      colorCells,\r\n      columnCount,\r\n      positionInSet,\r\n      setSize,\r\n      shouldFocusCircularNavigate,\r\n      className,\r\n      doNotContainWithinFocusZone,\r\n      styles,\r\n      cellMargin\r\n    } = this.props;\r\n\r\n    const classNames = getClassNames(styles!, {\r\n      theme: this.props.theme!,\r\n      className,\r\n      cellMargin\r\n    });\r\n\r\n    if (colorCells.length < 1 || columnCount < 1) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Grid\r\n        {...this.props}\r\n        items={colorCells.map((item, index) => {\r\n          return { ...item, index: index };\r\n        })}\r\n        columnCount={columnCount}\r\n        onRenderItem={this._renderOption}\r\n        positionInSet={positionInSet && positionInSet}\r\n        setSize={setSize && setSize}\r\n        shouldFocusCircularNavigate={shouldFocusCircularNavigate}\r\n        doNotContainWithinFocusZone={doNotContainWithinFocusZone}\r\n        onBlur={this._onSwatchColorPickerBlur}\r\n        theme={this.props.theme!}\r\n        // tslint:disable-next-line:jsx-no-lambda\r\n        styles={props => ({\r\n          root: classNames.root,\r\n          tableCell: classNames.tableCell,\r\n          focusedContainer: classNames.focusedContainer\r\n        })}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * When the whole swatchColorPicker is blurred,\r\n   * make sure to clear the pending focused stated\r\n   */\r\n  private _onSwatchColorPickerBlur = (): void => {\r\n    if (this.props.onCellFocused) {\r\n      this._cellFocused = false;\r\n      this.props.onCellFocused();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get the selected item's index\r\n   * @param items - The items to search\r\n   * @param selectedId - The selected item's id to find\r\n   * @returns - The index of the selected item's id, -1 if there was no match\r\n   */\r\n  private _getSelectedIndex(items: IColorCellProps[], selectedId: string): number | undefined {\r\n    const selectedIndex = findIndex(items, item => item.id === selectedId);\r\n    return selectedIndex >= 0 ? selectedIndex : undefined;\r\n  }\r\n\r\n  /**\r\n   * Render a color cell\r\n   * @param item - The item to render\r\n   * @returns - Element representing the item\r\n   */\r\n  private _renderOption = (item: IColorCellProps): JSX.Element => {\r\n    const id = this._id;\r\n\r\n    return (\r\n      <ColorPickerGridCell\r\n        item={item}\r\n        id={id}\r\n        color={item.color}\r\n        styles={this.props.getColorGridCellStyles}\r\n        disabled={this.props.disabled}\r\n        onClick={this._onCellClick}\r\n        onHover={this._onGridCellHovered}\r\n        onFocus={this._onGridCellFocused}\r\n        selected={this.state.selectedIndex !== undefined && this.state.selectedIndex === item.index}\r\n        circle={this.props.cellShape === 'circle'}\r\n        label={item.label}\r\n        onMouseEnter={this._onMouseEnter}\r\n        onMouseMove={this._onMouseMove}\r\n        onMouseLeave={this._onMouseLeave}\r\n        onWheel={this._onWheel}\r\n        onKeyDown={this._onKeyDown}\r\n        height={this.props.cellHeight}\r\n        width={this.props.cellWidth}\r\n        borderWidth={this.props.cellBorderWidth}\r\n      />\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Callback passed to the GridCell that will manage triggering the onCellHovered callback for mouseEnter\r\n   */\r\n  private _onMouseEnter = (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\r\n    if (!this.props.focusOnHover) {\r\n      if (!this.isNavigationIdle || this.props.disabled) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    if (this.isNavigationIdle && !this.props.disabled) {\r\n      ev.currentTarget.focus();\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Callback passed to the GridCell that will manage Hover/Focus updates\r\n   */\r\n  private _onMouseMove = (ev: React.MouseEvent<HTMLButtonElement>): boolean => {\r\n    if (!this.props.focusOnHover) {\r\n      if (!this.isNavigationIdle || this.props.disabled) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    const targetElement = ev.currentTarget as HTMLElement;\r\n\r\n    // If navigation is idle and the targetElement is the focused element bail out\r\n    // if (!this.isNavigationIdle || (document && targetElement === (document.activeElement as HTMLElement))) {\r\n    if (this.isNavigationIdle && !(document && targetElement === (document.activeElement as HTMLElement))) {\r\n      targetElement.focus();\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Callback passed to the GridCell that will manage Hover/Focus updates\r\n   */\r\n  private _onMouseLeave = (ev: React.MouseEvent<HTMLButtonElement>): void => {\r\n    const parentSelector = this.props.mouseLeaveParentSelector;\r\n\r\n    if (!this.props.focusOnHover || !parentSelector || !this.isNavigationIdle || this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    // Get the the elements that math the given selector\r\n    const elements = document.querySelectorAll(parentSelector);\r\n\r\n    // iterate over the elements return to make sure it is a parent of the target and focus it\r\n    for (let index = 0; index < elements.length; index += 1) {\r\n      if (elements[index].contains(ev.currentTarget)) {\r\n        /**\r\n         * IE11 focus() method forces parents to scroll to top of element.\r\n         * Edge and IE expose a setActive() function for focusable divs that\r\n         * sets the page focus but does not scroll the parent element.\r\n         */\r\n        if ((elements[index] as any).setActive) {\r\n          try {\r\n            (elements[index] as any).setActive();\r\n          } catch (e) {\r\n            /* no-op */\r\n          }\r\n        } else {\r\n          (elements[index] as HTMLElement).focus();\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Callback to make sure we don't update the hovered element during mouse wheel\r\n   */\r\n  private _onWheel = (): void => {\r\n    this.setNavigationTimeout();\r\n  };\r\n\r\n  /**\r\n   * Callback that\r\n   */\r\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLButtonElement>): void => {\r\n    if (ev.which === KeyCodes.up || ev.which === KeyCodes.down || ev.which === KeyCodes.left || ev.which === KeyCodes.right) {\r\n      this.setNavigationTimeout();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Sets a timeout so we won't process any mouse \"hover\" events\r\n   * while navigating (via mouseWheel or arrowKeys)\r\n   */\r\n  private setNavigationTimeout = () => {\r\n    if (!this.isNavigationIdle && this.navigationIdleTimeoutId !== undefined) {\r\n      this.async.clearTimeout(this.navigationIdleTimeoutId);\r\n      this.navigationIdleTimeoutId = undefined;\r\n    } else {\r\n      this.isNavigationIdle = false;\r\n    }\r\n\r\n    this.navigationIdleTimeoutId = this.async.setTimeout(() => {\r\n      this.isNavigationIdle = true;\r\n    }, this.navigationIdleDelay);\r\n  };\r\n\r\n  /**\r\n   * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\r\n   * NOTE: This will not be triggered if shouldFocusOnHover === true\r\n   */\r\n  private _onGridCellHovered = (item?: IColorCellProps): void => {\r\n    const { onCellHovered } = this.props;\r\n\r\n    if (onCellHovered) {\r\n      return item ? onCellHovered(item.id, item.color) : onCellHovered();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\r\n   */\r\n  private _onGridCellFocused = (item?: IColorCellProps): void => {\r\n    const { onCellFocused } = this.props;\r\n    if (onCellFocused) {\r\n      if (item) {\r\n        this._cellFocused = true;\r\n        return onCellFocused(item.id, item.color);\r\n      } else {\r\n        this._cellFocused = false;\r\n        return onCellFocused();\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle the click on a cell\r\n   * @param item - The cell that the click was fired against\r\n   */\r\n  private _onCellClick = (item: IColorCellProps): void => {\r\n    if (this.props.disabled) {\r\n      return;\r\n    }\r\n\r\n    const index = item.index as number;\r\n\r\n    // If we have a valid index and it is not already\r\n    // selected, select it\r\n    if (index >= 0 && index !== this.state.selectedIndex) {\r\n      if (this.props.onCellFocused && this._cellFocused) {\r\n        this._cellFocused = false;\r\n        this.props.onCellFocused();\r\n      }\r\n\r\n      if (this.props.onColorChanged) {\r\n        this.props.onColorChanged(item.id, item.color);\r\n      }\r\n\r\n      this.setState({\r\n        selectedIndex: index\r\n      });\r\n    }\r\n  };\r\n}\r\n"]}