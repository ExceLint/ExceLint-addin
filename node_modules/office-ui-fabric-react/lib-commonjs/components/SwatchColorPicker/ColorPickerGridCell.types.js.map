{"version":3,"file":"ColorPickerGridCell.types.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle, ITheme } from '../../Styling';\r\nimport { IStyleFunctionOrObject } from '../../Utilities';\r\n\r\nexport interface IColorPickerGridCellProps {\r\n  /**\r\n   * Item to render\r\n   */\r\n  item: IColorCellProps;\r\n\r\n  /**\r\n   * Arbitrary unique string associated with this option\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The label for this item.\r\n   * Visible text if this item is a header,\r\n   * tooltip if is this item is normal\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * The CSS-compatible string to describe the color\r\n   */\r\n  color?: string;\r\n\r\n  /**\r\n   * Index for this option\r\n   */\r\n  index?: number;\r\n\r\n  /**\r\n   * The theme object to use for styling.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Wheter or not colorOption should be rendered as a circle or square.\r\n   */\r\n  circle?: boolean;\r\n\r\n  /**\r\n   * Optional, if the this option should be disabled\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Optional, if the cell is currently selected\r\n   */\r\n  selected: boolean;\r\n\r\n  /**\r\n   * Height of the cell, in pixels\r\n   * @defaultvalue 20\r\n   */\r\n  height?: number;\r\n\r\n  /**\r\n   * Width of the cell, in pixels\r\n   * @defaultvalue 20\r\n   */\r\n  width?: number;\r\n\r\n  /**\r\n   * Width of the border that indicates a selected/hovered cell, in pixels.\r\n   * If `cellWidth` is less than 24px, then default value is 2px. Otherwise it defaults to 4px.\r\n   * @defaultvalue 2\r\n   */\r\n  borderWidth?: number;\r\n\r\n  /**\r\n   * The on click handler\r\n   */\r\n  onClick?: (item: IColorCellProps) => void;\r\n\r\n  /**\r\n   * Optional, the onHover handler\r\n   */\r\n  onHover?: (item?: IColorCellProps) => void;\r\n\r\n  /**\r\n   * Optional, the onFocus handler\r\n   */\r\n  onFocus?: (item: IColorCellProps) => void;\r\n\r\n  /**\r\n   * Optional styles for the component.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>;\r\n\r\n  /**\r\n   * Optional, mouseEnter handler.\r\n   * @returns true if the event should be processed, false otherwise\r\n   */\r\n  onMouseEnter?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\r\n\r\n  /**\r\n   * Optional, mouseMove handler\r\n   * @returns true if the event should be processed, false otherwise\r\n   */\r\n  onMouseMove?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;\r\n\r\n  /**\r\n   * Optional, mouseLeave handler\r\n   */\r\n  onMouseLeave?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\r\n\r\n  /**\r\n   * Optional, onWheel handler\r\n   */\r\n  onWheel?: (ev: React.MouseEvent<HTMLButtonElement>) => void;\r\n\r\n  /**\r\n   * Optional, onkeydown handler\r\n   */\r\n  onKeyDown?: (ev: React.KeyboardEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport interface IColorCellProps {\r\n  /**\r\n   * Arbitrary unique string associated with this option\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The label for this item.\r\n   * Visible text if this item is a header,\r\n   * tooltip if is this item is normal\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * The CSS-compatible string to describe the color\r\n   */\r\n  color?: string;\r\n\r\n  /**\r\n   * Index for this option\r\n   */\r\n  index?: number;\r\n}\r\n\r\n/**\r\n * Properties required to build the styles for the color picker component.\r\n */\r\nexport interface IColorPickerGridCellStyleProps {\r\n  /**\r\n   * Theme to apply to the cell.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Whether the component is disabled or not.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Whether the cell is currently selected or not.\r\n   */\r\n  selected?: boolean;\r\n\r\n  /**\r\n   * Whether the svg color element should be rendered as a circle or not.\r\n   */\r\n  circle?: boolean;\r\n\r\n  /**\r\n   * Whether the color being rendered is white or not. If it is white we show a border around it.\r\n   */\r\n  isWhite?: boolean;\r\n\r\n  /**\r\n   * The height of this cell, in pixels.\r\n   */\r\n  height?: number;\r\n\r\n  /**\r\n   * The width of this cell, in pixels.\r\n   */\r\n  width?: number;\r\n\r\n  /**\r\n   * The width of the border indicating a hovered or selected cell, in pixels.\r\n   */\r\n  borderWidth?: number;\r\n}\r\n\r\n/**\r\n * Styles for the Color Picker Component.\r\n */\r\nexport interface IColorPickerGridCellStyles {\r\n  /**\r\n   * Style to apply to a colorCell in the color picker.\r\n   */\r\n  colorCell: IStyle;\r\n\r\n  /**\r\n   * Style to apply to the svg element that renders the color.\r\n   */\r\n  svg: IStyle;\r\n}\r\n"]}