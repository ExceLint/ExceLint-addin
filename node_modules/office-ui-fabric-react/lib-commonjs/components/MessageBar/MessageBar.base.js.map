{"version":3,"file":"MessageBar.base.js","sourceRoot":"../src/","sources":["components/MessageBar/MessageBar.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, DelayedRender, getId, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\r\nimport { IconButton } from '../../Button';\r\nimport { Icon } from '../../Icon';\r\nimport { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles, MessageBarType } from './MessageBar.types';\r\n\r\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\r\n\r\nexport interface IMessageBarState {\r\n  labelId?: string;\r\n  showContent?: boolean;\r\n  expandSingleLine?: boolean;\r\n}\r\n\r\nexport class MessageBarBase extends BaseComponent<IMessageBarProps, IMessageBarState> {\r\n  public static defaultProps: IMessageBarProps = {\r\n    messageBarType: MessageBarType.info,\r\n    onDismiss: undefined,\r\n    isMultiline: true\r\n  };\r\n\r\n  private ICON_MAP = {\r\n    [MessageBarType.info]: 'Info',\r\n    [MessageBarType.warning]: 'Info',\r\n    [MessageBarType.error]: 'ErrorBadge',\r\n    [MessageBarType.blocked]: 'Blocked2',\r\n    [MessageBarType.remove]: 'Blocked', // TODO remove deprecated value at >= 1.0.0\r\n    [MessageBarType.severeWarning]: 'Warning',\r\n    [MessageBarType.success]: 'Completed'\r\n  };\r\n\r\n  private _classNames: { [key in keyof IMessageBarStyles]: string };\r\n\r\n  constructor(props: IMessageBarProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      labelId: getId('MessageBar'),\r\n      showContent: false,\r\n      expandSingleLine: false\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { isMultiline } = this.props;\r\n\r\n    this._classNames = this._getClassNames();\r\n\r\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\r\n  }\r\n\r\n  private _getActionsDiv(): JSX.Element | null {\r\n    if (this.props.actions) {\r\n      return <div className={this._classNames.actions}>{this.props.actions}</div>;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getDismissDiv(): JSX.Element | null {\r\n    if (this.props.onDismiss) {\r\n      return (\r\n        <IconButton\r\n          disabled={false}\r\n          className={this._classNames.dismissal}\r\n          onClick={this.props.onDismiss}\r\n          iconProps={{ iconName: 'Clear' }}\r\n          ariaLabel={this.props.dismissButtonAriaLabel}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getDismissSingleLine(): JSX.Element | null {\r\n    if (this.props.onDismiss) {\r\n      return <div className={this._classNames.dismissSingleLine}>{this._getDismissDiv()}</div>;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getExpandSingleLine(): JSX.Element | null {\r\n    if (!this.props.actions && this.props.truncated) {\r\n      return (\r\n        <div className={this._classNames.expandSingleLine}>\r\n          <IconButton\r\n            disabled={false}\r\n            className={this._classNames.expand}\r\n            onClick={this._onClick}\r\n            iconProps={{ iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' }}\r\n            ariaLabel={this.props.overflowButtonAriaLabel}\r\n            aria-expanded={this.state.expandSingleLine}\r\n            aria-controls={this.state.labelId}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getIconSpan(): JSX.Element {\r\n    return (\r\n      <div className={this._classNames.iconContainer}>\r\n        <Icon iconName={this.ICON_MAP[this.props.messageBarType!]} className={this._classNames.icon} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderMultiLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\r\n    return (\r\n      <div className={this._classNames.root}>\r\n        <div className={this._classNames.content}>\r\n          {this._getIconSpan()}\r\n          {this._renderInnerText()}\r\n          {this._getDismissDiv()}\r\n        </div>\r\n        {this._getActionsDiv()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderSingleLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\r\n    return (\r\n      <div className={this._classNames.root}>\r\n        <div className={this._classNames.content}>\r\n          {this._getIconSpan()}\r\n          {this._renderInnerText()}\r\n          {this._getExpandSingleLine()}\r\n          {this._getActionsDiv()}\r\n          {this._getDismissSingleLine()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderInnerText(): JSX.Element {\r\n    const nativeProps = getNativeProps(this.props, htmlElementProperties, ['className']);\r\n\r\n    return (\r\n      <div className={this._classNames.text} id={this.state.labelId}>\r\n        <span className={this._classNames.innerText} role=\"status\" aria-live={this._getAnnouncementPriority()} {...nativeProps}>\r\n          <DelayedRender>\r\n            <span>{this.props.children}</span>\r\n          </DelayedRender>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getClassNames(): { [key in keyof IMessageBarStyles]: string } {\r\n    const { theme, className, messageBarType, onDismiss, actions, truncated, isMultiline } = this.props;\r\n    const { expandSingleLine } = this.state;\r\n\r\n    return getClassNames(this.props.styles!, {\r\n      theme: theme!,\r\n      messageBarType: messageBarType || MessageBarType.info,\r\n      onDismiss: onDismiss !== undefined,\r\n      actions: actions !== undefined,\r\n      truncated: truncated,\r\n      isMultiline: isMultiline,\r\n      expandSingleLine: expandSingleLine,\r\n      className\r\n    });\r\n  }\r\n\r\n  private _getAnnouncementPriority(): 'assertive' | 'polite' {\r\n    switch (this.props.messageBarType) {\r\n      case MessageBarType.blocked:\r\n      case MessageBarType.error:\r\n      case MessageBarType.severeWarning:\r\n        return 'assertive';\r\n    }\r\n    return 'polite';\r\n  }\r\n\r\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\r\n    this.setState({ expandSingleLine: !this.state.expandSingleLine });\r\n  };\r\n}\r\n"]}