{"version":3,"file":"MessageBar.types.js","sourceRoot":"../src/","sources":["components/MessageBar/MessageBar.types.ts"],"names":[],"mappings":";;AAkLA,IAAY,cAkBX;AAlBD,WAAY,cAAc;IACxB,6BAA6B;IAC7B,mDAAQ,CAAA;IACR,8BAA8B;IAC9B,qDAAS,CAAA;IACT,gCAAgC;IAChC,yDAAW,CAAA;IACX,sCAAsC;IACtC,qEAAiB,CAAA;IACjB,gCAAgC;IAChC,yDAAW,CAAA;IACX,gCAAgC;IAChC,yDAAW,CAAA;IACX;;;OAGG;IACH,2DAAc,CAAA;AAChB,CAAC,EAlBW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAkBzB","sourcesContent":["import * as React from 'react';\r\nimport { BaseButton, Button } from '../../Button';\r\nimport { ITheme, IStyle } from '../../Styling';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\n\r\nexport interface IMessageBar {}\r\n\r\nexport interface IMessageBarProps extends React.HTMLAttributes<HTMLElement> {\r\n  /**\r\n   * Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IMessageBar>;\r\n\r\n  /**\r\n   * The type of MessageBar to render.\r\n   * @defaultvalue MessageBarType.info\r\n   */\r\n  messageBarType?: MessageBarType;\r\n\r\n  /**\r\n   * The actions you want to show on the other side.\r\n   */\r\n  actions?: JSX.Element;\r\n\r\n  /**\r\n   * A description of the message bar for the benefit of screen readers.\r\n   * @deprecated Use native prop `aria-label` instead.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Whether the message bar has a dismiss button and its callback.\r\n   * If null, we don't show a dismiss button.\r\n   * @defaultvalue null\r\n   */\r\n  onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement | BaseButton | HTMLAnchorElement | HTMLDivElement | Button>) => any;\r\n\r\n  /**\r\n   * Determines if the message bar is multi lined.\r\n   * If false, and the text overflows over buttons or to another line, it is clipped.\r\n   * @defaultvalue true\r\n   */\r\n  isMultiline?: boolean;\r\n\r\n  /**\r\n   * Aria label on dismiss button if onDismiss is defined.\r\n   */\r\n  dismissButtonAriaLabel?: string;\r\n\r\n  /**\r\n   * Determines if the message bar text is truncated.\r\n   * If true, a button will render to toggle between a single line view and multiline view.\r\n   * This prop is for single line message bars with no buttons only in a limited space scenario.\r\n   * @defaultvalue false\r\n   */\r\n  truncated?: boolean;\r\n\r\n  /**\r\n   * Aria label on overflow button if truncated is defined.\r\n   */\r\n  overflowButtonAriaLabel?: string;\r\n\r\n  /**\r\n   * Additional CSS class(es) to apply to the MessageBar.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Theme (provided through customization.)\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;\r\n}\r\n\r\nexport interface IMessageBarStyleProps {\r\n  /**\r\n   * Theme (provided through customization).\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Additional CSS class(es).\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Type of the MessageBar.\r\n   */\r\n  messageBarType?: MessageBarType;\r\n\r\n  /**\r\n   * Whether the MessageBar contains a dismiss button.\r\n   */\r\n  onDismiss?: boolean;\r\n\r\n  /**\r\n   * Whether the text is truncated.\r\n   */\r\n  truncated?: boolean;\r\n\r\n  /**\r\n   * Whether the MessageBar is rendered in multi line (as opposed to single line) mode.\r\n   */\r\n  isMultiline?: boolean;\r\n\r\n  /**\r\n   * Whether the single line MessageBar is being expanded.\r\n   */\r\n  expandSingleLine?: boolean;\r\n\r\n  /**\r\n   * Whether the MessageBar contains any action elements.\r\n   */\r\n  actions?: boolean;\r\n}\r\n\r\nexport interface IMessageBarStyles {\r\n  /**\r\n   * Style set for the root element.\r\n   */\r\n  root?: IStyle;\r\n\r\n  /**\r\n   * Style set for the element containing the icon, text, and optional dismiss button.\r\n   */\r\n  content?: IStyle;\r\n\r\n  /**\r\n   * Style set for the element containing the icon.\r\n   */\r\n  iconContainer?: IStyle;\r\n\r\n  /**\r\n   * Style set for the icon.\r\n   */\r\n  icon?: IStyle;\r\n\r\n  /**\r\n   * Style set for the element containing the text.\r\n   */\r\n  text?: IStyle;\r\n\r\n  /**\r\n   * Style set for the text.\r\n   */\r\n  innerText?: IStyle;\r\n\r\n  /**\r\n   * Style set for the optional dismiss button.\r\n   */\r\n  dismissal?: IStyle;\r\n\r\n  /**\r\n   * Style set for the icon used to expand and collapse the MessageBar.\r\n   */\r\n  expand?: IStyle;\r\n\r\n  /**\r\n   * Style set for the element containing the dismiss button.\r\n   */\r\n  dismissSingleLine?: IStyle;\r\n\r\n  /**\r\n   * Style set for the element containing the expand icon.\r\n   */\r\n  expandSingleLine?: IStyle;\r\n\r\n  /**\r\n   * Style set for the optional element containing the action elements.\r\n   */\r\n  actions?: IStyle;\r\n}\r\n\r\nexport enum MessageBarType {\r\n  /** Info styled MessageBar */\r\n  info = 0,\r\n  /** Error styled MessageBar */\r\n  error = 1,\r\n  /** Blocked styled MessageBar */\r\n  blocked = 2,\r\n  /** SevereWarning styled MessageBar */\r\n  severeWarning = 3,\r\n  /** Success styled MessageBar */\r\n  success = 4,\r\n  /** Warning styled MessageBar */\r\n  warning = 5,\r\n  /**\r\n   * Deprecated at v0.48.0, to be removed at \\>= v1.0.0. Use `blocked` instead.\r\n   * @deprecated Use `blocked` instead.\r\n   */\r\n  remove = 90000\r\n}\r\n"]}