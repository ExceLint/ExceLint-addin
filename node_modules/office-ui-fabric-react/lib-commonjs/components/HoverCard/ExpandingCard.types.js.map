{"version":3,"file":"ExpandingCard.types.js","sourceRoot":"../src/","sources":["components/HoverCard/ExpandingCard.types.ts"],"names":[],"mappings":";;AAuCA,IAAY,iBAUX;AAVD,WAAY,iBAAiB;IAC3B;;OAEG;IACH,+DAAW,CAAA;IAEX;;OAEG;IACH,iEAAY,CAAA;AACd,CAAC,EAVW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAU5B","sourcesContent":["import { IBaseCardProps, IBaseCardStyles, IBaseCardStyleProps } from './BaseCard.types';\r\nimport { IRenderFunction } from '../../Utilities';\r\nimport { IStyle } from '../../Styling';\r\n\r\nexport interface IExpandingCard {}\r\n\r\n/**\r\n * ExpandingCard component props.\r\n */\r\nexport interface IExpandingCardProps extends IBaseCardProps<IExpandingCard, IExpandingCardStyles, IExpandingCardStyleProps> {\r\n  /**\r\n   * Height of compact card\r\n   * @defaultvalue 156\r\n   */\r\n  compactCardHeight?: number;\r\n\r\n  /**\r\n   * Height of expanded card\r\n   * @defaultvalue 384\r\n   */\r\n  expandedCardHeight?: number;\r\n\r\n  /**\r\n   * Use to open the card in expanded format and not wait for the delay\r\n   * @defaultvalue ExpandingCardMode.compact\r\n   */\r\n  mode?: ExpandingCardMode;\r\n\r\n  /**\r\n   *  Render function to populate compact content area\r\n   */\r\n  onRenderCompactCard?: IRenderFunction<any>;\r\n\r\n  /**\r\n   *  Render function to populate expanded content area\r\n   */\r\n  onRenderExpandedCard?: IRenderFunction<any>;\r\n}\r\n\r\nexport enum ExpandingCardMode {\r\n  /**\r\n   * To have top compact card only\r\n   */\r\n  compact = 0,\r\n\r\n  /**\r\n   * To have both top compact and bottom expanded card\r\n   */\r\n  expanded = 1\r\n}\r\n\r\nexport interface IExpandingCardStyleProps extends IBaseCardStyleProps {\r\n  /**\r\n   * Height of the compact section of the card.\r\n   */\r\n  compactCardHeight?: number;\r\n\r\n  /**\r\n   * Boolean flag that expanded card is in Expanded.mode === expanded && first frame was rendered.\r\n   */\r\n  expandedCardFirstFrameRendered?: boolean;\r\n\r\n  /**\r\n   * Height of the expanded section of the card.\r\n   */\r\n  expandedCardHeight?: number;\r\n\r\n  /**\r\n   * Whether the content of the expanded card overflows vertically.\r\n   */\r\n  needsScroll?: boolean;\r\n}\r\n\r\nexport interface IExpandingCardStyles extends IBaseCardStyles {\r\n  /**\r\n   * Style for the main card element.\r\n   */\r\n  compactCard?: IStyle;\r\n\r\n  /**\r\n   * Base Style for the expanded card content.\r\n   */\r\n  expandedCard?: IStyle;\r\n\r\n  /**\r\n   * Style for the expanded card scroll content.\r\n   */\r\n  expandedCardScroll?: IStyle;\r\n}\r\n"]}