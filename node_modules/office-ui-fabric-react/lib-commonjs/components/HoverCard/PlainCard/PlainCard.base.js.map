{"version":3,"file":"PlainCard.base.js","sourceRoot":"../src/","sources":["components/HoverCard/PlainCard/PlainCard.base.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAE/B,gDAAiF;AAEjF,0DAAyD;AAEzD,IAAM,aAAa,GAAG,8BAAkB,EAA0C,CAAC;AAEnF;IAAmC,yCAAkC;IAArE;QAAA,qEAyBC;QALS,gBAAU,GAAG,UAAC,EAAoC;YACxD,IAAI,EAAE,CAAC,KAAK,KAAK,oBAAQ,CAAC,MAAM,EAAE;gBAChC,KAAI,CAAC,KAAK,CAAC,OAAO,IAAI,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC;;IACJ,CAAC;IAtBQ,8BAAM,GAAb;QACQ,IAAA,eAAyC,EAAvC,kBAAM,EAAE,gBAAK,EAAE,wBAAS,CAAgB;QAEhD,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,MAAO,EAAE;YACxC,KAAK,EAAE,KAAM;YACb,SAAS,WAAA;SACV,CAAC,CAAC;QAEH,IAAM,OAAO,GAAgB,CAC3B,6BAAK,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,IAChG,IAAI,CAAC,KAAK,CAAC,iBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CACjD,CACP,CAAC;QAEF,OAAO,oBAAC,yBAAW,uBAAK,IAAI,CAAC,KAAK,IAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC;IAC7F,CAAC;IAOH,oBAAC;AAAD,CAAC,AAzBD,CAAmC,yBAAa,GAyB/C;AAzBY,sCAAa","sourcesContent":["import * as React from 'react';\r\n\r\nimport { classNamesFunction, BaseComponent, KeyCodes } from '../../../Utilities';\r\nimport { IPlainCardProps, IPlainCardStyles, IPlainCardStyleProps } from './PlainCard.types';\r\nimport { CardCallout } from '../CardCallout/CardCallout';\r\n\r\nconst getClassNames = classNamesFunction<IPlainCardStyleProps, IPlainCardStyles>();\r\n\r\nexport class PlainCardBase extends BaseComponent<IPlainCardProps, {}> {\r\n  private _classNames: { [key in keyof IPlainCardStyles]: string };\r\n\r\n  public render(): JSX.Element {\r\n    const { styles, theme, className } = this.props;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      className\r\n    });\r\n\r\n    const content: JSX.Element = (\r\n      <div onMouseEnter={this.props.onEnter} onMouseLeave={this.props.onLeave} onKeyDown={this._onKeyDown}>\r\n        {this.props.onRenderPlainCard!(this.props.renderData)}\r\n      </div>\r\n    );\r\n\r\n    return <CardCallout {...this.props} content={content} className={this._classNames.root} />;\r\n  }\r\n\r\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\r\n    if (ev.which === KeyCodes.escape) {\r\n      this.props.onLeave && this.props.onLeave(ev);\r\n    }\r\n  };\r\n}\r\n"]}