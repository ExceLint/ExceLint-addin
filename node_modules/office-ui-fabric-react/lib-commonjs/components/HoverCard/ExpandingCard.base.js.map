{"version":3,"file":"ExpandingCard.base.js","sourceRoot":"../src/","sources":["components/HoverCard/ExpandingCard.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n\r\nimport { classNamesFunction, BaseComponent, KeyCodes } from '../../Utilities';\r\nimport { ExpandingCardMode, IExpandingCardProps, IExpandingCardStyles, IExpandingCardStyleProps } from './ExpandingCard.types';\r\nimport { CardCallout } from './CardCallout/CardCallout';\r\n\r\nconst getClassNames = classNamesFunction<IExpandingCardStyleProps, IExpandingCardStyles>();\r\n\r\nexport interface IExpandingCardState {\r\n  firstFrameRendered: boolean;\r\n  needsScroll: boolean;\r\n}\r\n\r\nexport class ExpandingCardBase extends BaseComponent<IExpandingCardProps, IExpandingCardState> {\r\n  public static defaultProps = {\r\n    compactCardHeight: 156,\r\n    expandedCardHeight: 384,\r\n    directionalHintFixed: true\r\n  };\r\n\r\n  private _classNames: { [key in keyof IExpandingCardStyles]: string };\r\n  private _expandedElem = React.createRef<HTMLDivElement>();\r\n\r\n  constructor(props: IExpandingCardProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      firstFrameRendered: false,\r\n      needsScroll: false\r\n    };\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this._checkNeedsScroll();\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    this._async.dispose();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { styles, compactCardHeight, expandedCardHeight, theme, mode, className } = this.props;\r\n    const { needsScroll, firstFrameRendered } = this.state;\r\n\r\n    const finalHeight = compactCardHeight! + expandedCardHeight!;\r\n\r\n    this._classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      compactCardHeight,\r\n      className,\r\n      expandedCardHeight,\r\n      needsScroll: needsScroll,\r\n      expandedCardFirstFrameRendered: mode === ExpandingCardMode.expanded && firstFrameRendered\r\n    });\r\n\r\n    const content: JSX.Element = (\r\n      <div onMouseEnter={this.props.onEnter} onMouseLeave={this.props.onLeave} onKeyDown={this._onKeyDown}>\r\n        {this._onRenderCompactCard()}\r\n        {this._onRenderExpandedCard()}\r\n      </div>\r\n    );\r\n\r\n    return <CardCallout {...this.props} content={content} finalHeight={finalHeight} className={this._classNames.root} />;\r\n  }\r\n\r\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\r\n    if (ev.which === KeyCodes.escape) {\r\n      this.props.onLeave && this.props.onLeave(ev);\r\n    }\r\n  };\r\n\r\n  private _onRenderCompactCard = (): JSX.Element => {\r\n    return <div className={this._classNames.compactCard}>{this.props.onRenderCompactCard!(this.props.renderData)}</div>;\r\n  };\r\n\r\n  private _onRenderExpandedCard = (): JSX.Element => {\r\n    // firstFrameRendered helps in initially setting height of expanded card to 1px, even if\r\n    // mode prop is set to ExpandingCardMode.expanded on first render. This is to make sure transition animation takes place.\r\n    !this.state.firstFrameRendered &&\r\n      this._async.requestAnimationFrame(() => {\r\n        this.setState({\r\n          firstFrameRendered: true\r\n        });\r\n      });\r\n\r\n    return (\r\n      <div className={this._classNames.expandedCard} ref={this._expandedElem}>\r\n        <div className={this._classNames.expandedCardScroll}>\r\n          {this.props.onRenderExpandedCard && this.props.onRenderExpandedCard(this.props.renderData)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private _checkNeedsScroll = (): void => {\r\n    const { expandedCardHeight } = this.props;\r\n    this._async.requestAnimationFrame(() => {\r\n      if (this._expandedElem.current && this._expandedElem.current.scrollHeight >= expandedCardHeight!) {\r\n        this.setState({\r\n          needsScroll: true\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n"]}