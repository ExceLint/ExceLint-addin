{"version":3,"file":"BaseCard.types.js","sourceRoot":"../src/","sources":["components/HoverCard/BaseCard.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\n\r\nimport { DirectionalHint } from '../../common/DirectionalHint';\r\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { IStyle, ITheme } from '../../Styling';\r\n\r\n/**\r\n * Interface containing props common for all types of cards.\r\n */\r\nexport interface IBaseCardProps<TComponent, TStyles, TStyleProps> extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * Optional callback to access the TComponent interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<TComponent>;\r\n\r\n  /**\r\n   * Additional CSS class(es) to apply to the Card content wrapper div.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * How the element should be positioned\r\n   * @defaultvalue DirectionalHint.bottomLeftEdge\r\n   */\r\n  directionalHint?: DirectionalHint;\r\n\r\n  /**\r\n   * Make callout content show on the set side\r\n   * @defaultvalue true\r\n   */\r\n  directionalHintFixed?: boolean;\r\n\r\n  /**\r\n   * Focus on first element by default on card or not\r\n   */\r\n  firstFocus?: boolean;\r\n\r\n  /**\r\n   * The gap between the card and the target\r\n   * @defaultvalue 0\r\n   */\r\n  gapSpace?: number;\r\n\r\n  /**\r\n   * Callback upon focus or mouse enter event\r\n   */\r\n  onEnter?: (ev?: any) => void;\r\n\r\n  /**\r\n   * Callback upon blur or mouse leave event\r\n   */\r\n  onLeave?: (ev?: any) => void;\r\n\r\n  /**\r\n   *  Item to be returned with onRender functions\r\n   */\r\n  renderData?: any;\r\n\r\n  /**\r\n   * Custom styles for this component\r\n   */\r\n  styles?: IStyleFunctionOrObject<TStyleProps, { [P in keyof TStyles]: IStyle }>;\r\n\r\n  /**\r\n   * Element to anchor the card to.\r\n   */\r\n  targetElement?: HTMLElement;\r\n\r\n  /**\r\n   * Theme provided by HOC.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Trap focus or not\r\n   */\r\n  trapFocus?: boolean;\r\n}\r\n\r\n/**\r\n * Interface containing styleProps common for all types of cards.\r\n */\r\nexport interface IBaseCardStyleProps {\r\n  /**\r\n   * ClassName to inject into wrapper div of the content.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme: ITheme;\r\n}\r\n\r\n/**\r\n * Interface containing style sections common for all types of cards.\r\n */\r\nexport interface IBaseCardStyles {\r\n  /**\r\n   * Style for the root element in the default enabled, non-toggled state.\r\n   */\r\n  root?: IStyle;\r\n}\r\n"]}