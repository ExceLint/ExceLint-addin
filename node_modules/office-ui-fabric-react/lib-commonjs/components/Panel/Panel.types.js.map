{"version":3,"file":"Panel.types.js","sourceRoot":"../src/","sources":["components/Panel/Panel.types.ts"],"names":[],"mappings":";;AA2NA,IAAY,SAwFX;AAxFD,WAAY,SAAS;IACnB;;;;;;;;OAQG;IACH,qDAAc,CAAA;IAEd;;;;;;;OAOG;IACH,2DAAiB,CAAA;IAEjB;;;;;;;OAOG;IACH,6DAAkB,CAAA;IAElB;;;;;;;OAOG;IACH,6CAAU,CAAA;IAEV;;;;;;;OAOG;IACH,2CAAS,CAAA;IAET;;;;;;;OAOG;IACH,qDAAc,CAAA;IAEd;;;;;;;;OAQG;IACH,qDAAc,CAAA;IAEd;;;;;OAKG;IACH,6CAAU,CAAA;IAEV;;;;;OAKG;IACH,qDAAc,CAAA;AAChB,CAAC,EAxFW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAwFpB","sourcesContent":["import * as React from 'react';\r\nimport { IFocusTrapZoneProps } from '../../FocusTrapZone';\r\nimport { ILayerProps } from '../../Layer';\r\nimport { IStyle, ITheme } from '../../Styling';\r\nimport { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { PanelBase } from './Panel.base';\r\n\r\nexport interface IPanel {\r\n  /**\r\n   * Forces the panel to open.\r\n   */\r\n  open: () => void;\r\n\r\n  /**\r\n   * Forces the panel to dismiss.\r\n   */\r\n  dismiss: (ev?: React.KeyboardEvent<HTMLElement>) => void;\r\n}\r\nexport interface IPanelProps extends React.HTMLAttributes<PanelBase> {\r\n  /**\r\n   * Optional callback to access the IPanel interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<IPanel>;\r\n\r\n  /**\r\n   * Whether the panel is displayed.\r\n   * @defaultvalue false\r\n   */\r\n  isOpen?: boolean;\r\n\r\n  /**\r\n   * Has the close button visible.\r\n   * @defaultvalue true\r\n   */\r\n  hasCloseButton?: boolean;\r\n\r\n  /**\r\n   * Whether the panel can be light dismissed.\r\n   * @defaultvalue false\r\n   */\r\n  isLightDismiss?: boolean;\r\n\r\n  /**\r\n   * Whether the panel is hidden on dismiss, instead of destroyed in the DOM.\r\n   * Protects the contents from being destroyed when the panel is dismissed.\r\n   * @defaultvalue false\r\n   */\r\n  isHiddenOnDismiss?: boolean;\r\n\r\n  /**\r\n   * Whether the panel uses a modal overlay or not\r\n   * @defaultvalue true\r\n   */\r\n  isBlocking?: boolean;\r\n\r\n  /**\r\n   * Determines if content should stretch to fill available space putting footer at the bottom of the page\r\n   * @defaultvalue false\r\n   */\r\n  isFooterAtBottom?: boolean;\r\n\r\n  /**\r\n   * Header text for the Panel.\r\n   * @defaultvalue \"\"\r\n   */\r\n  headerText?: string;\r\n\r\n  /**\r\n   * A callback function for when the panel is closed, before the animation completes.\r\n   * If the panel should NOT be dismissed based on some keyboard event, then simply call ev.preventDefault() on it\r\n   */\r\n  onDismiss?: (ev?: React.SyntheticEvent<HTMLElement>) => void;\r\n\r\n  /**\r\n   * A callback function which is called after the Panel is dismissed and the animation is complete.\r\n   */\r\n  onDismissed?: () => void;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;\r\n\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Additional css class to apply to the Panel\r\n   * @defaultvalue undefined\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Type of the panel.\r\n   * @defaultvalue PanelType.smallFixedRight\r\n   */\r\n  type?: PanelType;\r\n\r\n  /**\r\n   * Custom panel width, used only when `type` is set to `PanelType.custom`.\r\n   */\r\n  customWidth?: string;\r\n\r\n  /**\r\n   * Aria label on close button\r\n   */\r\n  closeButtonAriaLabel?: string;\r\n\r\n  /**\r\n   * Optional parameter to provider the class name for header text\r\n   */\r\n  headerClassName?: string;\r\n\r\n  /**\r\n   * Sets the HTMLElement to focus on when exiting the FocusTrapZone.\r\n   * @defaultvalue The element.target that triggered the Panel.\r\n   */\r\n  elementToFocusOnDismiss?: HTMLElement;\r\n\r\n  /**\r\n   * Indicates if this Panel will ignore keeping track of HTMLElement that activated the Zone.\r\n   * Deprecated, use `focusTrapZoneProps`.\r\n   * @defaultvalue false\r\n   * @deprecated Use `focusTrapZoneProps`.\r\n   */\r\n  ignoreExternalFocusing?: boolean;\r\n\r\n  /**\r\n   * Indicates whether Panel should force focus inside the focus trap zone.\r\n   * If not explicitly specified, behavior aligns with FocusTrapZone's default behavior.\r\n   * Deprecated, use `focusTrapZoneProps`.\r\n   * @deprecated Use `focusTrapZoneProps`.\r\n   */\r\n  forceFocusInsideTrap?: boolean;\r\n\r\n  /**\r\n   * Indicates the selector for first focusable item.\r\n   * Deprecated, use `focusTrapZoneProps`.\r\n   * @deprecated Use `focusTrapZoneProps`.\r\n   */\r\n  firstFocusableSelector?: string;\r\n\r\n  /**\r\n   * Optional props to pass to the FocusTrapZone component to manage focus in the panel.\r\n   */\r\n  focusTrapZoneProps?: IFocusTrapZoneProps;\r\n\r\n  /**\r\n   * Optional props to pass to the Layer component hosting the panel.\r\n   */\r\n  layerProps?: ILayerProps;\r\n\r\n  /**\r\n   * Optional custom function to handle clicks outside the panel in lightdismiss mode\r\n   */\r\n  onLightDismissClick?: () => void;\r\n\r\n  /**\r\n   * Optional custom function to handle clicks outside this component\r\n   */\r\n  onOuterClick?: () => void;\r\n\r\n  /**\r\n   * Optional custom renderer navigation region. Replaces the region that contains the close button.\r\n   */\r\n  onRenderNavigation?: IRenderFunction<IPanelProps>;\r\n\r\n  /**\r\n   * Optional custom renderer for content in the navigation region. Replaces current close button.\r\n   */\r\n  onRenderNavigationContent?: IRenderFunction<IPanelProps>;\r\n\r\n  /**\r\n   * Optional custom renderer for header region. Replaces current title\r\n   */\r\n  onRenderHeader?: IPanelHeaderRenderer;\r\n\r\n  /**\r\n   * Optional custom renderer for body region. Replaces any children passed into the component.\r\n   */\r\n  onRenderBody?: IRenderFunction<IPanelProps>;\r\n\r\n  /**\r\n   * Optional custom renderer for footer region. Replaces sticky footer.\r\n   */\r\n  onRenderFooter?: IRenderFunction<IPanelProps>;\r\n\r\n  /**\r\n   * Custom renderer for content in the sticky footer\r\n   */\r\n  onRenderFooterContent?: IRenderFunction<IPanelProps>;\r\n\r\n  /**\r\n   * Deprecated property. Serves no function.\r\n   * @deprecated Serves no function.\r\n   */\r\n  componentId?: string;\r\n}\r\n\r\n/**\r\n * Renderer function which takes an additional parameter, the ID to use for the element containing\r\n * the panel's title. This allows the `aria-labelledby` for the panel popup to work correctly.\r\n * Note that if `headerTextId` is provided, it **must** be used on an element, or screen readers\r\n * will be confused by the reference to a nonexistent ID.\r\n */\r\nexport interface IPanelHeaderRenderer extends IRenderFunction<IPanelProps> {\r\n  /**\r\n   * @param props - Props given to the panel\r\n   * @param defaultRender - Default header renderer. If using this renderer in code that does not\r\n   * assign `headerTextId` to an element elsewhere, it **must** be passed to this function.\r\n   * @param headerTextId - If provided, this **must** be used as the ID of an element containing the\r\n   * panel's title, because the panel popup uses this ID as its aria-labelledby.\r\n   */\r\n  (props?: IPanelProps, defaultRender?: IPanelHeaderRenderer, headerTextId?: string | undefined): JSX.Element | null;\r\n}\r\n\r\nexport enum PanelType {\r\n  /**\r\n   * Renders the Panel with a `fluid` (full screen) width.\r\n   * Recommended for use on small screen breakpoints.\r\n   * - Small (320-479): full screen width, 16px left/right padding\r\n   * - Medium (480-639): full screen width, 16px left/right padding\r\n   * - Large (640-1023): full screen width, 32px left/right padding\r\n   * - XLarge (1024-1365): full screen width, 32px left/right padding\r\n   * - XXLarge (1366-up): full screen width, 40px left/right padding\r\n   */\r\n  smallFluid = 0,\r\n\r\n  /**\r\n   * Renders the Panel in fixed-width `small` size, anchored to the far side (right in LTR mode).\r\n   * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\r\n   * - Medium (480-639): 340px width, 16px left/right padding\r\n   * - Large (640-1023): 340px width, 32px left/right padding\r\n   * - XLarge (1024-1365): 340px width, 32px left/right padding\r\n   * - XXLarge (1366-up): 340px width, 40px left/right padding\r\n   */\r\n  smallFixedFar = 1,\r\n\r\n  /**\r\n   * Renders the Panel in fixed-width `small` size, anchored to the near side (left in LTR mode).\r\n   * - Small (320-479): 272px width, 16px left/right padding\r\n   * - Medium (480-639): 272px width, 16px left/right padding\r\n   * - Large (640-1023): 272px width, 32px left/right padding\r\n   * - XLarge (1024-1365): 272px width, 32px left/right padding\r\n   * - XXLarge (1366-up): 272px width, 40px left/right padding\r\n   */\r\n  smallFixedNear = 2,\r\n\r\n  /**\r\n   * Renders the Panel in `medium` size, anchored to the far side (right in LTR mode).\r\n   * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\r\n   * - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint\r\n   * - Large (640-1023): 592px width, 32px left/right padding\r\n   * - XLarge (1024-1365): 644px width, 32px left/right padding\r\n   * - XXLarge (1366-up): 644px width, 40px left/right padding\r\n   */\r\n  medium = 3,\r\n\r\n  /**\r\n   * Renders the Panel in `large` size, anchored to the far side (right in LTR mode).\r\n   * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\r\n   * - Medium (480-639):  adapts to `PanelType.smallFixedFar` at this breakpoint\r\n   * - Large (640-1023): adapts to `PanelType.medium` at this breakpoint\r\n   * - XLarge (1024-1365): 48px fixed left margin, fluid width, 32px left/right padding\r\n   * - XXLarge (1366-up): 428px fixed left margin, fluid width, 40px left/right padding\r\n   */\r\n  large = 4,\r\n\r\n  /**\r\n   * Renders the Panel in `large` size, anchored to the far side (right in LTR mode), with a fixed width at XX-Large breakpoint.\r\n   * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\r\n   * - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint\r\n   * - Large (640-1023): adapts to `PanelType.medium` at this breakpoint\r\n   * - XLarge (1024-1365): 48px fixed left margin, fluid width, 32px left/right padding\r\n   * - XXLarge (1366-up): 940px width, 40px left/right padding\r\n   */\r\n  largeFixed = 5,\r\n\r\n  /**\r\n   * Renders the Panel in `extra large` size, anchored to the far side (right in LTR mode).\r\n   * - Small (320-479): adapts to `PanelType.smallFluid` at this breakpoint\r\n   * - Medium (480-639): adapts to `PanelType.smallFixedFar` at this breakpoint\r\n   * - Large (640-1023): adapts to `PanelType.medium` at this breakpoint\r\n   * - XLarge (1024-1365): adapts to `PanelType.large` at this breakpoint\r\n   * - XXLarge (1366-1919): 176px fixed left margin, fluid width, 40px left/right padding\r\n   * - XXXLarge (1920-up): 176px fixed left margin, fluid width, 40px left/right padding\r\n   */\r\n  extraLarge = 6,\r\n\r\n  /**\r\n   * Renders the Panel in `custom` size using `customWidth`, anchored to the far side (right in LTR mode).\r\n   * - Has a fixed width provided by the `customWidth` prop\r\n   * - When screen width reaches the `customWidth` value it will behave like a fluid width Panel\r\n   * taking up 100% of the viewport width\r\n   */\r\n  custom = 7,\r\n\r\n  /**\r\n   * Renders the Panel in `custom` size using `customWidth`, anchored to the near side (left in LTR mode).\r\n   * - Has a fixed width provided by the `customWidth` prop\r\n   * - When screen width reaches the `customWidth` value it will behave like a fluid width Panel\r\n   * taking up 100% of the viewport width\r\n   */\r\n  customNear = 8\r\n}\r\n\r\nexport interface IPanelStyleProps {\r\n  /**\r\n   * Theme provided by High-Order Component.\r\n   */\r\n  theme: ITheme;\r\n\r\n  /**\r\n   * Accept custom classNames\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Is Panel open\r\n   */\r\n  isOpen?: boolean;\r\n\r\n  /**\r\n   * Is animation currently running\r\n   */\r\n  isAnimating?: boolean;\r\n\r\n  /**\r\n   * Is panel on right side\r\n   */\r\n  isOnRightSide?: boolean;\r\n\r\n  /**\r\n   * Is panel hidden on dismiss\r\n   */\r\n  isHiddenOnDismiss?: boolean;\r\n\r\n  /**\r\n   * Classname for FocusTrapZone element\r\n   */\r\n  focusTrapZoneClassName?: string;\r\n\r\n  /**\r\n   * Determines if content should stretch to fill available space putting footer at the bottom of the page\r\n   */\r\n  isFooterAtBottom?: boolean;\r\n\r\n  /**\r\n   * Based on state value setting footer to sticky or not\r\n   */\r\n  isFooterSticky?: boolean;\r\n\r\n  /**\r\n   * Panel has close button\r\n   */\r\n  hasCloseButton?: boolean;\r\n\r\n  /**\r\n   * Type of the panel.\r\n   */\r\n  type?: PanelType;\r\n\r\n  /**\r\n   * Optional parameter to provider the class name for header text\r\n   */\r\n  headerClassName?: string;\r\n}\r\n\r\n// TODO -Issue #5689: Comment in once Button is converted to mergeStyles\r\n// export interface IPanelSubComponentStyles {\r\n//   /**\r\n//    * Styling for Icon child component.\r\n//    */\r\n//   // TODO: this should be the interface once we're on TS 2.9.2 but otherwise causes errors in 2.8.4\r\n//   // button: IStyleFunctionOrObject<IButtonStyleProps, IButtonStyles>;\r\n//   button: IStyleFunctionOrObject<any, any>;\r\n// }\r\n\r\nexport interface IPanelStyles {\r\n  /**\r\n   * Style for the root element.\r\n   */\r\n  root: IStyle;\r\n\r\n  /**\r\n   * Style for the overlay element.\r\n   */\r\n  overlay: IStyle;\r\n\r\n  /**\r\n   * Style for the hidden element.\r\n   */\r\n  hiddenPanel: IStyle;\r\n\r\n  /**\r\n   * Style for the main section element.\r\n   */\r\n  main: IStyle;\r\n\r\n  /**\r\n   * Style for the navigation container element.\r\n   */\r\n  commands: IStyle;\r\n\r\n  /**\r\n   * Style for the Body and Footer container element.\r\n   */\r\n  contentInner: IStyle;\r\n\r\n  /**\r\n   * Style for the scrollable content area container element.\r\n   */\r\n  scrollableContent: IStyle;\r\n\r\n  /**\r\n   * Style for the close button container element.\r\n   */\r\n  navigation: IStyle;\r\n\r\n  /**\r\n   * Style for the close button IconButton element.\r\n   */\r\n  closeButton: IStyle;\r\n\r\n  /**\r\n   * Style for the header container div element.\r\n   */\r\n  header: IStyle;\r\n\r\n  /**\r\n   * Style for the header inner p element.\r\n   */\r\n  headerText: IStyle;\r\n\r\n  /**\r\n   * Style for the body div element.\r\n   */\r\n  content: IStyle;\r\n\r\n  /**\r\n   * Style for the footer div element.\r\n   */\r\n  footer: IStyle;\r\n\r\n  /**\r\n   * Style for the inner footer div element.\r\n   */\r\n  footerInner: IStyle;\r\n\r\n  // TODO -Issue #5689: Comment in once Button is converted to mergeStyles\r\n  /**\r\n   * Styling for subcomponents.\r\n   */\r\n  // subComponentStyles: IPanelSubComponentStyles;\r\n}\r\n"]}