{"version":3,"file":"Spinner.base.js","sourceRoot":"../src/","sources":["components/Spinner/Spinner.base.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,iDAA8G;AAC9G,6CAAkH;AAElH,IAAM,aAAa,GAAG,8BAAkB,EAAsC,CAAC;AAE/E;IAAiC,uCAAiC;IAAlE;;IAwCA,CAAC;IAjCQ,4BAAM,GAAb;QACQ,IAAA,eAAgG,EAA9F,cAAI,EAAE,cAAI,EAAE,wBAAS,EAAE,sBAAQ,EAAE,kBAAM,EAAE,gBAAK,EAAE,gBAAK,EAAE,wBAAS,EAAE,gCAAa,CAAgB;QACvG,IAAM,aAAa,GAAG,SAAS,IAAI,KAAK,CAAC;QACzC,IAAM,WAAW,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAExE,uIAAuI;QACvI,kIAAkI;QAClI,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,SAAS,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;YACjD,SAAS,GAAG,IAAI,KAAK,2BAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAAW,CAAC,MAAM,CAAC;SACjF;QAED,IAAM,UAAU,GAAG,aAAa,CAAC,MAAO,EAAE;YACxC,KAAK,EAAE,KAAM;YACb,IAAI,EAAE,SAAS;YACf,SAAS,WAAA;YACT,aAAa,eAAA;SACd,CAAC,CAAC;QAEH,OAAO,CACL,gDAAS,WAAW,IAAE,SAAS,EAAE,UAAU,CAAC,IAAI;YAC9C,6BAAK,SAAS,EAAE,UAAU,CAAC,MAAM,GAAI;YACpC,KAAK,IAAI,6BAAK,SAAS,EAAE,UAAU,CAAC,KAAK,IAAG,KAAK,CAAO;YACxD,aAAa,IAAI,CAChB,6BAAK,IAAI,EAAC,QAAQ,eAAY,QAAQ;gBACpC,oBAAC,yBAAa;oBACZ,6BAAK,SAAS,EAAE,UAAU,CAAC,gBAAgB,IAAG,aAAa,CAAO,CACpD,CACZ,CACP,CACG,CACP,CAAC;IACJ,CAAC;IAtCa,wBAAY,GAAkB;QAC1C,IAAI,EAAE,2BAAW,CAAC,MAAM;QACxB,QAAQ,EAAE,QAAQ;QAClB,aAAa,EAAE,QAAQ;KACxB,CAAC;IAmCJ,kBAAC;CAAA,AAxCD,CAAiC,yBAAa,GAwC7C;AAxCY,kCAAW","sourcesContent":["import * as React from 'react';\r\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\r\nimport { BaseComponent, classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\r\n\r\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\r\n\r\nexport class SpinnerBase extends BaseComponent<ISpinnerProps, any> {\r\n  public static defaultProps: ISpinnerProps = {\r\n    size: SpinnerSize.medium,\r\n    ariaLive: 'polite',\r\n    labelPosition: 'bottom'\r\n  };\r\n\r\n  public render() {\r\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\r\n    const statusMessage = ariaLabel || label;\r\n    const nativeProps = getNativeProps(this.props, divProperties, ['size']);\r\n\r\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the ISpinnerStyleProps,\r\n    // we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType finally goes away we should delete this.\r\n    let styleSize = size;\r\n    if (styleSize === undefined && type !== undefined) {\r\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\r\n    }\r\n\r\n    const classNames = getClassNames(styles!, {\r\n      theme: theme!,\r\n      size: styleSize,\r\n      className,\r\n      labelPosition\r\n    });\r\n\r\n    return (\r\n      <div {...nativeProps} className={classNames.root}>\r\n        <div className={classNames.circle} />\r\n        {label && <div className={classNames.label}>{label}</div>}\r\n        {statusMessage && (\r\n          <div role=\"status\" aria-live={ariaLive}>\r\n            <DelayedRender>\r\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\r\n            </DelayedRender>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}