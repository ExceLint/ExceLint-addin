{"version":3,"file":"MaskedTextField.js","sourceRoot":"../src/","sources":["components/TextField/MaskedTextField/MaskedTextField.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { TextField } from '../TextField';\r\nimport { ITextField, ITextFieldProps } from '../TextField.types';\r\nimport { autobind, BaseComponent, KeyCodes } from '../../../Utilities';\r\n\r\nimport {\r\n  clearNext,\r\n  clearPrev,\r\n  clearRange,\r\n  DEFAULT_MASK_FORMAT_CHARS,\r\n  getLeftFormatIndex,\r\n  getMaskDisplay,\r\n  getRightFormatIndex,\r\n  IMaskValue,\r\n  insertString,\r\n  parseMask\r\n} from './inputMask';\r\n\r\n/**\r\n * State for the MaskedTextField component.\r\n */\r\nexport interface IMaskedTextFieldState {\r\n  /**\r\n   * The mask string formatted with the input value.\r\n   * This is what is displayed inside the TextField\r\n   * @example\r\n   *  `Phone Number: 12_ - 4___`\r\n   */\r\n  displayValue: string;\r\n  /** The index into the rendered value of the first unfilled format character */\r\n  maskCursorPosition?: number;\r\n}\r\n\r\nexport const DEFAULT_MASK_CHAR = '_';\r\n\r\ntype InputChangeType = 'default' | 'backspace' | 'delete' | 'textPasted';\r\n\r\nexport class MaskedTextField extends BaseComponent<ITextFieldProps, IMaskedTextFieldState> implements ITextField {\r\n  public static defaultProps: ITextFieldProps = {\r\n    maskChar: DEFAULT_MASK_CHAR,\r\n    maskFormat: DEFAULT_MASK_FORMAT_CHARS\r\n  };\r\n  /**\r\n   * Tell BaseComponent to bypass resolution of componentRef.\r\n   */\r\n  protected _skipComponentRefResolution = true;\r\n\r\n  private _textField: ITextField;\r\n  /**\r\n   *  An array of data containing information regarding the format characters,\r\n   *  their indices inside the display text, and their corresponding values.\r\n   * @example\r\n   * ```\r\n   *  [\r\n   *    { value: '1', displayIndex: 16, format: /[0-9]/ },\r\n   *    { value: '2', displayIndex: 17, format: /[0-9]/ },\r\n   *    { displayIndex: 18, format: /[0-9]/ },\r\n   *    { value: '4', displayIndex: 22, format: /[0-9]/ },\r\n   *    ...\r\n   *  ]\r\n   * ```\r\n   */\r\n  private _maskCharData: IMaskValue[];\r\n  /** True if the TextField is focused */\r\n  private _isFocused: boolean;\r\n  /** True if the TextField was not focused and it was clicked into */\r\n  private _moveCursorOnMouseUp: boolean;\r\n\r\n  /** The stored selection data prior to input change events. */\r\n  private _changeSelectionData: {\r\n    changeType: InputChangeType;\r\n    selectionStart: number;\r\n    selectionEnd: number;\r\n  } | null;\r\n\r\n  constructor(props: ITextFieldProps) {\r\n    super(props);\r\n\r\n    // Translate mask into charData\r\n    this._maskCharData = parseMask(props.mask, props.maskFormat);\r\n    // If an initial value is provided, use it to populate the format chars\r\n    props.value && this.setValue(props.value);\r\n\r\n    this._isFocused = false;\r\n    this._moveCursorOnMouseUp = false;\r\n\r\n    this.state = {\r\n      displayValue: getMaskDisplay(props.mask, this._maskCharData, props.maskChar)\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ITextFieldProps) {\r\n    if (newProps.mask !== this.props.mask) {\r\n      this._maskCharData = parseMask(newProps.mask, newProps.maskFormat);\r\n      this.state = {\r\n        displayValue: getMaskDisplay(newProps.mask, this._maskCharData, newProps.maskChar)\r\n      };\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    // Move the cursor to the start of the mask format on update\r\n    if (this.state.maskCursorPosition !== undefined) {\r\n      this._textField.setSelectionRange(this.state.maskCursorPosition, this.state.maskCursorPosition);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <TextField\r\n        {...this.props}\r\n        onFocus={this._onFocus}\r\n        onBlur={this._onBlur}\r\n        onMouseDown={this._onMouseDown}\r\n        onMouseUp={this._onMouseUp}\r\n        onChange={this._onInputChange}\r\n        onBeforeChange={this._onBeforeChange}\r\n        onKeyDown={this._onKeyDown}\r\n        onPaste={this._onPaste}\r\n        value={this.state.displayValue}\r\n        componentRef={this._resolveRef('_textField')}\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns The value of all filled format characters or undefined if not all format characters are filled\r\n   */\r\n  public get value(): string | undefined {\r\n    let value = '';\r\n\r\n    for (let i = 0; i < this._maskCharData.length; i++) {\r\n      if (!this._maskCharData[i].value) {\r\n        return undefined;\r\n      }\r\n      value += this._maskCharData[i].value;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  public setValue(newValue: string): void {\r\n    let valueIndex = 0,\r\n      charDataIndex = 0;\r\n\r\n    while (valueIndex < newValue.length && charDataIndex < this._maskCharData.length) {\r\n      // Test if the next character in the new value fits the next format character\r\n      const testVal = newValue[valueIndex];\r\n      if (this._maskCharData[charDataIndex].format.test(testVal)) {\r\n        this._maskCharData[charDataIndex].value = testVal;\r\n        charDataIndex++;\r\n      }\r\n      valueIndex++;\r\n    }\r\n  }\r\n\r\n  public focus(): void {\r\n    this._textField && this._textField.focus();\r\n  }\r\n\r\n  public blur(): void {\r\n    this._textField && this._textField.blur();\r\n  }\r\n\r\n  public select(): void {\r\n    this._textField && this._textField.select();\r\n  }\r\n\r\n  public setSelectionStart(value: number): void {\r\n    this._textField && this._textField.setSelectionStart(value);\r\n  }\r\n\r\n  public setSelectionEnd(value: number): void {\r\n    this._textField && this._textField.setSelectionEnd(value);\r\n  }\r\n\r\n  public setSelectionRange(start: number, end: number): void {\r\n    this._textField && this._textField.setSelectionRange(start, end);\r\n  }\r\n\r\n  public get selectionStart(): number | null {\r\n    return this._textField && this._textField.selectionStart !== null ? this._textField.selectionStart : -1;\r\n  }\r\n\r\n  public get selectionEnd(): number | null {\r\n    return this._textField && this._textField.selectionEnd ? this._textField.selectionEnd : -1;\r\n  }\r\n\r\n  @autobind\r\n  private _onFocus(event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(event);\r\n    }\r\n\r\n    this._isFocused = true;\r\n\r\n    // Move the cursor position to the leftmost unfilled position\r\n    for (let i = 0; i < this._maskCharData.length; i++) {\r\n      if (!this._maskCharData[i].value) {\r\n        this.setState({\r\n          maskCursorPosition: this._maskCharData[i].displayIndex\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onBlur(event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(event);\r\n    }\r\n\r\n    this._isFocused = false;\r\n    this._moveCursorOnMouseUp = true;\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseDown(event: React.MouseEvent<HTMLInputElement>) {\r\n    if (this.props.onMouseDown) {\r\n      this.props.onMouseDown(event);\r\n    }\r\n\r\n    if (!this._isFocused) {\r\n      this._moveCursorOnMouseUp = true;\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseUp(event: React.MouseEvent<HTMLInputElement>) {\r\n    if (this.props.onMouseUp) {\r\n      this.props.onMouseUp(event);\r\n    }\r\n\r\n    // Move the cursor on mouseUp after focusing the textField\r\n    if (this._moveCursorOnMouseUp) {\r\n      this._moveCursorOnMouseUp = false;\r\n      // Move the cursor position to the rightmost unfilled position\r\n      for (let i = 0; i < this._maskCharData.length; i++) {\r\n        if (!this._maskCharData[i].value) {\r\n          this.setState({\r\n            maskCursorPosition: this._maskCharData[i].displayIndex\r\n          });\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onBeforeChange(value: string) {\r\n    if (this.props.onBeforeChange) {\r\n      this.props.onBeforeChange(value);\r\n    }\r\n\r\n    if (this._changeSelectionData === null) {\r\n      this._changeSelectionData = {\r\n        changeType: 'default',\r\n        selectionStart: this._textField.selectionStart !== null ? this._textField.selectionStart : -1,\r\n        selectionEnd: this._textField.selectionEnd !== null ? this._textField.selectionEnd : -1\r\n      };\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onInputChange(ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, value: string) {\r\n    if (!this._changeSelectionData) {\r\n      return;\r\n    }\r\n\r\n    const { displayValue } = this.state;\r\n\r\n    // The initial value of cursorPos does not matter\r\n    let cursorPos = 0;\r\n    const { changeType, selectionStart, selectionEnd } = this._changeSelectionData;\r\n\r\n    if (changeType === 'textPasted') {\r\n      const charsSelected = selectionEnd - selectionStart,\r\n        charCount = value.length + charsSelected - displayValue.length,\r\n        startPos = selectionStart,\r\n        pastedString = value.substr(startPos, charCount);\r\n\r\n      // Clear any selected characters\r\n      if (charsSelected) {\r\n        this._maskCharData = clearRange(this._maskCharData, selectionStart, charsSelected);\r\n      }\r\n      cursorPos = insertString(this._maskCharData, startPos, pastedString);\r\n    } else if (changeType === 'delete' || changeType === 'backspace') {\r\n      // isDel is true If the characters are removed LTR, otherwise RTL\r\n      const isDel = changeType === 'delete',\r\n        charCount = selectionEnd - selectionStart;\r\n\r\n      if (charCount) {\r\n        // charCount is > 0 if range was deleted\r\n        this._maskCharData = clearRange(this._maskCharData, selectionStart, charCount);\r\n        cursorPos = getRightFormatIndex(this._maskCharData, selectionStart);\r\n      } else {\r\n        // If charCount === 0, there was no selection and a single character was deleted\r\n        if (isDel) {\r\n          this._maskCharData = clearNext(this._maskCharData, selectionStart);\r\n          cursorPos = getRightFormatIndex(this._maskCharData, selectionStart);\r\n        } else {\r\n          this._maskCharData = clearPrev(this._maskCharData, selectionStart);\r\n          cursorPos = getLeftFormatIndex(this._maskCharData, selectionStart);\r\n        }\r\n      }\r\n    } else if (value.length > displayValue.length) {\r\n      // This case is if the user added characters\r\n      const charCount = value.length - displayValue.length,\r\n        startPos = selectionEnd - charCount,\r\n        enteredString = value.substr(startPos, charCount);\r\n\r\n      cursorPos = insertString(this._maskCharData, startPos, enteredString);\r\n    } else if (value.length <= displayValue.length) {\r\n      /**\r\n       * This case is reached only if the user has selected a block of 1 or more\r\n       * characters and input a character replacing the characters they've selected.\r\n       */\r\n      const charCount = 1,\r\n        selectCount = displayValue.length + charCount - value.length,\r\n        startPos = selectionEnd - charCount,\r\n        enteredString = value.substr(startPos, charCount);\r\n\r\n      // Clear the selected range\r\n      this._maskCharData = clearRange(this._maskCharData, startPos, selectCount);\r\n      // Insert the printed character\r\n      cursorPos = insertString(this._maskCharData, startPos, enteredString);\r\n    }\r\n\r\n    this._changeSelectionData = null;\r\n\r\n    const newValue = getMaskDisplay(this.props.mask, this._maskCharData, this.props.maskChar);\r\n\r\n    this.setState({\r\n      displayValue: newValue,\r\n      maskCursorPosition: cursorPos\r\n    });\r\n\r\n    // Perform onChange/d after input has been processed. Return value is expected to be the displayed text\r\n    if (this.props.onChange) {\r\n      this.props.onChange(ev, newValue);\r\n    }\r\n\r\n    if (this.props.onChanged) {\r\n      this.props.onChanged(newValue);\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {\r\n    if (this.props.onKeyDown) {\r\n      this.props.onKeyDown(event);\r\n    }\r\n\r\n    this._changeSelectionData = null;\r\n    if (this._textField.value) {\r\n      const { keyCode, ctrlKey, metaKey } = event;\r\n\r\n      // Ignore ctrl and meta keydown\r\n      if (ctrlKey || metaKey) {\r\n        return;\r\n      }\r\n\r\n      // On backspace or delete, store the selection and the keyCode\r\n      if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\r\n        const selectionStart = (event.target as HTMLInputElement).selectionStart,\r\n          selectionEnd = (event.target as HTMLInputElement).selectionEnd;\r\n\r\n        // Check if backspace or delete press is valid.\r\n        if (\r\n          !(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&\r\n          !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < this._textField.value.length)\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        this._changeSelectionData = {\r\n          changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\r\n          selectionStart: selectionStart !== null ? selectionStart : -1,\r\n          selectionEnd: selectionEnd !== null ? selectionEnd : -1\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onPaste(event: React.ClipboardEvent<HTMLInputElement>) {\r\n    if (this.props.onPaste) {\r\n      this.props.onPaste(event);\r\n    }\r\n\r\n    const selectionStart = (event.target as HTMLInputElement).selectionStart,\r\n      selectionEnd = (event.target as HTMLInputElement).selectionEnd;\r\n    // Store the paste selection range\r\n    this._changeSelectionData = {\r\n      changeType: 'textPasted',\r\n      selectionStart: selectionStart !== null ? selectionStart : -1,\r\n      selectionEnd: selectionEnd !== null ? selectionEnd : -1\r\n    };\r\n  }\r\n}\r\n"]}