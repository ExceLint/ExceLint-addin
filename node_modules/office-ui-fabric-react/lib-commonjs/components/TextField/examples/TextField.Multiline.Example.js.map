{"version":3,"file":"TextField.Multiline.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.Multiline.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,kEAAiE;AACjE,gFAAyE;AACzE,0DAAsE;AAMtE;IAA+C,qDAAoD;IAAnG;QAAA,qEAqCC;QApCQ,WAAK,GAAoC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;QAC7D,YAAM,GAAW,mBAAK,CAAC,GAAG,CAAC,CAAC;QA6B5B,eAAS,GAAG,UAAC,EAAO,EAAE,OAAe;YAC3C,IAAM,YAAY,GAAG,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;YACzC,IAAI,YAAY,KAAK,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE;gBACzC,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC;;IACJ,CAAC;IAjCQ,0CAAM,GAAb;QACE,gFAAgF;QAChF,IAAM,WAAW,GAAyB;YACxC,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE;YAC3B,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;SACjC,CAAC;QAEF,OAAO,CACL,oBAAC,aAAK,IAAC,UAAU,QAAC,MAAM,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;YAC7E,oBAAC,aAAK,uBAAK,WAAW;gBACpB,oBAAC,qBAAS,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,GAAI;gBACjD,oBAAC,qBAAS,IAAC,KAAK,EAAC,UAAU,EAAC,SAAS,QAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,QAAC,YAAY,EAAE,IAAI,CAAC,MAAM,GAAI;gBACrF,oBAAC,qBAAS,IAAC,KAAK,EAAC,eAAe,EAAC,SAAS,QAAC,SAAS,EAAE,KAAK,GAAI,CACzD;YAER,oBAAC,aAAK,uBAAK,WAAW;gBACpB,oBAAC,qBAAS,IAAC,KAAK,EAAC,4BAA4B,EAAC,SAAS,QAAC,gBAAgB,SAAG;gBAC3E,oBAAC,qBAAS,IACR,KAAK,EAAC,0EAA0E,EAChF,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,EAC/B,QAAQ,EAAE,IAAI,CAAC,SAAS,GACxB,CACI,CACF,CACT,CAAC;IACJ,CAAC;IAQH,gCAAC;AAAD,CAAC,AArCD,CAA+C,KAAK,CAAC,SAAS,GAqC7D;AArCY,8DAAyB","sourcesContent":["import * as React from 'react';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { lorem } from 'office-ui-fabric-react/lib/utilities/exampleData';\r\nimport { Stack, IStackProps } from 'office-ui-fabric-react/lib/Stack';\r\n\r\nexport interface ITextFieldMultilineExampleState {\r\n  multiline: boolean;\r\n}\r\n\r\nexport class TextFieldMultilineExample extends React.Component<{}, ITextFieldMultilineExampleState> {\r\n  public state: ITextFieldMultilineExampleState = { multiline: false };\r\n  private _lorem: string = lorem(100);\r\n\r\n  public render(): JSX.Element {\r\n    // TextFields don't have to be inside Stacks, we're just using Stacks for layout\r\n    const columnProps: Partial<IStackProps> = {\r\n      tokens: { childrenGap: 15 },\r\n      styles: { root: { width: 300 } }\r\n    };\r\n\r\n    return (\r\n      <Stack horizontal tokens={{ childrenGap: 50 }} styles={{ root: { width: 650 } }}>\r\n        <Stack {...columnProps}>\r\n          <TextField label=\"Standard\" multiline rows={3} />\r\n          <TextField label=\"Disabled\" multiline rows={3} disabled defaultValue={this._lorem} />\r\n          <TextField label=\"Non-resizable\" multiline resizable={false} />\r\n        </Stack>\r\n\r\n        <Stack {...columnProps}>\r\n          <TextField label=\"With auto adjusting height\" multiline autoAdjustHeight />\r\n          <TextField\r\n            label=\"Switches from single to multiline if more than 50 characters are entered\"\r\n            multiline={this.state.multiline}\r\n            onChange={this._onChange}\r\n          />\r\n        </Stack>\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private _onChange = (ev: any, newText: string): void => {\r\n    const newMultiline = newText.length > 50;\r\n    if (newMultiline !== this.state.multiline) {\r\n      this.setState({ multiline: newMultiline });\r\n    }\r\n  };\r\n}\r\n"]}