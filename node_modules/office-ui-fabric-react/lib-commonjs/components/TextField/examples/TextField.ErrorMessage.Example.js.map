{"version":3,"file":"TextField.ErrorMessage.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.ErrorMessage.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Promise } from 'es6-promise';\r\nimport * as React from 'react';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\r\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\r\n\r\nexport interface ITextFieldErrorMessageExampleState {\r\n  /**\r\n   * Screen readers will read all errors on a page as soon as they are present,\r\n   * making this demo potentially unpleasant when using a screen reader.\r\n   * Not rendering the controls by default makes for a more pleasant experience.\r\n   */\r\n  showFields: boolean;\r\n}\r\n\r\nexport class TextFieldErrorMessageExample extends React.Component<{}, ITextFieldErrorMessageExampleState> {\r\n  public state: ITextFieldErrorMessageExampleState = {\r\n    showFields: false\r\n  };\r\n\r\n  public render(): JSX.Element {\r\n    const { showFields } = this.state;\r\n\r\n    return (\r\n      <Stack tokens={{ childrenGap: 20 }} maxWidth={350}>\r\n        <Toggle label=\"Show text fields\" inlineLabel checked={showFields} onChange={this._toggleShowFields} />\r\n        {showFields && (\r\n          <>\r\n            <strong>Hint: the input length must be less than 3.</strong>\r\n\r\n            <TextField label=\"String-based validation\" onGetErrorMessage={this._getErrorMessage} />\r\n            <TextField label=\"Promise-based validation\" onGetErrorMessage={this._getErrorMessagePromise} />\r\n            <TextField\r\n              label=\"String-based validation on render\"\r\n              defaultValue=\"Shows an error message on render\"\r\n              onGetErrorMessage={this._getErrorMessage}\r\n            />\r\n            <TextField\r\n              label=\"String-based validation only on change\"\r\n              defaultValue=\"Validates only on input change, not on render\"\r\n              onGetErrorMessage={this._getErrorMessage}\r\n              validateOnLoad={false}\r\n            />\r\n            <TextField\r\n              label=\"Promise-based validation\"\r\n              defaultValue=\"Shows an error message 5 seconds after render\"\r\n              onGetErrorMessage={this._getErrorMessagePromise}\r\n            />\r\n            <TextField\r\n              label=\"Both description and error message\"\r\n              defaultValue=\"Shows description and error message on render\"\r\n              description=\"Field description\"\r\n              onGetErrorMessage={this._getErrorMessage}\r\n            />\r\n            <TextField\r\n              label=\"Deferred string-based validation\"\r\n              placeholder=\"Validates after user stops typing for 2 seconds\"\r\n              onGetErrorMessage={this._getErrorMessage}\r\n              deferredValidationTime={2000}\r\n            />\r\n            <TextField\r\n              label=\"Validates only on focus and blur\"\r\n              placeholder=\"Validates only on input focus and blur\"\r\n              onGetErrorMessage={this._getErrorMessage}\r\n              validateOnFocusIn\r\n              validateOnFocusOut\r\n            />\r\n            <TextField\r\n              label=\"Validates only on blur\"\r\n              placeholder=\"Validates only on input blur\"\r\n              onGetErrorMessage={this._getErrorMessage}\r\n              validateOnFocusOut\r\n            />\r\n            <TextField\r\n              label=\"Underlined field:\"\r\n              defaultValue=\"This value is too long\"\r\n              underlined\r\n              onGetErrorMessage={this._getErrorMessage}\r\n            />\r\n            <TextField\r\n              label=\"Uses the errorMessage property to set an error state\"\r\n              placeholder=\"This field always has an error\"\r\n              errorMessage=\"This is a statically set error message\"\r\n            />\r\n          </>\r\n        )}\r\n      </Stack>\r\n    );\r\n  }\r\n\r\n  private _toggleShowFields = (_: any, displayEnabled: boolean) => {\r\n    this.setState({ showFields: displayEnabled });\r\n  };\r\n\r\n  private _getErrorMessage = (value: string): string => {\r\n    return value.length < 3 ? '' : `Input value length must be less than 3. Actual length is ${value.length}.`;\r\n  };\r\n\r\n  private _getErrorMessagePromise = (value: string): Promise<string> => {\r\n    return new Promise(resolve => {\r\n      // resolve the promise after 3 second.\r\n      setTimeout(() => resolve(this._getErrorMessage(value)), 5000);\r\n    });\r\n  };\r\n}\r\n"]}