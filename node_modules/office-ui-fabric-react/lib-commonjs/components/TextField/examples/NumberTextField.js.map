{"version":3,"file":"NumberTextField.js","sourceRoot":"../src/","sources":["components/TextField/examples/NumberTextField.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,4DAAkE;AAClE,kEAAiE;AAWjE;IAAqC,2CAA6D;IAChG,yBAAY,KAA4B;QAAxC,YACE,kBAAM,KAAK,CAAC,SASb;QAPC,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QACzC,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAC3C,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;QAEvD,KAAI,CAAC,KAAK,GAAG;YACX,KAAK,EAAE,KAAK,CAAC,YAAY;SAC1B,CAAC;;IACJ,CAAC;IAEM,gCAAM,GAAb;QACE,OAAO,CACL,6BAAK,SAAS,EAAC,iBAAiB;YAC9B,oBAAC,qBAAS,IACR,SAAS,EAAC,2BAA2B,EACrC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,QAAQ,EAAE,IAAI,CAAC,SAAS,EACxB,iBAAiB,EAAE,IAAI,CAAC,eAAe,GACvC;YACF,6BAAK,SAAS,EAAC,+BAA+B;gBAC5C,oBAAC,sBAAa,IAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,cAAyB,CAC1D,CACF,CACP,CAAC;IACJ,CAAC;IAEO,yCAAe,GAAvB,UAAwB,KAAa;QACnC,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,6CAA2C,KAAK,MAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IACzF,CAAC;IAEO,mCAAS,GAAjB,UAAkB,EAA2D,EAAE,KAAa;QAC1F,OAAO,IAAI,CAAC,QAAQ,CAAC;YACnB,KAAK,OAAA;SACN,CAAC,CAAC;IACL,CAAC;IAEO,kCAAQ,GAAhB;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;SAC/B,CAAC,CAAC;IACL,CAAC;IACH,sBAAC;AAAD,CAAC,AA7CD,CAAqC,KAAK,CAAC,SAAS,GA6CnD;AA7CY,0CAAe","sourcesContent":["import * as React from 'react';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\n\r\nexport interface INumberTextFieldProps {\r\n  label: string;\r\n  initialValue: string;\r\n}\r\n\r\nexport interface INumberTextFieldState {\r\n  value: string;\r\n}\r\n\r\nexport class NumberTextField extends React.Component<INumberTextFieldProps, INumberTextFieldState> {\r\n  constructor(props: INumberTextFieldProps) {\r\n    super(props);\r\n\r\n    this._restore = this._restore.bind(this);\r\n    this._onChange = this._onChange.bind(this);\r\n    this._validateNumber = this._validateNumber.bind(this);\r\n\r\n    this.state = {\r\n      value: props.initialValue\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"NumberTextField\">\r\n        <TextField\r\n          className=\"NumberTextField-textField\"\r\n          label={this.props.label}\r\n          value={this.state.value}\r\n          onChange={this._onChange}\r\n          onGetErrorMessage={this._validateNumber}\r\n        />\r\n        <div className=\"NumberTextField-restoreButton\">\r\n          <DefaultButton onClick={this._restore}>Restore</DefaultButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _validateNumber(value: string): string {\r\n    return isNaN(Number(value)) ? `The value should be a number, actual is ${value}.` : '';\r\n  }\r\n\r\n  private _onChange(ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, value: string): void {\r\n    return this.setState({\r\n      value\r\n    });\r\n  }\r\n\r\n  private _restore(): void {\r\n    this.setState({\r\n      value: this.props.initialValue\r\n    });\r\n  }\r\n}\r\n"]}