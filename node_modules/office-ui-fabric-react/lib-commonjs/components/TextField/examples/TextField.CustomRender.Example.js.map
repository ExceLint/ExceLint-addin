{"version":3,"file":"TextField.CustomRender.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.CustomRender.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,kEAAkF;AAClF,4DAA+D;AAC/D,8DAA6D;AAC7D,qCAAmC;AAEnC;IAAkD,wDAKjD;IAGC,sCAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAKb;QAUO,oBAAc,GAAG,UAAC,KAAsB;YACtC,IAAA,+CAAgB,CAAgB;YACxC,OAAO,CACL,6BAAK,SAAS,EAAC,wBAAwB,EAAC,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE;gBACtF,uEAA+C;gBAC/C,8BAAM,SAAS,EAAC,sCAAsC,EAAC,GAAG,EAAE,UAAA,UAAU,IAAI,OAAA,CAAC,KAAI,CAAC,kBAAkB,GAAG,UAAW,CAAC,EAAvC,CAAuC;oBAC/G,oBAAC,mBAAU,IAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,KAAK,EAAC,MAAM,EAAC,SAAS,EAAC,MAAM,EAAC,OAAO,EAAE,KAAI,CAAC,QAAQ,GAAI,CAChG;gBACN,gBAAgB,IAAI,CACnB,oBAAC,iBAAO,IAAC,SAAS,EAAC,gCAAgC,EAAC,MAAM,EAAE,KAAI,CAAC,kBAAkB,EAAE,SAAS,EAAE,KAAI,CAAC,UAAU;oBAC7G,oJAA4H,CACpH,CACX,CACG,CACP,CAAC;QACJ,CAAC,CAAC;QAEM,cAAQ,GAAG;YACjB,KAAI,CAAC,QAAQ,CAAC;gBACZ,gBAAgB,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,gBAAgB;aAC/C,CAAC,CAAC;QACL,CAAC,CAAC;QAEM,gBAAU,GAAG;YACnB,KAAI,CAAC,QAAQ,CAAC;gBACZ,gBAAgB,EAAE,KAAK;aACxB,CAAC,CAAC;QACL,CAAC,CAAC;QAxCA,KAAI,CAAC,KAAK,GAAG;YACX,gBAAgB,EAAE,KAAK;SACxB,CAAC;;IACJ,CAAC;IAEM,6CAAM,GAAb;QACE,OAAO,CACL,6BAAK,SAAS,EAAC,uBAAuB;YACpC,oBAAC,qBAAS,IAAC,aAAa,EAAE,IAAI,CAAC,cAAc,GAAI,CAC7C,CACP,CAAC;IACJ,CAAC;IA8BH,mCAAC;AAAD,CAAC,AApDD,CAAkD,KAAK,CAAC,SAAS,GAoDhE;AApDY,oEAA4B","sourcesContent":["import * as React from 'react';\r\nimport { TextField, ITextFieldProps } from 'office-ui-fabric-react/lib/TextField';\r\nimport { IconButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { Callout } from 'office-ui-fabric-react/lib/Callout';\r\nimport './TextField.Examples.scss';\r\n\r\nexport class TextFieldCustomRenderExample extends React.Component<\r\n  {},\r\n  {\r\n    isCalloutVisible: boolean;\r\n  }\r\n> {\r\n  private _iconButtonElement: HTMLElement;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isCalloutVisible: false\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"docs-TextFieldExample\">\r\n        <TextField onRenderLabel={this._onRenderLabel} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element => {\r\n    const { isCalloutVisible } = this.state;\r\n    return (\r\n      <div className=\"ms-CustomRenderExample\" style={{ display: 'flex', alignItems: 'center' }}>\r\n        <span>TextField with custom label render</span>\r\n        <span className=\"ms-CustomRenderExample-labelIconArea\" ref={menuButton => (this._iconButtonElement = menuButton!)}>\r\n          <IconButton iconProps={{ iconName: 'Info' }} title=\"Info\" ariaLabel=\"Info\" onClick={this._onClick} />\r\n        </span>\r\n        {isCalloutVisible && (\r\n          <Callout className=\"ms-CustomRenderExample-callout\" target={this._iconButtonElement} onDismiss={this._onDismiss}>\r\n            <text> In additon to the label itself, this label includes an iconbutton which pops out more information in a callout</text>\r\n          </Callout>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  private _onClick = (): void => {\r\n    this.setState({\r\n      isCalloutVisible: !this.state.isCalloutVisible\r\n    });\r\n  };\r\n\r\n  private _onDismiss = (): void => {\r\n    this.setState({\r\n      isCalloutVisible: false\r\n    });\r\n  };\r\n}\r\n"]}