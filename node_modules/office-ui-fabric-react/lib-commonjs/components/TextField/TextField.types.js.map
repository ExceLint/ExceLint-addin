{"version":3,"file":"TextField.types.js","sourceRoot":"../src/","sources":["components/TextField/TextField.types.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle, IStyleSet, ITheme } from '../../Styling';\r\nimport { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\r\nimport { IIconProps } from '../../Icon';\r\n\r\nexport interface ITextField {\r\n  /** Gets the current value of the input. */\r\n  value: string | undefined;\r\n\r\n  /** Sets focus to the input. */\r\n  focus: () => void;\r\n\r\n  /** Blurs the input */\r\n  blur: () => void;\r\n\r\n  /** Select the value of the text field. */\r\n  select: () => void;\r\n\r\n  /** Sets the selection start of the text field to a specified value. */\r\n  setSelectionStart: (value: number) => void;\r\n\r\n  /** Sets the selection end of the text field to a specified value. */\r\n  setSelectionEnd: (value: number) => void;\r\n\r\n  /**\r\n   * Sets the start and end positions of a selection in a text field.\r\n   * Call with start and end set to the same value to set the cursor position.\r\n   * @param start - Index of the start of the selection.\r\n   * @param end - Index of the end of the selection.\r\n   */\r\n  setSelectionRange: (start: number, end: number) => void;\r\n\r\n  /** Gets the selection start of the text field. Returns -1 if there is no selection. */\r\n  selectionStart: number | null;\r\n\r\n  /** Gets the selection end of the text field. Returns -1 if there is no selection. */\r\n  selectionEnd: number | null;\r\n}\r\n\r\n/**\r\n * TextField component props.\r\n */\r\nexport interface ITextFieldProps extends React.AllHTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {\r\n  /**\r\n   * Optional callback to access the ITextField component. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: IRefObject<ITextField>;\r\n\r\n  /**\r\n   * Whether or not the text field is a multiline text field.\r\n   * @defaultvalue false\r\n   */\r\n  multiline?: boolean;\r\n\r\n  /**\r\n   * Whether or not the multiline text field is resizable.\r\n   * @defaultvalue true\r\n   */\r\n  resizable?: boolean;\r\n\r\n  /**\r\n   * Whether or not to auto adjust text field height. Applies only to multiline text field.\r\n   * @defaultvalue false\r\n   */\r\n  autoAdjustHeight?: boolean;\r\n\r\n  /**\r\n   * Whether or not the text field is underlined.\r\n   * @defaultvalue false\r\n   */\r\n  underlined?: boolean;\r\n\r\n  /**\r\n   * Whether or not the text field is borderless.\r\n   * @defaultvalue false\r\n   */\r\n  borderless?: boolean;\r\n\r\n  /**\r\n   * Label displayed above the text field (and read by screen readers).\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n   * Custom renderer for the label.\r\n   */\r\n  onRenderLabel?: IRenderFunction<ITextFieldProps>;\r\n\r\n  /**\r\n   * Description displayed below the text field to provide additional details about what text to enter.\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * Custom renderer for the description.\r\n   */\r\n  onRenderDescription?: IRenderFunction<ITextFieldProps>;\r\n\r\n  /**\r\n   * @deprecated Use `prefix` instead.\r\n   */\r\n  addonString?: string;\r\n\r\n  /**\r\n   * Prefix displayed before the text field contents. This is not included in the value.\r\n   * Ensure a descriptive label is present to assist screen readers, as the value does not include the prefix.\r\n   */\r\n  prefix?: string;\r\n\r\n  /**\r\n   * Suffix displayed after the text field contents. This is not included in the value.\r\n   * Ensure a descriptive label is present to assist screen readers, as the value does not include the suffix.\r\n   */\r\n  suffix?: string;\r\n\r\n  /**\r\n   * @deprecated Use `onRenderPrefix` instead.\r\n   */\r\n  onRenderAddon?: IRenderFunction<ITextFieldProps>;\r\n\r\n  /**\r\n   * Custom render function for prefix.\r\n   */\r\n  onRenderPrefix?: IRenderFunction<ITextFieldProps>;\r\n\r\n  /**\r\n   * Custom render function for suffix.\r\n   */\r\n  onRenderSuffix?: IRenderFunction<ITextFieldProps>;\r\n\r\n  /**\r\n   * Props for an optional icon, displayed in the far right end of the text field.\r\n   */\r\n  iconProps?: IIconProps;\r\n\r\n  /**\r\n   * Default value of the text field. Only provide this if the text field is an uncontrolled component;\r\n   * otherwise, use the `value` property.\r\n   */\r\n  defaultValue?: string;\r\n\r\n  /**\r\n   * Current value of the text field. Only provide this if the text field is a controlled component where you\r\n   * are maintaining its current state; otherwise, use the `defaultValue` property.\r\n   */\r\n  value?: string;\r\n\r\n  /**\r\n   * Disabled state of the text field.\r\n   * @defaultvalue false\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * If true, the text field is readonly.\r\n   * @defaultvalue false\r\n   */\r\n  readOnly?: boolean;\r\n\r\n  /**\r\n   * Static error message displayed below the text field. Use `onGetErrorMessage` to dynamically\r\n   * change the error message displayed (if any) based on the current value.\r\n   */\r\n  errorMessage?: string;\r\n\r\n  /**\r\n   * Callback for when the input value changes.\r\n   */\r\n  onChange?: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;\r\n\r\n  /**\r\n   * @deprecated Use `onChange` instead.\r\n   */\r\n  onChanged?: (newValue: any) => void;\r\n\r\n  /**\r\n   * Called after the input's value updates but before re-rendering.\r\n   * Unlike `onChange`, this is also called when the value is updated via props.\r\n   *\r\n   * NOTE: This should be used *very* rarely. `onChange` is more appropriate for most situations.\r\n   *\r\n   * @param newValue - The new value. Type should be string.\r\n   */\r\n  onBeforeChange?: (newValue?: string) => void;\r\n\r\n  /**\r\n   * Function called after validation completes.\r\n   */\r\n  onNotifyValidationResult?: (errorMessage: string, value: string | undefined) => void;\r\n\r\n  /**\r\n   * Function used to determine whether the input value is valid and get an error message if not.\r\n   *\r\n   *   When it returns string:\r\n   *   - If valid, it returns empty string.\r\n   *   - If invalid, it returns the error message string and the text field will\r\n   *     show a red border and show an error message below the text field.\r\n   *\r\n   *   When it returns Promise<string>:\r\n   *   - The resolved value is display as error message.\r\n   *   - The rejected, the value is thrown away.\r\n   *\r\n   */\r\n  onGetErrorMessage?: (value: string) => string | PromiseLike<string> | undefined;\r\n\r\n  /**\r\n   * Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\r\n   * @defaultvalue 200\r\n   */\r\n  deferredValidationTime?: number;\r\n\r\n  /**\r\n   * Optional class name that is added to the container of the component.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Optional class name that is added specifically to the input/textarea element.\r\n   */\r\n  inputClassName?: string;\r\n\r\n  /**\r\n   * Aria label for the text field.\r\n   */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n   * Run validation only on input focus.\r\n   * @defaultvalue false\r\n   */\r\n  validateOnFocusIn?: boolean;\r\n\r\n  /**\r\n   * Run validation only on input focus out.\r\n   * @defaultvalue false\r\n   */\r\n  validateOnFocusOut?: boolean;\r\n\r\n  /**\r\n   * Disable on-load validation.\r\n   * @defaultvalue true\r\n   */\r\n  validateOnLoad?: boolean;\r\n\r\n  /**\r\n   * Theme (provided through customization).\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  styles?: IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles>;\r\n\r\n  /**\r\n   * @deprecated Use `iconProps` instead.\r\n   */\r\n  iconClass?: string;\r\n\r\n  /**\r\n   * Whether the input field should have autocomplete enabled.\r\n   * This tells the browser to display options based on earlier typed values.\r\n   * Common values are 'on' and 'off' but for all possible values see the following links:\r\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values\r\n   * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\r\n   */\r\n  autoComplete?: string;\r\n\r\n  /**\r\n   * The masking string that defines the mask's behavior.\r\n   * A backslash will escape any character.\r\n   * Special format characters are:\r\n   * '9': [0-9]\r\n   * 'a': [a-zA-Z]\r\n   * '*': [a-zA-Z0-9]\r\n   *\r\n   * @example `Phone Number: (999) 999-9999`\r\n   */\r\n  mask?: string;\r\n\r\n  /**\r\n   * The character to show in place of unfilled characters of the mask.\r\n   * @defaultvalue '_'\r\n   */\r\n  maskChar?: string;\r\n\r\n  /**\r\n   * An object defining the format characters and corresponding regexp values.\r\n   * Default format characters: \\{\r\n   *  '9': /[0-9]/,\r\n   *  'a': /[a-zA-Z]/,\r\n   *  '*': /[a-zA-Z0-9]/\r\n   * \\}\r\n   */\r\n  maskFormat?: { [key: string]: RegExp };\r\n\r\n  /**\r\n   * @deprecated Serves no function.\r\n   */\r\n  componentId?: string;\r\n}\r\n\r\nexport type ITextFieldStyleProps = Required<Pick<ITextFieldProps, 'theme'>> &\r\n  Pick<\r\n    ITextFieldProps,\r\n    | 'className'\r\n    | 'disabled'\r\n    | 'inputClassName'\r\n    | 'required'\r\n    | 'multiline'\r\n    | 'borderless'\r\n    | 'resizable'\r\n    | 'underlined'\r\n    | 'iconClass'\r\n    | 'autoAdjustHeight'\r\n  > & {\r\n    /** Element has an error message. */\r\n    hasErrorMessage?: boolean;\r\n    /** Element has an icon. */\r\n    hasIcon?: boolean;\r\n    /** Element has a label. */\r\n    hasLabel?: boolean;\r\n    /** Element has focus. */\r\n    focused?: boolean;\r\n  };\r\n\r\nexport interface ITextFieldSubComponentStyles {\r\n  /**\r\n   * Styling for Label child component.\r\n   */\r\n  // TODO: this should be the interface once we're on TS 2.9.2 but otherwise causes errors in 2.8.4\r\n  // label: IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>;\r\n  label: IStyleFunctionOrObject<any, any>;\r\n}\r\n\r\nexport interface ITextFieldStyles extends IStyleSet<ITextFieldStyles> {\r\n  /**\r\n   * Style for root element.\r\n   */\r\n  root: IStyle;\r\n\r\n  /**\r\n   * Style for field group encompassing entry area (prefix, field, icon and suffix).\r\n   */\r\n  fieldGroup: IStyle;\r\n\r\n  /**\r\n   * Style for prefix element.\r\n   */\r\n  prefix: IStyle;\r\n\r\n  /**\r\n   * Style for suffix element.\r\n   */\r\n  suffix: IStyle;\r\n\r\n  /**\r\n   * Style for main field entry element.\r\n   */\r\n  field: IStyle;\r\n\r\n  /**\r\n   * Style for icon prop element.\r\n   */\r\n  icon: IStyle;\r\n\r\n  /**\r\n   * Style for description element.\r\n   */\r\n  description: IStyle;\r\n\r\n  /**\r\n   * Style for TextField wrapper element.\r\n   */\r\n  wrapper: IStyle;\r\n\r\n  /**\r\n   * Style for error message element.\r\n   */\r\n  errorMessage: IStyle;\r\n\r\n  /**\r\n   * Styling for subcomponents.\r\n   */\r\n  subComponentStyles: ITextFieldSubComponentStyles;\r\n}\r\n"]}