{"version":3,"file":"Suggestions.types.js","sourceRoot":"../src/","sources":["components/FloatingPicker/Suggestions/Suggestions.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { ISuggestionModel } from '../../../Pickers';\r\nimport { IPersonaProps } from '../../../Persona';\r\nimport { IRefObject } from '../../../Utilities';\r\n\r\n// tslint:disable-next-line:no-any\r\nexport interface ISuggestionsCoreProps<T> extends React.ClassAttributes<any> {\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef?: IRefObject<{}>;\r\n  /**\r\n   * How the suggestion should look in the suggestion list.\r\n   */\r\n  onRenderSuggestion?: (props: T, suggestionItemProps: T) => JSX.Element;\r\n  /**\r\n   * What should occur when a suggestion is clicked\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  onSuggestionClick: (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void;\r\n  /**\r\n   * The list of Suggestions that will be displayed\r\n   */\r\n  suggestions: ISuggestionModel<T>[];\r\n  /**\r\n   * Function to fire when one of the optional remove buttons on a suggestion is clicked.\r\n   */\r\n  onSuggestionRemove?: (ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void;\r\n  /**\r\n   * Screen reader message to read when there are suggestions available.\r\n   */\r\n  suggestionsAvailableAlertText?: string;\r\n  /**\r\n   * An ARIA label for the container that is the parent of the suggestions.\r\n   */\r\n  suggestionsContainerAriaLabel?: string;\r\n  /**\r\n   * the classname of the suggestionitem.\r\n   */\r\n  suggestionsItemClassName?: string;\r\n  /**\r\n   * Maximum number of suggestions to show in the full suggestion list.\r\n   */\r\n  resultsMaximumNumber?: number;\r\n  /**\r\n   * Indicates whether to show a button with each suggestion to remove that suggestion.\r\n   */\r\n  showRemoveButtons?: boolean;\r\n  /**\r\n   * Indicates whether to loop around to the top or bottom of the the suggestions\r\n   * on calling nextSuggestion and previousSuggestion, respectively\r\n   */\r\n  shouldLoopSelection: boolean;\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport interface ISuggestionsControlProps<T> extends React.ClassAttributes<any>, ISuggestionsCoreProps<T> {\r\n  /**\r\n   * An ARIA label for the container that is the parent of the suggestions header items.\r\n   */\r\n  suggestionsHeaderContainerAriaLabel?: string;\r\n  /**\r\n   * An ARIA label for the container that is the parent of the suggestions footer items.\r\n   */\r\n  suggestionsFooterContainerAriaLabel?: string;\r\n  /**\r\n   * The header items props\r\n   */\r\n  headerItemsProps?: ISuggestionsHeaderFooterProps[];\r\n  /**\r\n   * The footer items props\r\n   */\r\n  footerItemsProps?: ISuggestionsHeaderFooterProps[];\r\n  /**\r\n   * Whether or not the first selectable item in the suggestions list should be selected\r\n   */\r\n  shouldSelectFirstItem?: () => boolean;\r\n  /**\r\n   * The CSS classname of the suggestions list.\r\n   */\r\n  className?: string;\r\n  /**\r\n   * Completes the suggestion\r\n   */\r\n  completeSuggestion: () => void;\r\n}\r\n\r\nexport interface ISuggestionsHeaderFooterProps {\r\n  renderItem: () => JSX.Element;\r\n  onExecute?: () => void;\r\n  className?: string;\r\n  ariaLabel?: string;\r\n  shouldShow: () => boolean;\r\n}\r\n\r\nexport interface ISuggestionsHeaderFooterItemProps {\r\n  componentRef?: IRefObject<{}>;\r\n  renderItem: () => JSX.Element;\r\n  onExecute?: () => void;\r\n  isSelected: boolean;\r\n  id: string;\r\n  className: string | undefined;\r\n}\r\n"]}