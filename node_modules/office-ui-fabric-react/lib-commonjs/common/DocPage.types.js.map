{"version":3,"file":"DocPage.types.js","sourceRoot":"../src/","sources":["common/DocPage.types.ts"],"names":[],"mappings":";;AAmCA,IAAY,eASX;AATD,WAAY,eAAe;IACzB,sCAAmB,CAAA;IACnB,mDAAgC,CAAA;IAChC,gCAAa,CAAA;IACb,gCAAa,CAAA;IACb,yCAAsB,CAAA;IACtB,gCAAa,CAAA;IACb,gCAAa,CAAA;IACb,gCAAa,CAAA;AACf,CAAC,EATW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAS1B","sourcesContent":["export interface IComponentStatusProps {\r\n  /**\r\n   * Components should be fully usable with the keyboard. For this badge to pass, all of the functionalities of\r\n   * a component needs to be accessible via the keyboard.\r\n   */\r\n  keyboardAccessibilitySupport: ChecklistStatus;\r\n\r\n  /**\r\n   * Components should be appropriately marked with ARIA attributes so users with assistive technologies can\r\n   * interact with them. For this badge to pass, a component needs to be marked with ARIA attributes to describe\r\n   * its behavior for assistive technologies (e.g., screen readers). A component can use ARIA roles, states\r\n   * and properties to inform users of its behavior.\r\n   */\r\n  markupSupport: ChecklistStatus;\r\n\r\n  /**\r\n   * Components should display correctly in high contrast mode. For this badge to pass, set your operating\r\n   * system to use high contrast and then ensure that the components render correctly.\r\n   */\r\n  highContrastSupport: ChecklistStatus;\r\n\r\n  /**\r\n   * For localization, components should display correctly in right to left layouts. For this badge to pass,\r\n   * ensure RTL (right-to-left) layouts render properly in the sample website by enabling it in the settings\r\n   * (located in the top right corner for LTR layout).\r\n   */\r\n  rtlSupport: ChecklistStatus;\r\n\r\n  /**\r\n   * To avoid regressions, make sure components are throughly unit-tested. For this badge to be marked \"good\",\r\n   * write unit tests that cover all edge cases and scenarios.\r\n   */\r\n  testCoverage: ChecklistStatus;\r\n}\r\n\r\nexport enum ChecklistStatus {\r\n  unknown = 'Unknown',\r\n  notApplicable = 'Not applicable',\r\n  pass = 'Pass',\r\n  fail = 'Fail',\r\n  none = 'Missing tests',\r\n  poor = 'Poor',\r\n  fair = 'Fair',\r\n  good = 'Good'\r\n}\r\n\r\nexport interface IExample {\r\n  /** Title of the example */\r\n  title: string;\r\n\r\n  /** Raw source code of the example */\r\n  code: string;\r\n\r\n  /** Working example of the example */\r\n  view: JSX.Element;\r\n\r\n  isScrollable?: boolean;\r\n\r\n  /** JS String for codepen of the example */\r\n  codepenJS?: string;\r\n}\r\n\r\nexport interface IDocPageProps {\r\n  /** Title that goes into the header */\r\n  title: string;\r\n\r\n  /** Name of the component being documented */\r\n  componentName: string;\r\n\r\n  /** URL of the checked in component, should be somewhere on github.com */\r\n  componentUrl: string;\r\n\r\n  /** Status of the component; e.g. keyboard accessible */\r\n  componentStatus?: IComponentStatusProps;\r\n\r\n  /** Knobs that applies to all the examples */\r\n  exampleKnobs?: JSX.Element;\r\n\r\n  /** Array of examples, displayed in the order defined */\r\n  examples?: IExample[];\r\n\r\n  /** Array of implementation examples, displayed in the order defined */\r\n  implementationExamples?: {\r\n    /** Title of the example */\r\n    title: string;\r\n\r\n    /** Raw source code of the example */\r\n    code: string;\r\n\r\n    /** Working example of the example */\r\n    view: JSX.Element;\r\n  }[];\r\n\r\n  /** Properties table(s) as markdown string */\r\n  propertiesTablesSources?: string[];\r\n\r\n  /** Overview of the component as markdown string */\r\n  overview?: string;\r\n\r\n  /** DO's blurb as markdown string */\r\n  dos?: string;\r\n\r\n  /** DON'Ts blurb as markdown string */\r\n  donts?: string;\r\n\r\n  /** Best practice as markdown string */\r\n  bestPractices?: string;\r\n\r\n  /** Feedback section includes link to new issue page and displays Github issues */\r\n  isFeedbackVisible?: boolean;\r\n\r\n  /** Passed through header visibility flag from the demo component page component */\r\n  isHeaderVisible: boolean;\r\n\r\n  /** If true, the component accepts all native props from elements specified in `nativePropsElement` */\r\n  allowNativeProps?: boolean;\r\n\r\n  /** Override component name to use in the native props message */\r\n  allowNativePropsForComponentName?: string;\r\n\r\n  /**\r\n   * Element(s) whose native props this component accepts (default div).\r\n   * Only relevant if `allowNativeProps` is true.\r\n   */\r\n  nativePropsElement?: string | string[];\r\n\r\n  /** Related link */\r\n  related?: JSX.Element;\r\n\r\n  /** Pass through other sections for ComponentPage */\r\n  otherSections?: {\r\n    title: string;\r\n    section: JSX.Element;\r\n  }[];\r\n}\r\n"]}