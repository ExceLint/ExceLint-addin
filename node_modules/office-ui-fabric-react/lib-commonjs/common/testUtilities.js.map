{"version":3,"file":"testUtilities.js","sourceRoot":"../src/","sources":["common/testUtilities.ts"],"names":[],"mappings":";;AAAA,iCAA6C;AAE7C,oCAAsC;AACtC,qDAAuD;AAIvD,mBAA0B,OAA+B,EAAE,SAAiB;IAC1E,OAAO,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC,UAAC,IAA4B,IAAK,OAAA,OAAO,IAAI,CAAC,IAAI,EAAE,KAAK,QAAQ,EAA/B,CAA+B,CAAC,CAAC;AAChH,CAAC;AAFD,8BAEC;AAED,qBAA4B,OAA+B,EAAE,SAAiB,EAAE,CAAS;IACvF,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC;AAFD,kCAEC;AAED,mBAA0B,OAA+B,EAAE,SAAiB;IAC1E,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AACrC,CAAC;AAFD,8BAEC;AAED,uBAA8B,OAA+B,EAAE,SAAiB;IAC9E,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;AACrC,CAAC;AAFD,sCAEC;AAED,eAAsB,WAAmB;IACvC,OAAO,IAAI,OAAO,CAAO,UAAA,OAAO,IAAI,OAAA,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC,EAAhC,CAAgC,CAAC,CAAC;AACxE,CAAC;AAFD,sBAEC;AAED;;;GAGG;AACH,uBAAmF,OAA8B;IAC/G,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC7C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAClC,OAAO,cAAK,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;AAC9C,CAAC;AAJD,sCAIC;AAED,4BAAmC,OAAgC;IACjE,IAAM,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;IAC7D,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;IAC3E,OAAO,WAA0B,CAAC;AACpC,CAAC;AAJD,gDAIC;AAED,mBAA0B,WAAwB;IAAxB,4BAAA,EAAA,gBAAwB;IAChD,IAAM,MAAM,GAAgB,EAAE,KAAK,EAAE,WAAW,EAAsB,CAAC;IACvE,OAAO,EAAE,MAAM,QAAA,EAAE,CAAC;AACpB,CAAC;AAHD,8BAGC","sourcesContent":["import { ReactWrapper, mount } from 'enzyme';\r\nimport { Component } from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as ReactTestUtils from 'react-dom/test-utils';\r\n\r\nexport type __TS_2_8_WORKAROUND_COMPONENT__ = Component;\r\n\r\nexport function findNodes(wrapper: ReactWrapper<any, any>, className: string): ReactWrapper<any, any> {\r\n  return wrapper.find(className).filterWhere((node: ReactWrapper<any, any>) => typeof node.type() === 'string');\r\n}\r\n\r\nexport function expectNodes(wrapper: ReactWrapper<any, any>, className: string, n: number): void {\r\n  expect(findNodes(wrapper, className).length).toEqual(n);\r\n}\r\n\r\nexport function expectOne(wrapper: ReactWrapper<any, any>, className: string): void {\r\n  expectNodes(wrapper, className, 1);\r\n}\r\n\r\nexport function expectMissing(wrapper: ReactWrapper<any, any>, className: string): void {\r\n  expectNodes(wrapper, className, 0);\r\n}\r\n\r\nexport function delay(millisecond: number): Promise<void> {\r\n  return new Promise<void>(resolve => setTimeout(resolve, millisecond));\r\n}\r\n\r\n/**\r\n * Mounts the element attached to a child of document.body. This is primarily for tests involving\r\n * event handlers (which don't work right unless the element is attached).\r\n */\r\nexport function mountAttached<C extends Component, P = C['props'], S = C['state']>(element: React.ReactElement<P>): ReactWrapper<P, S, C> {\r\n  const parent = document.createElement('div');\r\n  document.body.appendChild(parent);\r\n  return mount(element, { attachTo: parent });\r\n}\r\n\r\nexport function renderIntoDocument(element: React.ReactElement<any>): HTMLElement {\r\n  const component = ReactTestUtils.renderIntoDocument(element);\r\n  const renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\r\n  return renderedDOM as HTMLElement;\r\n}\r\n\r\nexport function mockEvent(targetValue: string = ''): ReactTestUtils.SyntheticEventData {\r\n  const target: EventTarget = { value: targetValue } as HTMLInputElement;\r\n  return { target };\r\n}\r\n"]}