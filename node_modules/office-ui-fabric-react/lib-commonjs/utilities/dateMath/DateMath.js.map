{"version":3,"file":"DateMath.js","sourceRoot":"../src/","sources":["utilities/dateMath/DateMath.ts"],"names":[],"mappings":"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","sourcesContent":["import { DayOfWeek, MonthOfYear, FirstWeekOfYear, DateRangeType } from '../dateValues/DateValues';\r\nimport TimeConstants from '../dateValues/TimeConstants';\r\nimport { assertNever } from '../../Utilities';\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of days.\r\n * @param {Date} date - The origin date\r\n * @param {number} days - The number of days to offset. 'days' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of days\r\n */\r\nexport function addDays(date: Date, days: number): Date {\r\n  const result = new Date(date.getTime());\r\n  result.setDate(result.getDate() + days);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of weeks.\r\n * @param {Date} date - The origin date\r\n * @param {number} weeks - The number of weeks to offset. 'weeks' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of weeks\r\n */\r\nexport function addWeeks(date: Date, weeks: number): Date {\r\n  return addDays(date, weeks * TimeConstants.DaysInOneWeek);\r\n}\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of months.\r\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\r\n * to contain the original day-of-month, we'll use the last day of the new month.\r\n * @param {Date} date - The origin date\r\n * @param {number} months - The number of months to offset. 'months' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of months\r\n */\r\nexport function addMonths(date: Date, months: number): Date {\r\n  let result = new Date(date.getTime());\r\n  const newMonth = result.getMonth() + months;\r\n  result.setMonth(newMonth);\r\n\r\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\r\n  // Loop until we back up to a day the new month has.\r\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\r\n  if (result.getMonth() !== ((newMonth % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\r\n    result = addDays(result, -result.getDate());\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a date offset from the given date by the specified number of years.\r\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\r\n * to contain the original day-of-month, we'll use the last day of the new month.\r\n * @param {Date} date - The origin date\r\n * @param {number} years - The number of years to offset. 'years' can be negative.\r\n * @return {Date} A new Date object offset from the origin date by the given number of years\r\n */\r\nexport function addYears(date: Date, years: number): Date {\r\n  let result = new Date(date.getTime());\r\n  result.setFullYear(date.getFullYear() + years);\r\n\r\n  // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\r\n  // Loop until we back up to a day the new month has.\r\n  // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\r\n  if (\r\n    result.getMonth() !==\r\n    ((date.getMonth() % TimeConstants.MonthInOneYear) + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear\r\n  ) {\r\n    result = addDays(result, -result.getDate());\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Returns a date that is the first day of the month of the provided date.\r\n * @param {Date} date - The origin date\r\n * @return {Date} A new Date object with the day set to the first day of the month.\r\n */\r\nexport function getMonthStart(date: Date): Date {\r\n  return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\r\n}\r\n\r\n/**\r\n * Returns a date that is the last day of the month of the provided date.\r\n * @param {Date} date - The origin date\r\n * @return {Date} A new Date object with the day set to the last day of the month.\r\n */\r\nexport function getMonthEnd(date: Date): Date {\r\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\r\n}\r\n\r\n/**\r\n * Returns a date that is the first day of the year of the provided date.\r\n * @param {Date} date - The origin date\r\n * @return {Date} A new Date object with the day set to the first day of the year.\r\n */\r\nexport function getYearStart(date: Date): Date {\r\n  return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\r\n}\r\n\r\n/**\r\n * Returns a date that is the last day of the year of the provided date.\r\n * @param {Date} date - The origin date\r\n * @return {Date} A new Date object with the day set to the last day of the year.\r\n */\r\nexport function getYearEnd(date: Date): Date {\r\n  return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\r\n}\r\n\r\n/**\r\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\r\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\r\n * to contain the original day-of-month, we'll use the last day of the new month.\r\n * @param {Date} date - The origin date\r\n * @param {number} month - The 0-based index of the month to set on the date.\r\n * @return {Date} A new Date object with the given month set.\r\n */\r\nexport function setMonth(date: Date, month: number): Date {\r\n  return addMonths(date, month - date.getMonth());\r\n}\r\n\r\n/**\r\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\r\n * @return {boolean} True if the two dates represent the same date (regardless of time-of-day), false otherwise.\r\n */\r\nexport function compareDates(date1: Date, date2: Date): boolean {\r\n  if (!date1 && !date2) {\r\n    return true;\r\n  } else if (!date1 || !date2) {\r\n    return false;\r\n  } else {\r\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\r\n  }\r\n}\r\n\r\n/**\r\n * Compare the date parts of two dates\r\n * @param {Date} date1 - The first date to compare\r\n * @param {Date} date2 - The second date to compare\r\n * @returns {Number} A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\r\n * if date1 is later than date2.\r\n */\r\nexport function compareDatePart(date1: Date, date2: Date): Number {\r\n  return getDatePartHashValue(date1) - getDatePartHashValue(date2);\r\n}\r\n\r\n/**\r\n * Gets the date range array including the specified date. The date range array is calculated as the list\r\n * of dates accounting for the specified first day of the week and date range type.\r\n * @param {Date} date - The input date\r\n * @param {DateRangeType} dateRangeType - The desired date range type, i.e., day, week, month, etc.\r\n * @param {DayOfWeek} firstDayOfWeek - The first day of the week.\r\n * @param {DayOfWeek[]} workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\r\n * @returns {Date[]} An array of dates representing the date range containing the specified date.\r\n */\r\nexport function getDateRangeArray(date: Date, dateRangeType: DateRangeType, firstDayOfWeek: DayOfWeek, workWeekDays?: DayOfWeek[]): Date[] {\r\n  const datesArray = new Array<Date>();\r\n  let startDate: Date;\r\n  let endDate = null;\r\n\r\n  if (!workWeekDays) {\r\n    workWeekDays = [DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday];\r\n  }\r\n\r\n  switch (dateRangeType) {\r\n    case DateRangeType.Day:\r\n      startDate = getDatePart(date);\r\n      endDate = addDays(startDate, 1);\r\n      break;\r\n\r\n    case DateRangeType.Week:\r\n    case DateRangeType.WorkWeek:\r\n      startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\r\n      endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\r\n      break;\r\n\r\n    case DateRangeType.Month:\r\n      startDate = new Date(date.getFullYear(), date.getMonth(), 1);\r\n      endDate = addMonths(startDate, 1);\r\n      break;\r\n\r\n    default:\r\n      return assertNever(dateRangeType);\r\n  }\r\n\r\n  // Populate the dates array with the dates in range\r\n  let nextDate = startDate;\r\n\r\n  do {\r\n    if (dateRangeType !== DateRangeType.WorkWeek) {\r\n      // push all days not in work week view\r\n      datesArray.push(nextDate);\r\n    } else if (workWeekDays.includes(nextDate.getDay())) {\r\n      datesArray.push(nextDate);\r\n    }\r\n    nextDate = addDays(nextDate, 1);\r\n  } while (!compareDates(nextDate, endDate));\r\n\r\n  return datesArray;\r\n}\r\n\r\n/**\r\n * Checks whether the specified date is in the given date range.\r\n * @param {Date} date - The origin date\r\n * @param {Date[]} dateRange - An array of dates to do the lookup on\r\n * @returns {bool} True if the date matches one of the dates in the specified array, false otherwise.\r\n */\r\nexport function isInDateRangeArray(date: Date, dateRange: Date[]): boolean {\r\n  for (const dateInRange of dateRange) {\r\n    if (compareDates(date, dateInRange)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns the week number for a date.\r\n * Week numbers are 1 - 52 (53) in a year\r\n * @param {navigatedDate} Date - A date to find the week number for.\r\n * @param {firstDayOfWeek} DayOfWeek - The first day of the week (0-6, Sunday = 0)\r\n * @param {firstWeekOfYear} FirstWeekOfYear - The first week of the year (1-2)\r\n * @return {weeksArray} The weeks number array for the current month.\r\n */\r\nexport function getWeekNumbersInMonth(\r\n  weeksInMonth: number,\r\n  firstDayOfWeek: DayOfWeek,\r\n  firstWeekOfYear: FirstWeekOfYear,\r\n  navigatedDate: Date\r\n): number[] {\r\n  const selectedYear = navigatedDate.getFullYear();\r\n  const selectedMonth = navigatedDate.getMonth();\r\n  let dayOfMonth = 1;\r\n  const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\r\n  const endOfFirstWeek =\r\n    dayOfMonth + (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\r\n  let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\r\n  dayOfMonth = endOfWeekRange.getDate();\r\n\r\n  const weeksArray = [];\r\n  for (let i = 0; i < weeksInMonth; i++) {\r\n    // Get week number for end of week\r\n    weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\r\n    dayOfMonth += TimeConstants.DaysInOneWeek;\r\n    endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\r\n  }\r\n  return weeksArray;\r\n}\r\n\r\n/**\r\n * Returns the week number for a date.\r\n * Week numbers are 1 - 52 (53) in a year\r\n * @param {Date} date - A date to find the week number for.\r\n * @param {DayOfWeek} firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\r\n * @param {firstWeekOfYear} firstWeekOfYear - The first week of the year (1-2)\r\n * @return {Number} The week's number in the year.\r\n */\r\nexport function getWeekNumber(date: Date, firstDayOfWeek: DayOfWeek, firstWeekOfYear: FirstWeekOfYear): number {\r\n  // First four-day week of the year - minumum days count\r\n  const fourDayWeek = 4;\r\n\r\n  switch (firstWeekOfYear) {\r\n    case FirstWeekOfYear.FirstFullWeek:\r\n      return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\r\n\r\n    case FirstWeekOfYear.FirstFourDayWeek:\r\n      return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\r\n\r\n    default:\r\n      return getFirstDayWeekOfYear(date, firstDayOfWeek);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\r\n * @param {Date} date - The origin date\r\n * @returns {Date} A new date with the time set to midnight\r\n */\r\nfunction getDatePart(date: Date): Date {\r\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n}\r\n\r\n/**\r\n * Gets the date for the first day of the week based on the given date assuming\r\n * the specified first day of the week.\r\n * @param {Date} date - The date to find the beginning of the week date for.\r\n * @return {Date} A new date object representing the first day of the week containing the input date.\r\n */\r\nfunction getStartDateOfWeek(date: Date, firstDayOfWeek: DayOfWeek): Date {\r\n  let daysOffset = firstDayOfWeek - date.getDay();\r\n  if (daysOffset > 0) {\r\n    // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\r\n    daysOffset -= TimeConstants.DaysInOneWeek;\r\n  }\r\n  return addDays(date, daysOffset);\r\n}\r\n\r\n/**\r\n * Helper function to assist in date comparisons\r\n */\r\nfunction getDatePartHashValue(date: Date): number {\r\n  // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\r\n  /* tslint:disable:no-bitwise */\r\n  return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\r\n  /* tslint:enable:no-bitwise */\r\n}\r\n\r\n/**\r\n * Helper function for getWeekNumber.\r\n * Returns week number for a date\r\n * @param {date} Date - current selected date.\r\n * @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\r\n * @param {numberOfFullDays} number - week settings.\r\n * @return {Number} The week's number in the year.\r\n */\r\nfunction getWeekOfYearFullDays(date: Date, firstDayOfWeek: DayOfWeek, numberOfFullDays: number): number {\r\n  const dayOfYear = getDayOfYear(date) - 1;\r\n  let num = date.getDay() - (dayOfYear % TimeConstants.DaysInOneWeek);\r\n\r\n  const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\r\n  const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\r\n\r\n  let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\r\n  if (num2 !== 0 && num2 >= numberOfFullDays) {\r\n    num2 -= TimeConstants.DaysInOneWeek;\r\n  }\r\n\r\n  let num3 = dayOfYear - num2;\r\n  if (num3 < 0) {\r\n    num -= daysInYear % TimeConstants.DaysInOneWeek;\r\n    num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\r\n    if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\r\n      num2 -= TimeConstants.DaysInOneWeek;\r\n    }\r\n\r\n    num3 = daysInYear - num2;\r\n  }\r\n\r\n  return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\r\n}\r\n\r\n/**\r\n * Helper function for getWeekNumber.\r\n * Returns week number for a date\r\n * @param {date} Date - current selected date.\r\n * @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\r\n * @return {Number} The week's number in the year.\r\n */\r\nfunction getFirstDayWeekOfYear(date: Date, firstDayOfWeek: number): number {\r\n  const num = getDayOfYear(date) - 1;\r\n  const num2 = date.getDay() - (num % TimeConstants.DaysInOneWeek);\r\n  const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\r\n\r\n  return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\r\n}\r\n\r\n/**\r\n * Helper function for getWeekNumber.\r\n * Returns adjusted week day number when firstDayOfWeek is other than Sunday\r\n * For Week Day Number comparison checks\r\n * @param {firstDayOfWeek} DayOfWeek - The first day of week (0-6, Sunday = 0)\r\n * @param {dateWeekDay} DayOfWeek - shifts number forward to 1 week in case passed as true\r\n * @return {DayOfWeek} The day of week adjusted to firstDayOfWeek. E.g. when FirstDyOfWeek is Monday (1), Sunday becomes = 7 (7 > 1).\r\n */\r\nfunction adjustWeekDay(firstDayOfWeek: DayOfWeek, dateWeekDay: DayOfWeek): number {\r\n  return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + TimeConstants.DaysInOneWeek : dateWeekDay;\r\n}\r\n\r\n/**\r\n * Returns the day number for a date in a year\r\n * The number of days since January 1st in the particular year.\r\n * @param {Date} date - A date to find the day number for.\r\n * @return {Number} The day's number in the year.\r\n */\r\nfunction getDayOfYear(date: Date): number {\r\n  const month = date.getMonth();\r\n  const year = date.getFullYear();\r\n  let daysUntilDate = 0;\r\n\r\n  for (let i = 0; i < month; i++) {\r\n    daysUntilDate += daysInMonth(i + 1, year);\r\n  }\r\n\r\n  daysUntilDate += date.getDate();\r\n\r\n  return daysUntilDate;\r\n}\r\n\r\n/**\r\n * Returns the number of days in the month\r\n * @param {number} month - The month number to target (months 1-12).\r\n * @param {number} year - The year to target.\r\n * @return {Number} The number of days in the month.\r\n */\r\nfunction daysInMonth(month: number, year: number): number {\r\n  return new Date(year, month, 0).getDate();\r\n}\r\n"]}