{"version":3,"file":"useResponsiveMode.js","sourceRoot":"../src/","sources":["utilities/hooks/useResponsiveMode.tsx"],"names":[],"mappings":";;AAAA,6BAA+B;AAC/B,iDAAgD;AAChD,qDAAmD;AACnD,uEAA+G;AAElG,QAAA,iBAAiB,GAAG,UAAC,UAA+C;IACzE,IAAA,kEAAsG,EAArG,0BAAkB,EAAE,6BAAiF,CAAC;IAE7G,IAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC;QACjC,uDAAuD;QACvD,IAAM,iBAAiB,GAAG,sCAAiB,CAAC,qBAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAE3E,IAAI,kBAAkB,KAAK,iBAAiB,EAAE;YAC5C,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;SAC1C;IACH,CAAC,EAAE,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAErC,wBAAU,CAAC,MAAM,EAAE,QAAQ,EAAE,QAA+B,CAAC,CAAC;IAE9D,2CAA2C;IAC3C,KAAK,CAAC,SAAS,CAAC;QACd,QAAQ,EAAE,CAAC;QACX,qFAAqF;IACvF,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,kBAAkB,CAAC;AAC5B,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { getWindow } from '@uifabric/utilities';\nimport { useOnEvent } from '@uifabric/react-hooks';\nimport { ResponsiveMode, getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\n\nexport const useResponsiveMode = (elementRef: React.RefObject<HTMLElement | null>) => {\n  const [lastResponsiveMode, setLastResponsiveMode] = React.useState<ResponsiveMode>(getInitialResponsiveMode);\n\n  const onResize = React.useCallback(() => {\n    // Setting the same value should not cause a re-render.\n    const newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n\n  useOnEvent(window, 'resize', onResize as (ev: Event) => void);\n\n  // Call resize function initially on mount.\n  React.useEffect(() => {\n    onResize();\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount\n  }, []);\n\n  return lastResponsiveMode;\n};\n"]}