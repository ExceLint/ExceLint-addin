{"version":3,"file":"colors.js","sourceRoot":"../src/","sources":["utilities/color/colors.ts"],"names":[],"mappings":"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","sourcesContent":["import { COLOR_VALUES } from './colorValues';\r\n\r\nexport const MAX_COLOR_SATURATION = 100;\r\nexport const MAX_COLOR_HUE = 359;\r\nexport const MAX_COLOR_VALUE = 100;\r\nexport const MAX_COLOR_RGB = 255;\r\n/** @deprecated Use MAX_COLOR_RGB (255) or MAX_COLOR_ALPHA (100) */\r\nexport const MAX_COLOR_RGBA = MAX_COLOR_RGB;\r\nexport const MAX_COLOR_ALPHA = 100;\r\n\r\n/** RGB color with optional alpha value. */\r\nexport interface IRGB {\r\n  /** Red, range 0-255. */\r\n  r: number;\r\n  /** Green, range 0-255. */\r\n  g: number;\r\n  /** Blue, range 0-255. */\r\n  b: number;\r\n  /** Alpha, range 0 (transparent)-100. Usually assumed to be 100 if not specified. */\r\n  a?: number;\r\n}\r\n\r\nexport interface IHSV {\r\n  /** Hue, range 0-359. */\r\n  h: number;\r\n  /** Saturation, range 0-100. */\r\n  s: number;\r\n  /** Value, range 0-100. */\r\n  v: number;\r\n}\r\n\r\nexport interface IHSL {\r\n  /** Hue, range 0-359. */\r\n  h: number;\r\n  /** Saturation, range 0-100. */\r\n  s: number;\r\n  /** Lightness, range 0-100. */\r\n  l: number;\r\n}\r\n\r\nexport interface IColor extends IRGB, IHSV {\r\n  /** Hex string for the color (excluding alpha component), *not* prefixed with #. */\r\n  hex: string;\r\n\r\n  /** CSS color string. If a hex value, it must be prefixed with #. */\r\n  str: string;\r\n}\r\n\r\n/**\r\n * Converts a valid CSS color string to an RGB color.\r\n * Note that hex colors *must* be prefixed with # to be considered valid.\r\n * Alpha in returned color defaults to 100.\r\n */\r\nexport function cssColor(color: string): IRGB | undefined {\r\n  if (!color) {\r\n    return undefined;\r\n  }\r\n  return _named(color) || _hex3(color) || _hex6(color) || _rgba(color) || _hsla(color);\r\n}\r\n\r\n/** Converts RGB components to a hex color string (without # prefix). */\r\nexport function rgb2hex(r: number, g: number, b: number): string {\r\n  return [_rgbToPaddedHex(r), _rgbToPaddedHex(g), _rgbToPaddedHex(b)].join('');\r\n}\r\n\r\n/** Converts HSV components to a hex color string (without # prefix). */\r\nexport function hsv2hex(h: number, s: number, v: number): string {\r\n  const { r, g, b } = hsv2rgb(h, s, v);\r\n\r\n  return rgb2hex(r, g, b);\r\n}\r\n\r\n/** Converts RGB components to an HSV color. */\r\nexport function rgb2hsv(r: number, g: number, b: number): IHSV {\r\n  let h = NaN;\r\n  let s;\r\n  let v;\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  const delta = max - min;\r\n\r\n  // hue\r\n  if (delta === 0) {\r\n    h = 0;\r\n  } else if (r === max) {\r\n    h = ((g - b) / delta) % 6;\r\n  } else if (g === max) {\r\n    h = (b - r) / delta + 2;\r\n  } else if (b === max) {\r\n    h = (r - g) / delta + 4;\r\n  }\r\n\r\n  h = Math.round(h * 60);\r\n\r\n  if (h < 0) {\r\n    h += 360;\r\n  }\r\n\r\n  // saturation\r\n  s = Math.round((max === 0 ? 0 : delta / max) * 100);\r\n\r\n  // value\r\n  v = Math.round((max / MAX_COLOR_RGB) * 100);\r\n\r\n  return { h, s, v };\r\n}\r\n\r\n/** Converts HSL components to an HSV color. */\r\nexport function hsl2hsv(h: number, s: number, l: number): IHSV {\r\n  s *= (l < 50 ? l : 100 - l) / 100;\r\n  const v = l + s;\r\n\r\n  return {\r\n    h: h,\r\n    s: v === 0 ? 0 : ((2 * s) / v) * 100,\r\n    v: v\r\n  };\r\n}\r\n\r\n/** Converts HSV components to an HSL color. */\r\nexport function hsv2hsl(h: number, s: number, v: number): IHSL {\r\n  s /= MAX_COLOR_SATURATION;\r\n  v /= MAX_COLOR_VALUE;\r\n\r\n  let l = (2 - s) * v;\r\n  let sl = s * v;\r\n  sl /= l <= 1 ? l : 2 - l;\r\n  sl = sl || 0;\r\n  l /= 2;\r\n\r\n  return { h: h, s: sl * 100, l: l * 100 };\r\n}\r\n\r\n/** Converts HSL components to an RGB color. Does not set the alpha value. */\r\nexport function hsl2rgb(h: number, s: number, l: number): IRGB {\r\n  const hsv = hsl2hsv(h, s, l);\r\n\r\n  return hsv2rgb(hsv.h, hsv.s, hsv.v);\r\n}\r\n\r\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\r\nexport function hsv2rgb(h: number, s: number, v: number): IRGB {\r\n  s = s / 100;\r\n  v = v / 100;\r\n\r\n  let rgb: number[] = [];\r\n\r\n  const c = v * s;\r\n  const hh = h / 60;\r\n  const x = c * (1 - Math.abs((hh % 2) - 1));\r\n  const m = v - c;\r\n\r\n  switch (Math.floor(hh)) {\r\n    case 0:\r\n      rgb = [c, x, 0];\r\n      break;\r\n\r\n    case 1:\r\n      rgb = [x, c, 0];\r\n      break;\r\n\r\n    case 2:\r\n      rgb = [0, c, x];\r\n      break;\r\n\r\n    case 3:\r\n      rgb = [0, x, c];\r\n      break;\r\n\r\n    case 4:\r\n      rgb = [x, 0, c];\r\n      break;\r\n\r\n    case 5:\r\n      rgb = [c, 0, x];\r\n      break;\r\n  }\r\n\r\n  return {\r\n    r: Math.round(MAX_COLOR_RGB * (rgb[0] + m)),\r\n    g: Math.round(MAX_COLOR_RGB * (rgb[1] + m)),\r\n    b: Math.round(MAX_COLOR_RGB * (rgb[2] + m))\r\n  };\r\n}\r\n\r\n/**\r\n * Converts a CSS color string to a color object.\r\n * Note that hex colors *must* be prefixed with # to be considered valid.\r\n *\r\n * `inputColor` will be used unmodified as the `str` property of the returned object.\r\n * Alpha defaults to 100 if not specified in `inputColor`.\r\n * Returns undefined if the color string is invalid/not recognized.\r\n */\r\nexport function getColorFromString(inputColor: string): IColor | undefined {\r\n  const color = cssColor(inputColor);\r\n\r\n  if (!color) {\r\n    return;\r\n  }\r\n\r\n  return {\r\n    ...getColorFromRGBA(color!),\r\n    str: inputColor\r\n  };\r\n}\r\n\r\n/** Converts an RGBA color to a color object (alpha defaults to 100). */\r\nexport function getColorFromRGBA(rgba: IRGB): IColor {\r\n  const { a = MAX_COLOR_ALPHA, b, g, r } = rgba;\r\n  const { h, s, v } = rgb2hsv(r, g, b);\r\n  const hex = rgb2hex(r, g, b);\r\n  const str = _rgbaOrHexString(r, g, b, a, hex);\r\n\r\n  return { a, b, g, h, hex, r, s, str, v };\r\n}\r\n\r\n/**\r\n * Converts an HSV color (and optional alpha value) to a color object.\r\n * If `a` is not given, a default of 100 is used.\r\n * Hex in the returned value will *not* be prefixed with #.\r\n * If `a` is unspecified or 100, the result's `str` property will contain a hex value\r\n * (*not* prefixed with #)\r\n */\r\nexport function getColorFromHSV(hsv: IHSV, a?: number): IColor {\r\n  const { h, s, v } = hsv;\r\n  a = typeof a === 'number' ? a : MAX_COLOR_ALPHA;\r\n\r\n  const { r, g, b } = hsv2rgb(h, s, v);\r\n  const hex = hsv2hex(h, s, v);\r\n  const str = _rgbaOrHexString(r, g, b, a, hex);\r\n\r\n  return { a, b, g, h, hex, r, s, str, v };\r\n}\r\n\r\n/**\r\n * Converts a color hue to an HTML color string (with # prefix).\r\n * This implementation ignores all components of `color` except hue.\r\n */\r\nexport function getFullColorString(color: IColor): string {\r\n  return `#${hsv2hex(color.h, MAX_COLOR_SATURATION, MAX_COLOR_VALUE)}`;\r\n}\r\n\r\n/**\r\n * Gets a color with the same hue as `color` and other components updated to match the given\r\n * saturation and value.\r\n *\r\n * Does not modify the original `color` and does not supply a default alpha value.\r\n */\r\nexport function updateSV(color: IColor, s: number, v: number): IColor {\r\n  const { r, g, b } = hsv2rgb(color.h, s, v);\r\n  const hex = rgb2hex(r, g, b);\r\n\r\n  return {\r\n    a: color.a,\r\n    b: b,\r\n    g: g,\r\n    h: color.h,\r\n    hex: hex,\r\n    r: r,\r\n    s: s,\r\n    str: _rgbaOrHexString(r, g, b, color.a, hex),\r\n    v: v\r\n  };\r\n}\r\n\r\n/**\r\n * Gets a color with the same saturation and value as `color` and the other components updated\r\n * to match the given hue.\r\n *\r\n * Does not modify the original `color` and does not supply a default alpha value.\r\n */\r\nexport function updateH(color: IColor, h: number): IColor {\r\n  const { r, g, b } = hsv2rgb(h, color.s, color.v);\r\n  const hex = rgb2hex(r, g, b);\r\n\r\n  return {\r\n    a: color.a,\r\n    b: b,\r\n    g: g,\r\n    h: h,\r\n    hex: hex,\r\n    r: r,\r\n    s: color.s,\r\n    str: _rgbaOrHexString(r, g, b, color.a, hex),\r\n    v: color.v\r\n  };\r\n}\r\n\r\n/**\r\n * Gets a color with a single RGBA component updated to a new value.\r\n * Does not modify the original `color`. Alpha defaults to 100 if not set.\r\n */\r\nexport function updateRGB(color: IColor, component: keyof IRGB, value: number): IColor {\r\n  return getColorFromRGBA({\r\n    r: color.r,\r\n    g: color.g,\r\n    b: color.b,\r\n    a: color.a,\r\n    [component]: value\r\n  });\r\n}\r\n\r\n/**\r\n * Gets a color with the given alpha value and the same other components as `color`.\r\n * Does not modify the original color.\r\n */\r\nexport function updateA(color: IColor, a: number): IColor {\r\n  return {\r\n    ...color,\r\n    a: a,\r\n    str: _rgbaOrHexString(color.r, color.g, color.b, a, color.hex)\r\n  };\r\n}\r\n\r\n/** Corrects an RGB color to fall within the valid range.  */\r\nexport function correctRGB(color: IRGB): IRGB {\r\n  return {\r\n    r: clamp(color.r, MAX_COLOR_RGB),\r\n    g: clamp(color.g, MAX_COLOR_RGB),\r\n    b: clamp(color.b, MAX_COLOR_RGB),\r\n    a: typeof color.a === 'number' ? clamp(color.a, MAX_COLOR_ALPHA) : color.a\r\n  };\r\n}\r\n\r\n/** Corrects an HSV color to fall within the valid range. */\r\nexport function correctHSV(color: IHSV): IHSV {\r\n  return {\r\n    h: clamp(color.h, MAX_COLOR_HUE),\r\n    s: clamp(color.s, MAX_COLOR_SATURATION),\r\n    v: clamp(color.v, MAX_COLOR_VALUE)\r\n  };\r\n}\r\n\r\n/** Clamp a value to ensure it falls within a given range. */\r\nexport function clamp(value: number, max: number, min = 0): number {\r\n  return value < min ? min : value > max ? max : value;\r\n}\r\n\r\n/** Converts an RGB component to a 0-padded hex component of length 2. */\r\nfunction _rgbToPaddedHex(num: number): string {\r\n  num = clamp(num, MAX_COLOR_RGB);\r\n  const hex = num.toString(16);\r\n\r\n  return hex.length === 1 ? '0' + hex : hex;\r\n}\r\n\r\n/**\r\n * If `str` is a valid HTML color name, returns an RGB color (with alpha 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _named(str: string): IRGB | undefined {\r\n  const c = (COLOR_VALUES as any)[str.toLowerCase()];\r\n\r\n  if (c) {\r\n    return {\r\n      r: c[0],\r\n      g: c[1],\r\n      b: c[2],\r\n      a: MAX_COLOR_ALPHA\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * If `str` is in valid `rgb()` or `rgba()` format, returns an RGB color (alpha defaults to 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _rgba(str: string): IRGB | undefined {\r\n  const match = str.match(/^rgb(a?)\\(([\\d., ]+)\\)$/);\r\n  if (match) {\r\n    const hasAlpha = !!match[1];\r\n    const expectedPartCount = hasAlpha ? 4 : 3;\r\n    const parts = match[2].split(/ *, */).map(Number);\r\n\r\n    if (parts.length === expectedPartCount) {\r\n      return {\r\n        r: parts[0],\r\n        g: parts[1],\r\n        b: parts[2],\r\n        a: hasAlpha ? parts[3] * 100 : MAX_COLOR_ALPHA\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * If `str` is in valid 6-digit hex format *with* # prefix, returns an RGB color (with alpha 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _hex6(str: string): IRGB | undefined {\r\n  if ('#' === str[0] && 7 === str.length && /^#[\\da-fA-F]{6}$/.test(str)) {\r\n    return {\r\n      r: parseInt(str.slice(1, 3), 16),\r\n      g: parseInt(str.slice(3, 5), 16),\r\n      b: parseInt(str.slice(5, 7), 16),\r\n      a: MAX_COLOR_ALPHA\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * If `str` is in valid 3-digit hex format *with* # prefix, returns an RGB color (with alpha 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _hex3(str: string): IRGB | undefined {\r\n  if ('#' === str[0] && 4 === str.length && /^#[\\da-fA-F]{3}$/.test(str)) {\r\n    return {\r\n      r: parseInt(str[1] + str[1], 16),\r\n      g: parseInt(str[2] + str[2], 16),\r\n      b: parseInt(str[3] + str[3], 16),\r\n      a: MAX_COLOR_ALPHA\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * If `str` is in `hsl()` or `hsla()` format, returns an RGB color (alpha defaults to 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _hsla(str: string): IRGB | undefined {\r\n  const match = str.match(/^hsl(a?)\\(([\\d., ]+)\\)$/);\r\n  if (match) {\r\n    const hasAlpha = !!match[1];\r\n    const expectedPartCount = hasAlpha ? 4 : 3;\r\n    const parts = match[2].split(/ *, */).map(Number);\r\n\r\n    if (parts.length === expectedPartCount) {\r\n      const rgba = hsl2rgb(parts[0], parts[1], parts[2]);\r\n      rgba.a = hasAlpha ? parts[3] * 100 : MAX_COLOR_ALPHA;\r\n      return rgba;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get a CSS color string from some color components.\r\n * If `a` is specified and not 100, returns an `rgba()` string.\r\n * Otherwise returns `hex` prefixed with #.\r\n */\r\nfunction _rgbaOrHexString(r: number, g: number, b: number, a: number | undefined, hex: string): string {\r\n  return a === MAX_COLOR_ALPHA || typeof a !== 'number' ? `#${hex}` : `rgba(${r}, ${g}, ${b}, ${a / MAX_COLOR_ALPHA})`;\r\n}\r\n"]}