{"version":3,"file":"shades.js","sourceRoot":"../src/","sources":["utilities/color/shades.ts"],"names":[],"mappings":"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","sourcesContent":["// Technically this should be shades and tints, but for simplicity we'll call everything a shade.\r\n/* This utility module is used with theming. Given a color to shade, whether the theme is inverted (i.e. is a dark color),\r\n * and the desired shade enum, this will return an appropriate shade of that color.\r\n */\r\nimport { IHSV, IColor, MAX_COLOR_RGBA } from './colors';\r\nimport * as Colors from './colors';\r\nimport { assign } from '../../Utilities';\r\n\r\n// Soften: to get closer to the background color's luminance\r\n// (softening with a white background would be lightening, with black it'd be darkening)\r\n// Strongen: opposite of soften\r\n\r\n// Luminance multiplier constants for generating shades of a given color\r\nconst WhiteShadeTableBG = [0.027, 0.043, 0.082, 0.145, 0.184, 0.216, 0.349, 0.537]; // white bg\r\nconst BlackTintTableBG = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black bg\r\nconst WhiteShadeTable = [0.537, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043, 0.027]; // white fg\r\nconst BlackTintTable = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black fg\r\nconst LumTintTable = [0.88, 0.77, 0.66, 0.55, 0.44, 0.33, 0.22, 0.11]; // light (strongen all)\r\nconst LumShadeTable = [0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88]; // dark (soften all)\r\nconst ColorTintTable = [0.96, 0.84, 0.7, 0.4, 0.12]; // default soften\r\nconst ColorShadeTable = [0.1, 0.24, 0.44]; // default strongen\r\n\r\n// If the given shade's luminance is below/above these values, we'll swap to using the White/Black tables above\r\nconst LowLuminanceThreshold = 0.2;\r\nconst HighLuminanceThreshold = 0.8;\r\n\r\n/** Shades of a given color, from softest to strongest. */\r\nexport enum Shade {\r\n  Unshaded = 0,\r\n  Shade1 = 1,\r\n  Shade2 = 2,\r\n  Shade3 = 3,\r\n  Shade4 = 4,\r\n  Shade5 = 5,\r\n  Shade6 = 6,\r\n  Shade7 = 7,\r\n  Shade8 = 8\r\n  // remember to update isValidShade()!\r\n}\r\n\r\n/**\r\n * Returns true if the argument is a valid Shade value\r\n * @param shade - The Shade value to validate.\r\n */\r\nexport function isValidShade(shade?: Shade): boolean {\r\n  'use strict';\r\n  return typeof shade === 'number' && shade >= Shade.Unshaded && shade <= Shade.Shade8;\r\n}\r\n\r\nfunction _isBlack(color: IColor): boolean {\r\n  return color.r === 0 && color.g === 0 && color.b === 0;\r\n}\r\n\r\nfunction _isWhite(color: IColor): boolean {\r\n  return color.r === MAX_COLOR_RGBA && color.g === MAX_COLOR_RGBA && color.b === MAX_COLOR_RGBA;\r\n}\r\n\r\nfunction _darken(hsv: IHSV, factor: number): IHSV {\r\n  return {\r\n    h: hsv.h,\r\n    s: hsv.s,\r\n    v: _clamp(hsv.v - hsv.v * factor, 0, 100)\r\n  };\r\n}\r\n\r\nfunction _lighten(hsv: IHSV, factor: number): IHSV {\r\n  return {\r\n    h: hsv.h,\r\n    s: _clamp(hsv.s - hsv.s * factor, 0, 100),\r\n    v: _clamp(hsv.v + (100 - hsv.v) * factor, 0, 100)\r\n  };\r\n}\r\n\r\nfunction _clamp(n: number, min: number, max: number) {\r\n  return n; // Math.max(min, Math.min(n, max));\r\n}\r\n\r\nexport function isDark(color: IColor): boolean {\r\n  return Colors.hsv2hsl(color.h, color.s, color.v).l < 50;\r\n}\r\n\r\n/**\r\n * Given a color and a shade specification, generates the requested shade of the color.\r\n * Logic:\r\n * if white\r\n *  darken via tables defined above\r\n * if black\r\n *  lighten\r\n * if light\r\n *  strongen\r\n * if dark\r\n *  soften\r\n * else default\r\n *  soften or strongen depending on shade#\r\n * @param color - The base color whose shade is to be computed\r\n * @param shade - The shade of the base color to compute\r\n * @param isInverted - Default false. Whether the given theme is inverted (reverse strongen/soften logic)\r\n */\r\nexport function getShade(color: IColor, shade: Shade, isInverted: boolean = false): IColor | null {\r\n  'use strict';\r\n  if (!color) {\r\n    return null;\r\n  }\r\n\r\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\r\n    return color;\r\n  }\r\n\r\n  const hsl = Colors.hsv2hsl(color.h, color.s, color.v);\r\n  let hsv = { h: color.h, s: color.s, v: color.v };\r\n  const tableIndex = shade - 1;\r\n  let _soften = _lighten;\r\n  let _strongen = _darken;\r\n  if (isInverted) {\r\n    _soften = _darken;\r\n    _strongen = _lighten;\r\n  }\r\n  if (_isWhite(color)) {\r\n    // white\r\n    hsv = _darken(hsv, WhiteShadeTable[tableIndex]);\r\n  } else if (_isBlack(color)) {\r\n    // black\r\n    hsv = _lighten(hsv, BlackTintTable[tableIndex]);\r\n  } else if (hsl.l / 100 > HighLuminanceThreshold) {\r\n    // light\r\n    hsv = _strongen(hsv, LumShadeTable[tableIndex]);\r\n  } else if (hsl.l / 100 < LowLuminanceThreshold) {\r\n    // dark\r\n    hsv = _soften(hsv, LumTintTable[tableIndex]);\r\n  } else {\r\n    // default\r\n    if (tableIndex < ColorTintTable.length) {\r\n      hsv = _soften(hsv, ColorTintTable[tableIndex]);\r\n    } else {\r\n      hsv = _strongen(hsv, ColorShadeTable[tableIndex - ColorTintTable.length]);\r\n    }\r\n  }\r\n\r\n  return Colors.getColorFromRGBA(assign(Colors.hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\r\n}\r\n\r\n// Background shades/tints are generated differently. The provided color will be guaranteed\r\n//   to be the darkest or lightest one. If it is <50% luminance, it will always be the darkest,\r\n//   otherwise it will always be the lightest.\r\nexport function getBackgroundShade(color: IColor, shade: Shade, isInverted: boolean = false): IColor | null {\r\n  'use strict';\r\n  if (!color) {\r\n    return null;\r\n  }\r\n\r\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\r\n    return color;\r\n  }\r\n\r\n  let hsv = { h: color.h, s: color.s, v: color.v };\r\n  const tableIndex = shade - 1;\r\n  if (!isInverted) {\r\n    // lightish\r\n    hsv = _darken(hsv, WhiteShadeTableBG[tableIndex]);\r\n  } else {\r\n    // default: if (hsl.l / 100 < .5) { // darkish\r\n    hsv = _lighten(hsv, BlackTintTableBG[BlackTintTable.length - 1 - tableIndex]);\r\n  }\r\n\r\n  return Colors.getColorFromRGBA(assign(Colors.hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\r\n}\r\n\r\n/* Calculates the contrast ratio between two colors. Used for verifying\r\n * color pairs meet minimum accessibility requirements.\r\n * See: https://www.w3.org/TR/WCAG20/ section 1.4.3\r\n */\r\nexport function getContrastRatio(color1: IColor, color2: IColor): number {\r\n  // Formula defined by: http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html#contrast-ratiodef\r\n  // relative luminance: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\r\n\r\n  /* calculate the intermediate value needed to calculating relative luminance */\r\n  function _getThing(x: number): number {\r\n    if (x <= 0.03928) {\r\n      return x / 12.92;\r\n    } else {\r\n      return Math.pow((x + 0.055) / 1.055, 2.4);\r\n    }\r\n  }\r\n\r\n  const r1 = _getThing(color1.r / MAX_COLOR_RGBA);\r\n  const g1 = _getThing(color1.g / MAX_COLOR_RGBA);\r\n  const b1 = _getThing(color1.b / MAX_COLOR_RGBA);\r\n  let L1 = 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1; // relative luminance of first color\r\n  L1 += 0.05;\r\n\r\n  const r2 = _getThing(color2.r / MAX_COLOR_RGBA);\r\n  const g2 = _getThing(color2.g / MAX_COLOR_RGBA);\r\n  const b2 = _getThing(color2.b / MAX_COLOR_RGBA);\r\n  let L2 = 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2; // relative luminance of second color\r\n  L2 += 0.05;\r\n\r\n  // return the lighter color divided by darker\r\n  return L1 / L2 > 1 ? L1 / L2 : L2 / L1;\r\n}\r\n"]}