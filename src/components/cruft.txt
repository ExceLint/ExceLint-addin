	    // Create light color versions (not currently used) and
	    // populate an array of colors, used for assigning colors
	    // to cells based on their hash.
	    this.make_light_color_versions();
	    for (let i of Object.keys(this.light_color_dict)) {
		this.color_list.push(i);
		this.light_color_list.push(this.light_color_dict[i]);
	    }

// No longer in use. This was used to programmatically remove
    // colors from a generated palette when they strayed too far into
    // certain "semantically meaningful" color spaces (e.g., red,
    // green, yellow).
    private static is_banned_color(h: number, s: number, v: number): boolean {
	let ban_it = false;
	const [r, g, b] = ColorUtils.HSVtoRGB(h, s, v);
	if ((r > 128) && (g < 128) && (b < 128)) {
	    // Too red.
	    ban_it = true;
	}
	if ((r < 192) && (g > 128) && (b < 192)) {
	    // Too green.
	    ban_it = true;
	}
	// Also avoid colors near '#eed202', safety yellow.
	const safety_r = 238;
	const safety_g = 210;
	const safety_b = 2;
	const threshold = 128;
	if ((Math.abs(r - safety_r) < threshold) && (Math.abs(g - safety_g) < threshold) && (Math.abs(b - safety_b) < threshold)) {
	    ban_it = true;
	}
	return ban_it;
    }
    

    // No longer in use. Generated light color variants.
    private static make_light_color_versions() {
	let arr = Colorize.palette; // ["#ecaaae", "#74aff3", "#d8e9b2", "#deb1e0", "#9ec991", "#adbce9", "#e9c59a", "#71cdeb", "#bfbb8a", "#94d9df", "#91c7a8", "#b4efd3", "#80b6aa", "#9bd1c6"]; // removed "#73dad1", 
	for (let i = 0; i < arr.length; i++) {
	    this.light_color_dict[arr[i]] = '';
	}
	return;
	
	// Dead code.
	for (let i = 0; i < 255; i += 9) {
	    let h = i / 255.0;
	    let s = 0.5;
	    let v = 0.85;
	    if (this.is_banned_color(h, s, v)) {
		continue;
	    }
	    let rgb = ColorUtils.HSVtoRGB(h, s, v);
	    let [rs, gs, bs] = rgb.map((x) => { return Math.round(x).toString(16).padStart(2, '0'); });
	    let str = '#' + rs + gs + bs;
	    str = str.toUpperCase();
	    this.light_color_dict[str] = '';
	}
	for (let color in this.light_color_dict) {
	    let lightstr = ColorUtils.adjust_brightness(color, 4.0);
	    let darkstr = color;
	    delete this.light_color_dict[color];
	    this.light_color_dict[darkstr] = lightstr;
	}
    }
